{"version":3,"sources":["webpack:///webpack/bootstrap 20aad9b8035a1a6fd969","webpack:///./~/buffer/index.js","webpack:///./~/inherits/inherits_browser.js","webpack:///./~/elliptic/lib/elliptic.js","webpack:///./~/process/browser.js","webpack:///./~/bn.js/lib/bn.js","webpack:///./~/stream-browserify/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./~/hash.js/lib/hash.js","webpack:///./~/pull-stream/index.js","webpack:///./~/readable-stream/lib/_stream_duplex.js","webpack:///./~/bignumber.js/bignumber.js","webpack:///./~/cbor/lib/constants.js","webpack:///./~/ipld-dag-pb/src/dag-link/index.js","webpack:///./~/sha.js/hash.js","webpack:///./~/util/util.js","webpack:///./~/varint/index.js","webpack:///./~/assert/assert.js","webpack:///./~/bs58/index.js","webpack:///./~/cbor/lib/simple.js","webpack:///./~/cbor/lib/utils.js","webpack:///./~/core-util-is/lib/util.js","webpack:///./~/lodash/noop.js","webpack:///./~/multihashes/src/index.js","webpack:///./~/nofilter/lib/index.js","webpack:///./~/pull-stream/sinks/drain.js","webpack:///./~/pull-stream/util/prop.js","webpack:///./~/timers-browserify/main.js","webpack:///./~/async/internal/onlyOnce.js","webpack:///./~/async/internal/rest.js","webpack:///./~/elliptic/lib/elliptic/curve/index.js","webpack:///./~/events/events.js","webpack:///./~/ipld-dag-pb/src/dag-node/create.js","webpack:///./~/ipld-dag-pb/src/dag-node/util.js","webpack:///./~/lodash/isArrayLike.js","webpack:///(webpack)/buildin/module.js","webpack:///./~/async/internal/once.js","webpack:///./~/async/internal/parallel.js","webpack:///./~/async/series.js","webpack:///./~/buffer-shims/index.js","webpack:///./~/cbor/lib/decoder.js","webpack:///./~/cbor/lib/tagged.js","webpack:///./~/ipld-dag-pb/src/dag-node/index.js","webpack:///./~/ipld-dag-pb/src/util.js","webpack:///./~/lodash/_baseGetTag.js","webpack:///./~/lodash/isObjectLike.js","webpack:///./~/multibase/lib/index.js","webpack:///./~/multicodec/src/base-table.js","webpack:///./~/multihashing-async/src/index.js","webpack:///./~/process-nextick-args/index.js","webpack:///./~/pull-stream/sinks/reduce.js","webpack:///./~/pull-stream/sources/values.js","webpack:///./~/pull-stream/throughs/filter.js","webpack:///./~/readable-stream/lib/_stream_transform.js","webpack:///./~/readable-stream/lib/_stream_writable.js","webpack:///./~/string_decoder/index.js","webpack:///./~/async/eachOfLimit.js","webpack:///./~/async/internal/doLimit.js","webpack:///./~/async/internal/eachOfLimit.js","webpack:///./~/async/setImmediate.js","webpack:///./~/cids/src/index.js","webpack:///./~/create-hash/browser.js","webpack:///./~/ipfs-block/src/index.js","webpack:///./~/ipld-dag-cbor/src/resolver.js","webpack:///./~/ipld-dag-cbor/src/util.js","webpack:///./~/ipld-eth-block/src/common.js","webpack:///./~/ipld-eth-block/src/util.js","webpack:///./~/is-promise/index.js","webpack:///./~/isarray/index.js","webpack:///./~/secp256k1/lib/messages.json","webpack:///./~/lodash/_Symbol.js","webpack:///./~/lodash/_freeGlobal.js","webpack:///./~/lodash/_root.js","webpack:///./~/lodash/isArray.js","webpack:///./~/lodash/isLength.js","webpack:///./~/multicodec/src/util.js","webpack:///./~/multicodec/src/varint-table.js","webpack:///./~/protocol-buffers/~/varint/index.js","webpack:///./~/pull-stream/sources/once.js","webpack:///./~/pull-stream/throughs/unique.js","webpack:///./~/pull-stream/util/abort-cb.js","webpack:///./~/pull-stream/util/tester.js","webpack:///./~/pull-write/index.js","webpack:///./~/readable-stream/lib/_stream_passthrough.js","webpack:///./~/readable-stream/lib/_stream_readable.js","webpack:///./~/sha.js/sha256.js","webpack:///./~/sha.js/sha512.js","webpack:///./~/url/url.js","webpack:///./src/index.js","webpack:///./~/async/eachOf.js","webpack:///./~/async/eachOfSeries.js","webpack:///./~/async/internal/breakLoop.js","webpack:///./~/async/internal/getIterator.js","webpack:///./~/async/internal/iterator.js","webpack:///./~/async/internal/setImmediate.js","webpack:///./~/async/parallel.js","webpack:///./~/async/parallelLimit.js","webpack:///./~/async/until.js","webpack:///./~/async/waterfall.js","webpack:///./~/async/whilst.js","webpack:///./~/base-x/index.js","webpack:///./~/base32.js/base32.js","webpack:///./~/base64-js/index.js","webpack:///./~/bip66/index.js","webpack:///./~/brorand/index.js","webpack:///./~/browserify-sha3/index.js","webpack:///./~/browserify-sha3/~/js-sha3/src/sha3.js","webpack:///./~/cbor/lib/cbor.js","webpack:///./~/cbor/lib/commented.js","webpack:///./~/cbor/lib/diagnose.js","webpack:///./~/cbor/lib/encoder.js","webpack:///./~/cbor/vendor/binary-parse-stream/index.js","webpack:///./~/cipher-base/index.js","webpack:///./~/create-hash/helpers.js","webpack:///./~/create-hash/md5.js","webpack:///./~/elliptic/lib/elliptic/curve/base.js","webpack:///./~/elliptic/lib/elliptic/curve/edwards.js","webpack:///./~/elliptic/lib/elliptic/curve/mont.js","webpack:///./~/elliptic/lib/elliptic/curve/short.js","webpack:///./~/elliptic/lib/elliptic/curves.js","webpack:///./~/elliptic/lib/elliptic/ec/index.js","webpack:///./~/elliptic/lib/elliptic/ec/key.js","webpack:///./~/elliptic/lib/elliptic/ec/signature.js","webpack:///./~/elliptic/lib/elliptic/eddsa/index.js","webpack:///./~/elliptic/lib/elliptic/eddsa/key.js","webpack:///./~/elliptic/lib/elliptic/eddsa/signature.js","webpack:///./~/elliptic/lib/elliptic/hmac-drbg.js","webpack:///./~/elliptic/lib/elliptic/precomputed/secp256k1.js","webpack:///./~/elliptic/lib/elliptic/utils.js","webpack:///./~/ethereum-common/index.js","webpack:///./~/ethereumjs-block/header.js","webpack:///./~/ethereumjs-util/index.js","webpack:///./~/generate-function/index.js","webpack:///./~/generate-object-property/index.js","webpack:///./~/hash.js/lib/hash/common.js","webpack:///./~/hash.js/lib/hash/hmac.js","webpack:///./~/hash.js/lib/hash/ripemd.js","webpack:///./~/hash.js/lib/hash/sha.js","webpack:///./~/hash.js/lib/hash/utils.js","webpack:///./~/ieee754/index.js","webpack:///./~/interface-pull-blob-store/lib/index.js","webpack:///./~/ipfs-block-service/src/index.js","webpack:///./~/ipfs-repo/src/index.js","webpack:///./~/ipfs-repo/src/stores/blockstore.js","webpack:///./~/ipfs-repo/src/stores/config.js","webpack:///./~/ipfs-repo/src/stores/index.js","webpack:///./~/ipfs-repo/src/stores/keys.js","webpack:///./~/ipfs-repo/src/stores/locks.js","webpack:///./~/ipfs-repo/src/stores/version.js","webpack:///./~/ipld-dag-cbor/~/cids/lib/codecs.js","webpack:///./~/ipld-dag-cbor/~/cids/lib/index.js","webpack:///./~/ipld-dag-cbor/~/cids/~/multihashes/lib/constants.js","webpack:///./~/ipld-dag-cbor/~/cids/~/multihashes/lib/index.js","webpack:///./~/ipld-dag-cbor/~/multicodec/lib/base-table.js","webpack:///./~/ipld-dag-cbor/~/multicodec/lib/index.js","webpack:///./~/ipld-dag-cbor/src/index.js","webpack:///./~/ipld-dag-pb/~/cids/lib/codecs.js","webpack:///./~/ipld-dag-pb/~/cids/lib/index.js","webpack:///./~/ipld-dag-pb/~/cids/~/multihashes/lib/constants.js","webpack:///./~/ipld-dag-pb/~/cids/~/multihashes/lib/index.js","webpack:///./~/ipld-dag-pb/~/multicodec/lib/base-table.js","webpack:///./~/ipld-dag-pb/~/multicodec/lib/index.js","webpack:///./~/ipld-dag-pb/src/dag-link/create.js","webpack:///./~/ipld-dag-pb/src/dag-node/addLink.js","webpack:///./~/ipld-dag-pb/src/dag-node/clone.js","webpack:///./~/ipld-dag-pb/src/dag-node/rmLink.js","webpack:///./~/ipld-dag-pb/src/dag.proto.js","webpack:///./~/ipld-dag-pb/src/index.js","webpack:///./~/ipld-dag-pb/src/resolver.js","webpack:///./~/ipld-eth-block/src/index.js","webpack:///./~/ipld-eth-block/src/resolver.js","webpack:///./~/is-property/is-property.js","webpack:///./~/js-sha3/src/sha3.js","webpack:///./~/elliptic/package.json","webpack:///./~/ethereum-common/bootstrapNodes.json","webpack:///./~/ethereum-common/genesisState.json","webpack:///./~/ethereum-common/params.json","webpack:///./~/keccakjs/browser.js","webpack:///./~/lock/index.js","webpack:///./~/lodash/_apply.js","webpack:///./~/lodash/_arrayLikeKeys.js","webpack:///./~/lodash/_baseIsArguments.js","webpack:///./~/lodash/_baseIsTypedArray.js","webpack:///./~/lodash/_baseKeys.js","webpack:///./~/lodash/_baseTimes.js","webpack:///./~/lodash/_baseUnary.js","webpack:///./~/lodash/_getRawTag.js","webpack:///./~/lodash/_isIndex.js","webpack:///./~/lodash/_isPrototype.js","webpack:///./~/lodash/_nativeKeys.js","webpack:///./~/lodash/_nodeUtil.js","webpack:///./~/lodash/_objectToString.js","webpack:///./~/lodash/_overArg.js","webpack:///./~/lodash/_overRest.js","webpack:///./~/lodash/identity.js","webpack:///./~/lodash/isArguments.js","webpack:///./~/lodash/isBuffer.js","webpack:///./~/lodash/isFunction.js","webpack:///./~/lodash/isObject.js","webpack:///./~/lodash/isTypedArray.js","webpack:///./~/lodash/keys.js","webpack:///./~/lodash/stubFalse.js","webpack:///./~/multibase/lib/constants.js","webpack:///./~/multibase/lib/multibase.js","webpack:///./~/multicodec/src/index.js","webpack:///./~/multicodec/src/name-table.js","webpack:///./~/multihashes/src/constants.js","webpack:///./~/multihashing-async/src/crypto-sha1-2-browser.js","webpack:///./~/multihashing-async/src/crypto.js","webpack:///./~/multihashing-async/src/to-callback.js","webpack:///./~/nodeify/index.js","webpack:///./~/path-browserify/index.js","webpack:///./~/promise/index.js","webpack:///./~/protocol-buffers-schema/index.js","webpack:///./~/protocol-buffers-schema/parse.js","webpack:///./~/protocol-buffers-schema/stringify.js","webpack:///./~/protocol-buffers-schema/tokenize.js","webpack:///./~/protocol-buffers/compile.js","webpack:///./~/protocol-buffers/encodings.js","webpack:///./~/protocol-buffers/index.js","webpack:///./~/protocol-buffers/~/varint/decode.js","webpack:///./~/protocol-buffers/~/varint/encode.js","webpack:///./~/protocol-buffers/~/varint/length.js","webpack:///./~/pull-defer/source.js","webpack:///./~/pull-stream/pull.js","webpack:///./~/pull-stream/sinks/collect.js","webpack:///./~/pull-stream/sinks/concat.js","webpack:///./~/pull-stream/sinks/find.js","webpack:///./~/pull-stream/sinks/index.js","webpack:///./~/pull-stream/sinks/log.js","webpack:///./~/pull-stream/sinks/on-end.js","webpack:///./~/pull-stream/sources/count.js","webpack:///./~/pull-stream/sources/empty.js","webpack:///./~/pull-stream/sources/error.js","webpack:///./~/pull-stream/sources/index.js","webpack:///./~/pull-stream/sources/infinite.js","webpack:///./~/pull-stream/sources/keys.js","webpack:///./~/pull-stream/throughs/async-map.js","webpack:///./~/pull-stream/throughs/filter-not.js","webpack:///./~/pull-stream/throughs/flatten.js","webpack:///./~/pull-stream/throughs/index.js","webpack:///./~/pull-stream/throughs/map.js","webpack:///./~/pull-stream/throughs/non-unique.js","webpack:///./~/pull-stream/throughs/take.js","webpack:///./~/pull-stream/throughs/through.js","webpack:///./~/punycode/punycode.js","webpack:///./~/querystring-es3/decode.js","webpack:///./~/querystring-es3/encode.js","webpack:///./~/querystring-es3/index.js","webpack:///./~/readable-stream/duplex.js","webpack:///./~/readable-stream/lib/internal/streams/BufferList.js","webpack:///./~/readable-stream/passthrough.js","webpack:///./~/readable-stream/readable.js","webpack:///./~/readable-stream/transform.js","webpack:///./~/readable-stream/writable.js","webpack:///./~/ripemd160/lib/ripemd160.js","webpack:///./~/rlp/index.js","webpack:///./~/safe-buffer/browser.js","webpack:///./~/secp256k1/elliptic.js","webpack:///./~/secp256k1/lib/assert.js","webpack:///./~/secp256k1/lib/der.js","webpack:///./~/secp256k1/lib/elliptic/index.js","webpack:///./~/secp256k1/lib/index.js","webpack:///./~/sha.js/index.js","webpack:///./~/sha.js/sha.js","webpack:///./~/sha.js/sha1.js","webpack:///./~/sha.js/sha224.js","webpack:///./~/sha.js/sha384.js","webpack:///./~/signed-varint/index.js","webpack:///./~/signed-varint/~/varint/decode.js","webpack:///./~/signed-varint/~/varint/encode.js","webpack:///./~/signed-varint/~/varint/index.js","webpack:///./~/signed-varint/~/varint/length.js","webpack:///./~/stable/stable.js","webpack:///./~/traverse/index.js","webpack:///./~/url/util.js","webpack:///./~/util-deprecate/browser.js","webpack:///./~/util/~/inherits/inherits_browser.js","webpack:///./~/util/support/isBufferBrowser.js","webpack:///./~/varint/decode.js","webpack:///./~/varint/encode.js","webpack:///./~/varint/length.js","webpack:///crypto (ignored)","webpack:///fs (ignored)","webpack:///util (ignored)"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA,YAAI;AACJ;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,wBAAwB,QAAQ;AAChC;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,cAAc;AACjuDAAuD,OAAO;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,GAAG;AACH;AACA,eAAe,SAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC5vDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACbA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;ACnLtC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;;AAEA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;;AAEA;AACA;AACA;AACA,sCAAsC,YAAY;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,sBAAsB;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,SAAS;AAChC;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpqBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C;AACA;;AAEA,iBAAiB,aAAa;AAC9B;AACA;;AAEA;AACA;AACA,KAAK;AACL,iBAAiB,aAAa;AAC9B;AACA;;AAEA;AACA;;AAEA,YAAY,eAAe;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB,gBAAgB;AACrC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,gBAAgB;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,mBAAmB,cAAc;AACjC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,mBAAmB,cAAc;AACjC;AACA;;AAEA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA,UAAU,6BAA6B;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,cAAc;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA,UAAU,6BAA6B;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;;AAEA;AACA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;;AAEA,uBAAuB,OAAO;AAC9B;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,GAAG;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,WAAW;AAC9B;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;;AAEA,kCAAkC;AAClC,sCAAsC;AACtC;;AAEA;AACA,qBAAqB,OAAO;AAC5B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;;AAEA;AACA,6BAA6B,cAAc;AAC3C;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,QAAQ;AACvC;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,6BAA6B,mCAAmC;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,+CAA+C;AAClE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,qBAAqB,sCAAsC;AAC3D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,yBAAyB;AACnC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,QAAQ;AAC/B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC,QAAQ;AACzC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC,QAAQ;AACzC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,6BAA6B,mCAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,6BAA6B,mCAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,6BAA6B,mCAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6BAA6B,mCAAmC;AAChE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,gCAAgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,QAAQ;AACzC;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,QAAQ;AACpC;AACA,6BAA6B,QAAQ;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACl2GD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;;;;;;AC9HA;;AAEA;AACA,iBAAiB,aAAa,EAAE;;AAEhC;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;AClBA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACdA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;ACfA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA,C;;;;;;AC1EA;;AAEA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;AAGlB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA,cAAc,wBAAwB;AACtC,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+DAA+D,EAAE;AACjE;AACA;AACA;;AAEA,sDAAsD,EAAE;AACxD,oDAAoD,EAAE;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,8FAA8F,EAAE;AAChG;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA,wBAAwB,0BAA0B;;AAElD;AACA,mCAAmC,8BAA8B;AACjE;;AAEA;AACA;;AAEA;AACA,sFAAsF,EAAE;AACxF;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8CAA8C,SAAS;AACvD;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA,2BAA2B,KAAK;AAChC;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;;;AAGA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO;AACrC,8BAA8B,OAAO;AACrC,8BAA8B,gBAAgB;AAC9C;AACA,8BAA8B,gBAAgB;AAC9C;AACA,8BAA8B,eAAe;AAC7C,8BAA8B,eAAe;AAC7C,8BAA8B,OAAO;AACrC,8BAA8B,OAAO;AACrC,8BAA8B,OAAO;AACrC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,iCAAiC,wDAAwD;AACzF,iCAAiC,mDAAmD;;AAEpF,+BAA+B,OAAO;AACtC,yDAAyD,EAAE;AAC3D,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;;AAEA,8BAA8B,OAAO;AACrC,wDAAwD,EAAE;AAC1D,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;;AAEA,+BAA+B;AAC/B;AACA,yDAAyD,EAAE;AAC3D,uDAAuD,EAAE;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,sBAAsB,gBAAgB;AACtC;AACA,gDAAgD,EAAE;AAClD,gDAAgD,EAAE;AAClD,8CAA8C,EAAE;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,eAAe;AACtC,gEAAgE,EAAE;AAClE;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,uBAAuB,eAAe;AACtC,gEAAgE,EAAE;AAClE,8CAA8C,OAAO;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,4BAA4B,OAAO;AACnC,sDAAsD,EAAE;AACxD,oDAAoD,EAAE;AACtD;AACA;AACA;AACA;;AAEA,8BAA8B,OAAO;AACrC,wDAAwD,EAAE;AAC1D,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB,gDAAgD,EAAE;AAClD;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,qCAAqC,oCAAoC;;;AAGzE;AACA;AACA;AACA,sBAAsB;AACtB;AACA,qCAAqC,oCAAoC;;;AAGzE;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA,qDAAqD,GAAG;AACxD,mDAAmD,GAAG;AACtD,0CAA0C,OAAO;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAA6C;AAC1E,6BAA6B;AAC7B,iDAAiD;;AAEjD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,+BAA+B,OAAO;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;;AAErB;AACA;;AAEA,+BAA+B,OAAO;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,YAAY;;AAEnC;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA,kCAAkC,YAAY;;AAE9C;AACA,0CAA0C,SAAS;;AAEnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;;AAGT;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,cAAc;AACjC;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA,oCAAoC,qBAAqB;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,UAAU;;AAE9C;AACA,sCAAsC,QAAQ;AAC9C;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;;AAEjB,sCAAsC,QAAQ;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,uBAAuB;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,yBAAyB;AACrD;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;;AAErB;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,2CAA2C,SAAS;AACpD;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,SAAS;AACpC;;AAEA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,wDAAwD,KAAK;AAC7D,qBAAqB;AACrB;AACA;AACA;AACA,mCAAmC,KAAK;AACxC;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,SAAS;;AAE5B;AACA,2BAA2B,SAAS;;AAEpC;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,uDAAuD,EAAE;AACzD,oDAAoD,EAAE,UAAU,EAAE;AAClE;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,SAAS;AACpD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;;AAEA;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA,wCAAwC,SAAS;;AAEjD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+BAA+B,EAAE;;AAEjC;AACA;;AAEA;AACA,uDAAuD,SAAS;AAChE;AACA,4CAA4C,SAAS;;AAErD;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,eAAe;AACvD;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC,aAAa;AAChD;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA,4BAA4B,KAAK;AACjC;AACA,aAAa;;AAEb;AACA;;AAEA,gCAAgC,OAAO;;AAEvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,gCAAgC,KAAK;AACrC;;AAEA;AACA,mBAAmB,OAAO;;AAE1B;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,YAAY;;AAE/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,uBAAuB,KAAK;AAC5B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,GAAG;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA;AACA;AACA;AACA;;AAEA,qEAAqE,EAAE;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,uBAAuB,aAAa;;AAEpC;AACA,+BAA+B,SAAS;AACxC;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,kDAAkD,GAAG;AACrD,oDAAoD,GAAG;AACvD,mDAAmD,GAAG;AACtD,iDAAiD,GAAG;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,8CAA8C,EAAE;AAChD,4CAA4C,EAAE;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,EAAE;AACzB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;;AAEzB,8DAA8D,IAAI,OAAO,IAAI;AAC7E;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC,KAAK;;AAE9C;AACA;;AAEA,0BAA0B,UAAU;AACpC;AACA;AACA;;AAEA,yCAAyC,OAAO;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,gDAAgD,GAAG;AACnD,kDAAkD,GAAG;AACrD,sDAAsD,GAAG;AACzD,oDAAoD,GAAG;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,4DAA4D,GAAG;AAC/D,0DAA0D,GAAG;AAC7D,2DAA2D,GAAG;AAC9D,yDAAyD,GAAG;AAC5D;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,sDAAsD,GAAG;AACzD,oDAAoD,GAAG;AACvD,qDAAqD,GAAG;AACxD,mDAAmD,GAAG;AACtD;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,uDAAuD,GAAG;AAC1D,qDAAqD,GAAG;AACxD,sDAAsD,GAAG;AACzD,oDAAoD,GAAG;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,2BAA2B,SAAS;AACpC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA,0DAA0D,GAAG;AAC7D,wDAAwD,GAAG;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB,wBAAwB;AACxC;AACA,4CAA4C,EAAE;AAC9C,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA,qDAAqD,GAAG;AACxD,mDAAmD,GAAG;AACtD,yDAAyD,GAAG;AAC5D,uDAAuD,GAAG;AAC1D;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA,6CAA6C,EAAE;AAC/C,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,yBAAyB;AACzB,+BAA+B;AAC/B,+BAA+B;AAC/B;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,OAAO;AACtB;AACA;AACA,mBAAmB,KAAK;AACxB;AACA;;AAEA;AACA,2BAA2B,0BAA0B;AACrD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,oBAAoB,OAAO;;AAE3B;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAAS;AACxB,oCAAoC,QAAQ;AAC5C;;AAEA,mBAAmB,gBAAgB;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,KAAK;AAChC;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA,wCAAwC,KAAK;AAC7C;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;;;AAGA;AACA;AACA,uDAA6B,kBAAkB,EAAE;;AAEjD;AACA,KAAK;AACL;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;;;;;;;;ACtrFD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACvDA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,MAAM,YAAY,UAAU,WAAW,UAAU;AACxE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,uBAAuB,SAAS;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,KAAK;;AAEjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;AAGA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA,WAAW,SAAS;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACzkBA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,8BAA8B;AAC9B;AACA,mDAAmD;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,gDAAgD;;AAEhD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC,oBAAoB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzeA;AACA;;AAEA;;;;;;;;ACHA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,IAAI;AACjB,eAAe,KAAK;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,KAAK;AAClB,eAAe,gCAAgC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACvGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;;AAEA,iCAAiC;;AAEjC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,oCAAoC;AAC5C;;AAEA;;AAEA,QAAQ;AACR,sBAAsB;;AAEtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AChBA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2DAA2D,KAAK;AAChE;AACA;AACA;;AAEA;AACA,mEAAmE,KAAK;AACxE;;AAEA;AACA,mDAAmD,KAAK;AACxD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,0DAA0D,kBAAkB;AAC5E;;AAEA;AACA,wDAAwD,0BAA0B;AAClF;AACA;;;;;;;;AC5IA;AACA;AACA;AACA,sCAAsC,0BAA0B,yDAAyD,EAAE,kBAAkB,0BAA0B,EAAE,mCAAmC,8BAA8B,oCAAoC,cAAc,EAAE;AAC9R,gBAAgB;;AAEhB;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA,GAAG;;AAEH,CAAC;;AAED;;;;;;;;;ACrVA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;;AAEA;AACA;;;;;;;AC/CA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iBAAiB;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,E;;;;;;;;AC3EA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACdA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACtBA;;AAEA;;AAEA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC7SA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;;;;;;;;AC3DA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACxCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC,GAAG;AACH;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC,GAAG;AACH;AACA;AACA;AACA;;;;;;;;ACnBA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACdA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,KAAK;AACL;AACA,oC;;;;;;;ACrCA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,QAAQ;AACR;AACA;AACA;AACA,YAAY;AACZ;AACA,IAAI;AACJ,oCAAoC;AACpC,IAAI;AACJ;AACA;AACA;AACA;AACA,oC;;;;;;;ACpFA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3GA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO,YAAY;AAChC,aAAa,OAAO;AACpB;AACA;AACA,wBAAwB;AACxB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,OAAO,WAAW,gBAAgB;AAC/C,aAAa,OAAO;AACpB;AACA,eAAe,IAAI;AACnB;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,gBAAgB,WAAW,gBAAgB;AACxD,aAAa,OAAO;AACpB;AACA,eAAe,MAAM;AACrB;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,IAAI;AACjB;;AAEA;AACA;AACA;AACA,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,yBAAyB;AACtC,aAAa,OAAO;AACpB;AACA,aAAa,eAAe;AAC5B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,MAAM;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,gBAAgB;AAC7B;AACA,aAAa,kBAAkB;AAC/B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA,eAAe;AACf;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;AC7gBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,IAAI;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,cAAc,SAAS,GAAG,2BAA2B;AACrD;;AAEA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;ACtHA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,MAAM,YAAY,qBAAqB,YAAY,kBAAkB,UAAU,UAAU;AAChH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;ACnFA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;ACrEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC5BA;;AAEA,oD;;;;;;;ACFA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3EA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpGA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;AC1CA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,OAAO;AACP;AACA;AACA;AACA;;;;;;;;ACrBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,YAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK,EAAE;AACP,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,C;;;;;;;ACrLA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,aAAa;AAChB;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kDAAkD;;AAElD;;AAEA,2CAA2C;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;;AAEA;AACA;AACA,oCAAoC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,C;;;;;;;ACziBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,OAAO;AACf;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;AC5NA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA,0BAA0B,gCAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,WAAW,sBAAsB;AACjC,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACtCA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACXA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oC;;;;;;;ACtEA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,oC;;;;;;;AC5CA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,OAAO,OAAO;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,OAAO,OAAO;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACvHA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;ACnDA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;AC9DA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA,mBAAmB,SAAS;AAC5B;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,GAAG;AACH;;;;;;;;;ACpHA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChCA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACVA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;ACjCA;;AAEA;AACA;AACA,C;;;;;;ACJA,iBAAiB;;AAEjB;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;ACnCA;;AAEA;AACA;;AAEA;;;;;;;ACLA;AACA;;AAEA;;;;;;;;ACHA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACzBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AClCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;AC5BA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;ACZA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;ACbA;;AAEA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;AChBA;AACA;AACA;AACA;AACA;;;;;;;;ACJA;;AAEA,iBAAiB;;AAEjB;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;;;;;;;ACVA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACtFA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,E;;;;;;;ACzBA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,aAAa;AAChB;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,2EAA2E,6EAA6E;AACxJ;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sDAAsD;;AAEtD;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+CAA+C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,SAAS;AAC5B;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA,4EAA4E;;AAE5E;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD;AACnD;AACA,mDAAmD,iEAAiE;AACpH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,uCAAuC;AACvC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;;AAEA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA,C;;;;;;;AC56BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,QAAQ;AACzB,QAAQ,QAAQ;;AAEhB,iBAAiB,QAAQ;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACriBAAiB,QAAQ;AACzB;AACA;AACA;AACA,QAAQ,SAAS;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;;AClQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,KAAK;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,2CAA2C,KAAK;AAChD,0CAA0C,KAAK;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3tBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,sBAAsB;AACpE;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS,OAAO;AAChB;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;ACvKA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,UAAU,gBAAgB;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,WAAW,sBAAsB;AACjC,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,QAAQ;AACR,IAAI;AACJ;AACA;AACA;AACA,IAAI;AACJ;AACA,oC;;;;;;;ACxGA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA,0BAA0B,gCAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,WAAW,sBAAsB;AACjC,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA,oC;;;;;;;ACpCA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,oC;;;;;;;ACRA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA,oC;;;;;;;ACZA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4BAA4B;AACtD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oC;;;;;;;ACzDA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;;AAEA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;;AAEA,+B;;;;;;;;ACxCA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sBAAsB;AACjC;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,QAAQ;AACR;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,QAAQ;AACR;AACA;AACA;AACA,YAAY;AACZ;AACA,IAAI;AACJ,qCAAqC;AACrC,IAAI;AACJ;AACA;AACA;AACA;AACA,oC;;;;;;;ACtFA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA,4BAA4B,kCAAkC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;ACxCA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA,2BAA2B,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,WAAW,SAAS;AACpB;AACA,WAAW,SAAS;AACpB;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,oC;;;;;;;ACzCA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;;;;;;;ACjHA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB;AACA,WAAW,SAAS;AACpB;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB,EAAE;AACvC;AACA;AACA;AACA;AACA,YAAY;AACZ,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oC;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,qBAAqB;AACtC;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC,wCAAwC,mBAAmB;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,0CAA0C;AAC7D;AACA,mCAAmC,QAAQ;;AAE3C;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC;AACA;;AAEA,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,+CAA+C;AAClE;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrFA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;;AAEA;AACA,4BAA4B;AAC5B;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,gBAAgB;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvTA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,UAAU;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACjHA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AC9GA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;;;;;;;ACxDA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,OAAO;AACrB;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA,uBAAuB,gCAAgC;AACvD;AACA;AACA,OAAO;AACP,uBAAuB,gCAAgC;AACvD;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,eAAe;AAC/B;AACA;;AAEA,gBAAgB,QAAQ;AACxrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;AC/aD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI,YAAY;AAC7B,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB,aAAa,OAAO;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,yBAAyB;AACtC,aAAa,yBAAyB;AACtC,aAAa,OAAO;AACpB,aAAa,iBAAiB;AAC9B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kCAAkC;AACzD,aAAa;AACb,uBAAuB,kCAAkC;AACzD;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kCAAkC;AACzD,aAAa;AACb,uBAAuB,kCAAkC;AACzD;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC9UA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO,YAAY;AAChC,aAAa,OAAO;AACpB,aAAa,KAAK;AAClB;AACA,aAAa,OAAO;AACpB;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,OAAO;AACpB,aAAa,gBAAgB;AAC7B,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC1OA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO,YAAY;AAChC,aAAa,MAAM;AACnB;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA,cAAc,KAAK;AACnB;;AAEA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB,aAAa,IAAI;AACjB,eAAe;AACf;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa,IAAI;AACjB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACzdA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wEAAwE;AACxE;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzFA;AACA;AACA,qCAAqC;AACrC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oB;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,E;;;;;;;AC3JA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,QAAQ;AAC3B;;AAEA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,WAAW;AAC5B,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;;;;;;;;ACthbA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf,uCAAuC;AACvC,eAAe;;AAEf,qBAAqB,iBAAiB;AACtC;;AAEA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;ACnLA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK,eAAe;AACpB,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACz6BA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;AC5MD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,2CAA2C;AACrE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AC5OA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA,YAAY;;AAEZ,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;AC1GA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAU,aAAa;AACvB,UAAU,qBAAqB;AAC/B,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iCAAiC;AAC9D;;AAEA;AACA,UAAU,MAAM;AAChB,UAAU,uBAAuB;AACjC,UAAU,2BAA2B;AACrC,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACrHA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,MAAM;AAChB,UAAU,OAAO;AACjB;AACA,UAAU,YAAY;AACtB,UAAU,MAAM;AAChB,UAAU,YAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,WAAW;AACxC;;AAEA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AC/FA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,MAAM;AAChB,UAAU,oBAAoB;AAC9B,UAAU,mBAAmB;AAC7B,UAAU,gBAAgB;AAC1B,UAAU,aAAa;AACvB,UAAU,aAAa;AACvB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACjEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;AACxC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACjwBA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;AC1KA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChPA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,GAAG;AACZ;AACA;;AAEA;AACA;AACA,SAAS,GAAG;AACZ;AACA;;AAEA;AACA;AACA,SAAS,OAAO;AAChB;AACA;;AAEA;AACA;AACA,SAAS,OAAO;AAChB;AACA;;AAEA;AACA;AACA,SAAS,OAAO;AAChB;AACA;;AAEA;AACA;AACA,SAAS,OAAO;AAChB;AACA;;AAEA;AACA;AACA,SAAS,OAAO;AAChB;AACA;;AAEA;AACA;AACA,SAAS,OAAO;AAChB;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,2BAA2B;AACtC,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,yBAAyB,GAAG;AAC5B;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,oBAAoB;AACrC;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,cAAc;AACzB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,aAAa;AACxB,YAAY;AACZ;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;;AC5rBA;;AAEA,uBAAuB;AACvB,qBAAqB;;AAErB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,sCAAsC;AACtC;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;;;;;;;AC5DA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;ACXA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,gBAAgB;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;;AAEA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,oBAAoB;AACvC;AACA;;AAEA;AACA;;;;;;;AC1FA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,oBAAoB;AAC9C;;AAEA,iBAAiB,gBAAgB;AACjC;AACA;;AAEA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;AC/CA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACziBAAiB,QAAQ;AACzB;AACA,QAAQ,cAAc;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,QAAQ;AACzB;AACA,QAAQ,cAAc;AACtB,8CAA8C;AAC9C;AACA,0BAA0B;AAC1B;AACA,gDAAgD;AAChD;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,cAAciBAAiB,QAAQ;AACzB;;AAEA,OAAO,cAAc;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC;AACnC,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC;AACnC,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACnjBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA,GAAG;AACH,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AChQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA;AACA,QAAQ,WAAW;;AAEnB;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,QAAQ,WAAW;;AAEnB;AACA;AACA,QAAQ,UAAU;;AAElB;AACA;;;;;;;;ACnFA;;AAEA,gCAAgC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEjjB,iDAAiD,0CAA0C,0DAA0D,EAAE;;AAEvJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC,G;;;;;;;;AC1ED;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;AC/FA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qCAAqC,YAAY;AACjD,mCAAmC,YAAY;AAC/C,+BAA+B,0BAA0B;AACzD,2CAA2C,YAAY;AACvD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACvDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,sBAAsB,KAAK,GAAG,UAAU;AACxC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,sBAAsB,WAAW;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AC7LA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;;;;;;;;ACnDA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;;;;;;;ACfA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;;;;;;;;AC9DA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;;;;;;;;AChDA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;ACZA;;AAEA,gCAAgC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEjjB,iDAAiD,0CAA0C,0DAA0D,EAAE;;AAEvJ;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;AAEA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA,qB;;;;;;;;ACvIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;AC3BA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,E;;;;;;;;AC5IA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,2BAA2B;;AAE3B;;AAEA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,4BAA4B;;AAE5B;AACA,mCAAmC;AACnC,kCAAkC;AAClC,kCAAkC;;AAElC;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;AC7CA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,E;;;;;;;;ACvCA;;AAEA;AACA;;;;;;;;ACHA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;ACZA;;AAEA,gCAAgC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEjjB,iDAAiD,0CAA0C,0DAA0D,EAAE;;AAEvJ;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;;AAEA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA,qB;;;;;;;;ACvIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;AC3BA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,E;;;;;;;;AC5IA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,2BAA2B;;AAE3B;;AAEA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,4BAA4B;;AAE5B;AACA,mCAAmC;AACnC,kCAAkC;AAClC,kCAAkC;;AAElC;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;AC7CA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,E;;;;;;;;ACvCA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;ACTA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;AClCA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACbA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;;;;;;;;;ACtBA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;ACvBD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sBAAsB,6CAA6C;AACnE,KAAK;AACL,sBAAsB,sCAAsC;AAC5D,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA,kBAAkB,iCAAiC;AACnD;;AAEA;AACA,GAAG;AACH;;;;;;;;ACtGA;;AAEA;AACA;;;;;;;;ACHA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc,6EAA6E;AAC3F,KAAK;AACL;AACA;AACA,iBAAiB,iFAAiF;AAClG,QAAQ;AACR;AACA;AACA,iBAAiB,qFAAqF;AACtG,QAAQ;AACR;AACA;AACA,iBAAiB,wFAAwF;AACzG,QAAQ;AACR;AACA;AACA,iBAAiB,iFAAiF;AAClG,QAAQ;;AAER;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;;AAEA,GAAG;AACH,C;;;;;;;AC3JA;AACA;AACA;AACA;AACA,2B;;;;;;ACJA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK,gFAAgF;AACrF,KAAK,uEAAuE;AAC5E,KAAK;AACL;;AAEA;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA,4BAA4B,gCAAgC;AAC5D;AACA;AACA,OAAO;AACP,4BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,mCAAmC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iBAAiB,mCAAmC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,mCAAmC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACttdD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,kBAAkB;AAClB;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,E;;;;;;ACtHA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,E;;;;;;ACrrpOA;;;;;;;;ACCA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,EAAE;AACb,WAAW,MAAM;AACjB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChDA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;ACjBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC3DA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnBA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACbA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC7CA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACrBA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;ACjBA;;AAEA;AACA;;AAEA;;;;;;;ACLA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;;AAED;;;;;;;;ACrBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;;;;;;ACrBA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACdA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,EAAE;AACf;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpBA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA,6BAA6B,kBAAkB,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA,8CAA8C,kBAAkB,EAAE;AAClE;AACA;AACA;;AAEA;;;;;;;ACnCA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACrCA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC9BA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC1BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACjBA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC,IAAI;;AAEL;AACA;AACA;AACA,CAAC,IAAI;;AAEL;AACA;AACA;AACA,E;;;;;;;ACjBA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,OAAO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,C;;;;;;;;ACvIA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;AChCA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACXA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxDA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,aAAa;;AAE/C,yCAAyC;AACzC;AACA,6CAA6C,KAAK;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AC3DA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACpBA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sD;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,IAAI;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,8BAA8B;AAClE;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,oBAAoB;AAC9B;AACA;;AAEA;AACA,UAAU,UAAU;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,sBAAsB;AACrD;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;;;;;;;;AC/NA;;AAEA;AACA;AACA;AACA,+BAA+B;;AAE/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D,UAAU;AACV;AACA;AACA;AACA,E;;;;;;;ACjGA;AACA;;AAEA;AACA;AACA;;;;;;;ACLA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,8BAA8B;AACpD;;AAEA;AACA,wBAAwB;AACxB,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,8BAA8B;AACpD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,8BAA8B;AACpD;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,mDAAmD;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA,sBAAsB,8BAA8B;AACpD;;AAEA;AACA,wBAAwB;AACxB;AACA,6DAA6D;AAC7D,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,sBAAsB;AAC/B,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wBAAwB;AACxB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,wBAAwB;AACxB,2BAA2B;AAC3B;AACA;;AAEA;AACA;;AAEA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,oEAAoE;;AAE1F;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,8BAA8B;AACpD;;AAEA;AACA,wBAAwB;AACxB;AACA,6DAA6D;AAC7D,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,sBAAsB;AACtB;AACA;AACA;;AAEA,sBAAsB,8BAA8B;AACpD;;AAEA;AACA,wBAAwB;AACxB;AACA,6DAA6D;AAC7D,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,aAAa,mBAAmB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;;;;;;;AChnBA;AACA;AACA;AACA;;AAEA,wCAAwC;AACxC;AACA,GAAG;;AAEH;;AAEA,uHAAuH;AACvH;AACA;;AAEA;AACA,uCAAuC;;AAEvC;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA,wCAAwC;AACxC,qBAAqB;AACrB;AACA,GAAG;;AAEH,gBAAgB;AAChB;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,GAAG;AACH,gBAAgB;AAChB;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,0DAA0D,SAAS;AACnE,KAAK;AACL;AACA,qDAAqD;AACrD;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,QAAQ;AACnD,SAAS;AACT,OAAO;AACP;AACA,yCAAyC,QAAQ;AACjD;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,uCAAuC;;AAEvC;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,gBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,yBAAyB,2BAA2B;AACpD,GAAG;AACH,wBAAwB;AACxB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qDAAqD;;AAErD,kEAAkE;;AAElE;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;AC/LA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,GAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA,qBAAqB,gBAAgB;AACrC;;AAEA;;AAEA;AACA,uCAAuC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA,6CAA6C;;AAE7C;AACA;AACA;AACA,2BAA2B,gBAAgB,OAAO;AAClD,wBAAwB,+BAA+B;AACvD,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,eAAe,OAAO;AACjD;AACA;AACA;;AAEA;;AAEA,yBAAyB;AACzB,4BAA4B;AAC5B;AACA,aAAa;AACb,OAAO;AACP;AACA,yCAAyC,eAAe,OAAO;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC;;AAEA,wCAAwC;AACxC,KAAK;;AAEL;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA,4CAA4C;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,KAAK;;AAEL;AACA;AACA,qCAAqC;;AAErC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,gBAAgB,OAAO;AAClD,wBAAwB,+BAA+B;AACvD,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,eAAe,OAAO;AACjD;AACA;AACA,aAAa;;AAEb,gCAAgC;AAChC,mBAAmB,cAAc;AACjC;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,+BAA+B,eAAe,OAAO;AACrD;AACA;AACA;;AAEA,8BAA8B,cAAc;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;;AAEA,+BAA+B;AAC/B,gCAAgC;AAChC,KAAK;;AAEL;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA,KAAK;;AAEL,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL,0BAA0B;AAC1B,4BAA4B;AAC5B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA,2BAA2B;AAC3B;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA,4DAA4D;AAC5D;;AAEA;AACA;AACA,GAAG;AACH;;;;;;;;ACpgBA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;;ACjSD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,qCAAqC;AACrC;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;ACpCA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;;;;;;AC5BA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;AC5BA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AChDA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;ACTA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;ACRA;;AAEA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;;;;;;;;;;;ACvBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;ACRA;;AAEA;;AAEA;AACA;AACA;;;;;;;;ACNA;;AAEA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;;;;;;;;;;ACJA;;AAEA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;ACxCA;;AAEA;AACA;;AAEA;AACA;AACA,iCAAiC,qBAAqB;AACtD;;;;;;;;ACRA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;AC7CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACZA;;AAEA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;AACA;;;;;;;;ACtBA;;AAEA;;AAEA;AACA;AACA;AACA;;;;;;;;ACPA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;AACA,qBAAqB;AACrB,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;ACxCA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;;;;;;sDCtBA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,MAAM;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,SAAS;AACrB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,KAAK;AACL,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mCAAmC;AAClE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;;AAExB,yCAAyC,qBAAqB;;AAE9D;AACA;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB;;AAEtD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,cAAc,iBAAiB;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAEA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEA,CAAC;;;;;;;;;ACphBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpFA;;AAEA;AACA;;;;;;;ACHA;;;;;;;;ACAA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf,8CAA8C;AAC9C;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;AC/DA;;;;;;;ACAA;AACA;AACA,kCAAkC;AAClC,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACfA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,idAAid,+BAA+B;AAChf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK,OAAO;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK,OAAO;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,cAAc;AAC/B;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACjNA;AACA;AACA;AACA;AACA;AACA,WAAW,4BAA4B;AACvC,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B,WAAW,4BAA4B;AACvC,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;ACpOA;;;;;;;;ACAA;AACA;;;;;;;;ACDA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;AC3CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B,uDAAuD;;AAEtF;AACA,+BAA+B,uDAAuD;;AAEtF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,oCAAoC;AAC9C,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU,oCAAoC;AAC9C,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;;AAEA;AACA,QAAQ,kCAAkC;AAC1C;AACA;AACA;AACA;;AAEA;AACA,QAAQ,kCAAkC;AAC1C;AACA;AACA;AACA;;AAEA,UAAU;AACV;;;;;;;;;ACpMA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,OAAO,aAAa,EAAE;AAC3C;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,OAAO,aAAa,EAAE;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,uBAAuB;AACxC;AACA;AACA;;AAEA;AACA,iBAAiB,kBAAkB;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,6CAA6C,0CAA0C;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qCAAqC,6BAA6B;AAClE;;AAEA;AACA,gBAAgB;;AAEhB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;ACtPA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;;;;;ACtOA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,QAAQ;AACzB,QAAQ,QAAQ;;AAEhB,iBAAiB,QAAQ;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,QAAQ;AACzB,QAAQ,QAAQ;;AAEhB,iBAAiB,QAAQ;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACnDA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACfA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;;;;;;AC5BA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACzBA;AACA;AACA;AACA;AACA;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxBA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,WAAW;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;AC9GD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,4B;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,mCAAmC,uBAAuB;AAC1D,kCAAkC,sBAAsB;AACxD,gCAAgC,oBAAoB;AACpD,iCAAiC,qBAAqB;AACtD,gCAAgC,gBAAgB;AAChD,iCAAiC;AACjC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB,uBAAuB;AACvB,yBAAyB;AACzB,wBAAwB;AACxB,0BAA0B;AAC1B,yBAAyB;AACzB,yBAAyB;;AAEzB;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;;;;;;;ACzTA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;ACdA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,SAAS;AACtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA,C;;;;;;ACLA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;;;;;;;AC7BA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxBA,e;;;;;;ACAA,e;;;;;;ACAA,e","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmory imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmory exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tObject.defineProperty(exports, name, {\n \t\t\tconfigurable: false,\n \t\t\tenumerable: true,\n \t\t\tget: getter\n \t\t});\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 284);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 20aad9b8035a1a6fd969","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/buffer/index.js\n// module id = 0\n// module chunks = 0","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inherits/inherits_browser.js\n// module id = 1\n// module chunks = 0","'use strict';\n\nvar elliptic = exports;\n\nelliptic.version = require('../package.json').version;\nelliptic.utils = require('./elliptic/utils');\nelliptic.rand = require('brorand');\nelliptic.hmacDRBG = require('./elliptic/hmac-drbg');\nelliptic.curve = require('./elliptic/curve');\nelliptic.curves = require('./elliptic/curves');\n\n// Protocols\nelliptic.ec = require('./elliptic/ec');\nelliptic.eddsa = require('./elliptic/eddsa');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic.js\n// module id = 2\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 3\n// module chunks = 0","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buf' + 'fer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bn.js/lib/bn.js\n// module id = 4\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/stream-browserify/index.js\n// module id = 5\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 6\n// module chunks = 0","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/hash.js/lib/hash.js\n// module id = 7\n// module chunks = 0","'use strict'\n\nvar sources  = require('./sources')\nvar sinks    = require('./sinks')\nvar throughs = require('./throughs')\n\nexports = module.exports = require('./pull')\n\nfor(var k in sources)\n  exports[k] = sources[k]\n\nfor(var k in throughs)\n  exports[k] = throughs[k]\n\nfor(var k in sinks)\n  exports[k] = sinks[k]\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/index.js\n// module id = 8\n// module chunks = 0","// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nvar keys = objectKeys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  processNextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/readable-stream/lib/_stream_duplex.js\n// module id = 9\n// module chunks = 0","/*! bignumber.js v3.0.1 https://github.com/MikeMcl/bignumber.js/LICENCE */\r\n\r\n;(function (globalObj) {\r\n    'use strict';\r\n\r\n    /*\r\n      bignumber.js v3.0.1\r\n      A JavaScript library for arbitrary-precision arithmetic.\r\n      https://github.com/MikeMcl/bignumber.js\r\n      Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>\r\n      MIT Expat Licence\r\n    */\r\n\r\n\r\n    var BigNumber, parseNumeric,\r\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n        mathceil = Math.ceil,\r\n        mathfloor = Math.floor,\r\n        notBool = ' not a boolean or binary digit',\r\n        roundingMode = 'rounding mode',\r\n        tooManyDigits = 'number type has more than 15 significant digits',\r\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\r\n        BASE = 1e14,\r\n        LOG_BASE = 14,\r\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n        SQRT_BASE = 1e7,\r\n\r\n        /*\r\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n         * exception is thrown (if ERRORS is true).\r\n         */\r\n        MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\r\n    function constructorFactory(configObj) {\r\n        var div,\r\n\r\n            // id tracks the caller function, so its name can be included in error messages.\r\n            id = 0,\r\n            P = BigNumber.prototype,\r\n            ONE = new BigNumber(1),\r\n\r\n\r\n            /********************************* EDITABLE DEFAULTS **********************************/\r\n\r\n\r\n            /*\r\n             * The default values below must be integers within the inclusive ranges stated.\r\n             * The values can also be changed at run-time using BigNumber.config.\r\n             */\r\n\r\n            // The maximum number of decimal places for operations involving division.\r\n            DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n            /*\r\n             * The rounding mode used when rounding to the above decimal places, and when using\r\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n             * UP         0 Away from zero.\r\n             * DOWN       1 Towards zero.\r\n             * CEIL       2 Towards +Infinity.\r\n             * FLOOR      3 Towards -Infinity.\r\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n             */\r\n            ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n            // The exponent value at and beneath which toString returns exponential notation.\r\n            // Number type: -7\r\n            TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n            // The exponent value at and above which toString returns exponential notation.\r\n            // Number type: 21\r\n            TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n            // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n            // The minimum exponent value, beneath which underflow to zero occurs.\r\n            // Number type: -324  (5e-324)\r\n            MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n            // The maximum exponent value, above which overflow to Infinity occurs.\r\n            // Number type:  308  (1.7976931348623157e+308)\r\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n            MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n            // Whether BigNumber Errors are ever thrown.\r\n            ERRORS = true,                           // true or false\r\n\r\n            // Change to intValidatorNoErrors if ERRORS is false.\r\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\r\n\r\n            // Whether to use cryptographically-secure random number generation, if available.\r\n            CRYPTO = false,                          // true or false\r\n\r\n            /*\r\n             * The modulo mode used when calculating the modulus: a mod n.\r\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n             * The remainder (r) is calculated as: r = a - n * q.\r\n             *\r\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n             * DOWN      1 The remainder has the same sign as the dividend.\r\n             *             This modulo mode is commonly known as 'truncated division' and is\r\n             *             equivalent to (a % n) in JavaScript.\r\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n             *             The remainder is always positive.\r\n             *\r\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n             * modes are commonly used for the modulus operation.\r\n             * Although the other rounding modes can also be used, they may not give useful results.\r\n             */\r\n            MODULO_MODE = 1,                         // 0 to 9\r\n\r\n            // The maximum number of significant digits of the result of the toPower operation.\r\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n            POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n            // The format specification used by the BigNumber.prototype.toFormat method.\r\n            FORMAT = {\r\n                decimalSeparator: '.',\r\n                groupSeparator: ',',\r\n                groupSize: 3,\r\n                secondaryGroupSize: 0,\r\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n                fractionGroupSize: 0\r\n            };\r\n\r\n\r\n        /******************************************************************************************/\r\n\r\n\r\n        // CONSTRUCTOR\r\n\r\n\r\n        /*\r\n         * The BigNumber constructor and exported function.\r\n         * Create and return a new instance of a BigNumber object.\r\n         *\r\n         * n {number|string|BigNumber} A numeric value.\r\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n         */\r\n        function BigNumber( n, b ) {\r\n            var c, e, i, num, len, str,\r\n                x = this;\r\n\r\n            // Enable constructor usage without new.\r\n            if ( !( x instanceof BigNumber ) ) {\r\n\r\n                // 'BigNumber() constructor call without new: {n}'\r\n                if (ERRORS) raise( 26, 'constructor call without new', n );\r\n                return new BigNumber( n, b );\r\n            }\r\n\r\n            // 'new BigNumber() base not an integer: {b}'\r\n            // 'new BigNumber() base out of range: {b}'\r\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\r\n\r\n                // Duplicate.\r\n                if ( n instanceof BigNumber ) {\r\n                    x.s = n.s;\r\n                    x.e = n.e;\r\n                    x.c = ( n = n.c ) ? n.slice() : n;\r\n                    id = 0;\r\n                    return;\r\n                }\r\n\r\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\r\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\r\n\r\n                    // Fast path for integers.\r\n                    if ( n === ~~n ) {\r\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\r\n                        x.e = e;\r\n                        x.c = [n];\r\n                        id = 0;\r\n                        return;\r\n                    }\r\n\r\n                    str = n + '';\r\n                } else {\r\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n            } else {\r\n                b = b | 0;\r\n                str = n + '';\r\n\r\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\r\n                // Allow exponential notation to be used with base 10 argument.\r\n                if ( b == 10 ) {\r\n                    x = new BigNumber( n instanceof BigNumber ? n : str );\r\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\r\n                }\r\n\r\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n                // Any number in exponential form will fail due to the [Ee][+-].\r\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\r\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\r\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\r\n                    return parseNumeric( x, str, num, b );\r\n                }\r\n\r\n                if (num) {\r\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\r\n\r\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\r\n\r\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                        raise( id, tooManyDigits, n );\r\n                    }\r\n\r\n                    // Prevent later check for length on converted number.\r\n                    num = false;\r\n                } else {\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n\r\n                str = convertBase( str, 10, b, x.s );\r\n            }\r\n\r\n            // Decimal point?\r\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\r\n\r\n            // Exponential form?\r\n            if ( ( i = str.search( /e/i ) ) > 0 ) {\r\n\r\n                // Determine exponent.\r\n                if ( e < 0 ) e = i;\r\n                e += +str.slice( i + 1 );\r\n                str = str.substring( 0, i );\r\n            } else if ( e < 0 ) {\r\n\r\n                // Integer.\r\n                e = str.length;\r\n            }\r\n\r\n            // Determine leading zeros.\r\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );\r\n\r\n            // Determine trailing zeros.\r\n            for ( len = str.length; str.charCodeAt(--len) === 48; );\r\n            str = str.slice( i, len + 1 );\r\n\r\n            if (str) {\r\n                len = str.length;\r\n\r\n                // Disallow numbers with over 15 significant digits if number type.\r\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                if ( num && ERRORS && len > 15 && ( n > MAX_SAFE_INTEGER || n !== mathfloor(n) ) ) {\r\n                    raise( id, tooManyDigits, x.s * n );\r\n                }\r\n\r\n                e = e - i - 1;\r\n\r\n                 // Overflow?\r\n                if ( e > MAX_EXP ) {\r\n\r\n                    // Infinity.\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow?\r\n                } else if ( e < MIN_EXP ) {\r\n\r\n                    // Zero.\r\n                    x.c = [ x.e = 0 ];\r\n                } else {\r\n                    x.e = e;\r\n                    x.c = [];\r\n\r\n                    // Transform base\r\n\r\n                    // e is the base 10 exponent.\r\n                    // i is where to slice str to get the first element of the coefficient array.\r\n                    i = ( e + 1 ) % LOG_BASE;\r\n                    if ( e < 0 ) i += LOG_BASE;\r\n\r\n                    if ( i < len ) {\r\n                        if (i) x.c.push( +str.slice( 0, i ) );\r\n\r\n                        for ( len -= LOG_BASE; i < len; ) {\r\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );\r\n                        }\r\n\r\n                        str = str.slice(i);\r\n                        i = LOG_BASE - str.length;\r\n                    } else {\r\n                        i -= len;\r\n                    }\r\n\r\n                    for ( ; i--; str += '0' );\r\n                    x.c.push( +str );\r\n                }\r\n            } else {\r\n\r\n                // Zero.\r\n                x.c = [ x.e = 0 ];\r\n            }\r\n\r\n            id = 0;\r\n        }\r\n\r\n\r\n        // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n        BigNumber.another = constructorFactory;\r\n\r\n        BigNumber.ROUND_UP = 0;\r\n        BigNumber.ROUND_DOWN = 1;\r\n        BigNumber.ROUND_CEIL = 2;\r\n        BigNumber.ROUND_FLOOR = 3;\r\n        BigNumber.ROUND_HALF_UP = 4;\r\n        BigNumber.ROUND_HALF_DOWN = 5;\r\n        BigNumber.ROUND_HALF_EVEN = 6;\r\n        BigNumber.ROUND_HALF_CEIL = 7;\r\n        BigNumber.ROUND_HALF_FLOOR = 8;\r\n        BigNumber.EUCLID = 9;\r\n\r\n\r\n        /*\r\n         * Configure infrequently-changing library-wide settings.\r\n         *\r\n         * Accept an object or an argument list, with one or many of the following properties or\r\n         * parameters respectively:\r\n         *\r\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n         *   MODULO_MODE     {number}           0 to 9 inclusive\r\n         *   POW_PRECISION   {number}           0 to MAX inclusive\r\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n         *      decimalSeparator       {string}\r\n         *      groupSeparator         {string}\r\n         *      groupSize              {number}\r\n         *      secondaryGroupSize     {number}\r\n         *      fractionGroupSeparator {string}\r\n         *      fractionGroupSize      {number}\r\n         *\r\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n         *\r\n         * E.g.\r\n         * BigNumber.config(20, 4) is equivalent to\r\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n         *\r\n         * Ignore properties/parameters set to null or undefined.\r\n         * Return an object with the properties current values.\r\n         */\r\n        BigNumber.config = BigNumber.set = function () {\r\n            var v, p,\r\n                i = 0,\r\n                r = {},\r\n                a = arguments,\r\n                o = a[0],\r\n                has = o && typeof o == 'object'\r\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\r\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\r\n\r\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n            // 'config() DECIMAL_PLACES not an integer: {v}'\r\n            // 'config() DECIMAL_PLACES out of range: {v}'\r\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                DECIMAL_PLACES = v | 0;\r\n            }\r\n            r[p] = DECIMAL_PLACES;\r\n\r\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n            // 'config() ROUNDING_MODE not an integer: {v}'\r\n            // 'config() ROUNDING_MODE out of range: {v}'\r\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\r\n                ROUNDING_MODE = v | 0;\r\n            }\r\n            r[p] = ROUNDING_MODE;\r\n\r\n            // EXPONENTIAL_AT {number|number[]}\r\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\r\n            // 'config() EXPONENTIAL_AT out of range: {v}'\r\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\r\n                        TO_EXP_NEG = v[0] | 0;\r\n                        TO_EXP_POS = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\r\n                }\r\n            }\r\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\r\n\r\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n            // 'config() RANGE not an integer: {v}'\r\n            // 'config() RANGE cannot be zero: {v}'\r\n            // 'config() RANGE out of range: {v}'\r\n            if ( has( p = 'RANGE' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\r\n                        MIN_EXP = v[0] | 0;\r\n                        MAX_EXP = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\r\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\r\n                }\r\n            }\r\n            r[p] = [ MIN_EXP, MAX_EXP ];\r\n\r\n            // ERRORS {boolean|number} true, false, 1 or 0.\r\n            // 'config() ERRORS not a boolean or binary digit: {v}'\r\n            if ( has( p = 'ERRORS' ) ) {\r\n\r\n                if ( v === !!v || v === 1 || v === 0 ) {\r\n                    id = 0;\r\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = ERRORS;\r\n\r\n            // CRYPTO {boolean|number} true, false, 1 or 0.\r\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\r\n            // 'config() crypto unavailable: {crypto}'\r\n            if ( has( p = 'CRYPTO' ) ) {\r\n\r\n                if ( v === true || v === false || v === 1 || v === 0 ) {\r\n                    if (v) {\r\n                        v = typeof crypto == 'undefined';\r\n                        if ( !v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\r\n                            CRYPTO = true;\r\n                        } else if (ERRORS) {\r\n                            raise( 2, 'crypto unavailable', v ? void 0 : crypto );\r\n                        } else {\r\n                            CRYPTO = false;\r\n                        }\r\n                    } else {\r\n                        CRYPTO = false;\r\n                    }\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = CRYPTO;\r\n\r\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n            // 'config() MODULO_MODE not an integer: {v}'\r\n            // 'config() MODULO_MODE out of range: {v}'\r\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\r\n                MODULO_MODE = v | 0;\r\n            }\r\n            r[p] = MODULO_MODE;\r\n\r\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n            // 'config() POW_PRECISION not an integer: {v}'\r\n            // 'config() POW_PRECISION out of range: {v}'\r\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                POW_PRECISION = v | 0;\r\n            }\r\n            r[p] = POW_PRECISION;\r\n\r\n            // FORMAT {object}\r\n            // 'config() FORMAT not an object: {v}'\r\n            if ( has( p = 'FORMAT' ) ) {\r\n\r\n                if ( typeof v == 'object' ) {\r\n                    FORMAT = v;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + ' not an object', v );\r\n                }\r\n            }\r\n            r[p] = FORMAT;\r\n\r\n            return r;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the maximum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the minimum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n         * zeros are produced).\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         *\r\n         * 'random() decimal places not an integer: {dp}'\r\n         * 'random() decimal places out of range: {dp}'\r\n         * 'random() crypto unavailable: {crypto}'\r\n         */\r\n        BigNumber.random = (function () {\r\n            var pow2_53 = 0x20000000000000;\r\n\r\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n            // Check if Math.random() produces more than 32 bits of randomness.\r\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }\r\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n                  (Math.random() * 0x800000 | 0); };\r\n\r\n            return function (dp) {\r\n                var a, b, e, k, v,\r\n                    i = 0,\r\n                    c = [],\r\n                    rand = new BigNumber(ONE);\r\n\r\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\r\n                k = mathceil( dp / LOG_BASE );\r\n\r\n                if (CRYPTO) {\r\n\r\n                    // Browsers supporting crypto.getRandomValues.\r\n                    if (crypto.getRandomValues) {\r\n\r\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 53 bits:\r\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n                            //                                     11111 11111111 11111111\r\n                            // 0x20000 is 2^21.\r\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n                            // Rejection sampling:\r\n                            // 0 <= v < 9007199254740992\r\n                            // Probability that v >= 9e15, is\r\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n                            if ( v >= 9e15 ) {\r\n                                b = crypto.getRandomValues( new Uint32Array(2) );\r\n                                a[i] = b[0];\r\n                                a[i + 1] = b[1];\r\n                            } else {\r\n\r\n                                // 0 <= v <= 8999999999999999\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 2;\r\n                            }\r\n                        }\r\n                        i = k / 2;\r\n\r\n                    // Node.js supporting crypto.randomBytes.\r\n                    } else if (crypto.randomBytes) {\r\n\r\n                        // buffer\r\n                        a = crypto.randomBytes( k *= 7 );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n                            // 0 <= v < 9007199254740992\r\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\r\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\r\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\r\n\r\n                            if ( v >= 9e15 ) {\r\n                                crypto.randomBytes(7).copy( a, i );\r\n                            } else {\r\n\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 7;\r\n                            }\r\n                        }\r\n                        i = k / 7;\r\n                    } else {\r\n                        CRYPTO = false;\r\n                        if (ERRORS) raise( 14, 'crypto unavailable', crypto );\r\n                    }\r\n                }\r\n\r\n                // Use Math.random.\r\n                if (!CRYPTO) {\r\n\r\n                    for ( ; i < k; ) {\r\n                        v = random53bitInt();\r\n                        if ( v < 9e15 ) c[i++] = v % 1e14;\r\n                    }\r\n                }\r\n\r\n                k = c[--i];\r\n                dp %= LOG_BASE;\r\n\r\n                // Convert trailing digits to zeros according to dp.\r\n                if ( k && dp ) {\r\n                    v = POWS_TEN[LOG_BASE - dp];\r\n                    c[i] = mathfloor( k / v ) * v;\r\n                }\r\n\r\n                // Remove trailing elements which are zero.\r\n                for ( ; c[i] === 0; c.pop(), i-- );\r\n\r\n                // Zero?\r\n                if ( i < 0 ) {\r\n                    c = [ e = 0 ];\r\n                } else {\r\n\r\n                    // Remove leading elements which are zero and adjust exponent accordingly.\r\n                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);\r\n\r\n                    // Count the digits of the first element of c to determine leading zeros, and...\r\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n                    // adjust the exponent accordingly.\r\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\r\n                }\r\n\r\n                rand.e = e;\r\n                rand.c = c;\r\n                return rand;\r\n            };\r\n        })();\r\n\r\n\r\n        // PRIVATE FUNCTIONS\r\n\r\n\r\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n        function convertBase( str, baseOut, baseIn, sign ) {\r\n            var d, e, k, r, x, xc, y,\r\n                i = str.indexOf( '.' ),\r\n                dp = DECIMAL_PLACES,\r\n                rm = ROUNDING_MODE;\r\n\r\n            if ( baseIn < 37 ) str = str.toLowerCase();\r\n\r\n            // Non-integer.\r\n            if ( i >= 0 ) {\r\n                k = POW_PRECISION;\r\n\r\n                // Unlimited precision.\r\n                POW_PRECISION = 0;\r\n                str = str.replace( '.', '' );\r\n                y = new BigNumber(baseIn);\r\n                x = y.pow( str.length - i );\r\n                POW_PRECISION = k;\r\n\r\n                // Convert str as if an integer, then restore the fraction part by dividing the\r\n                // result by its base raised to a power.\r\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\r\n                y.e = y.c.length;\r\n            }\r\n\r\n            // Convert the number as integer.\r\n            xc = toBaseOut( str, baseIn, baseOut );\r\n            e = k = xc.length;\r\n\r\n            // Remove trailing zeros.\r\n            for ( ; xc[--k] == 0; xc.pop() );\r\n            if ( !xc[0] ) return '0';\r\n\r\n            if ( i < 0 ) {\r\n                --e;\r\n            } else {\r\n                x.c = xc;\r\n                x.e = e;\r\n\r\n                // sign is needed for correct rounding.\r\n                x.s = sign;\r\n                x = div( x, y, dp, rm, baseOut );\r\n                xc = x.c;\r\n                r = x.r;\r\n                e = x.e;\r\n            }\r\n\r\n            d = e + dp + 1;\r\n\r\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\r\n            i = xc[d];\r\n            k = baseOut / 2;\r\n            r = r || d < 0 || xc[d + 1] != null;\r\n\r\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n                         rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n            if ( d < 1 || !xc[0] ) {\r\n\r\n                // 1^-dp or 0.\r\n                str = r ? toFixedPoint( '1', -dp ) : '0';\r\n            } else {\r\n                xc.length = d;\r\n\r\n                if (r) {\r\n\r\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\r\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {\r\n                        xc[d] = 0;\r\n\r\n                        if ( !d ) {\r\n                            ++e;\r\n                            xc.unshift(1);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Determine trailing zeros.\r\n                for ( k = xc.length; !xc[--k]; );\r\n\r\n                // E.g. [4, 11, 15] becomes 4bf.\r\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\r\n                str = toFixedPoint( str, e );\r\n            }\r\n\r\n            // The caller will add the sign.\r\n            return str;\r\n        }\r\n\r\n\r\n        // Perform division in the specified base. Called by div and convertBase.\r\n        div = (function () {\r\n\r\n            // Assume non-zero x and k.\r\n            function multiply( x, k, base ) {\r\n                var m, temp, xlo, xhi,\r\n                    carry = 0,\r\n                    i = x.length,\r\n                    klo = k % SQRT_BASE,\r\n                    khi = k / SQRT_BASE | 0;\r\n\r\n                for ( x = x.slice(); i--; ) {\r\n                    xlo = x[i] % SQRT_BASE;\r\n                    xhi = x[i] / SQRT_BASE | 0;\r\n                    m = khi * xlo + xhi * klo;\r\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\r\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\r\n                    x[i] = temp % base;\r\n                }\r\n\r\n                if (carry) x.unshift(carry);\r\n\r\n                return x;\r\n            }\r\n\r\n            function compare( a, b, aL, bL ) {\r\n                var i, cmp;\r\n\r\n                if ( aL != bL ) {\r\n                    cmp = aL > bL ? 1 : -1;\r\n                } else {\r\n\r\n                    for ( i = cmp = 0; i < aL; i++ ) {\r\n\r\n                        if ( a[i] != b[i] ) {\r\n                            cmp = a[i] > b[i] ? 1 : -1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return cmp;\r\n            }\r\n\r\n            function subtract( a, b, aL, base ) {\r\n                var i = 0;\r\n\r\n                // Subtract b from a.\r\n                for ( ; aL--; ) {\r\n                    a[aL] -= i;\r\n                    i = a[aL] < b[aL] ? 1 : 0;\r\n                    a[aL] = i * base + a[aL] - b[aL];\r\n                }\r\n\r\n                // Remove leading zeros.\r\n                for ( ; !a[0] && a.length > 1; a.shift() );\r\n            }\r\n\r\n            // x: dividend, y: divisor.\r\n            return function ( x, y, dp, rm, base ) {\r\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n                    yL, yz,\r\n                    s = x.s == y.s ? 1 : -1,\r\n                    xc = x.c,\r\n                    yc = y.c;\r\n\r\n                // Either NaN, Infinity or 0?\r\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {\r\n\r\n                    return new BigNumber(\r\n\r\n                      // Return NaN if either NaN, or both Infinity or 0.\r\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\r\n\r\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n                    );\r\n                }\r\n\r\n                q = new BigNumber(s);\r\n                qc = q.c = [];\r\n                e = x.e - y.e;\r\n                s = dp + e + 1;\r\n\r\n                if ( !base ) {\r\n                    base = BASE;\r\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\r\n                    s = s / LOG_BASE | 0;\r\n                }\r\n\r\n                // Result exponent may be one less then the current value of e.\r\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\r\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;\r\n\r\n                if ( s < 0 ) {\r\n                    qc.push(1);\r\n                    more = true;\r\n                } else {\r\n                    xL = xc.length;\r\n                    yL = yc.length;\r\n                    i = 0;\r\n                    s += 2;\r\n\r\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n                    n = mathfloor( base / ( yc[0] + 1 ) );\r\n\r\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\r\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\r\n                    if ( n > 1 ) {\r\n                        yc = multiply( yc, n, base );\r\n                        xc = multiply( xc, n, base );\r\n                        yL = yc.length;\r\n                        xL = xc.length;\r\n                    }\r\n\r\n                    xi = yL;\r\n                    rem = xc.slice( 0, yL );\r\n                    remL = rem.length;\r\n\r\n                    // Add zeros to make remainder as long as divisor.\r\n                    for ( ; remL < yL; rem[remL++] = 0 );\r\n                    yz = yc.slice();\r\n                    yz.unshift(0);\r\n                    yc0 = yc[0];\r\n                    if ( yc[1] >= base / 2 ) yc0++;\r\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\r\n\r\n                    do {\r\n                        n = 0;\r\n\r\n                        // Compare divisor and remainder.\r\n                        cmp = compare( yc, rem, yL, remL );\r\n\r\n                        // If divisor < remainder.\r\n                        if ( cmp < 0 ) {\r\n\r\n                            // Calculate trial digit, n.\r\n\r\n                            rem0 = rem[0];\r\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\r\n\r\n                            // n is how many times the divisor goes into the current remainder.\r\n                            n = mathfloor( rem0 / yc0 );\r\n\r\n                            //  Algorithm:\r\n                            //  1. product = divisor * trial digit (n)\r\n                            //  2. if product > remainder: product -= divisor, n--\r\n                            //  3. remainder -= product\r\n                            //  4. if product was < remainder at 2:\r\n                            //    5. compare new remainder and divisor\r\n                            //    6. If remainder > divisor: remainder -= divisor, n++\r\n\r\n                            if ( n > 1 ) {\r\n\r\n                                // n may be > base only when base is 3.\r\n                                if (n >= base) n = base - 1;\r\n\r\n                                // product = divisor * trial digit.\r\n                                prod = multiply( yc, n, base );\r\n                                prodL = prod.length;\r\n                                remL = rem.length;\r\n\r\n                                // Compare product and remainder.\r\n                                // If product > remainder.\r\n                                // Trial digit n too high.\r\n                                // n is 1 too high about 5% of the time, and is not known to have\r\n                                // ever been more than 1 too high.\r\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\r\n                                    n--;\r\n\r\n                                    // Subtract divisor from product.\r\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\r\n                                    prodL = prod.length;\r\n                                    cmp = 1;\r\n                                }\r\n                            } else {\r\n\r\n                                // n is 0 or 1, cmp is -1.\r\n                                // If n is 0, there is no need to compare yc and rem again below,\r\n                                // so change cmp to 1 to avoid it.\r\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                                if ( n == 0 ) {\r\n\r\n                                    // divisor < remainder, so n must be at least 1.\r\n                                    cmp = n = 1;\r\n                                }\r\n\r\n                                // product = divisor\r\n                                prod = yc.slice();\r\n                                prodL = prod.length;\r\n                            }\r\n\r\n                            if ( prodL < remL ) prod.unshift(0);\r\n\r\n                            // Subtract product from remainder.\r\n                            subtract( rem, prod, remL, base );\r\n                            remL = rem.length;\r\n\r\n                             // If product was < remainder.\r\n                            if ( cmp == -1 ) {\r\n\r\n                                // Compare divisor and new remainder.\r\n                                // If divisor < new remainder, subtract divisor from remainder.\r\n                                // Trial digit n too low.\r\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {\r\n                                    n++;\r\n\r\n                                    // Subtract divisor from remainder.\r\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );\r\n                                    remL = rem.length;\r\n                                }\r\n                            }\r\n                        } else if ( cmp === 0 ) {\r\n                            n++;\r\n                            rem = [0];\r\n                        } // else cmp === 1 and n will be 0\r\n\r\n                        // Add the next digit, n, to the result array.\r\n                        qc[i++] = n;\r\n\r\n                        // Update the remainder.\r\n                        if ( rem[0] ) {\r\n                            rem[remL++] = xc[xi] || 0;\r\n                        } else {\r\n                            rem = [ xc[xi] ];\r\n                            remL = 1;\r\n                        }\r\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\r\n\r\n                    more = rem[0] != null;\r\n\r\n                    // Leading zero?\r\n                    if ( !qc[0] ) qc.shift();\r\n                }\r\n\r\n                if ( base == BASE ) {\r\n\r\n                    // To calculate q.e, first get the number of digits of qc[0].\r\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\r\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\r\n\r\n                // Caller is convertBase.\r\n                } else {\r\n                    q.e = e;\r\n                    q.r = +more;\r\n                }\r\n\r\n                return q;\r\n            };\r\n        })();\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n         * notation rounded to the specified decimal places or significant digits.\r\n         *\r\n         * n is a BigNumber.\r\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n         * rm is the rounding mode.\r\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n         */\r\n        function format( n, i, rm, caller ) {\r\n            var c0, e, ne, len, str;\r\n\r\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\r\n              ? rm | 0 : ROUNDING_MODE;\r\n\r\n            if ( !n.c ) return n.toString();\r\n            c0 = n.c[0];\r\n            ne = n.e;\r\n\r\n            if ( i == null ) {\r\n                str = coeffToString( n.c );\r\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\r\n                  ? toExponential( str, ne )\r\n                  : toFixedPoint( str, ne );\r\n            } else {\r\n                n = round( new BigNumber(n), i, rm );\r\n\r\n                // n.e may have changed if the value was rounded up.\r\n                e = n.e;\r\n\r\n                str = coeffToString( n.c );\r\n                len = str.length;\r\n\r\n                // toPrecision returns exponential notation if the number of significant digits\r\n                // specified is less than the number of digits necessary to represent the integer\r\n                // part of the value in fixed-point notation.\r\n\r\n                // Exponential notation.\r\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\r\n\r\n                    // Append zeros?\r\n                    for ( ; len < i; str += '0', len++ );\r\n                    str = toExponential( str, e );\r\n\r\n                // Fixed-point notation.\r\n                } else {\r\n                    i -= ne;\r\n                    str = toFixedPoint( str, e );\r\n\r\n                    // Append zeros?\r\n                    if ( e + 1 > len ) {\r\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\r\n                    } else {\r\n                        i += e - len;\r\n                        if ( i > 0 ) {\r\n                            if ( e + 1 == len ) str += '.';\r\n                            for ( ; i--; str += '0' );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return n.s < 0 && c0 ? '-' + str : str;\r\n        }\r\n\r\n\r\n        // Handle BigNumber.max and BigNumber.min.\r\n        function maxOrMin( args, method ) {\r\n            var m, n,\r\n                i = 0;\r\n\r\n            if ( isArray( args[0] ) ) args = args[0];\r\n            m = new BigNumber( args[0] );\r\n\r\n            for ( ; ++i < args.length; ) {\r\n                n = new BigNumber( args[i] );\r\n\r\n                // If any number is NaN, return NaN.\r\n                if ( !n.s ) {\r\n                    m = n;\r\n                    break;\r\n                } else if ( method.call( m, n ) ) {\r\n                    m = n;\r\n                }\r\n            }\r\n\r\n            return m;\r\n        }\r\n\r\n\r\n        /*\r\n         * Return true if n is an integer in range, otherwise throw.\r\n         * Use for argument validation when ERRORS is true.\r\n         */\r\n        function intValidatorWithErrors( n, min, max, caller, name ) {\r\n            if ( n < min || n > max || n != truncate(n) ) {\r\n                raise( caller, ( name || 'decimal places' ) +\r\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n\r\n        /*\r\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n         * Called by minus, plus and times.\r\n         */\r\n        function normalise( n, c, e ) {\r\n            var i = 1,\r\n                j = c.length;\r\n\r\n             // Remove trailing zeros.\r\n            for ( ; !c[--j]; c.pop() );\r\n\r\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n            for ( j = c[0]; j >= 10; j /= 10, i++ );\r\n\r\n            // Overflow?\r\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\r\n\r\n                // Infinity.\r\n                n.c = n.e = null;\r\n\r\n            // Underflow?\r\n            } else if ( e < MIN_EXP ) {\r\n\r\n                // Zero.\r\n                n.c = [ n.e = 0 ];\r\n            } else {\r\n                n.e = e;\r\n                n.c = c;\r\n            }\r\n\r\n            return n;\r\n        }\r\n\r\n\r\n        // Handle values that fail the validity test in BigNumber.\r\n        parseNumeric = (function () {\r\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n                dotAfter = /^([^.]+)\\.$/,\r\n                dotBefore = /^\\.([^.]+)$/,\r\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n            return function ( x, str, num, b ) {\r\n                var base,\r\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );\r\n\r\n                // No exception on ±Infinity or NaN.\r\n                if ( isInfinityOrNaN.test(s) ) {\r\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n                } else {\r\n                    if ( !num ) {\r\n\r\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\r\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n                            return !b || b == base ? p1 : m;\r\n                        });\r\n\r\n                        if (b) {\r\n                            base = b;\r\n\r\n                            // E.g. '1.' to '1', '.1' to '0.1'\r\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\r\n                        }\r\n\r\n                        if ( str != s ) return new BigNumber( s, base );\r\n                    }\r\n\r\n                    // 'new BigNumber() not a number: {n}'\r\n                    // 'new BigNumber() not a base {b} number: {n}'\r\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\r\n                    x.s = null;\r\n                }\r\n\r\n                x.c = x.e = null;\r\n                id = 0;\r\n            }\r\n        })();\r\n\r\n\r\n        // Throw a BigNumber Error.\r\n        function raise( caller, msg, val ) {\r\n            var error = new Error( [\r\n                'new BigNumber',     // 0\r\n                'cmp',               // 1\r\n                'config',            // 2\r\n                'div',               // 3\r\n                'divToInt',          // 4\r\n                'eq',                // 5\r\n                'gt',                // 6\r\n                'gte',               // 7\r\n                'lt',                // 8\r\n                'lte',               // 9\r\n                'minus',             // 10\r\n                'mod',               // 11\r\n                'plus',              // 12\r\n                'precision',         // 13\r\n                'random',            // 14\r\n                'round',             // 15\r\n                'shift',             // 16\r\n                'times',             // 17\r\n                'toDigits',          // 18\r\n                'toExponential',     // 19\r\n                'toFixed',           // 20\r\n                'toFormat',          // 21\r\n                'toFraction',        // 22\r\n                'pow',               // 23\r\n                'toPrecision',       // 24\r\n                'toString',          // 25\r\n                'BigNumber'          // 26\r\n            ][caller] + '() ' + msg + ': ' + val );\r\n\r\n            error.name = 'BigNumber Error';\r\n            id = 0;\r\n            throw error;\r\n        }\r\n\r\n\r\n        /*\r\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n         * If r is truthy, it is known that there are more digits after the rounding digit.\r\n         */\r\n        function round( x, sd, rm, r ) {\r\n            var d, i, j, k, n, ni, rd,\r\n                xc = x.c,\r\n                pows10 = POWS_TEN;\r\n\r\n            // if x is not Infinity or NaN...\r\n            if (xc) {\r\n\r\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n                // ni is the index of n within x.c.\r\n                // d is the number of digits of n.\r\n                // i is the index of rd within n including leading zeros.\r\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n                out: {\r\n\r\n                    // Get the number of digits of the first element of xc.\r\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\r\n                    i = sd - d;\r\n\r\n                    // If the rounding digit is in the first element of xc...\r\n                    if ( i < 0 ) {\r\n                        i += LOG_BASE;\r\n                        j = sd;\r\n                        n = xc[ ni = 0 ];\r\n\r\n                        // Get the rounding digit at index j of n.\r\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\r\n                    } else {\r\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );\r\n\r\n                        if ( ni >= xc.length ) {\r\n\r\n                            if (r) {\r\n\r\n                                // Needed by sqrt.\r\n                                for ( ; xc.length <= ni; xc.push(0) );\r\n                                n = rd = 0;\r\n                                d = 1;\r\n                                i %= LOG_BASE;\r\n                                j = i - LOG_BASE + 1;\r\n                            } else {\r\n                                break out;\r\n                            }\r\n                        } else {\r\n                            n = k = xc[ni];\r\n\r\n                            // Get the number of digits of n.\r\n                            for ( d = 1; k >= 10; k /= 10, d++ );\r\n\r\n                            // Get the index of rd within n.\r\n                            i %= LOG_BASE;\r\n\r\n                            // Get the index of rd within n, adjusted for leading zeros.\r\n                            // The number of leading zeros of n is given by LOG_BASE - d.\r\n                            j = i - LOG_BASE + d;\r\n\r\n                            // Get the rounding digit at index j of n.\r\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\r\n                        }\r\n                    }\r\n\r\n                    r = r || sd < 0 ||\r\n\r\n                    // Are there any non-zero digits after the rounding digit?\r\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\r\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\r\n\r\n                    r = rm < 4\r\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\r\n\r\n                        // Check whether the digit to the left of the rounding digit is odd.\r\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\r\n                          rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n                    if ( sd < 1 || !xc[0] ) {\r\n                        xc.length = 0;\r\n\r\n                        if (r) {\r\n\r\n                            // Convert sd to decimal places.\r\n                            sd -= x.e + 1;\r\n\r\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n                            xc[0] = pows10[ ( LOG_BASE - sd % LOG_BASE ) % LOG_BASE ];\r\n                            x.e = -sd || 0;\r\n                        } else {\r\n\r\n                            // Zero.\r\n                            xc[0] = x.e = 0;\r\n                        }\r\n\r\n                        return x;\r\n                    }\r\n\r\n                    // Remove excess digits.\r\n                    if ( i == 0 ) {\r\n                        xc.length = ni;\r\n                        k = 1;\r\n                        ni--;\r\n                    } else {\r\n                        xc.length = ni + 1;\r\n                        k = pows10[ LOG_BASE - i ];\r\n\r\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n                        // j > 0 means i > number of leading zeros of n.\r\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\r\n                    }\r\n\r\n                    // Round up?\r\n                    if (r) {\r\n\r\n                        for ( ; ; ) {\r\n\r\n                            // If the digit to be rounded up is in the first element of xc...\r\n                            if ( ni == 0 ) {\r\n\r\n                                // i will be the length of xc[0] before k is added.\r\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\r\n                                j = xc[0] += k;\r\n                                for ( k = 1; j >= 10; j /= 10, k++ );\r\n\r\n                                // if i != k the length has increased.\r\n                                if ( i != k ) {\r\n                                    x.e++;\r\n                                    if ( xc[0] == BASE ) xc[0] = 1;\r\n                                }\r\n\r\n                                break;\r\n                            } else {\r\n                                xc[ni] += k;\r\n                                if ( xc[ni] != BASE ) break;\r\n                                xc[ni--] = 0;\r\n                                k = 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Remove trailing zeros.\r\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\r\n                }\r\n\r\n                // Overflow? Infinity.\r\n                if ( x.e > MAX_EXP ) {\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow? Zero.\r\n                } else if ( x.e < MIN_EXP ) {\r\n                    x.c = [ x.e = 0 ];\r\n                }\r\n            }\r\n\r\n            return x;\r\n        }\r\n\r\n\r\n        // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n         */\r\n        P.absoluteValue = P.abs = function () {\r\n            var x = new BigNumber(this);\r\n            if ( x.s < 0 ) x.s = 1;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of Infinity.\r\n         */\r\n        P.ceil = function () {\r\n            return round( new BigNumber(this), this.e + 1, 2 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return\r\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * 0 if they have the same value,\r\n         * or null if the value of either is NaN.\r\n         */\r\n        P.comparedTo = P.cmp = function ( y, b ) {\r\n            id = 1;\r\n            return compare( this, new BigNumber( y, b ) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n         * of this BigNumber is ±Infinity or NaN.\r\n         */\r\n        P.decimalPlaces = P.dp = function () {\r\n            var n, v,\r\n                c = this.c;\r\n\r\n            if ( !c ) return null;\r\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\r\n\r\n            // Subtract the number of trailing zeros of the last number.\r\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\r\n            if ( n < 0 ) n = 0;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n / 0 = I\r\n         *  n / N = N\r\n         *  n / I = 0\r\n         *  0 / n = 0\r\n         *  0 / 0 = N\r\n         *  0 / N = N\r\n         *  0 / I = 0\r\n         *  N / n = N\r\n         *  N / 0 = N\r\n         *  N / N = N\r\n         *  N / I = N\r\n         *  I / n = I\r\n         *  I / 0 = I\r\n         *  I / N = N\r\n         *  I / I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.dividedBy = P.div = function ( y, b ) {\r\n            id = 3;\r\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n         * BigNumber by the value of BigNumber(y, b).\r\n         */\r\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\r\n            id = 4;\r\n            return div( this, new BigNumber( y, b ), 0, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.equals = P.eq = function ( y, b ) {\r\n            id = 5;\r\n            return compare( this, new BigNumber( y, b ) ) === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of -Infinity.\r\n         */\r\n        P.floor = function () {\r\n            return round( new BigNumber(this), this.e + 1, 3 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.greaterThan = P.gt = function ( y, b ) {\r\n            id = 6;\r\n            return compare( this, new BigNumber( y, b ) ) > 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\r\n            id = 7;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\r\n\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n         */\r\n        P.isFinite = function () {\r\n            return !!this.c;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n         */\r\n        P.isInteger = P.isInt = function () {\r\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n         */\r\n        P.isNaN = function () {\r\n            return !this.s;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n         */\r\n        P.isNegative = P.isNeg = function () {\r\n            return this.s < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n         */\r\n        P.isZero = function () {\r\n            return !!this.c && this.c[0] == 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.lessThan = P.lt = function ( y, b ) {\r\n            id = 8;\r\n            return compare( this, new BigNumber( y, b ) ) < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\r\n            id = 9;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n - 0 = n\r\n         *  n - N = N\r\n         *  n - I = -I\r\n         *  0 - n = -n\r\n         *  0 - 0 = 0\r\n         *  0 - N = N\r\n         *  0 - I = -I\r\n         *  N - n = N\r\n         *  N - 0 = N\r\n         *  N - N = N\r\n         *  N - I = N\r\n         *  I - n = I\r\n         *  I - 0 = I\r\n         *  I - N = N\r\n         *  I - I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.minus = P.sub = function ( y, b ) {\r\n            var i, j, t, xLTy,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 10;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n            if ( a != b ) {\r\n                y.s = -b;\r\n                return x.plus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Either Infinity?\r\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\r\n\r\n                // Either zero?\r\n                if ( !xc[0] || !yc[0] ) {\r\n\r\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\r\n\r\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n                      ROUNDING_MODE == 3 ? -0 : 0 );\r\n                }\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Determine which is the bigger number.\r\n            if ( a = xe - ye ) {\r\n\r\n                if ( xLTy = a < 0 ) {\r\n                    a = -a;\r\n                    t = xc;\r\n                } else {\r\n                    ye = xe;\r\n                    t = yc;\r\n                }\r\n\r\n                t.reverse();\r\n\r\n                // Prepend zeros to equalise exponents.\r\n                for ( b = a; b--; t.push(0) );\r\n                t.reverse();\r\n            } else {\r\n\r\n                // Exponents equal. Check digit by digit.\r\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\r\n\r\n                for ( a = b = 0; b < j; b++ ) {\r\n\r\n                    if ( xc[b] != yc[b] ) {\r\n                        xLTy = xc[b] < yc[b];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // x < y? Point xc to the array of the bigger number.\r\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n            b = ( j = yc.length ) - ( i = xc.length );\r\n\r\n            // Append zeros to xc if shorter.\r\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\r\n            b = BASE - 1;\r\n\r\n            // Subtract yc from xc.\r\n            for ( ; j > a; ) {\r\n\r\n                if ( xc[--j] < yc[j] ) {\r\n                    for ( i = j; i && !xc[--i]; xc[i] = b );\r\n                    --xc[i];\r\n                    xc[j] += BASE;\r\n                }\r\n\r\n                xc[j] -= yc[j];\r\n            }\r\n\r\n            // Remove leading zeros and adjust exponent accordingly.\r\n            for ( ; xc[0] == 0; xc.shift(), --ye );\r\n\r\n            // Zero?\r\n            if ( !xc[0] ) {\r\n\r\n                // Following IEEE 754 (2008) 6.3,\r\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n                y.c = [ y.e = 0 ];\r\n                return y;\r\n            }\r\n\r\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n            // for finite x and y.\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         *   n % 0 =  N\r\n         *   n % N =  N\r\n         *   n % I =  n\r\n         *   0 % n =  0\r\n         *  -0 % n = -0\r\n         *   0 % 0 =  N\r\n         *   0 % N =  N\r\n         *   0 % I =  0\r\n         *   N % n =  N\r\n         *   N % 0 =  N\r\n         *   N % N =  N\r\n         *   N % I =  N\r\n         *   I % n =  N\r\n         *   I % 0 =  N\r\n         *   I % N =  N\r\n         *   I % I =  N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n         */\r\n        P.modulo = P.mod = function ( y, b ) {\r\n            var q, s,\r\n                x = this;\r\n\r\n            id = 11;\r\n            y = new BigNumber( y, b );\r\n\r\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {\r\n                return new BigNumber(NaN);\r\n\r\n            // Return x if y is Infinity or x is zero.\r\n            } else if ( !y.c || x.c && !x.c[0] ) {\r\n                return new BigNumber(x);\r\n            }\r\n\r\n            if ( MODULO_MODE == 9 ) {\r\n\r\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n                // r = x - qy    where  0 <= r < abs(y)\r\n                s = y.s;\r\n                y.s = 1;\r\n                q = div( x, y, 0, 3 );\r\n                y.s = s;\r\n                q.s *= s;\r\n            } else {\r\n                q = div( x, y, 0, MODULO_MODE );\r\n            }\r\n\r\n            return x.minus( q.times(y) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n         * i.e. multiplied by -1.\r\n         */\r\n        P.negated = P.neg = function () {\r\n            var x = new BigNumber(this);\r\n            x.s = -x.s || null;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n + 0 = n\r\n         *  n + N = N\r\n         *  n + I = I\r\n         *  0 + n = n\r\n         *  0 + 0 = 0\r\n         *  0 + N = N\r\n         *  0 + I = I\r\n         *  N + n = N\r\n         *  N + 0 = N\r\n         *  N + N = N\r\n         *  N + I = N\r\n         *  I + n = I\r\n         *  I + 0 = I\r\n         *  I + N = N\r\n         *  I + I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.plus = P.add = function ( y, b ) {\r\n            var t,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 12;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n             if ( a != b ) {\r\n                y.s = -b;\r\n                return x.minus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Return ±Infinity if either ±Infinity.\r\n                if ( !xc || !yc ) return new BigNumber( a / 0 );\r\n\r\n                // Either zero?\r\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n            if ( a = xe - ye ) {\r\n                if ( a > 0 ) {\r\n                    ye = xe;\r\n                    t = yc;\r\n                } else {\r\n                    a = -a;\r\n                    t = xc;\r\n                }\r\n\r\n                t.reverse();\r\n                for ( ; a--; t.push(0) );\r\n                t.reverse();\r\n            }\r\n\r\n            a = xc.length;\r\n            b = yc.length;\r\n\r\n            // Point xc to the longer array, and b to the shorter length.\r\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\r\n\r\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n            for ( a = 0; b; ) {\r\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\r\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n            }\r\n\r\n            if (a) {\r\n                xc.unshift(a);\r\n                ++ye;\r\n            }\r\n\r\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n            // ye = MAX_EXP + 1 possible\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of significant digits of the value of this BigNumber.\r\n         *\r\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n         */\r\n        P.precision = P.sd = function (z) {\r\n            var n, v,\r\n                x = this,\r\n                c = x.c;\r\n\r\n            // 'precision() argument not a boolean or binary digit: {z}'\r\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\r\n                if (ERRORS) raise( 13, 'argument' + notBool, z );\r\n                if ( z != !!z ) z = null;\r\n            }\r\n\r\n            if ( !c ) return null;\r\n            v = c.length - 1;\r\n            n = v * LOG_BASE + 1;\r\n\r\n            if ( v = c[v] ) {\r\n\r\n                // Subtract the number of trailing zeros of the last element.\r\n                for ( ; v % 10 == 0; v /= 10, n-- );\r\n\r\n                // Add the number of digits of the first element.\r\n                for ( v = c[0]; v >= 10; v /= 10, n++ );\r\n            }\r\n\r\n            if ( z && x.e + 1 > n ) n = x.e + 1;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n         * omitted.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'round() decimal places out of range: {dp}'\r\n         * 'round() decimal places not an integer: {dp}'\r\n         * 'round() rounding mode not an integer: {rm}'\r\n         * 'round() rounding mode out of range: {rm}'\r\n         */\r\n        P.round = function ( dp, rm ) {\r\n            var n = new BigNumber(this);\r\n\r\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\r\n                round( n, ~~dp + this.e + 1, rm == null ||\r\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\r\n            }\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n         *\r\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         *\r\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n         * otherwise.\r\n         *\r\n         * 'shift() argument not an integer: {k}'\r\n         * 'shift() argument out of range: {k}'\r\n         */\r\n        P.shift = function (k) {\r\n            var n = this;\r\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\r\n\r\n              // k < 1e+21, or truncate(k) will produce exponential notation.\r\n              ? n.times( '1e' + truncate(k) )\r\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\r\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )\r\n                : n );\r\n        };\r\n\r\n\r\n        /*\r\n         *  sqrt(-n) =  N\r\n         *  sqrt( N) =  N\r\n         *  sqrt(-I) =  N\r\n         *  sqrt( I) =  I\r\n         *  sqrt( 0) =  0\r\n         *  sqrt(-0) = -0\r\n         *\r\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.squareRoot = P.sqrt = function () {\r\n            var m, n, r, rep, t,\r\n                x = this,\r\n                c = x.c,\r\n                s = x.s,\r\n                e = x.e,\r\n                dp = DECIMAL_PLACES + 4,\r\n                half = new BigNumber('0.5');\r\n\r\n            // Negative/NaN/Infinity/zero?\r\n            if ( s !== 1 || !c || !c[0] ) {\r\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\r\n            }\r\n\r\n            // Initial estimate.\r\n            s = Math.sqrt( +x );\r\n\r\n            // Math.sqrt underflow/overflow?\r\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n            if ( s == 0 || s == 1 / 0 ) {\r\n                n = coeffToString(c);\r\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';\r\n                s = Math.sqrt(n);\r\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\r\n\r\n                if ( s == 1 / 0 ) {\r\n                    n = '1e' + e;\r\n                } else {\r\n                    n = s.toExponential();\r\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\r\n                }\r\n\r\n                r = new BigNumber(n);\r\n            } else {\r\n                r = new BigNumber( s + '' );\r\n            }\r\n\r\n            // Check for zero.\r\n            // r could be zero if MIN_EXP is changed after the this value was created.\r\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n            // coeffToString to throw.\r\n            if ( r.c[0] ) {\r\n                e = r.e;\r\n                s = e + dp;\r\n                if ( s < 3 ) s = 0;\r\n\r\n                // Newton-Raphson iteration.\r\n                for ( ; ; ) {\r\n                    t = r;\r\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\r\n\r\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\r\n                         coeffToString( r.c ) ).slice( 0, s ) ) {\r\n\r\n                        // The exponent of r may here be one less than the final result exponent,\r\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n                        // are indexed correctly.\r\n                        if ( r.e < e ) --s;\r\n                        n = n.slice( s - 3, s + 1 );\r\n\r\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n                        // iteration.\r\n                        if ( n == '9999' || !rep && n == '4999' ) {\r\n\r\n                            // On the first iteration only, check to see if rounding up gives the\r\n                            // exact result as the nines may infinitely repeat.\r\n                            if ( !rep ) {\r\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\r\n\r\n                                if ( t.times(t).eq(x) ) {\r\n                                    r = t;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            dp += 4;\r\n                            s += 4;\r\n                            rep = 1;\r\n                        } else {\r\n\r\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n                            // result. If not, then there are further digits and m will be truthy.\r\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\r\n\r\n                                // Truncate to the first rounding digit.\r\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\r\n                                m = !r.times(r).eq(x);\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\r\n        };\r\n\r\n\r\n        /*\r\n         *  n * 0 = 0\r\n         *  n * N = N\r\n         *  n * I = I\r\n         *  0 * n = 0\r\n         *  0 * 0 = 0\r\n         *  0 * N = N\r\n         *  0 * I = N\r\n         *  N * n = N\r\n         *  N * 0 = N\r\n         *  N * N = N\r\n         *  N * I = N\r\n         *  I * n = I\r\n         *  I * 0 = N\r\n         *  I * N = N\r\n         *  I * I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.times = P.mul = function ( y, b ) {\r\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n                base, sqrtBase,\r\n                x = this,\r\n                xc = x.c,\r\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\r\n\r\n            // Either NaN, ±Infinity or ±0?\r\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {\r\n\r\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\r\n                    y.c = y.e = y.s = null;\r\n                } else {\r\n                    y.s *= x.s;\r\n\r\n                    // Return ±Infinity if either is ±Infinity.\r\n                    if ( !xc || !yc ) {\r\n                        y.c = y.e = null;\r\n\r\n                    // Return ±0 if either is ±0.\r\n                    } else {\r\n                        y.c = [0];\r\n                        y.e = 0;\r\n                    }\r\n                }\r\n\r\n                return y;\r\n            }\r\n\r\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\r\n            y.s *= x.s;\r\n            xcL = xc.length;\r\n            ycL = yc.length;\r\n\r\n            // Ensure xc points to longer array and xcL to its length.\r\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n            // Initialise the result array with zeros.\r\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\r\n\r\n            base = BASE;\r\n            sqrtBase = SQRT_BASE;\r\n\r\n            for ( i = ycL; --i >= 0; ) {\r\n                c = 0;\r\n                ylo = yc[i] % sqrtBase;\r\n                yhi = yc[i] / sqrtBase | 0;\r\n\r\n                for ( k = xcL, j = i + k; j > i; ) {\r\n                    xlo = xc[--k] % sqrtBase;\r\n                    xhi = xc[k] / sqrtBase | 0;\r\n                    m = yhi * xlo + xhi * ylo;\r\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\r\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\r\n                    zc[j--] = xlo % base;\r\n                }\r\n\r\n                zc[j] = c;\r\n            }\r\n\r\n            if (c) {\r\n                ++e;\r\n            } else {\r\n                zc.shift();\r\n            }\r\n\r\n            return normalise( y, zc, e );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toDigits() precision out of range: {sd}'\r\n         * 'toDigits() precision not an integer: {sd}'\r\n         * 'toDigits() rounding mode not an integer: {rm}'\r\n         * 'toDigits() rounding mode out of range: {rm}'\r\n         */\r\n        P.toDigits = function ( sd, rm ) {\r\n            var n = new BigNumber(this);\r\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\r\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\r\n            return sd ? round( n, sd, rm ) : n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in exponential notation and\r\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toExponential() decimal places not an integer: {dp}'\r\n         * 'toExponential() decimal places out of range: {dp}'\r\n         * 'toExponential() rounding mode not an integer: {rm}'\r\n         * 'toExponential() rounding mode out of range: {rm}'\r\n         */\r\n        P.toExponential = function ( dp, rm ) {\r\n            return format( this,\r\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFixed() decimal places not an integer: {dp}'\r\n         * 'toFixed() decimal places out of range: {dp}'\r\n         * 'toFixed() rounding mode not an integer: {rm}'\r\n         * 'toFixed() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFixed = function ( dp, rm ) {\r\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\r\n              ? ~~dp + this.e + 1 : null, rm, 20 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n         * of the FORMAT object (see BigNumber.config).\r\n         *\r\n         * FORMAT = {\r\n         *      decimalSeparator : '.',\r\n         *      groupSeparator : ',',\r\n         *      groupSize : 3,\r\n         *      secondaryGroupSize : 0,\r\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n         *      fractionGroupSize : 0\r\n         * };\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFormat() decimal places not an integer: {dp}'\r\n         * 'toFormat() decimal places out of range: {dp}'\r\n         * 'toFormat() rounding mode not an integer: {rm}'\r\n         * 'toFormat() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFormat = function ( dp, rm ) {\r\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\r\n              ? ~~dp + this.e + 1 : null, rm, 21 );\r\n\r\n            if ( this.c ) {\r\n                var i,\r\n                    arr = str.split('.'),\r\n                    g1 = +FORMAT.groupSize,\r\n                    g2 = +FORMAT.secondaryGroupSize,\r\n                    groupSeparator = FORMAT.groupSeparator,\r\n                    intPart = arr[0],\r\n                    fractionPart = arr[1],\r\n                    isNeg = this.s < 0,\r\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\r\n                    len = intDigits.length;\r\n\r\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n                if ( g1 > 0 && len > 0 ) {\r\n                    i = len % g1 || g1;\r\n                    intPart = intDigits.substr( 0, i );\r\n\r\n                    for ( ; i < len; i += g1 ) {\r\n                        intPart += groupSeparator + intDigits.substr( i, g1 );\r\n                    }\r\n\r\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\r\n                    if (isNeg) intPart = '-' + intPart;\r\n                }\r\n\r\n                str = fractionPart\r\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\r\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\r\n                      '$&' + FORMAT.fractionGroupSeparator )\r\n                    : fractionPart )\r\n                  : intPart;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string array representing the value of this BigNumber as a simple fraction with\r\n         * an integer numerator and an integer denominator. The denominator will be a positive\r\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n         * denominator is not specified, the denominator will be the lowest value necessary to\r\n         * represent the number exactly.\r\n         *\r\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n         *\r\n         * 'toFraction() max denominator not an integer: {md}'\r\n         * 'toFraction() max denominator out of range: {md}'\r\n         */\r\n        P.toFraction = function (md) {\r\n            var arr, d0, d2, e, exp, n, n0, q, s,\r\n                k = ERRORS,\r\n                x = this,\r\n                xc = x.c,\r\n                d = new BigNumber(ONE),\r\n                n1 = d0 = new BigNumber(ONE),\r\n                d1 = n0 = new BigNumber(ONE);\r\n\r\n            if ( md != null ) {\r\n                ERRORS = false;\r\n                n = new BigNumber(md);\r\n                ERRORS = k;\r\n\r\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\r\n\r\n                    if (ERRORS) {\r\n                        raise( 22,\r\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\r\n                    }\r\n\r\n                    // ERRORS is false:\r\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\r\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\r\n                }\r\n            }\r\n\r\n            if ( !xc ) return x.toString();\r\n            s = coeffToString(xc);\r\n\r\n            // Determine initial denominator.\r\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n            e = d.e = s.length - x.e - 1;\r\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\r\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\r\n\r\n            exp = MAX_EXP;\r\n            MAX_EXP = 1 / 0;\r\n            n = new BigNumber(s);\r\n\r\n            // n0 = d1 = 0\r\n            n0.c[0] = 0;\r\n\r\n            for ( ; ; )  {\r\n                q = div( n, d, 0, 1 );\r\n                d2 = d0.plus( q.times(d1) );\r\n                if ( d2.cmp(md) == 1 ) break;\r\n                d0 = d1;\r\n                d1 = d2;\r\n                n1 = n0.plus( q.times( d2 = n1 ) );\r\n                n0 = d2;\r\n                d = n.minus( q.times( d2 = d ) );\r\n                n = d2;\r\n            }\r\n\r\n            d2 = div( md.minus(d0), d1, 0, 1 );\r\n            n0 = n0.plus( d2.times(n1) );\r\n            d0 = d0.plus( d2.times(d1) );\r\n            n0.s = n1.s = x.s;\r\n            e *= 2;\r\n\r\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\r\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\r\n                    ? [ n1.toString(), d1.toString() ]\r\n                    : [ n0.toString(), d0.toString() ];\r\n\r\n            MAX_EXP = exp;\r\n            return arr;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the value of this BigNumber converted to a number primitive.\r\n         */\r\n        P.toNumber = function () {\r\n            return +this;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n         * If m is present, return the result modulo m.\r\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using\r\n         * ROUNDING_MODE.\r\n         *\r\n         * The modular power operation works efficiently when x, n, and m are positive integers,\r\n         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).\r\n         *\r\n         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         * [m] {number|string|BigNumber} The modulus.\r\n         *\r\n         * 'pow() exponent not an integer: {n}'\r\n         * 'pow() exponent out of range: {n}'\r\n         *\r\n         * Performs 54 loop iterations for n of 9007199254740991.\r\n         */\r\n        P.toPower = P.pow = function ( n, m ) {\r\n            var k, y, z,\r\n                i = mathfloor( n < 0 ? -n : +n ),\r\n                x = this;\r\n\r\n            if ( m != null ) {\r\n                id = 23;\r\n                m = new BigNumber(m);\r\n            }\r\n\r\n            // Pass ±Infinity to Math.pow if exponent is out of range.\r\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\r\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\r\n                parseFloat(n) != n && !( n = NaN ) ) || n == 0 ) {\r\n                k = Math.pow( +x, n );\r\n                return new BigNumber( m ? k % m : k );\r\n            }\r\n\r\n            if (m) {\r\n                if ( n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt() ) {\r\n                    x = x.mod(m);\r\n                } else {\r\n                    z = m;\r\n\r\n                    // Nullify m so only a single mod operation is performed at the end.\r\n                    m = null;\r\n                }\r\n            } else if (POW_PRECISION) {\r\n\r\n                // Truncating each coefficient array to a length of k after each multiplication\r\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n                // i.e. there will be a minimum of 28 guard digits retained.\r\n                // (Using + 1.5 would give [9, 21] guard digits.)\r\n                k = mathceil( POW_PRECISION / LOG_BASE + 2 );\r\n            }\r\n\r\n            y = new BigNumber(ONE);\r\n\r\n            for ( ; ; ) {\r\n                if ( i % 2 ) {\r\n                    y = y.times(x);\r\n                    if ( !y.c ) break;\r\n                    if (k) {\r\n                        if ( y.c.length > k ) y.c.length = k;\r\n                    } else if (m) {\r\n                        y = y.mod(m);\r\n                    }\r\n                }\r\n\r\n                i = mathfloor( i / 2 );\r\n                if ( !i ) break;\r\n                x = x.times(x);\r\n                if (k) {\r\n                    if ( x.c && x.c.length > k ) x.c.length = k;\r\n                } else if (m) {\r\n                    x = x.mod(m);\r\n                }\r\n            }\r\n\r\n            if (m) return y;\r\n            if ( n < 0 ) y = ONE.div(y);\r\n\r\n            return z ? y.mod(z) : k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n         * necessary to represent the integer part of the value in fixed-point notation, then use\r\n         * exponential notation.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toPrecision() precision not an integer: {sd}'\r\n         * 'toPrecision() precision out of range: {sd}'\r\n         * 'toPrecision() rounding mode not an integer: {rm}'\r\n         * 'toPrecision() rounding mode out of range: {rm}'\r\n         */\r\n        P.toPrecision = function ( sd, rm ) {\r\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\r\n              ? sd | 0 : null, rm, 24 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n         * TO_EXP_NEG, return exponential notation.\r\n         *\r\n         * [b] {number} Integer, 2 to 64 inclusive.\r\n         *\r\n         * 'toString() base not an integer: {b}'\r\n         * 'toString() base out of range: {b}'\r\n         */\r\n        P.toString = function (b) {\r\n            var str,\r\n                n = this,\r\n                s = n.s,\r\n                e = n.e;\r\n\r\n            // Infinity or NaN?\r\n            if ( e === null ) {\r\n\r\n                if (s) {\r\n                    str = 'Infinity';\r\n                    if ( s < 0 ) str = '-' + str;\r\n                } else {\r\n                    str = 'NaN';\r\n                }\r\n            } else {\r\n                str = coeffToString( n.c );\r\n\r\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\r\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                      ? toExponential( str, e )\r\n                      : toFixedPoint( str, e );\r\n                } else {\r\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\r\n                }\r\n\r\n                if ( s < 0 && n.c[0] ) str = '-' + str;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n         * number.\r\n         */\r\n        P.truncated = P.trunc = function () {\r\n            return round( new BigNumber(this), this.e + 1, 1 );\r\n        };\r\n\r\n\r\n\r\n        /*\r\n         * Return as toString, but do not accept a base argument, and include the minus sign for\r\n         * negative zero.\r\n         */\r\n        P.valueOf = P.toJSON = function () {\r\n            var str,\r\n                n = this,\r\n                e = n.e;\r\n\r\n            if ( e === null ) return n.toString();\r\n\r\n            str = coeffToString( n.c );\r\n\r\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                ? toExponential( str, e )\r\n                : toFixedPoint( str, e );\r\n\r\n            return n.s < 0 ? '-' + str : str;\r\n        };\r\n\r\n\r\n        // Aliases for BigDecimal methods.\r\n        //P.add = P.plus;         // P.add included above\r\n        //P.subtract = P.minus;   // P.sub included above\r\n        //P.multiply = P.times;   // P.mul included above\r\n        //P.divide = P.div;\r\n        //P.remainder = P.mod;\r\n        //P.compareTo = P.cmp;\r\n        //P.negate = P.neg;\r\n\r\n\r\n        if ( configObj != null ) BigNumber.config(configObj);\r\n\r\n        return BigNumber;\r\n    }\r\n\r\n\r\n    // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n    function bitFloor(n) {\r\n        var i = n | 0;\r\n        return n > 0 || n === i ? i : i - 1;\r\n    }\r\n\r\n\r\n    // Return a coefficient array as a string of base 10 digits.\r\n    function coeffToString(a) {\r\n        var s, z,\r\n            i = 1,\r\n            j = a.length,\r\n            r = a[0] + '';\r\n\r\n        for ( ; i < j; ) {\r\n            s = a[i++] + '';\r\n            z = LOG_BASE - s.length;\r\n            for ( ; z--; s = '0' + s );\r\n            r += s;\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for ( j = r.length; r.charCodeAt(--j) === 48; );\r\n        return r.slice( 0, j + 1 || 1 );\r\n    }\r\n\r\n\r\n    // Compare the value of BigNumbers x and y.\r\n    function compare( x, y ) {\r\n        var a, b,\r\n            xc = x.c,\r\n            yc = y.c,\r\n            i = x.s,\r\n            j = y.s,\r\n            k = x.e,\r\n            l = y.e;\r\n\r\n        // Either NaN?\r\n        if ( !i || !j ) return null;\r\n\r\n        a = xc && !xc[0];\r\n        b = yc && !yc[0];\r\n\r\n        // Either zero?\r\n        if ( a || b ) return a ? b ? 0 : -j : i;\r\n\r\n        // Signs differ?\r\n        if ( i != j ) return i;\r\n\r\n        a = i < 0;\r\n        b = k == l;\r\n\r\n        // Either Infinity?\r\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n        // Compare exponents.\r\n        if ( !b ) return k > l ^ a ? 1 : -1;\r\n\r\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\r\n\r\n        // Compare digit by digit.\r\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n        // Compare lengths.\r\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n    }\r\n\r\n\r\n    /*\r\n     * Return true if n is a valid number in range, otherwise false.\r\n     * Use for argument validation when ERRORS is false.\r\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n     */\r\n    function intValidatorNoErrors( n, min, max ) {\r\n        return ( n = truncate(n) ) >= min && n <= max;\r\n    }\r\n\r\n\r\n    function isArray(obj) {\r\n        return Object.prototype.toString.call(obj) == '[object Array]';\r\n    }\r\n\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut( str, baseIn, baseOut ) {\r\n        var j,\r\n            arr = [0],\r\n            arrL,\r\n            i = 0,\r\n            len = str.length;\r\n\r\n        for ( ; i < len; ) {\r\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\r\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\r\n\r\n            for ( ; j < arr.length; j++ ) {\r\n\r\n                if ( arr[j] > baseOut - 1 ) {\r\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\r\n                    arr[j + 1] += arr[j] / baseOut | 0;\r\n                    arr[j] %= baseOut;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr.reverse();\r\n    }\r\n\r\n\r\n    function toExponential( str, e ) {\r\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\r\n          ( e < 0 ? 'e' : 'e+' ) + e;\r\n    }\r\n\r\n\r\n    function toFixedPoint( str, e ) {\r\n        var len, z;\r\n\r\n        // Negative exponent?\r\n        if ( e < 0 ) {\r\n\r\n            // Prepend zeros.\r\n            for ( z = '0.'; ++e; z += '0' );\r\n            str = z + str;\r\n\r\n        // Positive exponent\r\n        } else {\r\n            len = str.length;\r\n\r\n            // Append zeros.\r\n            if ( ++e > len ) {\r\n                for ( z = '0', e -= len; --e; z += '0' );\r\n                str += z;\r\n            } else if ( e < len ) {\r\n                str = str.slice( 0, e ) + '.' + str.slice(e);\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n\r\n    function truncate(n) {\r\n        n = parseFloat(n);\r\n        return n < 0 ? mathceil(n) : mathfloor(n);\r\n    }\r\n\r\n\r\n    // EXPORT\r\n\r\n\r\n    BigNumber = constructorFactory();\r\n    BigNumber.default = BigNumber.BigNumber = BigNumber;\r\n\r\n\r\n    // AMD.\r\n    if ( typeof define == 'function' && define.amd ) {\r\n        define( function () { return BigNumber; } );\r\n\r\n    // Node.js and other environments that support module.exports.\r\n    } else if ( typeof module != 'undefined' && module.exports ) {\r\n        module.exports = BigNumber;\r\n\r\n    // Browser.\r\n    } else {\r\n        if ( !globalObj ) globalObj = typeof self != 'undefined' ? self : Function('return this')();\r\n        globalObj.BigNumber = BigNumber;\r\n    }\r\n})(this);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bignumber.js/bignumber.js\n// module id = 10\n// module chunks = 0","'use strict'\n\nexports.MT = {\n  POS_INT: 0,\n  NEG_INT: 1,\n  BYTE_STRING: 2,\n  UTF8_STRING: 3,\n  ARRAY: 4,\n  MAP: 5,\n  TAG: 6,\n  SIMPLE_FLOAT: 7\n}\n\nexports.TAG = {\n  DATE_STRING: 0,\n  DATE_EPOCH: 1,\n  POS_BIGINT: 2,\n  NEG_BIGINT: 3,\n  DECIMAL_FRAC: 4,\n  BIGFLOAT: 5,\n  BASE64URL_EXPECTED: 21,\n  BASE64_EXPECTED: 22,\n  BASE16_EXPECTED: 23,\n  CBOR: 24,\n  URI: 32,\n  BASE64URL: 33,\n  BASE64: 34,\n  REGEXP: 35,\n  MIME: 36\n}\n\nexports.NUMBYTES = {\n  ZERO: 0,\n  ONE: 24,\n  TWO: 25,\n  FOUR: 26,\n  EIGHT: 27,\n  INDEFINITE: 31\n}\n\nexports.SIMPLE = {\n  FALSE: 20,\n  TRUE: 21,\n  NULL: 22,\n  UNDEFINED: 23\n}\n\nexports.SYMS = {\n  NULL: Symbol('null'),\n  UNDEFINED: Symbol('undef'),\n  PARENT: Symbol('parent'),\n  BREAK: Symbol('break'),\n  STREAM: Symbol('stream')\n}\n\nexports.SHIFT32 = Math.pow(2, 32)\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cbor/lib/constants.js\n// module id = 11\n// module chunks = 0","'use strict'\n\nconst mh = require('multihashes')\nconst assert = require('assert')\n\n// Link represents an IPFS Merkle DAG Link between Nodes.\nclass DAGLink {\n  constructor (name, size, multihash) {\n    assert(multihash, 'A link requires a multihash to point to')\n    assert(size, 'A link requires a size')\n\n    this._name = name\n    this._size = size\n\n    if (typeof multihash === 'string') {\n      this._multihash = mh.fromB58String(multihash)\n    } else if (Buffer.isBuffer(multihash)) {\n      this._multihash = multihash\n    }\n  }\n\n  toString () {\n    const mhStr = mh.toB58String(this.multihash)\n    return `DAGLink <${mhStr} - name: \"${this.name}\", size: ${this.size}>`\n  }\n\n  toJSON () {\n    return {\n      name: this.name,\n      size: this.size,\n      multihash: mh.toB58String(this._multihash)\n    }\n  }\n\n  get name () {\n    return this._name\n  }\n\n  set name (name) {\n    throw new Error(\"Can't set property: 'name' is immutable\")\n  }\n\n  get size () {\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get multihash () {\n    return this._multihash\n  }\n\n  set multihash (multihash) {\n    throw new Error(\"Can't set property: 'multihash' is immutable\")\n  }\n}\n\nexports = module.exports = DAGLink\nexports.create = require('./create')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/src/dag-link/index.js\n// module id = 12\n// module chunks = 0","// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = new Buffer(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n  this._s = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = new Buffer(data, enc)\n  }\n\n  var l = this._len += data.length\n  var s = this._s || 0\n  var f = 0\n  var buffer = this._block\n\n  while (s < l) {\n    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))\n    var ch = (t - f)\n\n    for (var i = 0; i < ch; i++) {\n      buffer[(s % this._blockSize) + i] = data[i + f]\n    }\n\n    s += ch\n    f += ch\n\n    if ((s % this._blockSize) === 0) {\n      this._update(buffer)\n    }\n  }\n  this._s = s\n\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  // Suppose the length of the message M, in bits, is l\n  var l = this._len * 8\n\n  // Append the bit 1 to the end of the message\n  this._block[this._len % this._blockSize] = 0x80\n\n  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize\n  this._block.fill(0, this._len % this._blockSize + 1)\n\n  if (l % (this._blockSize * 8) >= this._finalSize * 8) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  // to this append the block which is equal to the number l written in binary\n  // TODO: handle case where l is > Math.pow(2, 29)\n  this._block.writeInt32BE(l, this._blockSize - 4)\n\n  var hash = this._update(this._block) || this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/sha.js/hash.js\n// module id = 13\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/util/util.js\n// module id = 14\n// module chunks = 0","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/varint/index.js\n// module id = 15\n// module chunks = 0","'use strict';\n\n// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js\n// original notice:\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nfunction isBuffer(b) {\n  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {\n    return global.Buffer.isBuffer(b);\n  }\n  return !!(b != null && b._isBuffer);\n}\n\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar util = require('util/');\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar pSlice = Array.prototype.slice;\nvar functionsHaveNames = (function () {\n  return function foo() {}.name === 'foo';\n}());\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nvar assert = module.exports = ok;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!util.isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n};\n\n// assert.AssertionError instanceof Error\nutil.inherits(assert.AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames || !util.isFunction(something)) {\n    return util.inspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nfunction fail(actual, expected, message, operator, stackStartFunction) {\n  throw new assert.AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nfunction ok(value, message) {\n  if (!value) fail(value, true, message, '==', assert.ok);\n}\nassert.ok = ok;\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\n\nassert.equal = function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', assert.equal);\n};\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\n\nassert.notEqual = function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', assert.notEqual);\n  }\n};\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\n\nassert.deepEqual = function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', assert.deepEqual);\n  }\n};\n\nassert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);\n  }\n};\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (util.isDate(actual) && util.isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (util.isPrimitive(a) || util.isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\n\nassert.notDeepEqual = function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);\n  }\n};\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nfunction notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\n\nassert.strictEqual = function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', assert.strictEqual);\n  }\n};\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\n\nassert.notStrictEqual = function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', assert.notStrictEqual);\n  }\n};\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && util.isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\n\nassert.throws = function(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n};\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n};\n\nassert.ifError = function(err) { if (err) throw err; };\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/assert/assert.js\n// module id = 16\n// module chunks = 0","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bs58/index.js\n// module id = 17\n// module chunks = 0","'use strict'\n\nconst constants = require('./constants')\nconst MT = constants.MT, SIMPLE = constants.SIMPLE, SYMS = constants.SYMS\n\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  constructor (value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + (typeof value))\n    }\n    if ((value < 0) || (value > 255) || ((value|0) !== value)) {\n      throw new Error('value must be a small positive integer: ' + value)\n    }\n    this.value = value\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  toString () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  inspect (depth, opts) {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   */\n  encodeCBOR (gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT)\n  }\n\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {bool} - is it Simple?\n   */\n  static isSimple (obj) {\n    return obj instanceof Simple\n  }\n\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {Number} val - the CBOR additional info to convert\n   * @param {bool} has_parent - Does the CBOR item have a parent?\n   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\n   */\n  static decode (val, has_parent) {\n    if (has_parent == null) {\n      has_parent = true\n    }\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false\n      case SIMPLE.TRUE:\n        return true\n      case SIMPLE.NULL:\n        if (has_parent) {\n          return null\n        } else {\n          return SYMS.NULL\n        }\n      case SIMPLE.UNDEFINED:\n        if (has_parent) {\n          return void 0\n        } else {\n          return SYMS.UNDEFINED\n        }\n      case -1:\n        if (!has_parent) {\n          throw new Error('Invalid BREAK')\n        }\n        return SYMS.BREAK\n      default:\n        return new Simple(val)\n    }\n  }\n}\n\nmodule.exports = Simple\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cbor/lib/simple.js\n// module id = 18\n// module chunks = 0","'use strict'\n\nconst fs = require('fs')\nconst stream = require('stream')\nconst bignumber = require('bignumber.js')\n\nconst constants = require('./constants')\nconst NUMBYTES = constants.NUMBYTES, SHIFT32 = constants.SHIFT32\nconst MAX_SAFE_HIGH = 0x1fffff\n\nexports.parseCBORint = function (ai, buf) {\n  var f, g\n  switch (ai) {\n    case NUMBYTES.ONE:\n      return buf.readUInt8(0, true)\n    case NUMBYTES.TWO:\n      return buf.readUInt16BE(0, true)\n    case NUMBYTES.FOUR:\n      return buf.readUInt32BE(0, true)\n    case NUMBYTES.EIGHT:\n      f = buf.readUInt32BE(0)\n      g = buf.readUInt32BE(4)\n      if (f > MAX_SAFE_HIGH) {\n        return new bignumber(f).times(SHIFT32).plus(g)\n      } else {\n        return (f * SHIFT32) + g\n      }\n    default:\n      throw new Error('Invalid additional info for int: ' + ai)\n  }\n}\n\nexports.writeHalf = function writeHalf (buf, half) {\n  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n\n  const u32 = new Buffer(4)\n  u32.writeFloatBE(half)\n  const u = u32.readUInt32BE()\n\n  // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n\n  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion\n  if ((u & 0x1FFF) !== 0) {\n    return false\n  }\n\n  //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n  let s16 = (u >> 16) & 0x8000 // top bit is sign\n  const exp = (u >> 23) & 0xff // then 5 bits of exponent\n  const mant = u & 0x7fffff\n\n  //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n\n  // hildjj: zeros already handled.  Assert if you don't believe me.\n\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n\n  if ((exp >= 113) && (exp <= 142)) {\n    s16 += ((exp - 112) << 10) + (mant >> 13)\n  }\n\n  //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n  //     if (mant & ((1 << (126 - exp)) - 1))\n  //       goto float32;         /* loss of precision */\n  //     s16 += ((mant + 0x800000) >> (126 - exp));\n\n  else if ((exp >= 103) && (exp < 113)) {\n    if (mant & ((1 << (126 - exp)) - 1)) {\n      return false\n    }\n    s16 += ((mant + 0x800000) >> (126 - exp))\n  }\n\n  //   } else if (exp == 255 && mant == 0) { /* Inf */\n  //     s16 += 0x7c00;\n\n  // hildjj: Infinity already handled\n\n  //   } else\n  //     goto float32;           /* loss of range */\n\n  else {\n    return false\n  }\n\n  //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n  buf.writeUInt16BE(s16)\n  return true\n}\n\nexports.parseHalf = function parseHalf (buf) {\n  var exp, mant, sign\n  sign = buf[0] & 0x80 ? -1 : 1\n  exp = (buf[0] & 0x7C) >> 2\n  mant = ((buf[0] & 0x03) << 8) | buf[1]\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant\n  } else if (exp === 0x1f) {\n    return sign * (mant ? 0 / 0 : 2e308)\n  } else {\n    return sign * Math.pow(2, exp - 25) * (1024 + mant)\n  }\n}\n\nexports.parseCBORfloat = function (buf) {\n  switch (buf.length) {\n    case 2:\n      return exports.parseHalf(buf)\n    case 4:\n      return buf.readFloatBE(0, true)\n    case 8:\n      return buf.readDoubleBE(0, true)\n    default:\n      throw new Error('Invalid float size: ' + buf.length)\n  }\n}\n\nexports.hex = function (s) {\n  return new Buffer(s.replace(/^0x/, ''), 'hex')\n}\n\nexports.bin = function (s) {\n  var chunks, end, start\n  s = s.replace(/\\s/g, '')\n  start = 0\n  end = (s.length % 8) || 8\n  chunks = []\n  while (end <= s.length) {\n    chunks.push(parseInt(s.slice(start, end), 2))\n    start = end\n    end += 8\n  }\n  return new Buffer(chunks)\n}\n\nexports.extend = function () {\n  var a, adds, j, k, len, old, v\n  old = arguments[0], adds = 2 <= arguments.length ? Array.prototype.slice.call(arguments, 1) : []\n  if (old == null) {\n    old = {}\n  }\n  for (j = 0, len = adds.length; j < len; j++) {\n    a = adds[j]\n    for (k in a) {\n      v = a[k]\n      old[k] = v\n    }\n  }\n  return old\n}\n\nexports.arrayEqual = function (a, b) {\n  if ((a == null) && (b == null)) {\n    return true\n  }\n  if ((a == null) || (b == null)) {\n    return false\n  }\n  return (a.length === b.length) && a.every(function (elem, i) {\n      return elem === b[i]\n    })\n}\n\nexports.bufferEqual = function (a, b) {\n  var byte, i, j, len, ret\n  if ((a == null) && (b == null)) {\n    return true\n  }\n  if ((a == null) || (b == null)) {\n    return false\n  }\n  if (!(Buffer.isBuffer(a) && Buffer.isBuffer(b) && (a.length === b.length))) {\n    return false\n  }\n  ret = true\n  for (i = j = 0, len = a.length; j < len; i = ++j) {\n    byte = a[i]\n    ret &= b[i] === byte\n  }\n  return !!ret\n}\n\nexports.bufferToBignumber = function (buf) {\n  return new bignumber(buf.toString('hex'), 16)\n}\n\nexports.DeHexStream = class DeHexStream extends stream.Readable {\n  constructor (hex) {\n    super()\n    hex = hex.replace(/^0x/, '')\n    if (hex) {\n      this.push(new Buffer(hex, 'hex'))\n    }\n    this.push(null)\n  }\n}\n\nexports.HexStream = class HexStream extends stream.Transform {\n  constructor (options) {\n    super(options)\n  }\n\n  _transform (fresh, encoding, cb) {\n    this.push(fresh.toString('hex'))\n    return cb()\n  }\n}\n\nfunction printError (er) {\n  if (er != null) {\n    return console.log(er)\n  }\n}\n\nexports.streamFiles = function (files, streamFunc, cb) {\n  if (cb == null) {\n    cb = printError\n  }\n  const f = files.shift()\n  if (!f) {\n    return cb()\n  }\n  const sf = streamFunc()\n  sf.on('end', function () {\n    return exports.streamFiles(files, streamFunc, cb)\n  })\n  sf.on('error', cb)\n  const s = (f === '-') ? process.stdin : (f instanceof stream.Stream) ? f : fs.createReadStream(f)\n  s.on('error', cb)\n  return s.pipe(sf)\n}\n\nexports.guessEncoding = function (input) {\n  switch (false) {\n    case typeof input !== 'string':\n      return 'hex'\n    case !Buffer.isBuffer(input):\n      return undefined\n    default:\n      throw new Error('Unknown input type')\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cbor/lib/utils.js\n// module id = 19\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-util-is/lib/util.js\n// module id = 20\n// module chunks = 0","/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/noop.js\n// module id = 21\n// module chunks = 0","'use strict'\n\nconst bs58 = require('bs58')\n\nconst cs = require('./constants')\n\nexports.toHexString = function toHexString (m) {\n  if (!Buffer.isBuffer(m)) {\n    throw new Error('must be passed a buffer')\n  }\n\n  return m.toString('hex')\n}\n\nexports.fromHexString = function fromHexString (s) {\n  return new Buffer(s, 'hex')\n}\n\nexports.toB58String = function toB58String (m) {\n  if (!Buffer.isBuffer(m)) {\n    throw new Error('must be passed a buffer')\n  }\n\n  return bs58.encode(m)\n}\n\nexports.fromB58String = function fromB58String (s) {\n  let encoded = s\n  if (Buffer.isBuffer(s)) {\n    encoded = s.toString()\n  }\n\n  return new Buffer(bs58.decode(encoded))\n}\n\n// Decode a hash from the given Multihash.\nexports.decode = function decode (buf) {\n  exports.validate(buf)\n\n  const code = buf[0]\n\n  return {\n    code: code,\n    name: cs.codes[code],\n    length: buf[1],\n    digest: buf.slice(2)\n  }\n}\n\n// Encode a hash digest along with the specified function code.\n// Note: the length is derived from the length of the digest itself.\nexports.encode = function encode (digest, code, length) {\n  if (!digest || !code) {\n    throw new Error('multihash encode requires at least two args: digest, code')\n  }\n\n  // ensure it's a hashfunction code.\n  const hashfn = exports.coerceCode(code)\n\n  if (!(Buffer.isBuffer(digest))) {\n    throw new Error('digest should be a Buffer')\n  }\n\n  if (length == null) {\n    length = digest.length\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.')\n  }\n\n  if (length > 127) {\n    throw new Error('multihash does not yet support digest lengths greater than 127 bytes.')\n  }\n\n  return Buffer.concat([new Buffer([hashfn, length]), digest])\n}\n\n// Converts a hashfn name into the matching code\nexports.coerceCode = function coerceCode (name) {\n  let code = name\n\n  if (typeof name === 'string') {\n    if (!cs.names[name]) {\n      throw new Error(`Unrecognized hash function named: ${name}`)\n    }\n    code = cs.names[name]\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\n  }\n\n  if (!cs.codes[code] && !exports.isAppCode(code)) {\n    throw new Error(`Unrecognized function code: ${code}`)\n  }\n\n  return code\n}\n\n// Checks wether a code is part of the app range\nexports.isAppCode = function appCode (code) {\n  return code > 0 && code < 0x10\n}\n\n// Checks whether a multihash code is valid.\nexports.isValidCode = function validCode (code) {\n  if (exports.isAppCode(code)) {\n    return true\n  }\n\n  if (cs.codes[code]) {\n    return true\n  }\n\n  return false\n}\n\nexports.validate = function validate (multihash) {\n  if (!(Buffer.isBuffer(multihash))) {\n    throw new Error('multihash must be a Buffer')\n  }\n\n  if (multihash.length < 3) {\n    throw new Error('multihash too short. must be > 3 bytes.')\n  }\n\n  if (multihash.length > 129) {\n    throw new Error('multihash too long. must be < 129 bytes.')\n  }\n\n  let code = multihash[0]\n\n  if (!exports.isValidCode(code)) {\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\n  }\n\n  if (multihash.slice(2).length !== multihash[1]) {\n    throw new Error(`multihash length inconsistent: 0x${multihash.toString('hex')}`)\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multihashes/src/index.js\n// module id = 22\n// module chunks = 0","// Generated by CoffeeScript 1.10.0\n(function() {\n  var NoFilter, stream, util,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  stream = require('stream');\n\n  util = require('util');\n\n  module.exports = NoFilter = (function(superClass) {\n    var _read_gen, _write_gen, get;\n\n    extend(NoFilter, superClass);\n\n    function NoFilter(input, inputEncoding, options) {\n      var inp, inpE, ref, watchPipe;\n      if (options == null) {\n        options = {};\n      }\n      inp = void 0;\n      inpE = void 0;\n      switch (typeof input) {\n        case 'object':\n          if (Buffer.isBuffer(input)) {\n            inp = input;\n            if ((inputEncoding != null) && (typeof inputEncoding === 'object')) {\n              options = inputEncoding;\n            }\n          } else {\n            options = input;\n          }\n          break;\n        case 'string':\n          inp = input;\n          if ((inputEncoding != null) && (typeof inputEncoding === 'object')) {\n            options = inputEncoding;\n          } else {\n            inpE = inputEncoding;\n          }\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (inp == null) {\n        inp = options.input;\n      }\n      if (inpE == null) {\n        inpE = options.inputEncoding;\n      }\n      delete options.input;\n      delete options.inputEncoding;\n      watchPipe = (ref = options.watchPipe) != null ? ref : true;\n      delete options.watchPipe;\n      NoFilter.__super__.constructor.call(this, options);\n      if (watchPipe) {\n        this.on('pipe', (function(_this) {\n          return function(readable) {\n            var om;\n            om = readable._readableState.objectMode;\n            if ((_this.length > 0) && (om !== _this._readableState.objectMode)) {\n              throw new Error('Do not switch objectMode in the middle of the stream');\n            }\n            _this._readableState.objectMode = om;\n            return _this._writableState.objectMode = om;\n          };\n        })(this));\n      }\n      if (inp != null) {\n        this.end(inp, inpE);\n      }\n    }\n\n    NoFilter.isNoFilter = function(obj) {\n      return obj instanceof this;\n    };\n\n    NoFilter.compare = function(nf1, nf2) {\n      if (!(nf1 instanceof this)) {\n        throw new TypeError('Arguments must be NoFilters');\n      }\n      if (nf1 === nf2) {\n        return 0;\n      } else {\n        return nf1.compare(nf2);\n      }\n    };\n\n    NoFilter.concat = function(list, length) {\n      var bufs;\n      if (!Array.isArray(list)) {\n        throw new TypeError('list argument must be an Array of NoFilters');\n      }\n      if ((list.length === 0) || (length === 0)) {\n        return new Buffer(0);\n      }\n      if (length == null) {\n        length = list.reduce(function(tot, nf) {\n          if (!(nf instanceof NoFilter)) {\n            throw new TypeError('list argument must be an Array of NoFilters');\n          }\n          return tot + nf.length;\n        }, 0);\n      }\n      bufs = list.map(function(nf) {\n        if (!(nf instanceof NoFilter)) {\n          throw new TypeError('list argument must be an Array of NoFilters');\n        }\n        if (nf._readableState.objectMode) {\n          throw new Error('NoFilter may not be in object mode for concat');\n        }\n        return nf.slice();\n      });\n      return Buffer.concat(bufs, length);\n    };\n\n    NoFilter.prototype._transform = function(chunk, encoding, callback) {\n      if (!this._readableState.objectMode && !Buffer.isBuffer(chunk)) {\n        chunk = new Buffer(chunk, encoding);\n      }\n      this.push(chunk);\n      return callback();\n    };\n\n    NoFilter.prototype._bufArray = function() {\n      var b, bufs;\n      bufs = this._readableState.buffer;\n      if (!Array.isArray(bufs)) {\n        b = bufs.head;\n        bufs = [];\n        while (b != null) {\n          bufs.push(b.data);\n          b = b.next;\n        }\n      }\n      return bufs;\n    };\n\n    NoFilter.prototype.read = function(size) {\n      var buf;\n      buf = NoFilter.__super__.read.call(this, size);\n      if (buf != null) {\n        this.emit('read', buf);\n      }\n      return buf;\n    };\n\n    NoFilter.prototype.promise = function(cb) {\n      var done;\n      done = false;\n      return new Promise((function(_this) {\n        return function(resolve, reject) {\n          _this.on('finish', function() {\n            var data;\n            data = _this.read();\n            if ((cb != null) && !done) {\n              done = true;\n              cb(null, data);\n            }\n            return resolve(data);\n          });\n          return _this.on('error', function(er) {\n            if ((cb != null) && !done) {\n              done = true;\n              cb(er);\n            }\n            return reject(er);\n          });\n        };\n      })(this));\n    };\n\n    NoFilter.prototype.compare = function(other) {\n      if (!(other instanceof NoFilter)) {\n        throw new TypeError('Arguments must be NoFilters');\n      }\n      if (this._readableState.objectMode || other._readableState.objectMode) {\n        throw new Error('Must not be in object mode to compare');\n      }\n      if (this === other) {\n        return 0;\n      } else {\n        return this.slice().compare(other.slice());\n      }\n    };\n\n    NoFilter.prototype.equals = function(other) {\n      return this.compare(other) === 0;\n    };\n\n    NoFilter.prototype.slice = function(start, end) {\n      var b, bufs;\n      if (this._readableState.objectMode) {\n        return this._bufArray().slice(start, end);\n      } else {\n        bufs = this._bufArray();\n        switch (bufs.length) {\n          case 0:\n            return new Buffer(0);\n          case 1:\n            return bufs[0].slice(start, end);\n          default:\n            b = Buffer.concat(bufs);\n            return b.slice(start, end);\n        }\n      }\n    };\n\n    NoFilter.prototype.get = function(index) {\n      return this.slice()[index];\n    };\n\n    NoFilter.prototype.toJSON = function() {\n      var b;\n      b = this.slice();\n      if (Buffer.isBuffer(b)) {\n        return b.toJSON();\n      } else {\n        return b;\n      }\n    };\n\n    NoFilter.prototype.toString = function(encoding, start, end) {\n      return this.slice().toString(encoding, start, end);\n    };\n\n    NoFilter.prototype.inspect = function(depth, options) {\n      var bufs, hex;\n      bufs = this._bufArray();\n      hex = bufs.map(function(b) {\n        if (Buffer.isBuffer(b)) {\n          if (options != null ? options.stylize : void 0) {\n            return options.stylize(b.toString('hex'), 'string');\n          } else {\n            return b.toString('hex');\n          }\n        } else {\n          return util.inspect(b, options);\n        }\n      }).join(', ');\n      return this.constructor.name + \" [\" + hex + \"]\";\n    };\n\n    _read_gen = function(meth, len) {\n      return function(val) {\n        var b;\n        b = this.read(len);\n        if (!Buffer.isBuffer(b)) {\n          return null;\n        }\n        return b[meth].call(b, 0, true);\n      };\n    };\n\n    _write_gen = function(meth, len) {\n      return function(val) {\n        var b;\n        b = new Buffer(len);\n        b[meth].call(b, val, 0, true);\n        return this.push(b);\n      };\n    };\n\n    NoFilter.prototype.writeUInt8 = _write_gen('writeUInt8', 1);\n\n    NoFilter.prototype.writeUInt16LE = _write_gen('writeUInt16LE', 2);\n\n    NoFilter.prototype.writeUInt16BE = _write_gen('writeUInt16BE', 2);\n\n    NoFilter.prototype.writeUInt32LE = _write_gen('writeUInt32LE', 4);\n\n    NoFilter.prototype.writeUInt32BE = _write_gen('writeUInt32BE', 4);\n\n    NoFilter.prototype.writeInt8 = _write_gen('writeInt8', 1);\n\n    NoFilter.prototype.writeInt16LE = _write_gen('writeInt16LE', 2);\n\n    NoFilter.prototype.writeInt16BE = _write_gen('writeInt16BE', 2);\n\n    NoFilter.prototype.writeInt32LE = _write_gen('writeInt32LE', 4);\n\n    NoFilter.prototype.writeInt32BE = _write_gen('writeInt32BE', 4);\n\n    NoFilter.prototype.writeFloatLE = _write_gen('writeFloatLE', 4);\n\n    NoFilter.prototype.writeFloatBE = _write_gen('writeFloatBE', 4);\n\n    NoFilter.prototype.writeDoubleLE = _write_gen('writeDoubleLE', 8);\n\n    NoFilter.prototype.writeDoubleBE = _write_gen('writeDoubleBE', 8);\n\n    NoFilter.prototype.readUInt8 = _read_gen('readUInt8', 1);\n\n    NoFilter.prototype.readUInt16LE = _read_gen('readUInt16LE', 2);\n\n    NoFilter.prototype.readUInt16BE = _read_gen('readUInt16BE', 2);\n\n    NoFilter.prototype.readUInt32LE = _read_gen('readUInt32LE', 4);\n\n    NoFilter.prototype.readUInt32BE = _read_gen('readUInt32BE', 4);\n\n    NoFilter.prototype.readInt8 = _read_gen('readInt8', 1);\n\n    NoFilter.prototype.readInt16LE = _read_gen('readInt16LE', 2);\n\n    NoFilter.prototype.readInt16BE = _read_gen('readInt16BE', 2);\n\n    NoFilter.prototype.readInt32LE = _read_gen('readInt32LE', 4);\n\n    NoFilter.prototype.readInt32BE = _read_gen('readInt32BE', 4);\n\n    NoFilter.prototype.readFloatLE = _read_gen('readFloatLE', 4);\n\n    NoFilter.prototype.readFloatBE = _read_gen('readFloatBE', 4);\n\n    NoFilter.prototype.readDoubleLE = _read_gen('readDoubleLE', 8);\n\n    NoFilter.prototype.readDoubleBE = _read_gen('readDoubleBE', 8);\n\n    get = function(props) {\n      var getter, name, results;\n      results = [];\n      for (name in props) {\n        getter = props[name];\n        results.push(NoFilter.prototype.__defineGetter__(name, getter));\n      }\n      return results;\n    };\n\n    get({\n      length: function() {\n        return this._readableState.length;\n      }\n    });\n\n    return NoFilter;\n\n  })(stream.Transform);\n\n}).call(this);\n\n//# sourceMappingURL=index.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/nofilter/lib/index.js\n// module id = 23\n// module chunks = 0","'use strict'\n\nmodule.exports = function drain (op, done) {\n  var read, abort\n\n  function sink (_read) {\n    read = _read\n    if(abort) return sink.abort()\n    //this function is much simpler to write if you\n    //just use recursion, but by using a while loop\n    //we do not blow the stack if the stream happens to be sync.\n    ;(function next() {\n        var loop = true, cbed = false\n        while(loop) {\n          cbed = false\n          read(null, function (end, data) {\n            cbed = true\n            if(end = end || abort) {\n              loop = false\n              if(done) done(end === true ? null : end)\n              else if(end && end !== true)\n                throw end\n            }\n            else if(op && false === op(data) || abort) {\n              loop = false\n              read(abort || true, done || function () {})\n            }\n            else if(!loop){\n              next()\n            }\n          })\n          if(!cbed) {\n            loop = false\n            return\n          }\n        }\n      })()\n  }\n\n  sink.abort = function (err, cb) {\n    if('function' == typeof err)\n      cb = err, err = true\n    abort = err || true\n    if(read) return read(abort, cb || function () {})\n  }\n\n  return sink\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sinks/drain.js\n// module id = 24\n// module chunks = 0","module.exports = function prop (key) {\n  return key && (\n    'string' == typeof key\n    ? function (data) { return data[key] }\n    : 'object' === typeof key && 'function' === typeof key.exec //regexp\n    ? function (data) { var v = key.exec(data); return v && v[0] }\n    : key\n  )\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/util/prop.js\n// module id = 25\n// module chunks = 0","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/timers-browserify/main.js\n// module id = 26\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = onlyOnce;\nfunction onlyOnce(fn) {\n    return function () {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\nmodule.exports = exports[\"default\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/internal/onlyOnce.js\n// module id = 27\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = rest;\n\nvar _overRest2 = require('lodash/_overRest');\n\nvar _overRest3 = _interopRequireDefault(_overRest2);\n\nvar _identity = require('lodash/identity');\n\nvar _identity2 = _interopRequireDefault(_identity);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Lodash rest function without function.toString()\n// remappings\nfunction rest(func, start) {\n    return (0, _overRest3.default)(func, start, _identity2.default);\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/internal/rest.js\n// module id = 28\n// module chunks = 0","'use strict';\n\nvar curve = exports;\n\ncurve.base = require('./base');\ncurve.short = require('./short');\ncurve.mont = require('./mont');\ncurve.edwards = require('./edwards');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/curve/index.js\n// module id = 29\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/events/events.js\n// module id = 30\n// module chunks = 0","'use strict'\n\nconst multihashing = require('multihashing-async')\nconst sort = require('stable')\nconst dagPBUtil = require('../util.js')\nconst serialize = dagPBUtil.serialize\nconst dagNodeUtil = require('./util.js')\nconst linkSort = dagNodeUtil.linkSort\nconst DAGNode = require('./index.js')\nconst DAGLink = require('./../dag-link')\n\nfunction create (data, dagLinks, hashAlg, callback) {\n  if (typeof data === 'function') {\n    callback = data\n    data = undefined\n  }\n  if (typeof dagLinks === 'function') {\n    callback = dagLinks\n    dagLinks = []\n  }\n  if (typeof hashAlg === 'function') {\n    callback = hashAlg\n    hashAlg = undefined\n  }\n\n  if (!hashAlg) {\n    hashAlg = 'sha2-256'\n  }\n\n  const links = dagLinks.map((l) => {\n    if (l.constructor && l.constructor.name === 'DAGLink') {\n      return l\n    }\n\n    return new DAGLink(\n      l.name ? l.name : l.Name,\n      l.size ? l.size : l.Size,\n      l.hash || l.Hash || l.multihash\n    )\n  })\n  const sortedLinks = sort(links, linkSort)\n\n  serialize({\n    data: data,\n    links: sortedLinks\n  }, (err, serialized) => {\n    if (err) {\n      return callback(err)\n    }\n    multihashing(serialized, hashAlg, (err, multihash) => {\n      if (err) {\n        return callback(err)\n      }\n      const dagNode = new DAGNode(data, sortedLinks, serialized, multihash)\n      callback(null, dagNode)\n    })\n  })\n}\n\nmodule.exports = create\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/src/dag-node/create.js\n// module id = 31\n// module chunks = 0","'use strict'\n\nconst DAGLink = require('./../dag-link')\n\nexports = module.exports\n\nfunction cloneData (dagNode) {\n  let data\n\n  if (dagNode.data && dagNode.data.length > 0) {\n    data = new Buffer(dagNode.data.length)\n    dagNode.data.copy(data)\n  } else {\n    data = new Buffer(0)\n  }\n\n  return data\n}\n\nfunction cloneLinks (dagNode) {\n  return dagNode.links.slice()\n}\n\nfunction linkSort (a, b) {\n  const aBuf = new Buffer(a.name || '', 'ascii')\n  const bBuf = new Buffer(b.name || '', 'ascii')\n\n  return aBuf.compare(bBuf)\n}\n\n/*\n * toDAGLink converts a DAGNode to a DAGLink\n */\nfunction toDAGLink (node) {\n  return new DAGLink('', node.size, node.multihash)\n}\n\nexports.cloneData = cloneData\nexports.cloneLinks = cloneLinks\nexports.linkSort = linkSort\nexports.toDAGLink = toDAGLink\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/src/dag-node/util.js\n// module id = 32\n// module chunks = 0","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isArrayLike.js\n// module id = 33\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.l; }\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.i; }\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 34\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = once;\nfunction once(fn) {\n    return function () {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\nmodule.exports = exports[\"default\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/internal/once.js\n// module id = 35\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _parallel;\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _isArrayLike = require('lodash/isArrayLike');\n\nvar _isArrayLike2 = _interopRequireDefault(_isArrayLike);\n\nvar _rest = require('./rest');\n\nvar _rest2 = _interopRequireDefault(_rest);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _parallel(eachfn, tasks, callback) {\n    callback = callback || _noop2.default;\n    var results = (0, _isArrayLike2.default)(tasks) ? [] : {};\n\n    eachfn(tasks, function (task, key, callback) {\n        task((0, _rest2.default)(function (err, args) {\n            if (args.length <= 1) {\n                args = args[0];\n            }\n            results[key] = args;\n            callback(err);\n        }));\n    }, function (err) {\n        callback(err, results);\n    });\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/internal/parallel.js\n// module id = 36\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = series;\n\nvar _parallel = require('./internal/parallel');\n\nvar _parallel2 = _interopRequireDefault(_parallel);\n\nvar _eachOfSeries = require('./eachOfSeries');\n\nvar _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to run, each\n * function is passed a `callback(err, result)` it must call on completion with\n * an error `err` (which can be `null`) and an optional `result` value.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n  (0, _parallel2.default)(_eachOfSeries2.default, tasks, callback);\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/series.js\n// module id = 37\n// module chunks = 0","'use strict';\n\nvar buffer = require('buffer');\nvar Buffer = buffer.Buffer;\nvar SlowBuffer = buffer.SlowBuffer;\nvar MAX_LEN = buffer.kMaxLength || 2147483647;\nexports.alloc = function alloc(size, fill, encoding) {\n  if (typeof Buffer.alloc === 'function') {\n    return Buffer.alloc(size, fill, encoding);\n  }\n  if (typeof encoding === 'number') {\n    throw new TypeError('encoding must not be number');\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size > MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  var enc = encoding;\n  var _fill = fill;\n  if (_fill === undefined) {\n    enc = undefined;\n    _fill = 0;\n  }\n  var buf = new Buffer(size);\n  if (typeof _fill === 'string') {\n    var fillBuf = new Buffer(_fill, enc);\n    var flen = fillBuf.length;\n    var i = -1;\n    while (++i < size) {\n      buf[i] = fillBuf[i % flen];\n    }\n  } else {\n    buf.fill(_fill);\n  }\n  return buf;\n}\nexports.allocUnsafe = function allocUnsafe(size) {\n  if (typeof Buffer.allocUnsafe === 'function') {\n    return Buffer.allocUnsafe(size);\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size > MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  return new Buffer(size);\n}\nexports.from = function from(value, encodingOrOffset, length) {\n  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {\n    return Buffer.from(value, encodingOrOffset, length);\n  }\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n  if (typeof value === 'string') {\n    return new Buffer(value, encodingOrOffset);\n  }\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    var offset = encodingOrOffset;\n    if (arguments.length === 1) {\n      return new Buffer(value);\n    }\n    if (typeof offset === 'undefined') {\n      offset = 0;\n    }\n    var len = length;\n    if (typeof len === 'undefined') {\n      len = value.byteLength - offset;\n    }\n    if (offset >= value.byteLength) {\n      throw new RangeError('\\'offset\\' is out of bounds');\n    }\n    if (len > value.byteLength - offset) {\n      throw new RangeError('\\'length\\' is out of bounds');\n    }\n    return new Buffer(value.slice(offset, offset + len));\n  }\n  if (Buffer.isBuffer(value)) {\n    var out = new Buffer(value.length);\n    value.copy(out, 0, 0, value.length);\n    return out;\n  }\n  if (value) {\n    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {\n      return new Buffer(value);\n    }\n    if (value.type === 'Buffer' && Array.isArray(value.data)) {\n      return new Buffer(value.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');\n}\nexports.allocUnsafeSlow = function allocUnsafeSlow(size) {\n  if (typeof Buffer.allocUnsafeSlow === 'function') {\n    return Buffer.allocUnsafeSlow(size);\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size >= MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  return new SlowBuffer(size);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/buffer-shims/index.js\n// module id = 38\n// module chunks = 0","'use strict'\n\nconst BinaryParseStream = require('../vendor/binary-parse-stream')\nconst Tagged = require('./tagged')\nconst Simple = require('./simple')\nconst utils = require('./utils')\nconst bignumber = require('bignumber.js')\nconst NoFilter = require('nofilter')\nconst constants = require('./constants')\nconst MT = constants.MT, NUMBYTES = constants.NUMBYTES, SIMPLE = constants.SIMPLE, SYMS = constants.SYMS\n\nconst NEG_ONE = new bignumber(-1)\nconst NEG_MAX = NEG_ONE.sub(new bignumber(Number.MAX_SAFE_INTEGER.toString(16), 16))\nconst COUNT = Symbol('count')\nconst PENDING_KEY = Symbol('pending_key')\nconst MAJOR = Symbol('major type')\nconst ERROR = Symbol('error')\nconst NOT_FOUND = Symbol('not found')\n\nfunction parentArray (parent, typ, count) {\n  const a = []\n  a[COUNT] = count\n  a[SYMS.PARENT] = parent\n  a[MAJOR] = typ\n  return a\n}\n\nfunction parentBufferStream (parent, typ) {\n  const b = new NoFilter\n  b[SYMS.PARENT] = parent\n  b[MAJOR] = typ\n  return b\n}\n\n\n/**\n * Decode a stream of CBOR bytes by transforming them into equivalent\n * JavaScript data.  Because of the limitations of Node object streams,\n * special symbols are emitted instead of NULL or UNDEFINED.  Fix those\n * up by calling {@link Decoder.nullcheck}.\n *\n * @extends {BinaryParseStream}\n */\nclass Decoder extends BinaryParseStream {\n\n  /**\n   * Create a parsing stream.\n   *\n   * @param {object} [options={}]\n   * @param {number} [options.max_depth=-1] - the maximum depth to parse.  Use -1 for\n   *   \"until you run out of memory\".  Set this to a finite positive number for\n   *   un-trusted inputs.  Most standard inputs won't nest more than\n   *   100 or so levels; I've tested into the millions before running out of\n   *   memory.\n   * @param {object=} options.tags - mapping from tag number to function(v),\n   *   where v is the decoded value that comes after the tag, and where the\n   *   function returns the correctly-created value for that tag.\n   */\n  constructor (options) {\n    options = options || {}\n    const tags = options.tags\n    delete options.tags\n    const max_depth = (options.max_depth != null) ? options.max_depth : -1\n    delete options.max_depth\n    super(options)\n\n    this.running = true\n    this.max_depth = max_depth\n    this.tags = tags\n  }\n\n  /**\n   * Check the given value for a symbol encoding a NULL or UNDEFINED value in\n   * the CBOR stream.\n   *\n   * @static\n   * @param {any} val - the value to check\n   * @returns {any} the corrected value\n   *\n   * @example\n   * myDecoder.on('data', function(val) {\n   *   val = Decoder.nullcheck(val);\n   *   ...\n   * });\n   */\n  static nullcheck (val) {\n    switch (val) {\n      case SYMS.NULL:\n        return null\n      case SYMS.UNDEFINED:\n        return undefined\n      case NOT_FOUND:\n        throw new Error('Value not found')\n      default:\n        return val\n    }\n  }\n\n  /**\n   * Decode the first CBOR item in the input, synchronously.  This will throw an\n   * exception if the input is not valid CBOR.\n   *\n   * @static\n   * @param {(string|Buffer)} input\n   * @param {object} [options={encoding: 'hex'}]\n   * @param {string} [options.encoding: 'hex'] - The encoding of the input.\n   *   Ignored if input is a Buffer.\n   * @returns {any} - the decoded value\n   */\n  static decodeFirstSync (input, options) {\n    options = options || { encoding: 'hex' }\n    let opts = {}\n    let encod\n    switch (typeof options) {\n      case 'string':\n        encod = options\n        break\n      case 'object':\n        opts = utils.extend({}, options)\n        encod = opts.encoding\n        delete opts.encoding\n        break\n    }\n    const c = new Decoder(opts)\n    const s = new NoFilter(input, encod != null ? encod : utils.guessEncoding(input))\n    const parser = c._parse()\n    let state = parser.next()\n    while (!state.done) {\n      const b = s.read(state.value)\n      if ((b == null) || (b.length !== state.value)) {\n        throw new Error('Insufficient data')\n      }\n      state = parser.next(b)\n    }\n    return Decoder.nullcheck(state.value)\n  }\n\n  /**\n   * Decode all of the CBOR items in the input into an array.  This will throw\n   * an exception if the input is not valid CBOR; a zero-length input will\n   * return an empty array.\n   *\n   * @static\n   * @param {(string|Buffer)} input\n   * @param {(string|Object)} [options={encoding: 'hex'}]\n   * @param {string} [options.encoding: 'hex'] - The encoding of the input.\n   *   Ignored if input is a Buffer.\n   * @returns {Array} - Array of all found items\n   */\n  static decodeAllSync (input, options) {\n    options = options || { encoding: 'hex' }\n    let opts = {}\n    let encod\n    switch (typeof options) {\n      case 'string':\n        encod = options\n        break\n      case 'object':\n        opts = utils.extend({}, options)\n        encod = opts.encoding\n        delete opts.encoding\n    }\n    const c = new Decoder(opts)\n    const s = new NoFilter(input, encod != null ? encod : utils.guessEncoding(input))\n    const res = []\n    while (s.length > 0) {\n      const parser = c._parse()\n      let state = parser.next()\n      while (!state.done) {\n        const b = s.read(state.value)\n        if ((b == null) || (b.length !== state.value)) {\n          throw new Error('Insufficient data')\n        }\n        state = parser.next(b)\n      }\n      res.push(Decoder.nullcheck(state.value))\n    }\n    return res\n  }\n\n  /**\n   * @callback decodeCallback\n   * @param {Error} error - if one was generated\n   * @param {any} value - the decoded value\n   */\n\n  /**\n   * Decode the first CBOR item in the input.  This will error if there are more\n   * bytes left over at the end, and optionally if there were no valid CBOR\n   * bytes in the input.  Emits the {Decoder.NOT_FOUND} Symbol in the callback\n   * if no data was found and the `required` option is false.\n   *\n   * @static\n   * @param {(string|Buffer)} input - the input to parse\n   * @param {(function|string|Object)} options\n   * @param {string} [options.encoding: 'hex'] - The encoding of the input.\n   *   Ignored if input is a Buffer.\n   * @param {decodeCallback} cb\n   * @returns {Promise} if no cb specified\n   */\n  static decodeFirst (input, options, cb) {\n    let opts = {}\n    let required = false\n    let encod = 'hex'\n    switch (typeof options) {\n      case 'function':\n        cb = options\n        encod = utils.guessEncoding(input)\n        break\n      case 'string':\n        encod = options\n        break\n      case 'object':\n        opts = utils.extend({}, options)\n        encod = (opts.encoding != null) ? opts.encoding : utils.guessEncoding(input)\n        delete opts.encoding\n        required = (opts.required != null) ? opts.required : false\n        delete opts.required\n    }\n    const c = new Decoder(opts)\n    let p\n    let v = NOT_FOUND\n    c.on('data', (val) => {\n      v = Decoder.nullcheck(val)\n      c.close()\n    })\n    if (typeof cb === 'function') {\n      c.once('error', function (er) {\n        const u = v\n        v = ERROR\n        c.close()\n        return cb(er, u)\n      })\n      c.once('end', () => {\n        switch (v) {\n          case NOT_FOUND:\n            if (required) {\n              return cb(new Error('No CBOR found'))\n            } else {\n              return cb(null, v)\n            }\n          case ERROR:\n            return void 0\n          default:\n            return cb(null, v)\n        }\n      })\n    } else {\n      p = new Promise(function (resolve, reject) {\n        c.once('error', (er) => {\n          v = ERROR\n          c.close()\n          return reject(er)\n        })\n        return c.once('end', () => {\n          switch (v) {\n            case NOT_FOUND:\n              if (required) {\n                return reject(new Error('No CBOR found'))\n              } else {\n                return resolve(v)\n              }\n            case ERROR:\n              return void 0\n            default:\n              return resolve(v)\n          }\n        })\n      })\n    }\n    c.end(input, encod)\n    return p\n  }\n\n  /**\n   * @callback decodeAllCallback\n   * @param {Error} error - if one was generated\n   * @param {Array} value - all of the decoded values, wrapped in an Array\n   */\n\n  /**\n   * Decode all of the CBOR items in the input.  This will error if there are\n   * more bytes left over at the end.\n   *\n   * @static\n   * @param {(string|Buffer)} input - the input to parse\n   * @param {(string|Object)} options - Decoding options.\n   *   If string, the input encoding.\n   * @param {decodeAllCallback} cb\n   * @returns {Promise} if no callback\n   */\n  static decodeAll (input, options, cb) {\n    let opts = {}\n    let encod = 'hex'\n    switch (typeof options) {\n      case 'function':\n        cb = options\n        encod = utils.guessEncoding(input)\n        break\n      case 'string':\n        encod = options\n        break\n      case 'object':\n        opts = utils.extend({}, options)\n        encod = (opts.encoding != null) ? opts.encoding : utils.guessEncoding(input)\n        delete opts.encoding\n    }\n    const c = new Decoder(opts)\n    let p\n    const vals = []\n    c.on('data', function (val) {\n      return vals.push(Decoder.nullcheck(val))\n    })\n    if (typeof cb === 'function') {\n      c.on('error', function (er) {\n        return cb(er)\n      })\n      c.on('end', function () {\n        return cb(null, vals)\n      })\n    } else {\n      p = new Promise(function (resolve, reject) {\n        c.on('error', function (er) {\n          return reject(er)\n        })\n        return c.on('end', function () {\n          return resolve(vals)\n        })\n      })\n    }\n    c.end(input, encod)\n    return p\n  }\n\n  /**\n   * Stop processing\n   */\n  close () {\n    this.running = false\n    this.__fresh = true\n  }\n\n  * _parse () {\n    let parent = null\n    let depth = 0\n    let val = null\n    while (true) {\n      if ((this.max_depth >= 0) && (depth > this.max_depth)) {\n        throw new Error('Maximum depth ' + this.max_depth + ' exceeded')\n      }\n      const octet = (yield 1)[0]\n      if (!this.running) {\n        throw new Error('Unexpected data: 0x' + (octet.toString(16)))\n      }\n      const mt = octet >> 5\n      const ai = octet & 0x1f\n      const parent_major = (parent != null) ? parent[MAJOR] : undefined\n      const parent_length = (parent != null) ? parent.length : undefined\n      switch (ai) {\n        case NUMBYTES.ONE:\n          this.emit('more-bytes', mt, 1, parent_major, parent_length)\n          val = (yield 1)[0]\n          break\n        case NUMBYTES.TWO:\n        case NUMBYTES.FOUR:\n        case NUMBYTES.EIGHT:\n          const numbytes = 1 << (ai - 24)\n          this.emit('more-bytes', mt, numbytes, parent_major, parent_length)\n          const buf = yield numbytes\n          val = (mt === MT.SIMPLE_FLOAT) ? buf : utils.parseCBORint(ai, buf)\n          break\n        case 28:\n        case 29:\n        case 30:\n          this.running = false\n          throw new Error('Additional info not implemented: ' + ai)\n        case NUMBYTES.INDEFINITE:\n          val = -1\n          break\n        default:\n          val = ai\n      }\n      switch (mt) {\n        case MT.POS_INT:\n          // val already decoded\n          break\n        case MT.NEG_INT:\n          if (val === Number.MAX_SAFE_INTEGER) {\n            val = NEG_MAX\n          } else if (val instanceof bignumber) {\n            val = NEG_ONE.sub(val)\n          } else {\n            val = -1 - val\n          }\n          break\n        case MT.BYTE_STRING:\n        case MT.UTF8_STRING:\n          switch (val) {\n            case 0:\n              this.emit('start-string', mt, val, parent_major, parent_length)\n              val = (mt === MT.BYTE_STRING) ? new Buffer(0) : ''\n              break\n            case -1:\n              this.emit('start', mt, SYMS.STREAM, parent_major, parent_length)\n              parent = parentBufferStream(parent, mt)\n              depth++\n              continue\n            default:\n              this.emit('start-string', mt, val, parent_major, parent_length)\n              val = yield val\n              if (mt === MT.UTF8_STRING) {\n                val = val.toString('utf-8')\n              }\n          }\n          break\n        case MT.ARRAY:\n        case MT.MAP:\n          switch (val) {\n            case 0:\n              val = (mt === MT.MAP) ? {} : []\n              val[SYMS.PARENT] = parent\n              break\n            case -1:\n              this.emit('start', mt, SYMS.STREAM, parent_major, parent_length)\n              parent = parentArray(parent, mt, -1)\n              depth++\n              continue\n            default:\n              this.emit('start', mt, val, parent_major, parent_length)\n              parent = parentArray(parent, mt, val * (mt - 3))\n              depth++\n              continue\n          }\n          break\n        case MT.TAG:\n          this.emit('start', mt, val, parent_major, parent_length)\n          parent = parentArray(parent, mt, 1)\n          parent.push(val)\n          depth++\n          continue\n        case MT.SIMPLE_FLOAT:\n          if (typeof val === 'number') {\n            val = Simple.decode(val, parent != null)\n          } else {\n            val = utils.parseCBORfloat(val)\n          }\n      }\n      this.emit('value', val, parent_major, parent_length, ai)\n      let again = false\n      while (parent != null) {\n        switch (false) {\n          case val !== SYMS.BREAK:\n            parent[COUNT] = 1\n            break\n          case !Array.isArray(parent):\n            parent.push(val)\n            break\n          case !(parent instanceof NoFilter):\n            const pm = parent[MAJOR]\n            if ((pm != null) && (pm !== mt)) {\n              this.running = false\n              throw new Error('Invalid major type in indefinite encoding')\n            }\n            parent.write(val)\n        }\n        if ((--parent[COUNT]) !== 0) {\n          again = true\n          break\n        }\n        --depth\n        delete parent[COUNT]\n        this.emit('stop', parent[MAJOR])\n\n        if (Array.isArray(parent)) {\n          switch (parent[MAJOR]) {\n            case MT.ARRAY:\n              val = parent\n              break\n            case MT.MAP:\n              let allstrings = true\n              if ((parent.length % 2) !== 0) {\n                throw new Error('Invalid map length: ' + parent.length)\n              }\n              for (let i = 0, len = parent.length; i < len; i += 2) {\n                if (typeof parent[i] !== 'string') {\n                  allstrings = false\n                  break\n                }\n              }\n              if (allstrings) {\n                val = {}\n                for (let i = 0, len = parent.length; i < len; i += 2) {\n                  val[parent[i]] = parent[i + 1]\n                }\n              } else {\n                val = new Map\n                for (let i = 0, len = parent.length; i < len; i += 2) {\n                  val.set(parent[i], parent[i + 1])\n                }\n              }\n              break\n            case MT.TAG:\n              const t = new Tagged(parent[0], parent[1])\n              val = t.convert(this.tags)\n              break\n          }\n        } else if (parent instanceof NoFilter) {\n          switch (parent[MAJOR]) {\n            case MT.BYTE_STRING:\n              val = parent.slice()\n            case MT.UTF8_STRING:\n              val = parent.toString('utf-8')\n          }\n        }\n\n        parent = parent[SYMS.PARENT]\n      }\n      if (!again) {\n        return val\n      }\n    }\n  }\n}\n\nDecoder.NOT_FOUND = NOT_FOUND\nmodule.exports = Decoder\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cbor/lib/decoder.js\n// module id = 39\n// module chunks = 0","'use strict'\n\nconst bignumber = require('bignumber.js')\nconst utils = require('./utils')\nconst url = require('url')\n\nconst MINUS_ONE = new bignumber(-1)\nconst TEN = new bignumber(10)\nconst TWO = new bignumber(2)\n\n\n/**\n * A CBOR tagged item, where the tag does not have semantics specified at the\n * moment, or those semantics threw an error during parsing. Typically this will\n * be an extension point you're not yet expecting.\n */\nclass Tagged {\n\n  /**\n   * Creates an instance of Tagged.\n   *\n   * @param {Number} tag - the number of the tag\n   * @param {any} value - the value inside the tag\n   * @param {Error} err - the error that was thrown parsing the tag, or null\n   */\n  constructor (tag, value, err) {\n    this.tag = tag\n    this.value = value\n    this.err = err\n    if (typeof this.tag !== 'number') {\n      throw new Error('Invalid tag type (' + (typeof this.tag) + ')')\n    }\n    if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {\n      throw new Error('Tag must be a positive integer: ' + this.tag)\n    }\n  }\n\n  /**\n   * Convert to a String\n   *\n   * @returns {String} string of the form '1(2)'\n   */\n  toString () {\n    return `${this.tag}(${JSON.stringify(this.value)})`\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   */\n  encodeCBOR (gen) {\n    gen._pushTag(this.tag)\n    return gen.pushAny(this.value)\n  }\n\n  /**\n   * If we have a converter for this type, do the conversion.  Some converters\n   * are built-in.  Additional ones can be passed in.  If you want to remove\n   * a built-in converter, pass a converter in whose value is 'null' instead\n   * of a function.\n   *\n   * @param {Object} converters - keys in the object are a tag number, the value\n   *   is a function that takes the decoded CBOR and returns a JavaScript value\n   *   of the appropriate type.  Throw an exception in the function on errors.\n   * @returns {any} - the converted item\n   */\n  convert (converters) {\n    var er, f\n    f = converters != null ? converters[this.tag] : void 0\n    if (typeof f !== 'function') {\n      f = Tagged['_tag_' + this.tag]\n      if (typeof f !== 'function') {\n        return this\n      }\n    }\n    try {\n      return f.call(Tagged, this.value)\n    } catch (error) {\n      er = error\n      this.err = er\n      return this\n    }\n  }\n\n  static _tag_0 (v) {\n    return new Date(v)\n  }\n\n  static _tag_1 (v) {\n    return new Date(v * 1000)\n  }\n\n  static _tag_2 (v) {\n    return utils.bufferToBignumber(v)\n  }\n\n  static _tag_3 (v) {\n    return MINUS_ONE.minus(utils.bufferToBignumber(v))\n  }\n\n  static _tag_4 (v) {\n    return TEN.pow(v[0]).times(v[1])\n  }\n\n  static _tag_5 (v) {\n    return TWO.pow(v[0]).times(v[1])\n  }\n\n  static _tag_32 (v) {\n    return url.parse(v)\n  }\n\n  static _tag_35 (v) {\n    return new RegExp(v)\n  }\n}\n\nmodule.exports = Tagged\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cbor/lib/tagged.js\n// module id = 40\n// module chunks = 0","'use strict'\n\nconst mh = require('multihashes')\nconst assert = require('assert')\n\nclass DAGNode {\n  constructor (data, links, serialized, multihash) {\n    assert(serialized, 'DAGNode needs its serialized format')\n    assert(multihash, 'DAGNode needs its multihash')\n\n    if (typeof multihash === 'string') {\n      multihash = mh.fromB58String(multihash)\n    }\n\n    this._data = data || new Buffer(0)\n    this._links = links || []\n    this._serialized = serialized\n    this._multihash = multihash\n\n    this._size = this.links.reduce((sum, l) => sum + l.size, this.serialized.length)\n\n    this._json = {\n      data: this.data,\n      links: this.links.map((l) => l.toJSON()),\n      multihash: mh.toB58String(this.multihash),\n      size: this.size\n    }\n  }\n\n  toJSON () {\n    return this._json\n  }\n\n  toString () {\n    const mhStr = mh.toB58String(this.multihash)\n    return `DAGNode <${mhStr} - data: \"${this.data.toString()}\", links: ${this.links.length}, size: ${this.size}>`\n  }\n\n  get data () {\n    return this._data\n  }\n\n  set data (data) {\n    throw new Error(\"Can't set property: 'data' is immutable\")\n  }\n\n  get links () {\n    return this._links\n  }\n\n  set links (links) {\n    throw new Error(\"Can't set property: 'links' is immutable\")\n  }\n\n  get serialized () {\n    return this._serialized\n  }\n\n  set serialized (serialized) {\n    throw new Error(\"Can't set property: 'serialized' is immutable\")\n  }\n\n  get size () {\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get multihash () {\n    return this._multihash\n  }\n\n  set multihash (multihash) {\n    throw new Error(\"Can't set property: 'multihash' is immutable\")\n  }\n}\n\nexports = module.exports = DAGNode\nexports.create = require('./create')\nexports.clone = require('./clone')\nexports.addLink = require('./addLink')\nexports.rmLink = require('./rmLink')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/src/dag-node/index.js\n// module id = 41\n// module chunks = 0","'use strict'\n\nconst CID = require('cids')\nconst protobuf = require('protocol-buffers')\nconst proto = protobuf(require('./dag.proto'))\nconst DAGLink = require('./dag-link')\nconst DAGNode = require('./dag-node')\n\nexports = module.exports\n\nfunction cid (node, callback) {\n  if (node.multihash) {\n    return callback(null, new CID(node.multihash))\n  }\n  callback(new Error('not valid dagPB node'))\n}\n\nfunction serialize (node, callback) {\n  let serialized\n\n  try {\n    const pb = toProtoBuf(node)\n    serialized = proto.PBNode.encode(pb)\n  } catch (err) {\n    return callback(err)\n  }\n\n  callback(null, serialized)\n}\n\nfunction deserialize (data, callback) {\n  const pbn = proto.PBNode.decode(data)\n\n  const links = pbn.Links.map((link) => {\n    return new DAGLink(link.Name, link.Tsize, link.Hash)\n  })\n\n  const buf = pbn.Data || new Buffer(0)\n\n  DAGNode.create(buf, links, callback)\n}\n\nfunction toProtoBuf (node) {\n  const pbn = {}\n\n  if (node.data && node.data.length > 0) {\n    pbn.Data = node.data\n  } else {\n    // NOTE: this has to be null in order to match go-ipfs serialization `null !== new Buffer(0)`\n    pbn.Data = null\n  }\n\n  if (node.links.length > 0) {\n    pbn.Links = node.links.map((link) => {\n      return {\n        Hash: link.multihash,\n        Name: link.name,\n        Tsize: link.size\n      }\n    })\n  } else {\n    pbn.Links = null\n  }\n\n  return pbn\n}\n\nexports.serialize = serialize\nexports.deserialize = deserialize\nexports.cid = cid\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/src/util.js\n// module id = 42\n// module chunks = 0","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  value = Object(value);\n  return (symToStringTag && symToStringTag in value)\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseGetTag.js\n// module id = 43\n// module chunks = 0","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isObjectLike.js\n// module id = 44\n// module chunks = 0","'use strict';\n\nexports = module.exports = require('./multibase');\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multibase/lib/index.js\n// module id = 45\n// module chunks = 0","'use strict'\n\n// spec and table at: https://github.com/multiformats/multicodec\n\nexports = module.exports\n\n// Miscellaneous\nexports['raw'] = new Buffer('00', 'hex')\n\n// bases encodings\nexports['base1'] = new Buffer('01', 'hex')\nexports['base2'] = new Buffer('55', 'hex')\nexports['base8'] = new Buffer('07', 'hex')\nexports['base10'] = new Buffer('09', 'hex')\n\n// Serialization formats\nexports['protobuf'] = new Buffer('50', 'hex')\nexports['cbor'] = new Buffer('51', 'hex')\nexports['rlp'] = new Buffer('60', 'hex')\n\n// Multiformats\nexports['multicodec'] = new Buffer('30', 'hex')\nexports['multihash'] = new Buffer('31', 'hex')\nexports['multiaddr'] = new Buffer('32', 'hex')\nexports['multibase'] = new Buffer('33', 'hex')\n\n// multihashes\nexports['sha1'] = new Buffer('11', 'hex')\nexports['sha2-256'] = new Buffer('12', 'hex')\nexports['sha2-512'] = new Buffer('13', 'hex')\nexports['sha3-224'] = new Buffer('17', 'hex')\nexports['sha3-256'] = new Buffer('16', 'hex')\nexports['sha3-384'] = new Buffer('15', 'hex')\nexports['sha3-512'] = new Buffer('14', 'hex')\nexports['shake-128'] = new Buffer('18', 'hex')\nexports['shake-256'] = new Buffer('19', 'hex')\nexports['keccak-224'] = new Buffer('1a', 'hex')\nexports['keccak-256'] = new Buffer('1b', 'hex')\nexports['keccak-384'] = new Buffer('1c', 'hex')\nexports['keccak-512'] = new Buffer('1d', 'hex')\nexports['blake2b'] = new Buffer('40', 'hex')\nexports['blake2s'] = new Buffer('41', 'hex')\n\n// multiaddrs\nexports['ip4'] = new Buffer('04', 'hex')\nexports['ip6'] = new Buffer('29', 'hex')\nexports['tcp'] = new Buffer('06', 'hex')\nexports['udp'] = new Buffer('0111', 'hex')\nexports['dccp'] = new Buffer('21', 'hex')\nexports['sctp'] = new Buffer('84', 'hex')\nexports['udt'] = new Buffer('012d', 'hex')\nexports['utp'] = new Buffer('012e', 'hex')\nexports['ipfs'] = new Buffer('2a', 'hex')\nexports['http'] = new Buffer('01e0', 'hex')\nexports['https'] = new Buffer('01bb', 'hex')\nexports['ws'] = new Buffer('01dd', 'hex')\nexports['onion'] = new Buffer('01bc', 'hex')\n\n// archiving formats\n\n// image formats\n\n// video formats\n\n// VCS formats\n\n// IPLD formats\nexports['dag-pb'] = new Buffer('70', 'hex')\nexports['dag-cbor'] = new Buffer('71', 'hex')\nexports['eth-block'] = new Buffer('90', 'hex')\nexports['eth-tx'] = new Buffer('91', 'hex')\nexports['eth-account'] = new Buffer('92', 'hex')\nexports['bitcoin-block'] = new Buffer('b0', 'hex')\nexports['bitcoin-tx'] = new Buffer('b1', 'hex')\nexports['stellar-block'] = new Buffer('d0', 'hex')\nexports['stellar-tx'] = new Buffer('d1', 'hex')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multicodec/src/base-table.js\n// module id = 46\n// module chunks = 0","'use strict'\n\nconst multihash = require('multihashes')\nconst crypto = require('./crypto')\n\nmodule.exports = Multihashing\n\nfunction Multihashing (buf, func, length, callback) {\n  if (typeof length === 'function') {\n    callback = length\n    length = undefined\n  }\n\n  if (!callback) {\n    throw new Error('Missing callback')\n  }\n\n  Multihashing.digest(buf, func, length, (err, digest) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, multihash.encode(digest, func, length))\n  })\n}\n\nMultihashing.Buffer = Buffer // for browser things\n\n// expose multihash itself, to avoid silly double requires.\nMultihashing.multihash = multihash\n\nMultihashing.digest = function (buf, func, length, callback) {\n  if (typeof length === 'function') {\n    callback = length\n    length = undefined\n  }\n\n  if (!callback) {\n    throw new Error('Missing callback')\n  }\n\n  let cb = callback\n  if (length) {\n    cb = (err, digest) => {\n      if (err) {\n        return callback(err)\n      }\n\n      callback(null, digest.slice(0, length))\n    }\n  }\n\n  let hash\n  try {\n    hash = Multihashing.createHash(func)\n  } catch (err) {\n    return cb(err)\n  }\n\n  hash(buf, cb)\n}\n\nMultihashing.createHash = function (func) {\n  func = multihash.coerceCode(func)\n  if (!Multihashing.functions[func]) {\n    throw new Error('multihash function ' + func + ' not yet supported')\n  }\n\n  return Multihashing.functions[func]\n}\n\nMultihashing.functions = {\n  // sha1\n  0x11: crypto.sha1,\n  // sha2-256\n  0x12: crypto.sha2256,\n  // sha2-512\n  0x13: crypto.sha2512,\n  // sha3-512\n  0x14: crypto.sha3512,\n  // sha3-384\n  0x15: crypto.sha3384,\n  // sha3-256\n  0x16: crypto.sha3256,\n  // sha3-224\n  0x17: crypto.sha3224,\n  // shake-128\n  0x18: crypto.shake128,\n  // shake-256\n  0x19: crypto.shake256,\n  // keccak-224\n  0x1A: crypto.keccak224,\n  // keccak-256\n  0x1B: crypto.keccak256,\n  // keccak-384\n  0x1C: crypto.keccak384,\n  // keccak-512\n  0x1D: crypto.keccak512\n  // 0x40: blake2b, // not implemented yet\n  // 0x41: blake2s, // not implemented yet\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multihashing-async/src/index.js\n// module id = 47\n// module chunks = 0","'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = nextTick;\n} else {\n  module.exports = process.nextTick;\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process-nextick-args/index.js\n// module id = 48\n// module chunks = 0","'use strict'\n\nvar drain = require('./drain')\n\nmodule.exports = function reduce (reducer, acc, cb ) {\n  if(!cb) cb = acc, acc = null\n  var sink = drain(function (data) {\n    acc = reducer(acc, data)\n  }, function (err) {\n    cb(err, acc)\n  })\n  if (arguments.length === 2)\n    return function (source) {\n      source(null, function (end, data) {\n        //if ended immediately, and no initial...\n        if(end) return cb(end === true ? null : end)\n        acc = data; sink(source)\n      })\n    }\n  else\n    return sink\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sinks/reduce.js\n// module id = 49\n// module chunks = 0","'use strict'\nvar abortCb = require('../util/abort-cb')\n\nmodule.exports = function values (array, onAbort) {\n  if(!array)\n    return function (abort, cb) {\n      if(abort) return abortCb(cb, abort, onAbort)\n      return cb(true)\n    }\n  if(!Array.isArray(array))\n    array = Object.keys(array).map(function (k) {\n      return array[k]\n    })\n  var i = 0\n  return function (abort, cb) {\n    if(abort)\n      return abortCb(cb, abort, onAbort)\n    if(i >= array.length)\n      cb(true)\n    else\n      cb(null, array[i++])\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sources/values.js\n// module id = 50\n// module chunks = 0","'use strict'\n\nvar tester = require('../util/tester')\n\nmodule.exports = function filter (test) {\n  //regexp\n  test = tester(test)\n  return function (read) {\n    return function next (end, cb) {\n      var sync, loop = true\n      while(loop) {\n        loop = false\n        sync = true\n        read(end, function (end, data) {\n          if(!end && !test(data))\n            return sync ? loop = true : next(end, cb)\n          cb(end, data)\n        })\n        sync = false\n      }\n    }\n  }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/throughs/filter.js\n// module id = 51\n// module chunks = 0","// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction TransformState(stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n  this.writeencoding = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.once('prefinish', function () {\n    if (typeof this._flush === 'function') this._flush(function (er, data) {\n      done(stream, er, data);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (ts.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/readable-stream/lib/_stream_transform.js\n// module id = 52\n// module chunks = 0","// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  processNextTick(cb, er);\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n  // Always throw error if a null is written\n  // if we are not in object mode then throw\n  // if it is not a buffer, string, or undefined.\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    processNextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = bufferShim.from(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) processNextTick(cb, er);else cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n        afterWrite(stream, state, finished, cb);\n      }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    while (entry) {\n      buffer[count] = entry;\n      entry = entry.next;\n      count += 1;\n    }\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) processNextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function (err) {\n    var entry = _this.entry;\n    _this.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    if (state.corkedRequestsFree) {\n      state.corkedRequestsFree.next = _this;\n    } else {\n      state.corkedRequestsFree = _this;\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/readable-stream/lib/_stream_writable.js\n// module id = 53\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/string_decoder/index.js\n// module id = 54\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = eachOfLimit;\n\nvar _eachOfLimit2 = require('./internal/eachOfLimit');\n\nvar _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array. The iteratee is passed a `callback(err)` which must be called once it\n * has completed. If no error has occurred, the callback should be run without\n * arguments or with an explicit `null` argument. Invoked with\n * (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachOfLimit(coll, limit, iteratee, callback) {\n  (0, _eachOfLimit3.default)(limit)(coll, iteratee, callback);\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/eachOfLimit.js\n// module id = 55\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = doLimit;\nfunction doLimit(fn, limit) {\n    return function (iterable, iteratee, callback) {\n        return fn(iterable, limit, iteratee, callback);\n    };\n}\nmodule.exports = exports[\"default\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/internal/doLimit.js\n// module id = 56\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _eachOfLimit;\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _once = require('./once');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _iterator = require('./iterator');\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _onlyOnce = require('./onlyOnce');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nvar _breakLoop = require('./breakLoop');\n\nvar _breakLoop2 = _interopRequireDefault(_breakLoop);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _eachOfLimit(limit) {\n    return function (obj, iteratee, callback) {\n        callback = (0, _once2.default)(callback || _noop2.default);\n        if (limit <= 0 || !obj) {\n            return callback(null);\n        }\n        var nextElem = (0, _iterator2.default)(obj);\n        var done = false;\n        var running = 0;\n\n        function iterateeCallback(err, value) {\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            } else if (value === _breakLoop2.default || done && running <= 0) {\n                done = true;\n                return callback(null);\n            } else {\n                replenish();\n            }\n        }\n\n        function replenish() {\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));\n            }\n        }\n\n        replenish();\n    };\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/internal/eachOfLimit.js\n// module id = 57\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _setImmediate = require('./internal/setImmediate');\n\nvar _setImmediate2 = _interopRequireDefault(_setImmediate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `setImmediate`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name setImmediate\n * @static\n * @memberOf module:Utils\n * @method\n * @alias nextTick\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nexports.default = _setImmediate2.default;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/setImmediate.js\n// module id = 58\n// module chunks = 0","'use strict'\n\nconst mh = require('multihashes')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst codecs = require('multicodec/src/base-table')\nconst codecVarints = require('multicodec/src/varint-table')\n\n// CID: <mbase><version><mcodec><mhash>\n\nclass CID {\n  /*\n   * if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Buffer)\n   *   if (0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   *\n   * ..if only JS had traits..\n   */\n  constructor (version, codec, multihash) {\n    if (typeof version === 'string') {\n      if (multibase.isEncoded(version)) { // CID String (encoded with multibase)\n        const cid = multibase.decode(version)\n        this.version = parseInt(cid.slice(0, 1).toString('hex'), 16)\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n      } else { // bs58 string encoded multihash\n        this.codec = 'dag-pb'\n        this.multihash = mh.fromB58String(version)\n        this.version = 0\n      }\n    } else if (Buffer.isBuffer(version)) {\n      const firstByte = version.slice(0, 1)\n      const v = parseInt(firstByte.toString('hex'), 16)\n      if (v === 0 || v === 1) { // CID\n        const cid = version\n        this.version = v\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n      } else { // multihash\n        this.codec = 'dag-pb'\n        this.multihash = version\n        this.version = 0\n      }\n    } else if (typeof version === 'number') {\n      if (typeof codec !== 'string') {\n        throw new Error('codec must be string')\n      }\n      if (!(version === 0 || version === 1)) {\n        throw new Error('version must be a number equal to 0 or 1')\n      }\n      mh.validate(multihash)\n      this.codec = codec\n      this.version = version\n      this.multihash = multihash\n    }\n  }\n\n  get buffer () {\n    switch (this.version) {\n      case 0:\n        return this.multihash\n      case 1:\n        return Buffer.concat([\n          Buffer('01', 'hex'),\n          Buffer(codecVarints[this.codec]),\n          this.multihash\n        ])\n      default:\n        throw new Error('unsupported version')\n    }\n  }\n\n  toV0 () {\n    return this.multihash\n  }\n\n  toV1 () {\n    return this.buffer\n  }\n\n  /* defaults to base58btc */\n  toBaseEncodedString (base) {\n    base = base || 'base58btc'\n\n    switch (this.version) {\n      case 0:\n        return mh.toB58String(this.multihash)\n      case 1:\n        return multibase.encode(base, this.buffer).toString()\n      default:\n        throw new Error('Unsupported version')\n    }\n  }\n\n  toJSON () {\n    return {\n      codec: this.codec,\n      version: this.version,\n      hash: this.multihash\n    }\n  }\n\n  equals (other) {\n    return this.codec === other.codec &&\n      this.version === other.version &&\n      this.multihash.equals(other.multihash)\n  }\n}\n\nCID.codecs = codecs\nCID.isCID = (other) => {\n  return other.constructor.name === 'CID'\n}\n\nmodule.exports = CID\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cids/src/index.js\n// module id = 59\n// module chunks = 0","'use strict';\nvar inherits = require('inherits')\nvar md5 = require('./md5')\nvar rmd160 = require('ripemd160')\nvar sha = require('sha.js')\n\nvar Base = require('cipher-base')\n\nfunction HashNoConstructor(hash) {\n  Base.call(this, 'digest')\n\n  this._hash = hash\n  this.buffers = []\n}\n\ninherits(HashNoConstructor, Base)\n\nHashNoConstructor.prototype._update = function (data) {\n  this.buffers.push(data)\n}\n\nHashNoConstructor.prototype._final = function () {\n  var buf = Buffer.concat(this.buffers)\n  var r = this._hash(buf)\n  this.buffers = null\n\n  return r\n}\n\nfunction Hash(hash) {\n  Base.call(this, 'digest')\n\n  this._hash = hash\n}\n\ninherits(Hash, Base)\n\nHash.prototype._update = function (data) {\n  this._hash.update(data)\n}\n\nHash.prototype._final = function () {\n  return this._hash.digest()\n}\n\nmodule.exports = function createHash (alg) {\n  alg = alg.toLowerCase()\n  if ('md5' === alg) return new HashNoConstructor(md5)\n  if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)\n\n  return new Hash(sha(alg))\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/create-hash/browser.js\n// module id = 60\n// module chunks = 0","'use strict'\n\nconst multihashing = require('multihashing-async')\nconst setImmediate = require('async/setImmediate')\n\nmodule.exports = Block\n\n// Immutable block of data\nfunction Block (data) {\n  if (!(this instanceof Block)) {\n    return new Block(data)\n  }\n\n  if (!data) {\n    throw new Error('Block must be constructed with data')\n  }\n\n  this._cache = {}\n\n  data = ensureBuffer(data)\n\n  Object.defineProperty(this, 'data', {\n    get () {\n      return data\n    },\n    set () {\n      throw new Error('Tried to change an immutable block')\n    }\n  })\n\n  this.key = (hashFunc, callback) => {\n    if (typeof hashFunc === 'function') {\n      callback = hashFunc\n      hashFunc = null\n    }\n\n    if (!hashFunc) {\n      hashFunc = 'sha2-256'\n    }\n\n    if (this._cache[hashFunc]) {\n      return setImmediate(() => {\n        callback(null, this._cache[hashFunc])\n      })\n    }\n\n    multihashing(this.data, hashFunc, (err, multihash) => {\n      if (err) {\n        return callback(err)\n      }\n      this._cache[hashFunc] = multihash\n      callback(null, multihash)\n    })\n  }\n}\n\nfunction ensureBuffer (data) {\n  if (Buffer.isBuffer(data)) {\n    return data\n  }\n\n  return new Buffer(data)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipfs-block/src/index.js\n// module id = 61\n// module chunks = 0","'use strict'\n\nconst util = require('./util')\nconst traverse = require('traverse')\n\nexports = module.exports\n\nexports.multicodec = 'dag-cbor'\n\n/*\n * resolve: receives a path and a block and returns the value on path,\n * throw if not possible. `block` is an IPFS Block instance (contains data + key)\n */\nexports.resolve = (block, path, callback) => {\n  if (typeof path === 'function') {\n    callback = path\n    path = undefined\n  }\n\n  util.deserialize(block.data, (err, node) => {\n    if (err) {\n      return callback(err)\n    }\n\n    // root\n\n    if (!path || path === '/') {\n      return callback(null, {\n        value: node,\n        remainderPath: ''\n      })\n    }\n\n    // within scope\n\n    // const tree = exports.tree(block)\n    const parts = path.split('/')\n    const val = traverse(node).get(parts)\n\n    if (val) {\n      return callback(null, {\n        value: val,\n        remainderPath: ''\n      })\n    }\n\n    // out of scope\n    let value\n    let len = parts.length\n\n    for (let i = 0; i < len; i++) {\n      const partialPath = parts.shift()\n\n      if (Array.isArray(node) && !Buffer.isBuffer(node)) {\n        value = node[Number(partialPath)]\n      } if (node[partialPath]) {\n        value = node[partialPath]\n      } else {\n        // can't traverse more\n        if (!value) {\n          return callback(new Error('path not available at root'))\n        } else {\n          parts.unshift(partialPath)\n          return callback(null, {\n            value: value,\n            remainderPath: parts.join('/')\n          })\n        }\n      }\n      node = value\n    }\n  })\n}\n\n/*\n * tree: returns a flattened array with paths: values of the project. options\n * are option (i.e. nestness)\n */\nexports.tree = (block, options, callback) => {\n  if (typeof options === 'function') {\n    callback = options\n    options = undefined\n  }\n\n  if (!options) {\n    options = {}\n  }\n\n  util.deserialize(block.data, (err, node) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, flattenObject(node))\n  })\n}\n\nfunction flattenObject (obj, delimiter) {\n  if (!delimiter) {\n    delimiter = '/'\n  }\n\n  if (Object.keys(obj).length === 0) {\n    return []\n  }\n\n  return traverse(obj).reduce(function (acc, x) {\n    if (this.isLeaf) {\n      acc.push({\n        path: this.path.join(delimiter),\n        value: x\n      })\n    }\n\n    return acc\n  }, [])\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-cbor/src/resolver.js\n// module id = 62\n// module chunks = 0","'use strict'\n\nconst cbor = require('cbor')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst waterfall = require('async/waterfall')\n\nconst resolver = require('./resolver')\n\nexports = module.exports\n\nexports.serialize = (dagNode, callback) => {\n  let serialized\n  try {\n    serialized = cbor.encode(dagNode)\n  } catch (err) {\n    // return is important, otherwise in case of error the execution would continue\n    return callback(err)\n  }\n  callback(null, serialized)\n}\n\nexports.deserialize = (data, callback) => {\n  cbor.decodeFirst(data, callback)\n}\n\nexports.cid = (dagNode, callback) => {\n  waterfall([\n    (cb) => exports.serialize(dagNode, cb),\n    (serialized, cb) => multihashing(serialized, 'sha2-256', cb),\n    (mh, cb) => cb(null, new CID(1, resolver.multicodec, mh))\n  ], callback)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-cbor/src/util.js\n// module id = 63\n// module chunks = 0","const CID = require('cids')\nconst multihashes = require('multihashes')\n\nmodule.exports = {\n  cidForHash: cidForHash,\n}\n\nfunction cidForHash(codec, rawhash) {\n  var multihash = multihashes.encode(rawhash, 'keccak-256')\n  return new CID(1, codec, multihash)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-eth-block/src/common.js\n// module id = 64\n// module chunks = 0","'use strict'\n\nconst EthBlockHeader = require('ethereumjs-block/header')\nconst cidForHash = require('./common').cidForHash\n\nexports.deserialize = function(data, callback) {\n  let deserialized\n  try {\n    deserialized = new EthBlockHeader(data)\n  } catch (err) {\n    return callback(err)\n  }\n  callback(null, deserialized)\n}\n\nexports.serialize = function(blockHeader, callback) {\n  let serialized\n  try {\n    serialized = blockHeader.serialize()\n  } catch (err) {\n    return callback(err)\n  }\n  callback(null, serialized)\n}\n\nexports.cid = function(blockHeader, callback) {\n  let cid\n  try {\n    cid = cidForHash('eth-block', blockHeader.hash())\n  } catch (err) {\n    return callback(err)\n  }\n  callback(null, cid)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-eth-block/src/util.js\n// module id = 65\n// module chunks = 0","module.exports = isPromise;\r\n\r\nfunction isPromise(obj) {\r\n  return obj && typeof obj.then === 'function';\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/is-promise/index.js\n// module id = 66\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/isarray/index.js\n// module id = 67\n// module chunks = 0","module.exports = {\n\t\"COMPRESSED_TYPE_INVALID\": \"compressed should be a boolean\",\n\t\"EC_PRIVATE_KEY_TYPE_INVALID\": \"private key should be a Buffer\",\n\t\"EC_PRIVATE_KEY_LENGTH_INVALID\": \"private key length is invalid\",\n\t\"EC_PRIVATE_KEY_TWEAK_ADD_FAIL\": \"tweak out of range or resulting private key is invalid\",\n\t\"EC_PRIVATE_KEY_TWEAK_MUL_FAIL\": \"tweak out of range\",\n\t\"EC_PRIVATE_KEY_EXPORT_DER_FAIL\": \"couldn't export to DER format\",\n\t\"EC_PRIVATE_KEY_IMPORT_DER_FAIL\": \"couldn't import from DER format\",\n\t\"EC_PUBLIC_KEYS_TYPE_INVALID\": \"public keys should be an Array\",\n\t\"EC_PUBLIC_KEYS_LENGTH_INVALID\": \"public keys Array should have at least 1 element\",\n\t\"EC_PUBLIC_KEY_TYPE_INVALID\": \"public key should be a Buffer\",\n\t\"EC_PUBLIC_KEY_LENGTH_INVALID\": \"public key length is invalid\",\n\t\"EC_PUBLIC_KEY_PARSE_FAIL\": \"the public key could not be parsed or is invalid\",\n\t\"EC_PUBLIC_KEY_CREATE_FAIL\": \"private was invalid, try again\",\n\t\"EC_PUBLIC_KEY_TWEAK_ADD_FAIL\": \"tweak out of range or resulting public key is invalid\",\n\t\"EC_PUBLIC_KEY_TWEAK_MUL_FAIL\": \"tweak out of range\",\n\t\"EC_PUBLIC_KEY_COMBINE_FAIL\": \"the sum of the public keys is not valid\",\n\t\"ECDH_FAIL\": \"scalar was invalid (zero or overflow)\",\n\t\"ECDSA_SIGNATURE_TYPE_INVALID\": \"signature should be a Buffer\",\n\t\"ECDSA_SIGNATURE_LENGTH_INVALID\": \"signature length is invalid\",\n\t\"ECDSA_SIGNATURE_PARSE_FAIL\": \"couldn't parse signature\",\n\t\"ECDSA_SIGNATURE_PARSE_DER_FAIL\": \"couldn't parse DER signature\",\n\t\"ECDSA_SIGNATURE_SERIALIZE_DER_FAIL\": \"couldn't serialize signature to DER format\",\n\t\"ECDSA_SIGN_FAIL\": \"nonce generation function failed or private key is invalid\",\n\t\"ECDSA_RECOVER_FAIL\": \"couldn't recover public key from signature\",\n\t\"MSG32_TYPE_INVALID\": \"message should be a Buffer\",\n\t\"MSG32_LENGTH_INVALID\": \"message length is invalid\",\n\t\"OPTIONS_TYPE_INVALID\": \"options should be an Object\",\n\t\"OPTIONS_DATA_TYPE_INVALID\": \"options.data should be a Buffer\",\n\t\"OPTIONS_DATA_LENGTH_INVALID\": \"options.data length is invalid\",\n\t\"OPTIONS_NONCEFN_TYPE_INVALID\": \"options.noncefn should be a Function\",\n\t\"RECOVERY_ID_TYPE_INVALID\": \"recovery should be a Number\",\n\t\"RECOVERY_ID_VALUE_INVALID\": \"recovery should have value between -1 and 4\",\n\t\"TWEAK_TYPE_INVALID\": \"tweak should be a Buffer\",\n\t\"TWEAK_LENGTH_INVALID\": \"tweak length is invalid\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/secp256k1/lib/messages.json\n// module id = 68\n// module chunks = 0","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_Symbol.js\n// module id = 69\n// module chunks = 0","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_freeGlobal.js\n// module id = 70\n// module chunks = 0","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_root.js\n// module id = 71\n// module chunks = 0","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isArray.js\n// module id = 72\n// module chunks = 0","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isLength.js\n// module id = 73\n// module chunks = 0","'use strict'\nconst varint = require('varint')\n\nmodule.exports = {\n  numberToBuffer,\n  bufferToNumber,\n  varintBufferEncode,\n  varintBufferDecode\n}\n\nfunction bufferToNumber (buf) {\n  return parseInt(buf.toString('hex'), 16)\n}\n\nfunction numberToBuffer (num) {\n  let hexString = num.toString(16)\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString\n  }\n  return new Buffer(hexString, 'hex')\n}\n\nfunction varintBufferEncode (input) {\n  return new Buffer(varint.encode(bufferToNumber(input)))\n}\n\nfunction varintBufferDecode (input) {\n  return numberToBuffer(varint.decode(input))\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multicodec/src/util.js\n// module id = 74\n// module chunks = 0","'use strict'\nconst baseTable = require('./base-table')\nconst varintBufferEncode = require('./util').varintBufferEncode\n\n// this creates a map for codecName -> codeVarintBuffer\n\nconst varintTable = {}\nmodule.exports = varintTable\n\nfor (let encodingName in baseTable) {\n  let code = baseTable[encodingName]\n  varintTable[encodingName] = varintBufferEncode(code)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multicodec/src/varint-table.js\n// module id = 75\n// module chunks = 0","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protocol-buffers/~/varint/index.js\n// module id = 76\n// module chunks = 0","'use strict'\nvar abortCb = require('../util/abort-cb')\n\nmodule.exports = function once (value, onAbort) {\n  return function (abort, cb) {\n    if(abort)\n      return abortCb(cb, abort, onAbort)\n    if(value != null) {\n      var _value = value; value = null\n      cb(null, _value)\n    } else\n      cb(true)\n  }\n}\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sources/once.js\n// module id = 77\n// module chunks = 0","'use strict'\n\nfunction id (e) { return e }\nvar prop = require('../util/prop')\nvar filter = require('./filter')\n\n//drop items you have already seen.\nmodule.exports = function unique (field, invert) {\n  field = prop(field) || id\n  var seen = {}\n  return filter(function (data) {\n    var key = field(data)\n    if(seen[key]) return !!invert //false, by default\n    else seen[key] = true\n    return !invert //true by default\n  })\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/throughs/unique.js\n// module id = 78\n// module chunks = 0","module.exports = function abortCb(cb, abort, onAbort) {\n  cb(abort)\n  onAbort && onAbort(abort === true ? null: abort)\n  return\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/util/abort-cb.js\n// module id = 79\n// module chunks = 0","var prop = require('./prop')\n\nfunction id (e) { return e }\n\nmodule.exports = function tester (test) {\n  return (\n    'object' === typeof test && 'function' === typeof test.test //regexp\n    ? function (data) { return test.test(data) }\n    : prop (test) || id\n  )\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/util/tester.js\n// module id = 80\n// module chunks = 0","//another idea: buffer 2* the max, but only call write with half of that,\n//this could manage cases where the read ahead is latent. Hmm, we probably\n//shouldn't guess at that here, just handle write latency.\n\n//how would we measure this anyway?\n\nfunction append (array, item) {\n  (array = array || []).push(item)\n  return array\n}\n\nmodule.exports = function (write, reduce, max, cb) {\n  reduce = reduce || append\n  var ended, _cb, _read\n  function reader (read) {\n    var queue = null, writing = false, length = 0\n    _read = read\n    if(ended) return read(ended, function (err) {\n      cb(err)\n      _cb && _cb()\n    })\n\n    var reading = false\n    function more () {\n      if(reading || ended) return\n      reading = true\n      read(null, function (err, data) {\n        reading = false\n        next(err, data)\n      })\n    }\n\n    function flush () {\n      if(writing) return\n      var _queue = queue\n      queue = null; writing = true; length = 0\n      write(_queue, function (err) {\n        writing = false\n\n        if(ended === true && !length) cb(err)\n        else if(ended && ended !== true) {\n          cb(ended)\n          _cb && _cb()\n        }\n        else if(err) read(ended = err, cb) //abort upstream.\n        else if(length) flush()\n        else more()\n      })\n    }\n\n    function next (end, data) {\n      if(ended) return\n      ended = end\n      if(!ended) {\n        queue = reduce(queue, data)\n        length = (queue && queue.length) || 0\n        if(queue != null) flush()\n        if(length < max) more()\n      }\n      else if(!writing) cb(ended === true ? null : ended)\n    }\n\n    reader.abort = function (__cb) {\n      _cb = function (end) {\n          __cb && __cb()\n        }\n        read(ended = new Error('aborted'), function (end) {\n        end = end === true ? null : end\n        if(!writing) {\n          cb && cb(end)\n          _cb && _cb(end)\n        }\n      })\n    }\n\n    more()\n  }\n\n  reader.abort = function (cb) {\n    ended = new Error('aborted before connecting')\n    _cb = function (err) {\n      cb && cb()\n    }\n  }\n\n  return reader\n}\n\n\n\n\n\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-write/index.js\n// module id = 81\n// module chunks = 0","// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/readable-stream/lib/_stream_passthrough.js\n// module id = 82\n// module chunks = 0","'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') {\n    return emitter.prependListener(event, fn);\n  } else {\n    // This is a hack to make sure that our error handler is attached before any\n    // userland ones.  NEVER DO THIS. This is here only because this code needs\n    // to continue to work with older versions of Node.js that do not include\n    // the prependListener() method. The goal is to eventually remove this hack.\n    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n  }\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function') this._read = options.read;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = bufferShim.from(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var _e = new Error('stream.unshift() after end event');\n      stream.emit('error', _e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = bufferShim.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/readable-stream/lib/_stream_readable.js\n// module id = 83\n// module chunks = 0","/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\n\nvar K = [\n  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n]\n\nvar W = new Array(64)\n\nfunction Sha256 () {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha256, Hash)\n\nSha256.prototype.init = function () {\n  this._a = 0x6a09e667\n  this._b = 0xbb67ae85\n  this._c = 0x3c6ef372\n  this._d = 0xa54ff53a\n  this._e = 0x510e527f\n  this._f = 0x9b05688c\n  this._g = 0x1f83d9ab\n  this._h = 0x5be0cd19\n\n  return this\n}\n\nfunction ch (x, y, z) {\n  return z ^ (x & (y ^ z))\n}\n\nfunction maj (x, y, z) {\n  return (x & y) | (z & (x | y))\n}\n\nfunction sigma0 (x) {\n  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)\n}\n\nfunction sigma1 (x) {\n  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)\n}\n\nfunction gamma0 (x) {\n  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)\n}\n\nfunction gamma1 (x) {\n  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)\n}\n\nSha256.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n  var f = this._f | 0\n  var g = this._g | 0\n  var h = this._h | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0\n\n  for (var j = 0; j < 64; ++j) {\n    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0\n    var T2 = (sigma0(a) + maj(a, b, c)) | 0\n\n    h = g\n    g = f\n    f = e\n    e = (d + T1) | 0\n    d = c\n    c = b\n    b = a\n    a = (T1 + T2) | 0\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n  this._f = (f + this._f) | 0\n  this._g = (g + this._g) | 0\n  this._h = (h + this._h) | 0\n}\n\nSha256.prototype._hash = function () {\n  var H = new Buffer(32)\n\n  H.writeInt32BE(this._a, 0)\n  H.writeInt32BE(this._b, 4)\n  H.writeInt32BE(this._c, 8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n  H.writeInt32BE(this._h, 28)\n\n  return H\n}\n\nmodule.exports = Sha256\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/sha.js/sha256.js\n// module id = 84\n// module chunks = 0","var inherits = require('inherits')\nvar Hash = require('./hash')\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n]\n\nvar W = new Array(160)\n\nfunction Sha512 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha512, Hash)\n\nSha512.prototype.init = function () {\n  this._ah = 0x6a09e667\n  this._bh = 0xbb67ae85\n  this._ch = 0x3c6ef372\n  this._dh = 0xa54ff53a\n  this._eh = 0x510e527f\n  this._fh = 0x9b05688c\n  this._gh = 0x1f83d9ab\n  this._hh = 0x5be0cd19\n\n  this._al = 0xf3bcc908\n  this._bl = 0x84caa73b\n  this._cl = 0xfe94f82b\n  this._dl = 0x5f1d36f1\n  this._el = 0xade682d1\n  this._fl = 0x2b3e6c1f\n  this._gl = 0xfb41bd6b\n  this._hl = 0x137e2179\n\n  return this\n}\n\nfunction Ch (x, y, z) {\n  return z ^ (x & (y ^ z))\n}\n\nfunction maj (x, y, z) {\n  return (x & y) | (z & (x | y))\n}\n\nfunction sigma0 (x, xl) {\n  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)\n}\n\nfunction sigma1 (x, xl) {\n  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)\n}\n\nfunction Gamma0 (x, xl) {\n  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)\n}\n\nfunction Gamma0l (x, xl) {\n  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)\n}\n\nfunction Gamma1 (x, xl) {\n  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)\n}\n\nfunction Gamma1l (x, xl) {\n  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)\n}\n\nfunction getCarry (a, b) {\n  return (a >>> 0) < (b >>> 0) ? 1 : 0\n}\n\nSha512.prototype._update = function (M) {\n  var W = this._w\n\n  var ah = this._ah | 0\n  var bh = this._bh | 0\n  var ch = this._ch | 0\n  var dh = this._dh | 0\n  var eh = this._eh | 0\n  var fh = this._fh | 0\n  var gh = this._gh | 0\n  var hh = this._hh | 0\n\n  var al = this._al | 0\n  var bl = this._bl | 0\n  var cl = this._cl | 0\n  var dl = this._dl | 0\n  var el = this._el | 0\n  var fl = this._fl | 0\n  var gl = this._gl | 0\n  var hl = this._hl | 0\n\n  for (var i = 0; i < 32; i += 2) {\n    W[i] = M.readInt32BE(i * 4)\n    W[i + 1] = M.readInt32BE(i * 4 + 4)\n  }\n  for (; i < 160; i += 2) {\n    var xh = W[i - 15 * 2]\n    var xl = W[i - 15 * 2 + 1]\n    var gamma0 = Gamma0(xh, xl)\n    var gamma0l = Gamma0l(xl, xh)\n\n    xh = W[i - 2 * 2]\n    xl = W[i - 2 * 2 + 1]\n    var gamma1 = Gamma1(xh, xl)\n    var gamma1l = Gamma1l(xl, xh)\n\n    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n    var Wi7h = W[i - 7 * 2]\n    var Wi7l = W[i - 7 * 2 + 1]\n\n    var Wi16h = W[i - 16 * 2]\n    var Wi16l = W[i - 16 * 2 + 1]\n\n    var Wil = (gamma0l + Wi7l) | 0\n    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0\n    Wil = (Wil + gamma1l) | 0\n    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0\n    Wil = (Wil + Wi16l) | 0\n    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0\n\n    W[i] = Wih\n    W[i + 1] = Wil\n  }\n\n  for (var j = 0; j < 160; j += 2) {\n    Wih = W[j]\n    Wil = W[j + 1]\n\n    var majh = maj(ah, bh, ch)\n    var majl = maj(al, bl, cl)\n\n    var sigma0h = sigma0(ah, al)\n    var sigma0l = sigma0(al, ah)\n    var sigma1h = sigma1(eh, el)\n    var sigma1l = sigma1(el, eh)\n\n    // t1 = h + sigma1 + ch + K[j] + W[j]\n    var Kih = K[j]\n    var Kil = K[j + 1]\n\n    var chh = Ch(eh, fh, gh)\n    var chl = Ch(el, fl, gl)\n\n    var t1l = (hl + sigma1l) | 0\n    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0\n    t1l = (t1l + chl) | 0\n    t1h = (t1h + chh + getCarry(t1l, chl)) | 0\n    t1l = (t1l + Kil) | 0\n    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0\n    t1l = (t1l + Wil) | 0\n    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0\n\n    // t2 = sigma0 + maj\n    var t2l = (sigma0l + majl) | 0\n    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0\n\n    hh = gh\n    hl = gl\n    gh = fh\n    gl = fl\n    fh = eh\n    fl = el\n    el = (dl + t1l) | 0\n    eh = (dh + t1h + getCarry(el, dl)) | 0\n    dh = ch\n    dl = cl\n    ch = bh\n    cl = bl\n    bh = ah\n    bl = al\n    al = (t1l + t2l) | 0\n    ah = (t1h + t2h + getCarry(al, t1l)) | 0\n  }\n\n  this._al = (this._al + al) | 0\n  this._bl = (this._bl + bl) | 0\n  this._cl = (this._cl + cl) | 0\n  this._dl = (this._dl + dl) | 0\n  this._el = (this._el + el) | 0\n  this._fl = (this._fl + fl) | 0\n  this._gl = (this._gl + gl) | 0\n  this._hl = (this._hl + hl) | 0\n\n  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0\n  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0\n  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0\n  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0\n  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0\n  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0\n  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0\n  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0\n}\n\nSha512.prototype._hash = function () {\n  var H = new Buffer(64)\n\n  function writeInt64BE (h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._ah, this._al, 0)\n  writeInt64BE(this._bh, this._bl, 8)\n  writeInt64BE(this._ch, this._cl, 16)\n  writeInt64BE(this._dh, this._dl, 24)\n  writeInt64BE(this._eh, this._el, 32)\n  writeInt64BE(this._fh, this._fl, 40)\n  writeInt64BE(this._gh, this._gl, 48)\n  writeInt64BE(this._hh, this._hl, 56)\n\n  return H\n}\n\nmodule.exports = Sha512\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/sha.js/sha512.js\n// module id = 85\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/url/url.js\n// module id = 86\n// module chunks = 0","'use strict'\n\nconst Block = require('ipfs-block')\nconst pull = require('pull-stream')\nconst CID = require('cids')\nconst until = require('async/until')\nconst IPFSRepo = require('ipfs-repo')\nconst MemoryStore = require('interface-pull-blob-store')\nconst BlockService = require('ipfs-block-service')\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst ipldEthBlock = require('ipld-eth-block')\n\nmodule.exports = class IPLDResolver {\n  constructor (blockService) {\n    // nicola will love this!\n    if (!blockService) {\n      const repo = new IPFSRepo('in-memory', { stores: MemoryStore })\n      blockService = new BlockService(repo)\n    }\n\n    this.bs = blockService\n    this.resolvers = {}\n\n    this.support = {}\n\n    // Adds support for an IPLD format\n    this.support.add = (multicodec, resolver, util) => {\n      if (this.resolvers[multicodec]) {\n        throw new Error(multicodec + 'already supported')\n      }\n\n      this.resolvers[multicodec] = {\n        resolver: resolver,\n        util: util\n      }\n    }\n\n    this.support.rm = (multicodec) => {\n      if (this.resolvers[multicodec]) {\n        delete this.resolvers[multicodec]\n      }\n    }\n\n    // Support by default dag-pb, dag-cbor, and eth-block\n    this.support.add(dagPB.resolver.multicodec, dagPB.resolver, dagPB.util)\n    this.support.add(dagCBOR.resolver.multicodec, dagCBOR.resolver, dagCBOR.util)\n    this.support.add(ipldEthBlock.resolver.multicodec, ipldEthBlock.resolver, ipldEthBlock.util)\n  }\n\n  resolve (cid, path, callback) {\n    if (path === '/') {\n      return this.get(cid, callback)\n    }\n\n    let value\n\n    until(\n      () => {\n        if (!path || path === '' || path === '/') {\n          return true\n        } else {\n          // continue traversing\n          if (value) {\n            cid = new CID(value['/'])\n          }\n          return false\n        }\n      },\n      (cb) => {\n        // get block\n        // use local resolver\n        // update path value\n        this.bs.get(cid, (err, block) => {\n          if (err) {\n            return cb(err)\n          }\n          const r = this.resolvers[cid.codec]\n          r.resolver.resolve(block, path, (err, result) => {\n            if (err) {\n              return cb(err)\n            }\n            value = result.value\n            path = result.remainderPath\n            cb()\n          })\n        })\n      },\n      (err, results) => {\n        if (err) {\n          return callback(err)\n        }\n        return callback(null, value)\n      }\n    )\n  }\n\n  // Node operations (get and retrieve nodes, not values)\n\n  put (nodeAndCID, callback) {\n    callback = callback || noop\n    pull(\n      pull.values([nodeAndCID]),\n      this.putStream(callback)\n    )\n  }\n\n  putStream (callback) {\n    callback = callback || noop\n\n    return pull(\n      pull.asyncMap((nodeAndCID, cb) => {\n        const cid = nodeAndCID.cid\n        const r = this.resolvers[cid.codec]\n\n        r.util.serialize(nodeAndCID.node, (err, serialized) => {\n          if (err) {\n            return cb(err)\n          }\n          cb(null, {\n            block: new Block(serialized),\n            cid: cid\n          })\n        })\n      }),\n      this.bs.putStream(),\n      pull.onEnd(callback)\n    )\n  }\n\n  get (cid, callback) {\n    pull(\n      this.getStream(cid),\n      pull.collect((err, res) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, res[0])\n      })\n    )\n  }\n\n  getStream (cid) {\n    return pull(\n      this.bs.getStream(cid),\n      pull.asyncMap((block, cb) => {\n        const r = this.resolvers[cid.codec]\n        if (r) {\n          r.util.deserialize(block.data, (err, deserialized) => {\n            if (err) {\n              return cb(err)\n            }\n            cb(null, deserialized)\n          })\n        } else { // multicodec unknown, send back raw data\n          cb(null, block.data)\n        }\n      })\n    )\n  }\n\n  remove (cids, callback) {\n    this.bs.delete(cids, callback)\n  }\n}\n\nfunction noop () {}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 87\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (coll, iteratee, callback) {\n    var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;\n    eachOfImplementation(coll, iteratee, callback);\n};\n\nvar _isArrayLike = require('lodash/isArrayLike');\n\nvar _isArrayLike2 = _interopRequireDefault(_isArrayLike);\n\nvar _eachOfLimit = require('./eachOfLimit');\n\nvar _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);\n\nvar _doLimit = require('./internal/doLimit');\n\nvar _doLimit2 = _interopRequireDefault(_doLimit);\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _once = require('./internal/once');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _onlyOnce = require('./internal/onlyOnce');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = (0, _once2.default)(callback || _noop2.default);\n    var index = 0,\n        completed = 0,\n        length = coll.length;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err) {\n        if (err) {\n            callback(err);\n        } else if (++completed === length) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nvar eachOfGeneric = (0, _doLimit2.default)(_eachOfLimit2.default, Infinity);\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array. The iteratee is passed a `callback(err)` which must be called once it\n * has completed. If no error has occurred, the callback should be run without\n * arguments or with an explicit `null` argument. Invoked with\n * (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/eachOf.js\n// module id = 88\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _eachOfLimit = require('./eachOfLimit');\n\nvar _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);\n\nvar _doLimit = require('./internal/doLimit');\n\nvar _doLimit2 = _interopRequireDefault(_doLimit);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`. The\n * `key` is the item's key, or index in the case of an array. The iteratee is\n * passed a `callback(err)` which must be called once it has completed. If no\n * error has occurred, the callback should be run without arguments or with an\n * explicit `null` argument. Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n */\nexports.default = (0, _doLimit2.default)(_eachOfLimit2.default, 1);\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/eachOfSeries.js\n// module id = 89\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nexports.default = {};\nmodule.exports = exports[\"default\"];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/internal/breakLoop.js\n// module id = 90\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (coll) {\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\n};\n\nvar iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\n\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/internal/getIterator.js\n// module id = 91\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = iterator;\n\nvar _isArrayLike = require('lodash/isArrayLike');\n\nvar _isArrayLike2 = _interopRequireDefault(_isArrayLike);\n\nvar _getIterator = require('./getIterator');\n\nvar _getIterator2 = _interopRequireDefault(_getIterator);\n\nvar _keys = require('lodash/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? { value: coll[i], key: i } : null;\n    };\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done) return null;\n        i++;\n        return { value: item.value, key: i };\n    };\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = (0, _keys2.default)(obj);\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? { value: obj[key], key: key } : null;\n    };\n}\n\nfunction iterator(coll) {\n    if ((0, _isArrayLike2.default)(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = (0, _getIterator2.default)(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/internal/iterator.js\n// module id = 92\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.hasNextTick = exports.hasSetImmediate = undefined;\nexports.fallback = fallback;\nexports.wrap = wrap;\n\nvar _rest = require('./rest');\n\nvar _rest2 = _interopRequireDefault(_rest);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (0, _rest2.default)(function (fn, args) {\n        defer(function () {\n            fn.apply(null, args);\n        });\n    });\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nexports.default = wrap(_defer);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/internal/setImmediate.js\n// module id = 93\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parallelLimit;\n\nvar _eachOf = require('./eachOf');\n\nvar _eachOf2 = _interopRequireDefault(_eachOf);\n\nvar _parallel = require('./internal/parallel');\n\nvar _parallel2 = _interopRequireDefault(_parallel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to run.\n * Each function is passed a `callback(err, result)` which it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallelLimit(tasks, callback) {\n  (0, _parallel2.default)(_eachOf2.default, tasks, callback);\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/parallel.js\n// module id = 94\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parallelLimit;\n\nvar _eachOfLimit = require('./internal/eachOfLimit');\n\nvar _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);\n\nvar _parallel = require('./internal/parallel');\n\nvar _parallel2 = _interopRequireDefault(_parallel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Collection} tasks - A collection containing functions to run.\n * Each function is passed a `callback(err, result)` which it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n */\nfunction parallelLimit(tasks, limit, callback) {\n  (0, _parallel2.default)((0, _eachOfLimit2.default)(limit), tasks, callback);\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/parallelLimit.js\n// module id = 95\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = until;\n\nvar _whilst = require('./whilst');\n\nvar _whilst2 = _interopRequireDefault(_whilst);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Repeatedly call `fn` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `fn`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `fn`. Invoked with ().\n * @param {Function} fn - A function which is called each time `test` fails.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `fn`'s\n * callback. Invoked with (err, [results]);\n */\nfunction until(test, fn, callback) {\n    (0, _whilst2.default)(function () {\n        return !test.apply(this, arguments);\n    }, fn, callback);\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/until.js\n// module id = 96\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (tasks, callback) {\n    callback = (0, _once2.default)(callback || _noop2.default);\n    if (!(0, _isArray2.default)(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        if (taskIndex === tasks.length) {\n            return callback.apply(null, [null].concat(args));\n        }\n\n        var taskCallback = (0, _onlyOnce2.default)((0, _rest2.default)(function (err, args) {\n            if (err) {\n                return callback.apply(null, [err].concat(args));\n            }\n            nextTask(args);\n        }));\n\n        args.push(taskCallback);\n\n        var task = tasks[taskIndex++];\n        task.apply(null, args);\n    }\n\n    nextTask([]);\n};\n\nvar _isArray = require('lodash/isArray');\n\nvar _isArray2 = _interopRequireDefault(_isArray);\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _once = require('./internal/once');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _rest = require('./internal/rest');\n\nvar _rest2 = _interopRequireDefault(_rest);\n\nvar _onlyOnce = require('./internal/onlyOnce');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports['default'];\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of functions to run, each function is passed\n * a `callback(err, result1, result2, ...)` it must call on completion. The\n * first argument is an error (which can be `null`) and any further arguments\n * will be passed as arguments in order to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/waterfall.js\n// module id = 97\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = whilst;\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _rest = require('./internal/rest');\n\nvar _rest2 = _interopRequireDefault(_rest);\n\nvar _onlyOnce = require('./internal/onlyOnce');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {Function} iteratee - A function which is called each time `test` passes.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns undefined\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function() { return count < 5; },\n *     function(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = (0, _onlyOnce2.default)(callback || _noop2.default);\n    if (!test()) return callback(null);\n    var next = (0, _rest2.default)(function (err, args) {\n        if (err) return callback(err);\n        if (test()) return iteratee(next);\n        callback.apply(null, [null].concat(args));\n    });\n    iteratee(next);\n}\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/whilst.js\n// module id = 98\n// module chunks = 0","// base-x encoding\n// Forked from https://github.com/cryptocoinjs/bs58\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\n\nmodule.exports = function base (ALPHABET) {\n  var ALPHABET_MAP = {}\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n\n  // pre-compute lookup table\n  for (var i = 0; i < ALPHABET.length; i++) {\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i\n  }\n\n  function encode (source) {\n    if (source.length === 0) return ''\n\n    var digits = [0]\n    for (var i = 0; i < source.length; ++i) {\n      for (var j = 0, carry = source[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8\n        digits[j] = carry % BASE\n        carry = (carry / BASE) | 0\n      }\n\n      while (carry > 0) {\n        digits.push(carry % BASE)\n        carry = (carry / BASE) | 0\n      }\n    }\n\n    var string = ''\n\n    // deal with leading zeros\n    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += ALPHABET[0]\n    // convert digits to a string\n    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]]\n\n    return string\n  }\n\n  function decodeUnsafe (string) {\n    if (string.length === 0) return []\n\n    var bytes = [0]\n    for (var i = 0; i < string.length; i++) {\n      var value = ALPHABET_MAP[string[i]]\n      if (value === undefined) return\n\n      for (var j = 0, carry = value; j < bytes.length; ++j) {\n        carry += bytes[j] * BASE\n        bytes[j] = carry & 0xff\n        carry >>= 8\n      }\n\n      while (carry > 0) {\n        bytes.push(carry & 0xff)\n        carry >>= 8\n      }\n    }\n\n    // deal with leading zeros\n    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {\n      bytes.push(0)\n    }\n\n    return bytes.reverse()\n  }\n\n  function decode (string) {\n    var array = decodeUnsafe(string)\n    if (array) return array\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/base-x/index.js\n// module id = 99\n// module chunks = 0","\"use strict\";\n\n/**\n * Generate a character map.\n * @param {string} alphabet e.g. \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"\n * @param {object} mappings map overrides from key to value\n * @method\n */\n\nvar charmap = function (alphabet, mappings) {\n  mappings || (mappings = {});\n  alphabet.split(\"\").forEach(function (c, i) {\n    if (!(c in mappings)) mappings[c] = i;\n  });\n  return mappings;\n}\n\n/**\n * The RFC 4648 base 32 alphabet and character map.\n * @see {@link https://tools.ietf.org/html/rfc4648}\n */\n\nvar rfc4648 = {\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n  charmap: {\n    0: 14,\n    1: 8\n  }\n};\n\nrfc4648.charmap = charmap(rfc4648.alphabet, rfc4648.charmap);\n\n/**\n * The Crockford base 32 alphabet and character map.\n * @see {@link http://www.crockford.com/wrmg/base32.html}\n */\n\nvar crockford = {\n  alphabet: \"0123456789ABCDEFGHJKMNPQRSTVWXYZ\",\n  charmap: {\n    O: 0,\n    I: 1,\n    L: 1\n  }\n};\n\ncrockford.charmap = charmap(crockford.alphabet, crockford.charmap);\n\n/**\n * base32hex\n * @see {@link https://en.wikipedia.org/wiki/Base32#base32hex}\n */\n\nvar base32hex = {\n  alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n  charmap: {}\n};\n\nbase32hex.charmap = charmap(base32hex.alphabet, base32hex.charmap);\n\n/**\n * Create a new `Decoder` with the given options.\n *\n * @param {object} [options]\n *   @param {string} [type] Supported Base-32 variants are \"rfc4648\" and\n *     \"crockford\".\n *   @param {object} [charmap] Override the character map used in decoding.\n * @constructor\n */\n\nfunction Decoder (options) {\n  this.buf = [];\n  this.shift = 8;\n  this.carry = 0;\n\n  if (options) {\n\n    switch (options.type) {\n      case \"rfc4648\":\n        this.charmap = exports.rfc4648.charmap;\n        break;\n      case \"crockford\":\n        this.charmap = exports.crockford.charmap;\n        break;\n      case \"base32hex\":\n        this.charmap = exports.base32hex.charmap;\n        break;\n      default:\n        throw new Error(\"invalid type\");\n    }\n\n    if (options.charmap) this.charmap = options.charmap;\n  }\n}\n\n/**\n * The default character map coresponds to RFC4648.\n */\n\nDecoder.prototype.charmap = rfc4648.charmap;\n\n/**\n * Decode a string, continuing from the previous state.\n *\n * @param {string} str\n * @return {Decoder} this\n */\n\nDecoder.prototype.write = function (str) {\n  var charmap = this.charmap;\n  var buf = this.buf;\n  var shift = this.shift;\n  var carry = this.carry;\n\n  // decode string\n  str.toUpperCase().split(\"\").forEach(function (char) {\n\n    // ignore padding\n    if (char == \"=\") return;\n\n    // lookup symbol\n    var symbol = charmap[char] & 0xff;\n\n    // 1: 00000 000\n    // 2:          00 00000 0\n    // 3:                    0000 0000\n    // 4:                             0 00000 00\n    // 5:                                       000 00000\n    // 6:                                                00000 000\n    // 7:                                                         00 00000 0\n\n    shift -= 5;\n    if (shift > 0) {\n      carry |= symbol << shift;\n    } else if (shift < 0) {\n      buf.push(carry | (symbol >> -shift));\n      shift += 8;\n      carry = (symbol << shift) & 0xff;\n    } else {\n      buf.push(carry | symbol);\n      shift = 8;\n      carry = 0;\n    }\n  });\n\n  // save state\n  this.shift = shift;\n  this.carry = carry;\n\n  // for chaining\n  return this;\n};\n\n/**\n * Finish decoding.\n *\n * @param {string} [str] The final string to decode.\n * @return {Array} Decoded byte array.\n */\n\nDecoder.prototype.finalize = function (str) {\n  if (str) {\n    this.write(str);\n  }\n  if (this.shift !== 8 && this.carry !== 0) {\n    this.buf.push(this.carry);\n    this.shift = 8;\n    this.carry = 0;\n  }\n  return this.buf;\n};\n\n/**\n * Create a new `Encoder` with the given options.\n *\n * @param {object} [options]\n *   @param {string} [type] Supported Base-32 variants are \"rfc4648\" and\n *     \"crockford\".\n *   @param {object} [alphabet] Override the alphabet used in encoding.\n * @constructor\n */\n\nfunction Encoder (options) {\n  this.buf = \"\";\n  this.shift = 3;\n  this.carry = 0;\n\n  if (options) {\n\n    switch (options.type) {\n      case \"rfc4648\":\n        this.alphabet = exports.rfc4648.alphabet;\n        break;\n      case \"crockford\":\n        this.alphabet = exports.crockford.alphabet;\n        break;\n      case \"base32hex\":\n        this.alphabet = exports.base32hex.alphabet;\n        break;\n      default:\n        throw new Error(\"invalid type\");\n    }\n\n    if (options.alphabet) this.alphabet = options.alphabet;\n    else if (options.lc) this.alphabet = this.alphabet.toLowerCase();\n  }\n}\n\n/**\n * The default alphabet coresponds to RFC4648.\n */\n\nEncoder.prototype.alphabet = rfc4648.alphabet;\n\n/**\n * Encode a byte array, continuing from the previous state.\n *\n * @param {byte[]} buf The byte array to encode.\n * @return {Encoder} this\n */\n\nEncoder.prototype.write = function (buf) {\n  var shift = this.shift;\n  var carry = this.carry;\n  var symbol;\n  var byte;\n  var i;\n\n  // encode each byte in buf\n  for (i = 0; i < buf.length; i++) {\n    byte = buf[i];\n\n    // 1: 00000 000\n    // 2:          00 00000 0\n    // 3:                    0000 0000\n    // 4:                             0 00000 00\n    // 5:                                       000 00000\n    // 6:                                                00000 000\n    // 7:                                                         00 00000 0\n\n    symbol = carry | (byte >> shift);\n    this.buf += this.alphabet[symbol & 0x1f];\n\n    if (shift > 5) {\n      shift -= 5;\n      symbol = byte >> shift;\n      this.buf += this.alphabet[symbol & 0x1f];\n    }\n\n    shift = 5 - shift;\n    carry = byte << shift;\n    shift = 8 - shift;\n  }\n\n  // save state\n  this.shift = shift;\n  this.carry = carry;\n\n  // for chaining\n  return this;\n};\n\n/**\n * Finish encoding.\n *\n * @param {byte[]} [buf] The final byte array to encode.\n * @return {string} The encoded byte array.\n */\n\nEncoder.prototype.finalize = function (buf) {\n  if (buf) {\n    this.write(buf);\n  }\n  if (this.shift !== 3) {\n    this.buf += this.alphabet[this.carry & 0x1f];\n    this.shift = 3;\n    this.carry = 0;\n  }\n  return this.buf;\n};\n\n/**\n * Convenience encoder.\n *\n * @param {byte[]} buf The byte array to encode.\n * @param {object} [options] Options to pass to the encoder.\n * @return {string} The encoded string.\n */\n\nexports.encode = function (buf, options) {\n  return new Encoder(options).finalize(buf);\n};\n\n/**\n * Convenience decoder.\n *\n * @param {string} str The string to decode.\n * @param {object} [options] Options to pass to the decoder.\n * @return {byte[]} The decoded byte array.\n */\n\nexports.decode = function (str, options) {\n  return new Decoder(options).finalize(str);\n};\n\n// Exports.\nexports.Decoder = Decoder;\nexports.Encoder = Encoder;\nexports.charmap = charmap;\nexports.crockford = crockford;\nexports.rfc4648 = rfc4648;\nexports.base32hex = base32hex;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/base32.js/base32.js\n// module id = 100\n// module chunks = 0","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/base64-js/index.js\n// module id = 101\n// module chunks = 0","// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki\n// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n// NOTE: SIGHASH byte ignored AND restricted, truncate before use\n\nfunction check (buffer) {\n  if (buffer.length < 8) return false\n  if (buffer.length > 72) return false\n  if (buffer[0] !== 0x30) return false\n  if (buffer[1] !== buffer.length - 2) return false\n  if (buffer[2] !== 0x02) return false\n\n  var lenR = buffer[3]\n  if (lenR === 0) return false\n  if (5 + lenR >= buffer.length) return false\n  if (buffer[4 + lenR] !== 0x02) return false\n\n  var lenS = buffer[5 + lenR]\n  if (lenS === 0) return false\n  if ((6 + lenR + lenS) !== buffer.length) return false\n\n  if (buffer[4] & 0x80) return false\n  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) return false\n\n  if (buffer[lenR + 6] & 0x80) return false\n  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) return false\n  return true\n}\n\nfunction decode (buffer) {\n  if (buffer.length < 8) throw new Error('DER sequence length is too short')\n  if (buffer.length > 72) throw new Error('DER sequence length is too long')\n  if (buffer[0] !== 0x30) throw new Error('Expected DER sequence')\n  if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid')\n  if (buffer[2] !== 0x02) throw new Error('Expected DER integer')\n\n  var lenR = buffer[3]\n  if (lenR === 0) throw new Error('R length is zero')\n  if (5 + lenR >= buffer.length) throw new Error('R length is too long')\n  if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')\n\n  var lenS = buffer[5 + lenR]\n  if (lenS === 0) throw new Error('S length is zero')\n  if ((6 + lenR + lenS) !== buffer.length) throw new Error('S length is invalid')\n\n  if (buffer[4] & 0x80) throw new Error('R value is negative')\n  if (lenR > 1 && (buffer[4] === 0x00) && !(buffer[5] & 0x80)) throw new Error('R value excessively padded')\n\n  if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative')\n  if (lenS > 1 && (buffer[lenR + 6] === 0x00) && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded')\n\n  // non-BIP66 - extract R, S values\n  return {\n    r: buffer.slice(4, 4 + lenR),\n    s: buffer.slice(6 + lenR)\n  }\n}\n\n/*\n * Expects r and s to be positive DER integers.\n *\n * The DER format uses the most significant bit as a sign bit (& 0x80).\n * If the significant bit is set AND the integer is positive, a 0x00 is prepended.\n *\n * Examples:\n *\n *      0 =>     0x00\n *      1 =>     0x01\n *     -1 =>     0xff\n *    127 =>     0x7f\n *   -127 =>     0x81\n *    128 =>   0x0080\n *   -128 =>     0x80\n *    255 =>   0x00ff\n *   -255 =>   0xff01\n *  16300 =>   0x3fac\n * -16300 =>   0xc054\n *  62300 => 0x00f35c\n * -62300 => 0xff0ca4\n*/\nfunction encode (r, s) {\n  var lenR = r.length\n  var lenS = s.length\n  if (lenR === 0) throw new Error('R length is zero')\n  if (lenS === 0) throw new Error('S length is zero')\n  if (lenR > 33) throw new Error('R length is too long')\n  if (lenS > 33) throw new Error('S length is too long')\n  if (r[0] & 0x80) throw new Error('R value is negative')\n  if (s[0] & 0x80) throw new Error('S value is negative')\n  if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')\n  if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')\n\n  var signature = new Buffer(6 + lenR + lenS)\n\n  // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n  signature[0] = 0x30\n  signature[1] = signature.length - 2\n  signature[2] = 0x02\n  signature[3] = r.length\n  r.copy(signature, 4)\n  signature[4 + lenR] = 0x02\n  signature[5 + lenR] = s.length\n  s.copy(signature, 6 + lenR)\n\n  return signature\n}\n\nmodule.exports = {\n  check: check,\n  decode: decode,\n  encode: encode\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bip66/index.js\n// module id = 102\n// module chunks = 0","var r;\n\nmodule.exports = function rand(len) {\n  if (!r)\n    r = new Rand(null);\n\n  return r.generate(len);\n};\n\nfunction Rand(rand) {\n  this.rand = rand;\n}\nmodule.exports.Rand = Rand;\n\nRand.prototype.generate = function generate(len) {\n  return this._rand(len);\n};\n\nif (typeof window === 'object') {\n  if (window.crypto && window.crypto.getRandomValues) {\n    // Modern browsers\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      window.crypto.getRandomValues(arr);\n      return arr;\n    };\n  } else if (window.msCrypto && window.msCrypto.getRandomValues) {\n    // IE\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      window.msCrypto.getRandomValues(arr);\n      return arr;\n    };\n  } else {\n    // Old junk\n    Rand.prototype._rand = function() {\n      throw new Error('Not implemented yet');\n    };\n  }\n} else {\n  // Node.js or Web worker\n  try {\n    var crypto = require('crypto');\n\n    Rand.prototype._rand = function _rand(n) {\n      return crypto.randomBytes(n);\n    };\n  } catch (e) {\n    // Emulate crypto API using randy\n    Rand.prototype._rand = function _rand(n) {\n      var res = new Uint8Array(n);\n      for (var i = 0; i < res.length; i++)\n        res[i] = this.rand.getByte();\n      return res;\n    };\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/brorand/index.js\n// module id = 103\n// module chunks = 0","const Sha3 = require('js-sha3')\n\nconst hashLengths = [ 224, 256, 384, 512 ]\n\nvar hash = function (bitcount) {\n  if (bitcount !== undefined && hashLengths.indexOf(bitcount) == -1)\n    throw new Error('Unsupported hash length')\n  this.content = []\n  this.bitcount = bitcount ? 'keccak_' + bitcount : 'keccak_512'\n}\n\nhash.prototype.update = function (i) {\n  if (Buffer.isBuffer(i))\n    this.content.push(i)\n  else if (typeof i === 'string')\n    this.content.push(new Buffer(i))\n  else\n    throw new Error('Unsupported argument to update')\n  return this\n}\n\nhash.prototype.digest = function (encoding) {\n  var result = Sha3[this.bitcount](Buffer.concat(this.content))\n  if (encoding === 'hex')\n    return result\n  else if (encoding === 'binary' || encoding === undefined)\n    return new Buffer(result, 'hex').toString('binary')\n  else\n    throw new Error('Unsupported encoding for digest: ' + encoding)\n}\n\nmodule.exports = {\n  SHA3Hash: hash\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/browserify-sha3/index.js\n// module id = 104\n// module chunks = 0","/*\n * js-sha3 v0.3.1\n * https://github.com/emn178/js-sha3\n *\n * Copyright 2015, emn178@gmail.com\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n;(function(root, undefined) {\n  'use strict';\n\n  var NODE_JS = typeof(module) != 'undefined';\n  if(NODE_JS) {\n    root = global;\n    if(root.JS_SHA3_TEST) {\n      root.navigator = { userAgent: 'Chrome'};\n    }\n  }\n  var CHROME = (root.JS_SHA3_TEST || !NODE_JS) && navigator.userAgent.indexOf('Chrome') != -1;\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n  var PADDING = [6, 1536, 393216, 100663296];\n  var SHIFT = [0, 8, 16, 24];\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n            0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, \n            2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, \n            2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n            2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n\n  var blocks = [], s = [];\n\n  var keccak_224 = function(message) {\n    return keccak(message, 224, KECCAK_PADDING);\n  };\n\n  var keccak_256 = function(message) {\n    return keccak(message, 256, KECCAK_PADDING);\n  };\n\n  var keccak_384 = function(message) {\n    return keccak(message, 384, KECCAK_PADDING);\n  };\n\n  var sha3_224 = function(message) {\n    return keccak(message, 224, PADDING);\n  };\n\n  var sha3_256 = function(message) {\n    return keccak(message, 256, PADDING);\n  };\n\n  var sha3_384 = function(message) {\n    return keccak(message, 384, PADDING);\n  };\n\n  var sha3_512 = function(message) {\n    return keccak(message, 512, PADDING);\n  };\n\n  var keccak = function(message, bits, padding) {\n    var notString = typeof(message) != 'string';\n    if(notString && message.constructor == root.ArrayBuffer) {\n      message = new Uint8Array(message);\n    }\n\n    if(bits === undefined) {\n      bits = 512;\n      padding = KECCAK_PADDING;\n    }\n\n    var block, code, end = false, index = 0, start = 0, length = message.length,\n        n, i, h, l, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, \n        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, \n        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, \n        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n    var blockCount = (1600 - bits * 2) / 32;\n    var byteCount = blockCount * 4;\n\n    for(i = 0;i < 50;++i) {\n      s[i] = 0;\n    }\n\n    block = 0;\n    do {\n      blocks[0] = block;\n      for(i = 1;i < blockCount + 1;++i) {\n        blocks[i] = 0;\n      }\n      if(notString) {\n        for (i = start;index < length && i < byteCount; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = start;index < length && i < byteCount; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n      start = i - byteCount;\n      if(index == length) {\n        blocks[i >> 2] |= padding[i & 3];\n        ++index;\n      }\n      block = blocks[blockCount];\n      if(index > length && i < byteCount) {\n        blocks[blockCount - 1] |= 0x80000000;\n        end = true;\n      }\n\n      for(i = 0;i < blockCount;++i) {\n        s[i] ^= blocks[i];\n      }\n\n      for(n = 0; n < 48; n += 2) {\n        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n        h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n        l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n        s[0] ^= h;\n        s[1] ^= l;\n        s[10] ^= h;\n        s[11] ^= l;\n        s[20] ^= h;\n        s[21] ^= l;\n        s[30] ^= h;\n        s[31] ^= l;\n        s[40] ^= h;\n        s[41] ^= l;\n        h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n        l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n        s[2] ^= h;\n        s[3] ^= l;\n        s[12] ^= h;\n        s[13] ^= l;\n        s[22] ^= h;\n        s[23] ^= l;\n        s[32] ^= h;\n        s[33] ^= l;\n        s[42] ^= h;\n        s[43] ^= l;\n        h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n        l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n        s[4] ^= h;\n        s[5] ^= l;\n        s[14] ^= h;\n        s[15] ^= l;\n        s[24] ^= h;\n        s[25] ^= l;\n        s[34] ^= h;\n        s[35] ^= l;\n        s[44] ^= h;\n        s[45] ^= l;\n        h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n        l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n        s[6] ^= h;\n        s[7] ^= l;\n        s[16] ^= h;\n        s[17] ^= l;\n        s[26] ^= h;\n        s[27] ^= l;\n        s[36] ^= h;\n        s[37] ^= l;\n        s[46] ^= h;\n        s[47] ^= l;\n        h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n        l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n        s[8] ^= h;\n        s[9] ^= l;\n        s[18] ^= h;\n        s[19] ^= l;\n        s[28] ^= h;\n        s[29] ^= l;\n        s[38] ^= h;\n        s[39] ^= l;\n        s[48] ^= h;\n        s[49] ^= l;\n\n        b0 = s[0];\n        b1 = s[1];\n        b32 = (s[11] << 4) | (s[10] >>> 28);\n        b33 = (s[10] << 4) | (s[11] >>> 28);\n        b14 = (s[20] << 3) | (s[21] >>> 29);\n        b15 = (s[21] << 3) | (s[20] >>> 29);\n        b46 = (s[31] << 9) | (s[30] >>> 23);\n        b47 = (s[30] << 9) | (s[31] >>> 23);\n        b28 = (s[40] << 18) | (s[41] >>> 14);\n        b29 = (s[41] << 18) | (s[40] >>> 14);\n        b20 = (s[2] << 1) | (s[3] >>> 31);\n        b21 = (s[3] << 1) | (s[2] >>> 31);\n        b2 = (s[13] << 12) | (s[12] >>> 20);\n        b3 = (s[12] << 12) | (s[13] >>> 20);\n        b34 = (s[22] << 10) | (s[23] >>> 22);\n        b35 = (s[23] << 10) | (s[22] >>> 22);\n        b16 = (s[33] << 13) | (s[32] >>> 19);\n        b17 = (s[32] << 13) | (s[33] >>> 19);\n        b48 = (s[42] << 2) | (s[43] >>> 30);\n        b49 = (s[43] << 2) | (s[42] >>> 30);\n        b40 = (s[5] << 30) | (s[4] >>> 2);\n        b41 = (s[4] << 30) | (s[5] >>> 2);\n        b22 = (s[14] << 6) | (s[15] >>> 26);\n        b23 = (s[15] << 6) | (s[14] >>> 26);\n        b4 = (s[25] << 11) | (s[24] >>> 21);\n        b5 = (s[24] << 11) | (s[25] >>> 21);\n        b36 = (s[34] << 15) | (s[35] >>> 17);\n        b37 = (s[35] << 15) | (s[34] >>> 17);\n        b18 = (s[45] << 29) | (s[44] >>> 3);\n        b19 = (s[44] << 29) | (s[45] >>> 3);\n        b10 = (s[6] << 28) | (s[7] >>> 4);\n        b11 = (s[7] << 28) | (s[6] >>> 4);\n        b42 = (s[17] << 23) | (s[16] >>> 9);\n        b43 = (s[16] << 23) | (s[17] >>> 9);\n        b24 = (s[26] << 25) | (s[27] >>> 7);\n        b25 = (s[27] << 25) | (s[26] >>> 7);\n        b6 = (s[36] << 21) | (s[37] >>> 11);\n        b7 = (s[37] << 21) | (s[36] >>> 11);\n        b38 = (s[47] << 24) | (s[46] >>> 8);\n        b39 = (s[46] << 24) | (s[47] >>> 8);\n        b30 = (s[8] << 27) | (s[9] >>> 5);\n        b31 = (s[9] << 27) | (s[8] >>> 5);\n        b12 = (s[18] << 20) | (s[19] >>> 12);\n        b13 = (s[19] << 20) | (s[18] >>> 12);\n        b44 = (s[29] << 7) | (s[28] >>> 25);\n        b45 = (s[28] << 7) | (s[29] >>> 25);\n        b26 = (s[38] << 8) | (s[39] >>> 24);\n        b27 = (s[39] << 8) | (s[38] >>> 24);\n        b8 = (s[48] << 14) | (s[49] >>> 18);\n        b9 = (s[49] << 14) | (s[48] >>> 18);\n\n        s[0] = b0 ^ (~b2 & b4);\n        s[1] = b1 ^ (~b3 & b5);\n        s[10] = b10 ^ (~b12 & b14);\n        s[11] = b11 ^ (~b13 & b15);\n        s[20] = b20 ^ (~b22 & b24);\n        s[21] = b21 ^ (~b23 & b25);\n        s[30] = b30 ^ (~b32 & b34);\n        s[31] = b31 ^ (~b33 & b35);\n        s[40] = b40 ^ (~b42 & b44);\n        s[41] = b41 ^ (~b43 & b45);\n        s[2] = b2 ^ (~b4 & b6);\n        s[3] = b3 ^ (~b5 & b7);\n        s[12] = b12 ^ (~b14 & b16);\n        s[13] = b13 ^ (~b15 & b17);\n        s[22] = b22 ^ (~b24 & b26);\n        s[23] = b23 ^ (~b25 & b27);\n        s[32] = b32 ^ (~b34 & b36);\n        s[33] = b33 ^ (~b35 & b37);\n        s[42] = b42 ^ (~b44 & b46);\n        s[43] = b43 ^ (~b45 & b47);\n        s[4] = b4 ^ (~b6 & b8);\n        s[5] = b5 ^ (~b7 & b9);\n        s[14] = b14 ^ (~b16 & b18);\n        s[15] = b15 ^ (~b17 & b19);\n        s[24] = b24 ^ (~b26 & b28);\n        s[25] = b25 ^ (~b27 & b29);\n        s[34] = b34 ^ (~b36 & b38);\n        s[35] = b35 ^ (~b37 & b39);\n        s[44] = b44 ^ (~b46 & b48);\n        s[45] = b45 ^ (~b47 & b49);\n        s[6] = b6 ^ (~b8 & b0);\n        s[7] = b7 ^ (~b9 & b1);\n        s[16] = b16 ^ (~b18 & b10);\n        s[17] = b17 ^ (~b19 & b11);\n        s[26] = b26 ^ (~b28 & b20);\n        s[27] = b27 ^ (~b29 & b21);\n        s[36] = b36 ^ (~b38 & b30);\n        s[37] = b37 ^ (~b39 & b31);\n        s[46] = b46 ^ (~b48 & b40);\n        s[47] = b47 ^ (~b49 & b41);\n        s[8] = b8 ^ (~b0 & b2);\n        s[9] = b9 ^ (~b1 & b3);\n        s[18] = b18 ^ (~b10 & b12);\n        s[19] = b19 ^ (~b11 & b13);\n        s[28] = b28 ^ (~b20 & b22);\n        s[29] = b29 ^ (~b21 & b23);\n        s[38] = b38 ^ (~b30 & b32);\n        s[39] = b39 ^ (~b31 & b33);\n        s[48] = b48 ^ (~b40 & b42);\n        s[49] = b49 ^ (~b41 & b43);\n\n        s[0] ^= RC[n];\n        s[1] ^= RC[n + 1];\n      }\n    } while(!end);\n\n    var hex = '';\n    if(CHROME) {\n      b0 = s[0];\n      b1 = s[1];\n      b2 = s[2];\n      b3 = s[3];\n      b4 = s[4];\n      b5 = s[5];\n      b6 = s[6];\n      b7 = s[7];\n      b8 = s[8];\n      b9 = s[9];\n      b10 = s[10];\n      b11 = s[11];\n      b12 = s[12];\n      b13 = s[13];\n      b14 = s[14];\n      b15 = s[15];\n      hex += HEX_CHARS[(b0 >> 4) & 0x0F] + HEX_CHARS[b0 & 0x0F] +\n             HEX_CHARS[(b0 >> 12) & 0x0F] + HEX_CHARS[(b0 >> 8) & 0x0F] +\n             HEX_CHARS[(b0 >> 20) & 0x0F] + HEX_CHARS[(b0 >> 16) & 0x0F] +\n             HEX_CHARS[(b0 >> 28) & 0x0F] + HEX_CHARS[(b0 >> 24) & 0x0F] +\n             HEX_CHARS[(b1 >> 4) & 0x0F] + HEX_CHARS[b1 & 0x0F] +\n             HEX_CHARS[(b1 >> 12) & 0x0F] + HEX_CHARS[(b1 >> 8) & 0x0F] +\n             HEX_CHARS[(b1 >> 20) & 0x0F] + HEX_CHARS[(b1 >> 16) & 0x0F] +\n             HEX_CHARS[(b1 >> 28) & 0x0F] + HEX_CHARS[(b1 >> 24) & 0x0F] +\n             HEX_CHARS[(b2 >> 4) & 0x0F] + HEX_CHARS[b2 & 0x0F] +\n             HEX_CHARS[(b2 >> 12) & 0x0F] + HEX_CHARS[(b2 >> 8) & 0x0F] +\n             HEX_CHARS[(b2 >> 20) & 0x0F] + HEX_CHARS[(b2 >> 16) & 0x0F] +\n             HEX_CHARS[(b2 >> 28) & 0x0F] + HEX_CHARS[(b2 >> 24) & 0x0F] +\n             HEX_CHARS[(b3 >> 4) & 0x0F] + HEX_CHARS[b3 & 0x0F] +\n             HEX_CHARS[(b3 >> 12) & 0x0F] + HEX_CHARS[(b3 >> 8) & 0x0F] +\n             HEX_CHARS[(b3 >> 20) & 0x0F] + HEX_CHARS[(b3 >> 16) & 0x0F] +\n             HEX_CHARS[(b3 >> 28) & 0x0F] + HEX_CHARS[(b3 >> 24) & 0x0F] +\n             HEX_CHARS[(b4 >> 4) & 0x0F] + HEX_CHARS[b4 & 0x0F] +\n             HEX_CHARS[(b4 >> 12) & 0x0F] + HEX_CHARS[(b4 >> 8) & 0x0F] +\n             HEX_CHARS[(b4 >> 20) & 0x0F] + HEX_CHARS[(b4 >> 16) & 0x0F] +\n             HEX_CHARS[(b4 >> 28) & 0x0F] + HEX_CHARS[(b4 >> 24) & 0x0F] +\n             HEX_CHARS[(b5 >> 4) & 0x0F] + HEX_CHARS[b5 & 0x0F] +\n             HEX_CHARS[(b5 >> 12) & 0x0F] + HEX_CHARS[(b5 >> 8) & 0x0F] +\n             HEX_CHARS[(b5 >> 20) & 0x0F] + HEX_CHARS[(b5 >> 16) & 0x0F] +\n             HEX_CHARS[(b5 >> 28) & 0x0F] + HEX_CHARS[(b5 >> 24) & 0x0F] +\n             HEX_CHARS[(b6 >> 4) & 0x0F] + HEX_CHARS[b6 & 0x0F] +\n             HEX_CHARS[(b6 >> 12) & 0x0F] + HEX_CHARS[(b6 >> 8) & 0x0F] +\n             HEX_CHARS[(b6 >> 20) & 0x0F] + HEX_CHARS[(b6 >> 16) & 0x0F] +\n             HEX_CHARS[(b6 >> 28) & 0x0F] + HEX_CHARS[(b6 >> 24) & 0x0F];\n\n      if(bits >= 256) {\n        hex += HEX_CHARS[(b7 >> 4) & 0x0F] + HEX_CHARS[b7 & 0x0F] +\n               HEX_CHARS[(b7 >> 12) & 0x0F] + HEX_CHARS[(b7 >> 8) & 0x0F] +\n               HEX_CHARS[(b7 >> 20) & 0x0F] + HEX_CHARS[(b7 >> 16) & 0x0F] +\n               HEX_CHARS[(b7 >> 28) & 0x0F] + HEX_CHARS[(b7 >> 24) & 0x0F];\n      }\n      if(bits >= 384) {\n        hex += HEX_CHARS[(b8 >> 4) & 0x0F] + HEX_CHARS[b8 & 0x0F] +\n               HEX_CHARS[(b8 >> 12) & 0x0F] + HEX_CHARS[(b8 >> 8) & 0x0F] +\n               HEX_CHARS[(b8 >> 20) & 0x0F] + HEX_CHARS[(b8 >> 16) & 0x0F] +\n               HEX_CHARS[(b8 >> 28) & 0x0F] + HEX_CHARS[(b8 >> 24) & 0x0F] +\n               HEX_CHARS[(b9 >> 4) & 0x0F] + HEX_CHARS[b9 & 0x0F] +\n               HEX_CHARS[(b9 >> 12) & 0x0F] + HEX_CHARS[(b9 >> 8) & 0x0F] +\n               HEX_CHARS[(b9 >> 20) & 0x0F] + HEX_CHARS[(b9 >> 16) & 0x0F] +\n               HEX_CHARS[(b9 >> 28) & 0x0F] + HEX_CHARS[(b9 >> 24) & 0x0F] +\n               HEX_CHARS[(b10 >> 4) & 0x0F] + HEX_CHARS[b10 & 0x0F] +\n               HEX_CHARS[(b10 >> 12) & 0x0F] + HEX_CHARS[(b10 >> 8) & 0x0F] +\n               HEX_CHARS[(b10 >> 20) & 0x0F] + HEX_CHARS[(b10 >> 16) & 0x0F] +\n               HEX_CHARS[(b10 >> 28) & 0x0F] + HEX_CHARS[(b10 >> 24) & 0x0F] +\n               HEX_CHARS[(b11 >> 4) & 0x0F] + HEX_CHARS[b11 & 0x0F] +\n               HEX_CHARS[(b11 >> 12) & 0x0F] + HEX_CHARS[(b11 >> 8) & 0x0F] +\n               HEX_CHARS[(b11 >> 20) & 0x0F] + HEX_CHARS[(b11 >> 16) & 0x0F] +\n               HEX_CHARS[(b11 >> 28) & 0x0F] + HEX_CHARS[(b11 >> 24) & 0x0F];\n      }\n      if(bits == 512) {\n        hex += HEX_CHARS[(b12 >> 4) & 0x0F] + HEX_CHARS[b12 & 0x0F] +\n               HEX_CHARS[(b12 >> 12) & 0x0F] + HEX_CHARS[(b12 >> 8) & 0x0F] +\n               HEX_CHARS[(b12 >> 20) & 0x0F] + HEX_CHARS[(b12 >> 16) & 0x0F] +\n               HEX_CHARS[(b12 >> 28) & 0x0F] + HEX_CHARS[(b12 >> 24) & 0x0F] +\n               HEX_CHARS[(b13 >> 4) & 0x0F] + HEX_CHARS[b13 & 0x0F] +\n               HEX_CHARS[(b13 >> 12) & 0x0F] + HEX_CHARS[(b13 >> 8) & 0x0F] +\n               HEX_CHARS[(b13 >> 20) & 0x0F] + HEX_CHARS[(b13 >> 16) & 0x0F] +\n               HEX_CHARS[(b13 >> 28) & 0x0F] + HEX_CHARS[(b13 >> 24) & 0x0F] +\n               HEX_CHARS[(b14 >> 4) & 0x0F] + HEX_CHARS[b14 & 0x0F] +\n               HEX_CHARS[(b14 >> 12) & 0x0F] + HEX_CHARS[(b14 >> 8) & 0x0F] +\n               HEX_CHARS[(b14 >> 20) & 0x0F] + HEX_CHARS[(b14 >> 16) & 0x0F] +\n               HEX_CHARS[(b14 >> 28) & 0x0F] + HEX_CHARS[(b14 >> 24) & 0x0F] +\n               HEX_CHARS[(b15 >> 4) & 0x0F] + HEX_CHARS[b15 & 0x0F] +\n               HEX_CHARS[(b15 >> 12) & 0x0F] + HEX_CHARS[(b15 >> 8) & 0x0F] +\n               HEX_CHARS[(b15 >> 20) & 0x0F] + HEX_CHARS[(b15 >> 16) & 0x0F] +\n               HEX_CHARS[(b15 >> 28) & 0x0F] + HEX_CHARS[(b15 >> 24) & 0x0F];\n      }\n    } else {\n      for(i = 0, n = bits / 32;i < n;++i) {\n        h = s[i];\n        hex += HEX_CHARS[(h >> 4) & 0x0F] + HEX_CHARS[h & 0x0F] +\n               HEX_CHARS[(h >> 12) & 0x0F] + HEX_CHARS[(h >> 8) & 0x0F] +\n               HEX_CHARS[(h >> 20) & 0x0F] + HEX_CHARS[(h >> 16) & 0x0F] +\n               HEX_CHARS[(h >> 28) & 0x0F] + HEX_CHARS[(h >> 24) & 0x0F];\n      }\n    }\n    return hex;\n  };\n  \n  if(!root.JS_SHA3_TEST && NODE_JS) {\n    module.exports = {\n      sha3_512: sha3_512,\n      sha3_384: sha3_384,\n      sha3_256: sha3_256,\n      sha3_224: sha3_224,\n      keccak_512: keccak,\n      keccak_384: keccak_384,\n      keccak_256: keccak_256,\n      keccak_224: keccak_224\n    };\n  } else if(root) {\n    root.sha3_512 = sha3_512;\n    root.sha3_384 = sha3_384;\n    root.sha3_256 = sha3_256;\n    root.sha3_224 = sha3_224;\n    root.keccak_512 = keccak;\n    root.keccak_384 = keccak_384;\n    root.keccak_256 = keccak_256;\n    root.keccak_224 = keccak_224;\n  }\n}(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/browserify-sha3/~/js-sha3/src/sha3.js\n// module id = 105\n// module chunks = 0","'use strict'\n\nexports.Commented = require('./commented')\nexports.Diagnose = require('./diagnose')\nexports.Decoder = require('./decoder')\nexports.Encoder = require('./encoder')\nexports.Simple = require('./simple')\nexports.Tagged = require('./tagged')\n\nexports.comment = exports.Commented.comment\nexports.decodeAll = exports.Decoder.decodeAll\nexports.decodeFirst = exports.Decoder.decodeFirst\nexports.decodeAllSync = exports.Decoder.decodeAllSync\nexports.decodeFirstSync = exports.Decoder.decodeFirstSync\nexports.diagnose = exports.Diagnose.diagnose\nexports.encode = exports.Encoder.encode\nexports.decode = exports.Decoder.decodeFirstSync\n\nexports.leveldb = {\n  decode: exports.Decoder.decodeAllSync,\n  encode: exports.Encoder.encode,\n  buffer: true,\n  name: 'cbor'\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cbor/lib/cbor.js\n// module id = 106\n// module chunks = 0","'use strict'\n\nconst stream = require('stream')\nconst util = require('util')\nconst utils = require('./utils')\nconst Simple = require('./simple')\nconst Decoder = require('./decoder')\nconst constants = require('./constants')\nconst bignumber = require('bignumber.js')\nconst NoFilter = require('nofilter')\n\nconst MT = constants.MT,\n      NUMBYTES = constants.NUMBYTES,\n      SYMS = constants.SYMS\n\nfunction plural (c) {\n  if (c > 1) {\n    return 's'\n  } else {\n    return ''\n  }\n}\n\n/**\n * Generate the expanded format of RFC 7049, section 2.2.1\n *\n * @extends {stream.Transform}\n */\nclass Commented extends stream.Transform {\n  /**\n   * Create a CBOR commenter.\n   *\n   * @param {any} [options={}] - Stream options\n   * @param {bool} [options.max_depth=10] - how many times to indent the dashes\n   */\n  constructor (options) {\n    options = options || {}\n    options.readableObjectMode = false\n    options.writableObjectMode = false\n    const max_depth = (options.max_depth != null) ? options.max_depth : 10\n    delete options.max_depth\n    super(options)\n\n    this.depth = 1\n    this.max_depth = max_depth\n    this.all = new NoFilter\n    this.parser = new Decoder(options)\n    this.parser.on('value', this._on_value.bind(this))\n    this.parser.on('start', this._on_start.bind(this))\n    this.parser.on('start-string', this._on_start_string.bind(this))\n    this.parser.on('stop', this._on_stop.bind(this))\n    this.parser.on('more-bytes', this._on_more.bind(this))\n    this.parser.on('error', this._on_error.bind(this))\n    this.parser.on('data', this._on_data.bind(this))\n    this.parser.bs.on('read', this._on_read.bind(this))\n  }\n\n  /**\n   * @private\n   */\n  _transform (fresh, encoding, cb) {\n    this.parser.write(fresh, encoding, function (er) {\n      cb(er)\n    })\n  }\n\n  /**\n   * @private\n   */\n  _flush (cb) {\n    // TODO: find the test that covers this, and look at the return value\n    return this.parser._flush(cb)\n  }\n\n  /**\n   * @callback commentCallback\n   * @param {Error} error - if one was generated\n   * @param {string} commented - the comment string\n   */\n\n  /**\n   * Comment on an input Buffer or string, creating a string passed to the\n   * callback.  If callback not specified, a promise is returned.\n   *\n   * @static\n   * @param {(string|Buffer|NoFilter)} input\n   * @param {(string|object|function)} options\n   * @param {number} [options.max_depth=10] - how many times to indent the dashes\n   * @param {commentCallback=} cb\n   * @returns {Promise} if cb not specified\n   */\n  static comment (input, options, cb) {\n    if (input == null) {\n      throw new Error('input required')\n    }\n    let encoding = (typeof input === 'string') ? 'hex' : void 0\n    let max_depth = 10\n    switch (typeof options) {\n      case 'function':\n        cb = options\n        break\n      case 'string':\n        encoding = options\n        break\n      case 'number':\n        max_depth = options\n        break\n      case 'object':\n        let ref1, ref2\n        encoding = (ref1 = options.encoding) != null ? ref1 : encoding\n        max_depth = (ref2 = options.max_depth) != null ? ref2 : max_depth\n        break\n      case 'undefined':\n        break\n      default:\n        throw new Error('Unknown option type')\n    }\n    const bs = new NoFilter\n    const d = new Commented({\n      max_depth: max_depth\n    })\n    let p = null\n    if (typeof cb === 'function') {\n      d.on('end', function () {\n        return cb(null, bs.toString('utf8'))\n      })\n      d.on('error', cb)\n    } else {\n      p = new Promise(function (resolve, reject) {\n        d.on('end', function () {\n          return resolve(bs.toString('utf8'))\n        })\n        return d.on('error', reject)\n      })\n    }\n    d.pipe(bs)\n    d.end(input, encoding)\n    return p\n  }\n\n  /**\n   * @private\n   */\n  _on_error (er) {\n    return this.push('ERROR: ') &&\n      this.push(er.toString()) &&\n      this.push('\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_read (buf) {\n    this.all.write(buf)\n    const hex = buf.toString('hex')\n    this.push(new Array(this.depth + 1).join('  '))\n    this.push(hex)\n    let ind = (this.max_depth - this.depth) * 2\n    ind -= hex.length\n    if (ind < 1) {\n      ind = 1\n    }\n    this.push(new Array(ind + 1).join(' '))\n    return this.push('-- ')\n  }\n\n  /**\n   * @private\n   */\n  _on_more (mt, len, parent_mt, pos) {\n    this.depth++\n    let desc = ''\n    switch (mt) {\n      case MT.POS_INT:\n        desc = 'Positive number,'\n        break\n      case MT.NEG_INT:\n        desc = 'Negative number,'\n        break\n      case MT.ARRAY:\n        desc = 'Array, length'\n        break\n      case MT.MAP:\n        desc = 'Map, count'\n        break\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length'\n        break\n      case MT.UTF8_STRING:\n        desc = 'String, length'\n        break\n      case MT.SIMPLE_FLOAT:\n        if (len === 1) {\n          desc = 'Simple value,'\n        } else {\n          desc = 'Float,'\n        }\n        break\n    }\n    return this.push(desc + ' next ' + len + ' byte' + (plural(len)) + '\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_start_string (mt, tag, parent_mt, pos) {\n    this.depth++\n    let desc = ''\n    switch (mt) {\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length: ' + tag\n        break\n      case MT.UTF8_STRING:\n        desc = 'String, length: ' + (tag.toString())\n        break\n    }\n    return this.push(desc + '\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_start (mt, tag, parent_mt, pos) {\n    this.depth++\n    if (tag !== SYMS.BREAK) {\n      this.push((function () {\n        switch (parent_mt) {\n          case MT.ARRAY:\n            return '[' + pos + '], '\n          case MT.MAP:\n            if (pos % 2) {\n              return '{Val:' + (Math.floor(pos / 2)) + '}, '\n            } else {\n              return '{Key:' + (Math.floor(pos / 2)) + '}, '\n            }\n        }\n      })())\n    }\n    this.push((function () {\n      switch (mt) {\n        case MT.TAG:\n          return 'Tag #' + tag\n        case MT.ARRAY:\n          if (tag === SYMS.STREAM) {\n            return 'Array (streaming)'\n          } else {\n            return 'Array, ' + tag + ' item' + (plural(tag))\n          }\n        case MT.MAP:\n          if (tag === SYMS.STREAM) {\n            return 'Map (streaming)'\n          } else {\n            return 'Map, ' + tag + ' pair' + (plural(tag))\n          }\n        case MT.BYTE_STRING:\n          return 'Bytes (streaming)'\n        case MT.UTF8_STRING:\n          return 'String (streaming)'\n      }\n    })())\n    return this.push('\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_stop (mt) {\n    return this.depth--\n  }\n\n  /**\n   * @private\n   */\n  _on_value (val, parent_mt, pos, ai) {\n    if (val !== SYMS.BREAK) {\n      this.push((function () {\n        switch (parent_mt) {\n          case MT.ARRAY:\n            return '[' + pos + '], '\n          case MT.MAP:\n            if (pos % 2) {\n              return '{Val:' + (Math.floor(pos / 2)) + '}, '\n            } else {\n              return '{Key:' + (Math.floor(pos / 2)) + '}, '\n            }\n        }\n      })())\n    }\n\n    if (val === SYMS.BREAK) {\n      this.push('BREAK\\n')\n    } else if (val === SYMS.NULL) {\n      this.push('null\\n')\n    } else if (val === SYMS.UNDEFINED) {\n      this.push('undefined\\n')\n    } else if (typeof val === 'string') {\n      this.depth--\n      if (val.length > 0 ) {\n        this.push(JSON.stringify(val))\n        this.push('\\n')\n      }\n    } else if (Buffer.isBuffer(val)) {\n      this.depth--\n      if (val.length > 0) {\n        this.push(val.toString('hex'))\n        this.push('\\n')\n      }\n    } else if (val instanceof bignumber) {\n      this.push(val.toString())\n      this.push('\\n')\n    } else {\n      this.push(util.inspect(val))\n      this.push('\\n')\n    }\n\n    switch (ai) {\n      case NUMBYTES.ONE:\n      case NUMBYTES.TWO:\n      case NUMBYTES.FOUR:\n      case NUMBYTES.EIGHT:\n        this.depth--\n    }\n  }\n\n  /**\n   * @private\n   */\n  _on_data () {\n    this.push('0x')\n    this.push(this.all.read().toString('hex'))\n    return this.push('\\n')\n  }\n}\n\nmodule.exports = Commented\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cbor/lib/commented.js\n// module id = 107\n// module chunks = 0","'use strict'\n\nconst stream = require('stream')\nconst util = require('util')\nconst Decoder = require('./decoder')\nconst Simple = require('./simple')\nconst utils = require('./utils')\nconst constants = require('./constants')\nconst bignumber = require('bignumber.js')\nconst NoFilter = require('nofilter')\n\nconst MT = constants.MT, SYMS = constants.SYMS\n\n/**\n * Output the diagnostic format from a stream of CBOR bytes.\n *\n * @extends {stream.Transform}\n */\nclass Diagnose extends stream.Transform {\n\n  /**\n   * Creates an instance of Diagnose.\n   *\n   * @param {Object} [options={}] - options for creation\n   * @param {string} [options.separator='\\n'] - output between detected objects\n   * @param {bool} [options.stream_errors=false] - put error info into the\n   *   output stream\n   * @param {number} [options.max_depth=-1] - -1 for \"until you run out of\n   *   memory\".  Set this to a finite positive number for un-trusted inputs.  Most\n   *   standard inputs won't nest more than 100 or so levels; I've tested into the\n   *   millions before running out of memory.\n   */\n  constructor (options) {\n    options = options || {}\n    const separator = (options.separator != null) ? options.separator : '\\n'\n    delete options.separator\n    const stream_errors = (options.stream_errors != null) ? options.stream_errors : false\n    delete options.stream_errors\n    options.readableObjectMode = false\n    options.writableObjectMode = false\n    super(options)\n\n    this.float_bytes = -1\n    this.separator = separator\n    this.stream_errors = stream_errors\n    this.parser = new Decoder(options)\n    this.parser.on('more-bytes', this._on_more.bind(this))\n    this.parser.on('value', this._on_value.bind(this))\n    this.parser.on('start', this._on_start.bind(this))\n    this.parser.on('stop', this._on_stop.bind(this))\n    this.parser.on('data', this._on_data.bind(this))\n    this.parser.on('error', this._on_error.bind(this))\n  }\n\n  _transform (fresh, encoding, cb) {\n    return this.parser.write(fresh, encoding, cb)\n  }\n\n  _flush (cb) {\n    return this.parser._flush((er) => {\n      if (this.stream_errors) {\n        this._on_error(er)\n        return cb()\n      } else {\n        return cb(er)\n      }\n    })\n  }\n\n  /**\n   * Convenience function to return a string in diagnostic format.\n   *\n   * @param {(Buffer|string)} input - the CBOR bytes to format\n   * @param {string} [encoding='hex'] - the encoding of input, ignored if input is Buffer\n   * @param {commentCallback} cb - callback\n   * @returns {Promise} if callback not specified\n   */\n  static diagnose (input, encoding, cb) {\n    if (input == null) {\n      throw new Error('input required')\n    }\n    let opts = {}\n    let encod = 'hex'\n    switch (typeof encoding) {\n      case 'function':\n        cb = encoding\n        encod = utils.guessEncoding(input)\n        break\n      case 'object':\n        opts = utils.extend({}, encoding)\n        encod = (opts.encoding != null) ? opts.encoding : utils.guessEncoding(input)\n        delete opts.encoding\n        break\n      default:\n        encod = (encoding != null) ? encoding : 'hex'\n    }\n    const bs = new NoFilter\n    const d = new Diagnose(opts)\n    let p = null\n    if (typeof cb === 'function') {\n      d.on('end', function () {\n        return cb(null, bs.toString('utf8'))\n      })\n      d.on('error', cb)\n    } else {\n      p = new Promise(function (resolve, reject) {\n        d.on('end', function () {\n          return resolve(bs.toString('utf8'))\n        })\n        return d.on('error', reject)\n      })\n    }\n    d.pipe(bs)\n    d.end(input, encod)\n    return p\n  }\n\n  _on_error (er) {\n    if (this.stream_errors) {\n      return this.push(er.toString())\n    } else {\n      return this.emit('error', er)\n    }\n  }\n\n  _on_more (mt, len, parent_mt, pos) {\n    if (mt === MT.SIMPLE_FLOAT) {\n      return this.float_bytes = (function () {\n        switch (len) {\n          case 2:\n            return 1\n          case 4:\n            return 2\n          case 8:\n            return 3\n        }\n      })()\n    }\n  }\n\n  _fore (parent_mt, pos) {\n    switch (parent_mt) {\n      case MT.BYTE_STRING:\n      case MT.UTF8_STRING:\n      case MT.ARRAY:\n        if (pos > 0) {\n          return this.push(', ')\n        }\n        break\n      case MT.MAP:\n        if (pos > 0) {\n          if (pos % 2) {\n            return this.push(': ')\n          } else {\n            return this.push(', ')\n          }\n        }\n    }\n  }\n\n  _on_value (val, parent_mt, pos) {\n    if (val === SYMS.BREAK) {\n      return\n    }\n    this._fore(parent_mt, pos)\n    return this.push((function () {\n      switch (false) {\n        case val !== SYMS.NULL:\n          return 'null'\n        case val !== SYMS.UNDEFINED:\n          return 'undefined'\n        case typeof val !== 'string':\n          return JSON.stringify(val)\n        case !(this.float_bytes > 0):\n          const fb = this.float_bytes\n          this.float_bytes = -1\n          return (util.inspect(val)) + '_' + fb\n        case !Buffer.isBuffer(val):\n          return \"h'\" + (val.toString('hex')) + \"'\"\n        case !(val instanceof bignumber):\n          return val.toString()\n        default:\n          return util.inspect(val)\n      }\n    }).call(this))\n  }\n\n  _on_start (mt, tag, parent_mt, pos) {\n    this._fore(parent_mt, pos)\n    this.push((function () {\n      switch (mt) {\n        case MT.TAG:\n          return tag + '('\n        case MT.ARRAY:\n          return '['\n        case MT.MAP:\n          return '{'\n        case MT.BYTE_STRING:\n        case MT.UTF8_STRING:\n          return '('\n        default:\n          // istanbul ignore next\n          throw new Error('Unknown diagnostic type: ' + mt)\n      }\n    })())\n    if (tag === SYMS.STREAM) {\n      return this.push('_ ')\n    }\n  }\n\n  _on_stop (mt) {\n    return this.push((function () {\n      switch (mt) {\n        case MT.TAG:\n          return ')'\n        case MT.ARRAY:\n          return ']'\n        case MT.MAP:\n          return '}'\n        case MT.BYTE_STRING:\n        case MT.UTF8_STRING:\n          return ')'\n        default:\n          // istanbul ignore next\n          throw new Error('Unknown diagnostic type: ' + mt)\n      }\n    })())\n  }\n\n  _on_data () {\n    return this.push(this.separator)\n  }\n}\n\nmodule.exports = Diagnose\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cbor/lib/diagnose.js\n// module id = 108\n// module chunks = 0","'use strict'\n\nconst stream = require('stream')\nconst url = require('url')\nconst bignumber = require('bignumber.js')\nconst NoFilter = require('nofilter')\nconst Tagged = require('./tagged')\nconst Simple = require('./simple')\nconst utils = require('./utils')\n\nconst constants = require('./constants')\nconst MT = constants.MT, NUMBYTES = constants.NUMBYTES, SHIFT32 = constants.SHIFT32, SYMS = constants.SYMS, TAG = constants.TAG\nconst HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO\nconst FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR\nconst DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT\nconst TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE\nconst FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE\nconst UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED\nconst NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL\n\nconst MAXINT_BN = new bignumber('0x20000000000000')\nconst BUF_NAN = new Buffer('f97e00', 'hex')\nconst BUF_INF_NEG = new Buffer('f9fc00', 'hex')\nconst BUF_INF_POS = new Buffer('f97c00', 'hex')\n\n/**\n * Transform JavaScript values into CBOR bytes.  The `Writable` side of\n * the stream is in object mode.\n *\n * @extends {stream.Transform}\n */\nclass Encoder extends stream.Transform {\n\n  /**\n   * Creates an instance of Encoder.\n   *\n   * @param {Object} [options={}] - options for the encoder\n   * @param {any[]} [options.genTypes=[]] - array of pairs of `type`,\n   *   `function(Encoder)` for semantic types to be encoded.  Not needed\n   *   for Array, Date, Buffer, Map, RegExp, Set, Url, or bignumber.\n   * @param {boolean} [options.canonical=false] - should the output be\n   *   canonicalized\n   */\n  constructor (options) {\n    options = options || {}\n    options.readableObjectMode = false\n    options.writableObjectMode = true\n    super(options)\n\n    this.canonical = options.canonical\n    this.semanticTypes = [\n      Array, this._pushArray,\n      Date, this._pushDate,\n      Buffer, this._pushBuffer,\n      Map, this._pushMap,\n      NoFilter, this._pushNoFilter,\n      RegExp, this._pushRegexp,\n      Set, this._pushSet,\n      url.Url, this._pushUrl,\n      bignumber, this._pushBigNumber\n    ]\n\n    const addTypes = options.genTypes || []\n    for (let i = 0, len = addTypes.length; i < len; i += 2) {\n      this.addSemanticType(addTypes[i], addTypes[i + 1])\n    }\n  }\n\n  _transform (fresh, encoding, cb) {\n    const ret = this.pushAny(fresh)\n    // Old transformers might not return bool.  undefined !== false\n    return cb((ret === false) ? new Error('Push Error') : undefined)\n  }\n\n  _flush (cb) {\n    return cb()\n  }\n\n  /**\n   * @callback encodeFunction\n   * @param {Encoder} encoder - the encoder to serialize into.  Call \"write\"\n   *   on the encoder as needed.\n   * @return {bool} - true on success, else false\n   */\n\n  /**\n   * Add an encoding function to the list of supported semantic types.  This is\n   * useful for objects for which you can't add an encodeCBOR method\n   *\n   * @param {any} type\n   * @param {any} fun\n   * @returns {encodeFunction}\n   */\n  addSemanticType (type, fun) {\n    for (let i = 0, len = this.semanticTypes.length; i < len; i += 2) {\n      const typ = this.semanticTypes[i]\n      if (typ === type) {\n        const old = this.semanticTypes[i + 1]\n        this.semanticTypes[i + 1] = fun\n        return old\n      }\n    }\n    this.semanticTypes.push(type, fun)\n    return null\n  }\n\n  _pushUInt8 (val) {\n    const b = new Buffer(1)\n    b.writeUInt8(val)\n    return this.push(b)\n  }\n\n  _pushUInt16BE (val) {\n    const b = new Buffer(2)\n    b.writeUInt16BE(val)\n    return this.push(b)\n  }\n\n  _pushUInt32BE (val) {\n    const b = new Buffer(4)\n    b.writeUInt32BE(val)\n    return this.push(b)\n  }\n\n  _pushDoubleBE (val) {\n    const b = new Buffer(8)\n    b.writeDoubleBE(val)\n    return this.push(b)\n  }\n\n  _pushNaN () {\n    return this.push(BUF_NAN)\n  }\n\n  _pushInfinity (obj) {\n    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS\n    return this.push(half)\n  }\n\n  _pushFloat (obj) {\n    if (this.canonical) {\n      // TODO: is this enough slower to hide behind canonical?\n      // It's certainly enough of a hack (see utils.parseHalf)\n\n      // From section 3.9:\n      // If a protocol allows for IEEE floats, then additional canonicalization\n      // rules might need to be added.  One example rule might be to have all\n      // floats start as a 64-bit float, then do a test conversion to a 32-bit\n      // float; if the result is the same numeric value, use the shorter value\n      // and repeat the process with a test conversion to a 16-bit float.  (This\n      // rule selects 16-bit float for positive and negative Infinity as well.)\n\n      // which seems pretty much backwards to me.\n      const b2 = new Buffer(2)\n      if (utils.writeHalf(b2, obj)) {\n        if (utils.parseHalf(b2) === obj) {\n          return this._pushUInt8(HALF) && this.push(b2)\n        }\n      }\n      const b4 = new Buffer(4)\n      b4.writeFloatBE(obj)\n      if (b4.readFloatBE() === obj) {\n        return this._pushUInt8(FLOAT) && this.push(b4)\n      }\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)\n  }\n\n  _pushInt (obj, mt, orig) {\n    const m = mt << 5\n    switch (false) {\n      case !(obj < 24):\n        return this._pushUInt8(m | obj)\n      case !(obj <= 0xff):\n        return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)\n      case !(obj <= 0xffff):\n        return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)\n      case !(obj <= 0xffffffff):\n        return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)\n      case !(obj <= Number.MAX_SAFE_INTEGER):\n        return this._pushUInt8(m | NUMBYTES.EIGHT) &&\n          this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&\n          this._pushUInt32BE(obj % SHIFT32)\n      default:\n        if (mt === MT.NEG_INT) {\n          return this._pushFloat(orig)\n        } else {\n          return this._pushFloat(obj)\n        }\n    }\n  }\n\n  _pushIntNum (obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj)\n    } else {\n      return this._pushInt(obj, MT.POS_INT)\n    }\n  }\n\n  _pushNumber (obj) {\n    switch (false) {\n      case !isNaN(obj):\n        return this._pushNaN(obj)\n      case isFinite(obj):\n        return this._pushInfinity(obj)\n      case Math.round(obj) !== obj:\n        return this._pushIntNum(obj)\n      default:\n        return this._pushFloat(obj)\n    }\n  }\n\n  _pushString (obj) {\n    const len = Buffer.byteLength(obj, 'utf8')\n    return this._pushInt(len, MT.UTF8_STRING) && this.push(obj, 'utf8')\n  }\n\n  _pushBoolean (obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE)\n  }\n\n  _pushUndefined (obj) {\n    return this._pushUInt8(UNDEFINED)\n  }\n\n  _pushNull (obj) {\n    return this._pushUInt8(NULL)\n  }\n\n  _pushArray (gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushTag (tag) {\n    return this._pushInt(tag, MT.TAG)\n  }\n\n  _pushDate (gen, obj) {\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(obj / 1000)\n  }\n\n  _pushBuffer (gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)\n  }\n\n  _pushNoFilter (gen, obj) {\n    return gen._pushBuffer(gen, obj.slice())\n  }\n\n  _pushRegexp (gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)\n  }\n\n  _pushSet (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false\n    }\n    for (let x of obj) {\n      if (!gen.pushAny(x)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUrl (gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())\n  }\n\n  _pushBigint (obj) {\n    let tag = TAG.POS_BIGINT\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1)\n      tag = TAG.NEG_BIGINT\n    }\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = new Buffer(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  _pushBigNumber (gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN()\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj)\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&\n      gen._pushInt(2, MT.ARRAY))) {\n      return false\n    }\n\n    const dec = obj.decimalPlaces()\n    const slide = obj.mul(new bignumber(10).pow(dec))\n    if (!gen._pushIntNum(-dec)) {\n      return false\n    }\n    if (slide.abs().lessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber())\n    } else {\n      return gen._pushBigint(slide)\n    }\n  }\n\n  _pushMap (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false\n    }\n    // memoizing the cbor only helps in certain cases, and hurts in most\n    // others.  Just avoid it.\n    if (gen.canonical) {\n      // keep the key/value pairs together, so we don't have to do odd\n      // gets with object keys later\n      const entries = []\n      // iterator.  If we drop support for node4, use ...\n      for (const e of obj.entries()) {\n        entries.push(e)\n      }\n      entries.sort((a,b) => {\n        // a, b are both entries of [key, value]\n        const a_cbor = Encoder.encode(a[0])\n        const b_cbor = Encoder.encode(b[0])\n        return a_cbor.compare(b_cbor)\n      })\n      for (const kv of entries) {\n        if (!(gen.pushAny(kv[0]) && gen.pushAny(kv[1]))) {\n          return false\n        }\n      }\n    } else {\n      for (const kv of obj) {\n        if (!(gen.pushAny(kv[0]) && gen.pushAny(kv[1]))) {\n          return false\n        }\n      }\n    }\n    return true\n  }\n\n  _pushObject (obj) {\n    if (!obj) {\n      return this._pushNull(obj)\n    }\n    for (let i = 0, len1 = this.semanticTypes.length; i < len1; i += 2) {\n      const typ = this.semanticTypes[i]\n      if (obj instanceof typ) {\n        return this.semanticTypes[i + 1].call(obj, this, obj)\n      }\n    }\n    const f = obj.encodeCBOR\n    if (typeof f === 'function') {\n      return f.call(obj, this)\n    }\n    const keys = Object.keys(obj)\n    const cbor_keys = {}\n    if (this.canonical) {\n      // note: this can't be a normal sort, because 'b' needs to sort before\n      // 'aa'\n      keys.sort((a, b) => {\n        // Always strings, so don't bother to pass options.\n        // hold on to the cbor versions, since there's no need\n        // to encode more than once\n        const a_cbor = cbor_keys[a] || (cbor_keys[a] = Encoder.encode(a))\n        const b_cbor = cbor_keys[b] || (cbor_keys[b] = Encoder.encode(b))\n\n        return a_cbor.compare(b_cbor)\n      })\n    }\n    if (!this._pushInt(keys.length, MT.MAP)) {\n      return false\n    }\n    let ck\n    for (let j = 0, len2 = keys.length; j < len2; j++) {\n      const k = keys[j]\n      if (this.canonical && ((ck = cbor_keys[k]))) {\n        if (!this.push(ck)) { // already a Buffer\n          return false\n        }\n      } else {\n        if (!this._pushString(k)) {\n          return false\n        }\n      }\n      if (!this.pushAny(obj[k])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny (obj) {\n    switch (typeof obj) {\n      case 'number':\n        return this._pushNumber(obj)\n      case 'string':\n        return this._pushString(obj)\n      case 'boolean':\n        return this._pushBoolean(obj)\n      case 'undefined':\n        return this._pushUndefined(obj)\n      case 'object':\n        return this._pushObject(obj)\n      case 'symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushNull(null)\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(void 0)\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString())\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (!!obj ? obj.toString() : ''))\n    }\n  }\n\n  /* backwards-compat wrapper */\n  _pushAny (obj) {\n    // TODO: write deprecation warning\n    return this.pushAny(obj)\n  }\n\n  /**\n   * Encode one or more JavaScript objects, and return a Buffer containing the\n   * CBOR bytes.\n   *\n   * @param {...any} objs - the objects to encode\n   * @returns {Buffer} - the encoded objects\n   */\n  static encode () {\n    const objs = Array.prototype.slice.apply(arguments)\n    const enc = new Encoder()\n    const bs = new NoFilter()\n    enc.pipe(bs)\n    for (let o of objs) {\n      if (typeof o === 'undefined') {\n        enc._pushUndefined()\n      } else if (o === null) {\n        enc._pushNull(null)\n      } else {\n        enc.write(o)\n      }\n    }\n    enc.end()\n    return bs.read()\n  }\n}\n\nmodule.exports = Encoder\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cbor/lib/encoder.js\n// module id = 109\n// module chunks = 0","// Tweaked version of nathan7's binary-parse-stream\n// (see https://github.com/nathan7/binary-parse-stream)\n// Uses NoFilter instead of the readable in the original.  Removes\n// the ability to read -1, which was odd and un-needed.\n// License for binary-parse-stream: MIT\n\n'use strict';\nexports = module.exports = BinaryParseStream\nvar Stream = require('stream')\n  , TransformStream = Stream.Transform\n  , inherits = require('util').inherits\n  , NoFilter = require('nofilter')\n\nexports.One = -1\n\ninherits(BinaryParseStream, TransformStream)\nfunction BinaryParseStream(options) {\n  TransformStream.call(this, options)\n  this._writableState.objectMode = false\n  this._readableState.objectMode = true\n\n  this.bs = new NoFilter()\n  this.__restart()\n}\n\nBinaryParseStream.prototype._transform = function(fresh, encoding, cb) { var self = this\n  this.bs.write(fresh)\n\n  while (this.bs.length >= this.__needed) {\n    var ret\n      , chunk = this.__needed === null\n        ? undefined\n        : this.bs.read(this.__needed)\n\n    try { ret = this.__parser.next(chunk) }\n    catch (e) {\n      return cb(e) }\n\n    if (this.__needed)\n      this.__fresh = false\n\n    if (!ret.done)\n      this.__needed = ret.value | 0\n    else {\n      this.push(ret.value)\n      this.__restart()\n    }\n  }\n\n  return cb()\n}\n\nBinaryParseStream.prototype.__restart = function() {\n  this.__needed = null\n  this.__parser = this._parse()\n  this.__fresh = true\n}\n\nBinaryParseStream.prototype._flush = function(cb) {\n  cb(this.__fresh\n    ? null\n    : new Error('unexpected end of input'))\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cbor/vendor/binary-parse-stream/index.js\n// module id = 110\n// module chunks = 0","var Transform = require('stream').Transform\nvar inherits = require('inherits')\nvar StringDecoder = require('string_decoder').StringDecoder\nmodule.exports = CipherBase\ninherits(CipherBase, Transform)\nfunction CipherBase (hashMode) {\n  Transform.call(this)\n  this.hashMode = typeof hashMode === 'string'\n  if (this.hashMode) {\n    this[hashMode] = this._finalOrDigest\n  } else {\n    this.final = this._finalOrDigest\n  }\n  this._decoder = null\n  this._encoding = null\n}\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n  if (typeof data === 'string') {\n    data = new Buffer(data, inputEnc)\n  }\n  var outData = this._update(data)\n  if (this.hashMode) {\n    return this\n  }\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc)\n  }\n  return outData\n}\n\nCipherBase.prototype.setAutoPadding = function () {}\n\nCipherBase.prototype.getAuthTag = function () {\n  throw new Error('trying to get auth tag in unsupported state')\n}\n\nCipherBase.prototype.setAuthTag = function () {\n  throw new Error('trying to set auth tag in unsupported state')\n}\n\nCipherBase.prototype.setAAD = function () {\n  throw new Error('trying to set aad in unsupported state')\n}\n\nCipherBase.prototype._transform = function (data, _, next) {\n  var err\n  try {\n    if (this.hashMode) {\n      this._update(data)\n    } else {\n      this.push(this._update(data))\n    }\n  } catch (e) {\n    err = e\n  } finally {\n    next(err)\n  }\n}\nCipherBase.prototype._flush = function (done) {\n  var err\n  try {\n    this.push(this._final())\n  } catch (e) {\n    err = e\n  } finally {\n    done(err)\n  }\n}\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\n  var outData = this._final() || new Buffer('')\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc, true)\n  }\n  return outData\n}\n\nCipherBase.prototype._toString = function (value, enc, fin) {\n  if (!this._decoder) {\n    this._decoder = new StringDecoder(enc)\n    this._encoding = enc\n  }\n  if (this._encoding !== enc) {\n    throw new Error('can\\'t switch encodings')\n  }\n  var out = this._decoder.write(value)\n  if (fin) {\n    out += this._decoder.end()\n  }\n  return out\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/cipher-base/index.js\n// module id = 111\n// module chunks = 0","'use strict';\nvar intSize = 4;\nvar zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);\nvar chrsz = 8;\n\nfunction toArray(buf, bigEndian) {\n  if ((buf.length % intSize) !== 0) {\n    var len = buf.length + (intSize - (buf.length % intSize));\n    buf = Buffer.concat([buf, zeroBuffer], len);\n  }\n\n  var arr = [];\n  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;\n  for (var i = 0; i < buf.length; i += intSize) {\n    arr.push(fn.call(buf, i));\n  }\n  return arr;\n}\n\nfunction toBuffer(arr, size, bigEndian) {\n  var buf = new Buffer(size);\n  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;\n  for (var i = 0; i < arr.length; i++) {\n    fn.call(buf, arr[i], i * 4, true);\n  }\n  return buf;\n}\n\nfunction hash(buf, fn, hashSize, bigEndian) {\n  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);\n  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);\n  return toBuffer(arr, hashSize, bigEndian);\n}\nexports.hash = hash;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/create-hash/helpers.js\n// module id = 112\n// module chunks = 0","'use strict';\n/*\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n\nvar helpers = require('./helpers');\n\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length\n */\nfunction core_md5(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << ((len) % 32);\n  x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n\n  for(var i = 0; i < x.length; i += 16)\n  {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n\n    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);\n    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);\n    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);\n    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);\n    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);\n    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);\n    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);\n    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);\n    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\n    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);\n    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);\n    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);\n    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);\n    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);\n    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);\n    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);\n\n    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);\n    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\n    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);\n    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);\n    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);\n    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);\n    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);\n    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);\n    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\n    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);\n    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);\n    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);\n    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);\n    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);\n    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);\n    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);\n\n    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);\n    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);\n    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);\n    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);\n    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\n    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);\n    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);\n    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);\n    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);\n    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);\n    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);\n    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);\n    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);\n    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);\n    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);\n    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);\n\n    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);\n    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);\n    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);\n    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);\n    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);\n    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);\n    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);\n    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);\n    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\n    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);\n    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);\n    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);\n    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);\n    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);\n    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);\n    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n  }\n  return Array(a, b, c, d);\n\n}\n\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\nfunction md5_cmn(q, a, b, x, s, t)\n{\n  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);\n}\nfunction md5_ff(a, b, c, d, x, s, t)\n{\n  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n}\nfunction md5_gg(a, b, c, d, x, s, t)\n{\n  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n}\nfunction md5_hh(a, b, c, d, x, s, t)\n{\n  return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction md5_ii(a, b, c, d, x, s, t)\n{\n  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction bit_rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\nmodule.exports = function md5(buf) {\n  return helpers.hash(buf, core_md5, 16);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/create-hash/md5.js\n// module id = 113\n// module chunks = 0","'use strict';\n\nvar BN = require('bn.js');\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new BN(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new BN(0).toRed(this.red);\n  this.one = new BN(1).toRed(this.red);\n  this.two = new BN(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new BN(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n\n  // Generalized Greg Maxwell's trick\n  var adjustCount = this.n && this.p.div(this.n);\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n    this.redN = null;\n  } else {\n    this._maxwellTrick = true;\n    this.redN = this.n.toRed(this.red);\n  }\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  assert(p.precomputed);\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  for (var j = 0; j < naf.length; j += doubles.step) {\n    var nafW = 0;\n    for (var k = j + doubles.step - 1; k >= j; k--)\n      nafW = (nafW << 1) + naf[k];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (var j = 0; j < repr.length; j++) {\n      var nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var k = 0; i >= 0 && naf[i] === 0; i--)\n      k++;\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n                                                       points,\n                                                       coeffs,\n                                                       len,\n                                                       jacobianResult) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  for (var i = 0; i < len; i++) {\n    var p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (var i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a]);\n      naf[b] = getNAF(coeffs[b], wndWidth[b]);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b] /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (var j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (var i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (var j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (var j = 0; j < len; j++) {\n      var z = tmp[j];\n      var p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (var i = 0; i < len; i++)\n    wnd[i] = null;\n\n  if (jacobianResult)\n    return acc;\n  else\n    return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.eq = function eq(/*other*/) {\n  throw new Error('Not implemented');\n};\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  bytes = utils.toArray(bytes, enc);\n\n  var len = this.p.byteLength();\n\n  // uncompressed, hybrid-odd, hybrid-even\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n      bytes.length - 1 === 2 * len) {\n    if (bytes[0] === 0x06)\n      assert(bytes[bytes.length - 1] % 2 === 0);\n    else if (bytes[0] === 0x07)\n      assert(bytes[bytes.length - 1] % 2 === 1);\n\n    var res =  this.point(bytes.slice(1, 1 + len),\n                          bytes.slice(1 + len, 1 + 2 * len));\n\n    return res;\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n              bytes.length - 1 === len) {\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n  }\n  throw new Error('Unknown point format');\n};\n\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n  return this.encode(enc, true);\n};\n\nBasePoint.prototype._encode = function _encode(compact) {\n  var len = this.curve.p.byteLength();\n  var x = this.getX().toArray('be', len);\n\n  if (compact)\n    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n\n  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;\n};\n\nBasePoint.prototype.encode = function encode(enc, compact) {\n  return utils.encode(this._encode(compact), enc);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n  if (!this.precomputed)\n    return false;\n\n  var doubles = this.precomputed.doubles;\n  if (!doubles)\n    return false;\n\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/curve/base.js\n// module id = 114\n// module chunks = 0","'use strict';\n\nvar curve = require('../curve');\nvar elliptic = require('../../elliptic');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = curve.base;\n\nvar assert = elliptic.utils.assert;\n\nfunction EdwardsCurve(conf) {\n  // NOTE: Important as we are creating point in Base.call()\n  this.twisted = (conf.a | 0) !== 1;\n  this.mOneA = this.twisted && (conf.a | 0) === -1;\n  this.extended = this.mOneA;\n\n  Base.call(this, 'edwards', conf);\n\n  this.a = new BN(conf.a, 16).umod(this.red.m);\n  this.a = this.a.toRed(this.red);\n  this.c = new BN(conf.c, 16).toRed(this.red);\n  this.c2 = this.c.redSqr();\n  this.d = new BN(conf.d, 16).toRed(this.red);\n  this.dd = this.d.redAdd(this.d);\n\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n  this.oneC = (conf.c | 0) === 1;\n}\ninherits(EdwardsCurve, Base);\nmodule.exports = EdwardsCurve;\n\nEdwardsCurve.prototype._mulA = function _mulA(num) {\n  if (this.mOneA)\n    return num.redNeg();\n  else\n    return this.a.redMul(num);\n};\n\nEdwardsCurve.prototype._mulC = function _mulC(num) {\n  if (this.oneC)\n    return num;\n  else\n    return this.c.redMul(num);\n};\n\n// Just for compatibility with Short curve\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n  return this.point(x, y, z, t);\n};\n\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var x2 = x.redSqr();\n  var rhs = this.c2.redSub(this.a.redMul(x2));\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n\n  var y2 = rhs.redMul(lhs.redInvm());\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n  y = new BN(y, 16);\n  if (!y.red)\n    y = y.toRed(this.red);\n\n  // x^2 = (y^2 - 1) / (d y^2 + 1)\n  var y2 = y.redSqr();\n  var lhs = y2.redSub(this.one);\n  var rhs = y2.redMul(this.d).redAdd(this.one);\n  var x2 = lhs.redMul(rhs.redInvm());\n\n  if (x2.cmp(this.zero) === 0) {\n    if (odd)\n      throw new Error('invalid point');\n    else\n      return this.point(this.zero, y);\n  }\n\n  var x = x2.redSqrt();\n  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  if (x.isOdd() !== odd)\n    x = x.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.validate = function validate(point) {\n  if (point.isInfinity())\n    return true;\n\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n  point.normalize();\n\n  var x2 = point.x.redSqr();\n  var y2 = point.y.redSqr();\n  var lhs = x2.redMul(this.a).redAdd(y2);\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n\n  return lhs.cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, y, z, t) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.zero;\n    this.y = this.curve.one;\n    this.z = this.curve.one;\n    this.t = this.curve.zero;\n    this.zOne = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = z ? new BN(z, 16) : this.curve.one;\n    this.t = t && new BN(t, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n    if (this.t && !this.t.red)\n      this.t = this.t.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n\n    // Use extended coordinates\n    if (this.curve.extended && !this.t) {\n      this.t = this.x.redMul(this.y);\n      if (!this.zOne)\n        this.t = this.t.redMul(this.z.redInvm());\n    }\n  }\n}\ninherits(Point, Base.BasePoint);\n\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\n  return new Point(this, x, y, z, t);\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1], obj[2]);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.x.cmpn(0) === 0 &&\n         this.y.cmp(this.z) === 0;\n};\n\nPoint.prototype._extDbl = function _extDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #doubling-dbl-2008-hwcd\n  // 4M + 4S\n\n  // A = X1^2\n  var a = this.x.redSqr();\n  // B = Y1^2\n  var b = this.y.redSqr();\n  // C = 2 * Z1^2\n  var c = this.z.redSqr();\n  c = c.redIAdd(c);\n  // D = a * A\n  var d = this.curve._mulA(a);\n  // E = (X1 + Y1)^2 - A - B\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n  // G = D + B\n  var g = d.redAdd(b);\n  // F = G - C\n  var f = g.redSub(c);\n  // H = D - B\n  var h = d.redSub(b);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projDbl = function _projDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #doubling-dbl-2008-bbjlp\n  //     #doubling-dbl-2007-bl\n  // and others\n  // Generally 3M + 4S or 2M + 4S\n\n  // B = (X1 + Y1)^2\n  var b = this.x.redAdd(this.y).redSqr();\n  // C = X1^2\n  var c = this.x.redSqr();\n  // D = Y1^2\n  var d = this.y.redSqr();\n\n  var nx;\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // E = a * C\n    var e = this.curve._mulA(c);\n    // F = E + D\n    var f = e.redAdd(d);\n    if (this.zOne) {\n      // X3 = (B - C - D) * (F - 2)\n      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F^2 - 2 * F\n      nz = f.redSqr().redSub(f).redSub(f);\n    } else {\n      // H = Z1^2\n      var h = this.z.redSqr();\n      // J = F - 2 * H\n      var j = f.redSub(h).redISub(h);\n      // X3 = (B-C-D)*J\n      nx = b.redSub(c).redISub(d).redMul(j);\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F * J\n      nz = f.redMul(j);\n    }\n  } else {\n    // E = C + D\n    var e = c.redAdd(d);\n    // H = (c * Z1)^2\n    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();\n    // J = E - 2 * H\n    var j = e.redSub(h).redSub(h);\n    // X3 = c * (B - E) * J\n    nx = this.curve._mulC(b.redISub(e)).redMul(j);\n    // Y3 = c * E * (C - D)\n    ny = this.curve._mulC(e).redMul(c.redISub(d));\n    // Z3 = E * J\n    nz = e.redMul(j);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  // Double in extended coordinates\n  if (this.curve.extended)\n    return this._extDbl();\n  else\n    return this._projDbl();\n};\n\nPoint.prototype._extAdd = function _extAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #addition-add-2008-hwcd-3\n  // 8M\n\n  // A = (Y1 - X1) * (Y2 - X2)\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n  // B = (Y1 + X1) * (Y2 + X2)\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n  // C = T1 * k * T2\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);\n  // D = Z1 * 2 * Z2\n  var d = this.z.redMul(p.z.redAdd(p.z));\n  // E = B - A\n  var e = b.redSub(a);\n  // F = D - C\n  var f = d.redSub(c);\n  // G = D + C\n  var g = d.redAdd(c);\n  // H = B + A\n  var h = b.redAdd(a);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projAdd = function _projAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #addition-add-2008-bbjlp\n  //     #addition-add-2007-bl\n  // 10M + 1S\n\n  // A = Z1 * Z2\n  var a = this.z.redMul(p.z);\n  // B = A^2\n  var b = a.redSqr();\n  // C = X1 * X2\n  var c = this.x.redMul(p.x);\n  // D = Y1 * Y2\n  var d = this.y.redMul(p.y);\n  // E = d * C * D\n  var e = this.curve.d.redMul(c).redMul(d);\n  // F = B - E\n  var f = b.redSub(e);\n  // G = B + E\n  var g = b.redAdd(e);\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n  var nx = a.redMul(f).redMul(tmp);\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // Y3 = A * G * (D - a * C)\n    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n    // Z3 = F * G\n    nz = f.redMul(g);\n  } else {\n    // Y3 = A * G * (D - C)\n    ny = a.redMul(g).redMul(d.redSub(c));\n    // Z3 = c * F * G\n    nz = this.curve._mulC(f).redMul(g);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.add = function add(p) {\n  if (this.isInfinity())\n    return p;\n  if (p.isInfinity())\n    return this;\n\n  if (this.curve.extended)\n    return this._extAdd(p);\n  else\n    return this._projAdd(p);\n};\n\nPoint.prototype.mul = function mul(k) {\n  if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);\n};\n\nPoint.prototype.normalize = function normalize() {\n  if (this.zOne)\n    return this;\n\n  // Normalize coordinates\n  var zi = this.z.redInvm();\n  this.x = this.x.redMul(zi);\n  this.y = this.y.redMul(zi);\n  if (this.t)\n    this.t = this.t.redMul(zi);\n  this.z = this.curve.one;\n  this.zOne = true;\n  return this;\n};\n\nPoint.prototype.neg = function neg() {\n  return this.curve.point(this.x.redNeg(),\n                          this.y,\n                          this.z,\n                          this.t && this.t.redNeg());\n};\n\nPoint.prototype.getX = function getX() {\n  this.normalize();\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  this.normalize();\n  return this.y.fromRed();\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this === other ||\n         this.getX().cmp(other.getX()) === 0 &&\n         this.getY().cmp(other.getY()) === 0;\n};\n\nPoint.prototype.eqXToP = function eqXToP(x) {\n  var rx = x.toRed(this.curve.red).redMul(this.z);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(this.z);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n  return false;\n};\n\n// Compatibility with BaseCurve\nPoint.prototype.toP = Point.prototype.normalize;\nPoint.prototype.mixedAdd = Point.prototype.add;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/curve/edwards.js\n// module id = 115\n// module chunks = 0","'use strict';\n\nvar curve = require('../curve');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = curve.base;\n\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\n\nfunction MontCurve(conf) {\n  Base.call(this, 'mont', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.i4 = new BN(4).toRed(this.red).redInvm();\n  this.two = new BN(2).toRed(this.red);\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n}\ninherits(MontCurve, Base);\nmodule.exports = MontCurve;\n\nMontCurve.prototype.validate = function validate(point) {\n  var x = point.normalize().x;\n  var x2 = x.redSqr();\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n  var y = rhs.redSqrt();\n\n  return y.redSqr().cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, z) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && z === null) {\n    this.x = this.curve.one;\n    this.z = this.curve.zero;\n  } else {\n    this.x = new BN(x, 16);\n    this.z = new BN(z, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n  }\n}\ninherits(Point, Base.BasePoint);\n\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  return this.point(utils.toArray(bytes, enc), 1);\n};\n\nMontCurve.prototype.point = function point(x, z) {\n  return new Point(this, x, z);\n};\n\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nPoint.prototype.precompute = function precompute() {\n  // No-op\n};\n\nPoint.prototype._encode = function _encode() {\n  return this.getX().toArray('be', this.curve.p.byteLength());\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1] || curve.one);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\nPoint.prototype.dbl = function dbl() {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n  // 2M + 2S + 4A\n\n  // A = X1 + Z1\n  var a = this.x.redAdd(this.z);\n  // AA = A^2\n  var aa = a.redSqr();\n  // B = X1 - Z1\n  var b = this.x.redSub(this.z);\n  // BB = B^2\n  var bb = b.redSqr();\n  // C = AA - BB\n  var c = aa.redSub(bb);\n  // X3 = AA * BB\n  var nx = aa.redMul(bb);\n  // Z3 = C * (BB + A24 * C)\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.add = function add() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n  // 4M + 2S + 6A\n\n  // A = X2 + Z2\n  var a = this.x.redAdd(this.z);\n  // B = X2 - Z2\n  var b = this.x.redSub(this.z);\n  // C = X3 + Z3\n  var c = p.x.redAdd(p.z);\n  // D = X3 - Z3\n  var d = p.x.redSub(p.z);\n  // DA = D * A\n  var da = d.redMul(a);\n  // CB = C * B\n  var cb = c.redMul(b);\n  // X5 = Z1 * (DA + CB)^2\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n  // Z5 = X1 * (DA - CB)^2\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.mul = function mul(k) {\n  var t = k.clone();\n  var a = this; // (N / 2) * Q + Q\n  var b = this.curve.point(null, null); // (N / 2) * Q\n  var c = this; // Q\n\n  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\n    bits.push(t.andln(1));\n\n  for (var i = bits.length - 1; i >= 0; i--) {\n    if (bits[i] === 0) {\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n      a = a.diffAdd(b, c);\n      // N * Q = 2 * ((N / 2) * Q + Q))\n      b = b.dbl();\n    } else {\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n      b = a.diffAdd(b, c);\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)\n      a = a.dbl();\n    }\n  }\n  return b;\n};\n\nPoint.prototype.mulAdd = function mulAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.jumlAdd = function jumlAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this.getX().cmp(other.getX()) === 0;\n};\n\nPoint.prototype.normalize = function normalize() {\n  this.x = this.x.redMul(this.z.redInvm());\n  this.z = this.curve.one;\n  return this;\n};\n\nPoint.prototype.getX = function getX() {\n  // Normalize coordinates\n  this.normalize();\n\n  return this.x.fromRed();\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/curve/mont.js\n// module id = 116\n// module chunks = 0","'use strict';\n\nvar curve = require('../curve');\nvar elliptic = require('../../elliptic');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = curve.base;\n\nvar assert = elliptic.utils.assert;\n\nfunction ShortCurve(conf) {\n  Base.call(this, 'short', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.tinv = this.two.redInvm();\n\n  this.zeroA = this.a.fromRed().cmpn(0) === 0;\n  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n\n  // If the curve is endomorphic, precalculate beta and lambda\n  this.endo = this._getEndomorphism(conf);\n  this._endoWnafT1 = new Array(4);\n  this._endoWnafT2 = new Array(4);\n}\ninherits(ShortCurve, Base);\nmodule.exports = ShortCurve;\n\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n  // No efficient endomorphism\n  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n    return;\n\n  // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n  var beta;\n  var lambda;\n  if (conf.beta) {\n    beta = new BN(conf.beta, 16).toRed(this.red);\n  } else {\n    var betas = this._getEndoRoots(this.p);\n    // Choose the smallest beta\n    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n    beta = beta.toRed(this.red);\n  }\n  if (conf.lambda) {\n    lambda = new BN(conf.lambda, 16);\n  } else {\n    // Choose the lambda that is matching selected beta\n    var lambdas = this._getEndoRoots(this.n);\n    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n      lambda = lambdas[0];\n    } else {\n      lambda = lambdas[1];\n      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n    }\n  }\n\n  // Get basis vectors, used for balanced length-two representation\n  var basis;\n  if (conf.basis) {\n    basis = conf.basis.map(function(vec) {\n      return {\n        a: new BN(vec.a, 16),\n        b: new BN(vec.b, 16)\n      };\n    });\n  } else {\n    basis = this._getEndoBasis(lambda);\n  }\n\n  return {\n    beta: beta,\n    lambda: lambda,\n    basis: basis\n  };\n};\n\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n  // Find roots of for x^2 + x + 1 in F\n  // Root = (-1 +- Sqrt(-3)) / 2\n  //\n  var red = num === this.p ? this.red : BN.mont(num);\n  var tinv = new BN(2).toRed(red).redInvm();\n  var ntinv = tinv.redNeg();\n\n  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n\n  var l1 = ntinv.redAdd(s).fromRed();\n  var l2 = ntinv.redSub(s).fromRed();\n  return [ l1, l2 ];\n};\n\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n  // aprxSqrt >= sqrt(this.n)\n  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n\n  // 3.74\n  // Run EGCD, until r(L + 1) < aprxSqrt\n  var u = lambda;\n  var v = this.n.clone();\n  var x1 = new BN(1);\n  var y1 = new BN(0);\n  var x2 = new BN(0);\n  var y2 = new BN(1);\n\n  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n  var a0;\n  var b0;\n  // First vector\n  var a1;\n  var b1;\n  // Second vector\n  var a2;\n  var b2;\n\n  var prevR;\n  var i = 0;\n  var r;\n  var x;\n  while (u.cmpn(0) !== 0) {\n    var q = v.div(u);\n    r = v.sub(q.mul(u));\n    x = x2.sub(q.mul(x1));\n    var y = y2.sub(q.mul(y1));\n\n    if (!a1 && r.cmp(aprxSqrt) < 0) {\n      a0 = prevR.neg();\n      b0 = x1;\n      a1 = r.neg();\n      b1 = x;\n    } else if (a1 && ++i === 2) {\n      break;\n    }\n    prevR = r;\n\n    v = u;\n    u = r;\n    x2 = x1;\n    x1 = x;\n    y2 = y1;\n    y1 = y;\n  }\n  a2 = r.neg();\n  b2 = x;\n\n  var len1 = a1.sqr().add(b1.sqr());\n  var len2 = a2.sqr().add(b2.sqr());\n  if (len2.cmp(len1) >= 0) {\n    a2 = a0;\n    b2 = b0;\n  }\n\n  // Normalize signs\n  if (a1.negative) {\n    a1 = a1.neg();\n    b1 = b1.neg();\n  }\n  if (a2.negative) {\n    a2 = a2.neg();\n    b2 = b2.neg();\n  }\n\n  return [\n    { a: a1, b: b1 },\n    { a: a2, b: b2 }\n  ];\n};\n\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n  var basis = this.endo.basis;\n  var v1 = basis[0];\n  var v2 = basis[1];\n\n  var c1 = v2.b.mul(k).divRound(this.n);\n  var c2 = v1.b.neg().mul(k).divRound(this.n);\n\n  var p1 = c1.mul(v1.a);\n  var p2 = c2.mul(v2.a);\n  var q1 = c1.mul(v1.b);\n  var q2 = c2.mul(v2.b);\n\n  // Calculate answer\n  var k1 = k.sub(p1).sub(p2);\n  var k2 = q1.add(q2).neg();\n  return { k1: k1, k2: k2 };\n};\n\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  // XXX Is there any way to tell if the number is odd without converting it\n  // to non-red form?\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nShortCurve.prototype.validate = function validate(point) {\n  if (point.inf)\n    return true;\n\n  var x = point.x;\n  var y = point.y;\n\n  var ax = this.a.redMul(x);\n  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n  return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\n\nShortCurve.prototype._endoWnafMulAdd =\n    function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n  var npoints = this._endoWnafT1;\n  var ncoeffs = this._endoWnafT2;\n  for (var i = 0; i < points.length; i++) {\n    var split = this._endoSplit(coeffs[i]);\n    var p = points[i];\n    var beta = p._getBeta();\n\n    if (split.k1.negative) {\n      split.k1.ineg();\n      p = p.neg(true);\n    }\n    if (split.k2.negative) {\n      split.k2.ineg();\n      beta = beta.neg(true);\n    }\n\n    npoints[i * 2] = p;\n    npoints[i * 2 + 1] = beta;\n    ncoeffs[i * 2] = split.k1;\n    ncoeffs[i * 2 + 1] = split.k2;\n  }\n  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n\n  // Clean-up references to points and coefficients\n  for (var j = 0; j < i * 2; j++) {\n    npoints[j] = null;\n    ncoeffs[j] = null;\n  }\n  return res;\n};\n\nfunction Point(curve, x, y, isRed) {\n  Base.BasePoint.call(this, curve, 'affine');\n  if (x === null && y === null) {\n    this.x = null;\n    this.y = null;\n    this.inf = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    // Force redgomery representation when loading from JSON\n    if (isRed) {\n      this.x.forceRed(this.curve.red);\n      this.y.forceRed(this.curve.red);\n    }\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    this.inf = false;\n  }\n}\ninherits(Point, Base.BasePoint);\n\nShortCurve.prototype.point = function point(x, y, isRed) {\n  return new Point(this, x, y, isRed);\n};\n\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n  return Point.fromJSON(this, obj, red);\n};\n\nPoint.prototype._getBeta = function _getBeta() {\n  if (!this.curve.endo)\n    return;\n\n  var pre = this.precomputed;\n  if (pre && pre.beta)\n    return pre.beta;\n\n  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n  if (pre) {\n    var curve = this.curve;\n    var endoMul = function(p) {\n      return curve.point(p.x.redMul(curve.endo.beta), p.y);\n    };\n    pre.beta = beta;\n    beta.precomputed = {\n      beta: null,\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(endoMul)\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(endoMul)\n      }\n    };\n  }\n  return beta;\n};\n\nPoint.prototype.toJSON = function toJSON() {\n  if (!this.precomputed)\n    return [ this.x, this.y ];\n\n  return [ this.x, this.y, this.precomputed && {\n    doubles: this.precomputed.doubles && {\n      step: this.precomputed.doubles.step,\n      points: this.precomputed.doubles.points.slice(1)\n    },\n    naf: this.precomputed.naf && {\n      wnd: this.precomputed.naf.wnd,\n      points: this.precomputed.naf.points.slice(1)\n    }\n  } ];\n};\n\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n  if (typeof obj === 'string')\n    obj = JSON.parse(obj);\n  var res = curve.point(obj[0], obj[1], red);\n  if (!obj[2])\n    return res;\n\n  function obj2point(obj) {\n    return curve.point(obj[0], obj[1], red);\n  }\n\n  var pre = obj[2];\n  res.precomputed = {\n    beta: null,\n    doubles: pre.doubles && {\n      step: pre.doubles.step,\n      points: [ res ].concat(pre.doubles.points.map(obj2point))\n    },\n    naf: pre.naf && {\n      wnd: pre.naf.wnd,\n      points: [ res ].concat(pre.naf.points.map(obj2point))\n    }\n  };\n  return res;\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  return this.inf;\n};\n\nPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.inf)\n    return p;\n\n  // P + O = P\n  if (p.inf)\n    return this;\n\n  // P + P = 2P\n  if (this.eq(p))\n    return this.dbl();\n\n  // P + (-P) = O\n  if (this.neg().eq(p))\n    return this.curve.point(null, null);\n\n  // P + Q = O\n  if (this.x.cmp(p.x) === 0)\n    return this.curve.point(null, null);\n\n  var c = this.y.redSub(p.y);\n  if (c.cmpn(0) !== 0)\n    c = c.redMul(this.x.redSub(p.x).redInvm());\n  var nx = c.redSqr().redISub(this.x).redISub(p.x);\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.inf)\n    return this;\n\n  // 2P = O\n  var ys1 = this.y.redAdd(this.y);\n  if (ys1.cmpn(0) === 0)\n    return this.curve.point(null, null);\n\n  var a = this.curve.a;\n\n  var x2 = this.x.redSqr();\n  var dyinv = ys1.redInvm();\n  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n\n  var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.getX = function getX() {\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  return this.y.fromRed();\n};\n\nPoint.prototype.mul = function mul(k) {\n  k = new BN(k, 16);\n\n  if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else if (this.curve.endo)\n    return this.curve._endoWnafMulAdd([ this ], [ k ]);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs, true);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\n\nPoint.prototype.eq = function eq(p) {\n  return this === p ||\n         this.inf === p.inf &&\n             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\n\nPoint.prototype.neg = function neg(_precompute) {\n  if (this.inf)\n    return this;\n\n  var res = this.curve.point(this.x, this.y.redNeg());\n  if (_precompute && this.precomputed) {\n    var pre = this.precomputed;\n    var negate = function(p) {\n      return p.neg();\n    };\n    res.precomputed = {\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(negate)\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(negate)\n      }\n    };\n  }\n  return res;\n};\n\nPoint.prototype.toJ = function toJ() {\n  if (this.inf)\n    return this.curve.jpoint(null, null, null);\n\n  var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n  return res;\n};\n\nfunction JPoint(curve, x, y, z) {\n  Base.BasePoint.call(this, curve, 'jacobian');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.one;\n    this.y = this.curve.one;\n    this.z = new BN(0);\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = new BN(z, 16);\n  }\n  if (!this.x.red)\n    this.x = this.x.toRed(this.curve.red);\n  if (!this.y.red)\n    this.y = this.y.toRed(this.curve.red);\n  if (!this.z.red)\n    this.z = this.z.toRed(this.curve.red);\n\n  this.zOne = this.z === this.curve.one;\n}\ninherits(JPoint, Base.BasePoint);\n\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n  return new JPoint(this, x, y, z);\n};\n\nJPoint.prototype.toP = function toP() {\n  if (this.isInfinity())\n    return this.curve.point(null, null);\n\n  var zinv = this.z.redInvm();\n  var zinv2 = zinv.redSqr();\n  var ax = this.x.redMul(zinv2);\n  var ay = this.y.redMul(zinv2).redMul(zinv);\n\n  return this.curve.point(ax, ay);\n};\n\nJPoint.prototype.neg = function neg() {\n  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\n\nJPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p;\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 12M + 4S + 7A\n  var pz2 = p.z.redSqr();\n  var z2 = this.z.redSqr();\n  var u1 = this.x.redMul(pz2);\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y.redMul(pz2.redMul(p.z));\n  var s2 = p.y.redMul(z2.redMul(this.z));\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(p.z).redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p.toJ();\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 8M + 3S + 7A\n  var z2 = this.z.redSqr();\n  var u1 = this.x;\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y;\n  var s2 = p.y.redMul(z2).redMul(this.z);\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.dblp = function dblp(pow) {\n  if (pow === 0)\n    return this;\n  if (this.isInfinity())\n    return this;\n  if (!pow)\n    return this.dbl();\n\n  if (this.curve.zeroA || this.curve.threeA) {\n    var r = this;\n    for (var i = 0; i < pow; i++)\n      r = r.dbl();\n    return r;\n  }\n\n  // 1M + 2S + 1A + N * (4S + 5M + 8A)\n  // N = 1 => 6M + 6S + 9A\n  var a = this.curve.a;\n  var tinv = this.curve.tinv;\n\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  // Reuse results\n  var jyd = jy.redAdd(jy);\n  for (var i = 0; i < pow; i++) {\n    var jx2 = jx.redSqr();\n    var jyd2 = jyd.redSqr();\n    var jyd4 = jyd2.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n    var t1 = jx.redMul(jyd2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var dny = c.redMul(t2);\n    dny = dny.redIAdd(dny).redISub(jyd4);\n    var nz = jyd.redMul(jz);\n    if (i + 1 < pow)\n      jz4 = jz4.redMul(jyd4);\n\n    jx = nx;\n    jz = nz;\n    jyd = dny;\n  }\n\n  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\n\nJPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  if (this.curve.zeroA)\n    return this._zeroDbl();\n  else if (this.curve.threeA)\n    return this._threeDbl();\n  else\n    return this._dbl();\n};\n\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 14A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // T = M ^ 2 - 2*S\n    var t = m.redSqr().redISub(s).redISub(s);\n\n    // 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2*Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-dbl-2009-l\n    // 2M + 5S + 13A\n\n    // A = X1^2\n    var a = this.x.redSqr();\n    // B = Y1^2\n    var b = this.y.redSqr();\n    // C = B^2\n    var c = b.redSqr();\n    // D = 2 * ((X1 + B)^2 - A - C)\n    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n    d = d.redIAdd(d);\n    // E = 3 * A\n    var e = a.redAdd(a).redIAdd(a);\n    // F = E^2\n    var f = e.redSqr();\n\n    // 8 * C\n    var c8 = c.redIAdd(c);\n    c8 = c8.redIAdd(c8);\n    c8 = c8.redIAdd(c8);\n\n    // X3 = F - 2 * D\n    nx = f.redISub(d).redISub(d);\n    // Y3 = E * (D - X3) - 8 * C\n    ny = e.redMul(d.redISub(nx)).redISub(c8);\n    // Z3 = 2 * Y1 * Z1\n    nz = this.y.redMul(this.z);\n    nz = nz.redIAdd(nz);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._threeDbl = function _threeDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 15A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a\n    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n    // T = M^2 - 2 * S\n    var t = m.redSqr().redISub(s).redISub(s);\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2 * Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n    // 3M + 5S\n\n    // delta = Z1^2\n    var delta = this.z.redSqr();\n    // gamma = Y1^2\n    var gamma = this.y.redSqr();\n    // beta = X1 * gamma\n    var beta = this.x.redMul(gamma);\n    // alpha = 3 * (X1 - delta) * (X1 + delta)\n    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n    alpha = alpha.redAdd(alpha).redIAdd(alpha);\n    // X3 = alpha^2 - 8 * beta\n    var beta4 = beta.redIAdd(beta);\n    beta4 = beta4.redIAdd(beta4);\n    var beta8 = beta4.redAdd(beta4);\n    nx = alpha.redSqr().redISub(beta8);\n    // Z3 = (Y1 + Z1)^2 - gamma - delta\n    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n    var ggamma8 = gamma.redSqr();\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._dbl = function _dbl() {\n  var a = this.curve.a;\n\n  // 4M + 6S + 10A\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  var jx2 = jx.redSqr();\n  var jy2 = jy.redSqr();\n\n  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n  var jxd4 = jx.redAdd(jx);\n  jxd4 = jxd4.redIAdd(jxd4);\n  var t1 = jxd4.redMul(jy2);\n  var nx = c.redSqr().redISub(t1.redAdd(t1));\n  var t2 = t1.redISub(nx);\n\n  var jyd8 = jy2.redSqr();\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  var ny = c.redMul(t2).redISub(jyd8);\n  var nz = jy.redAdd(jy).redMul(jz);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.trpl = function trpl() {\n  if (!this.curve.zeroA)\n    return this.dbl().add(this);\n\n  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n  // 5M + 10S + ...\n\n  // XX = X1^2\n  var xx = this.x.redSqr();\n  // YY = Y1^2\n  var yy = this.y.redSqr();\n  // ZZ = Z1^2\n  var zz = this.z.redSqr();\n  // YYYY = YY^2\n  var yyyy = yy.redSqr();\n  // M = 3 * XX + a * ZZ2; a = 0\n  var m = xx.redAdd(xx).redIAdd(xx);\n  // MM = M^2\n  var mm = m.redSqr();\n  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n  e = e.redIAdd(e);\n  e = e.redAdd(e).redIAdd(e);\n  e = e.redISub(mm);\n  // EE = E^2\n  var ee = e.redSqr();\n  // T = 16*YYYY\n  var t = yyyy.redIAdd(yyyy);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  // U = (M + E)^2 - MM - EE - T\n  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n  // X3 = 4 * (X1 * EE - 4 * YY * U)\n  var yyu4 = yy.redMul(u);\n  yyu4 = yyu4.redIAdd(yyu4);\n  yyu4 = yyu4.redIAdd(yyu4);\n  var nx = this.x.redMul(ee).redISub(yyu4);\n  nx = nx.redIAdd(nx);\n  nx = nx.redIAdd(nx);\n  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  // Z3 = (Z1 + E)^2 - ZZ - EE\n  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mul = function mul(k, kbase) {\n  k = new BN(k, kbase);\n\n  return this.curve._wnafMul(this, k);\n};\n\nJPoint.prototype.eq = function eq(p) {\n  if (p.type === 'affine')\n    return this.eq(p.toJ());\n\n  if (this === p)\n    return true;\n\n  // x1 * z2^2 == x2 * z1^2\n  var z2 = this.z.redSqr();\n  var pz2 = p.z.redSqr();\n  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n    return false;\n\n  // y1 * z2^3 == y2 * z1^3\n  var z3 = z2.redMul(this.z);\n  var pz3 = pz2.redMul(p.z);\n  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\n\nJPoint.prototype.eqXToP = function eqXToP(x) {\n  var zs = this.z.redSqr();\n  var rx = x.toRed(this.curve.red).redMul(zs);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(zs);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n  return false;\n};\n\nJPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC JPoint Infinity>';\n  return '<EC JPoint x: ' + this.x.toString(16, 2) +\n      ' y: ' + this.y.toString(16, 2) +\n      ' z: ' + this.z.toString(16, 2) + '>';\n};\n\nJPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/curve/short.js\n// module id = 117\n// module chunks = 0","'use strict';\n\nvar curves = exports;\n\nvar hash = require('hash.js');\nvar elliptic = require('../elliptic');\n\nvar assert = elliptic.utils.assert;\n\nfunction PresetCurve(options) {\n  if (options.type === 'short')\n    this.curve = new elliptic.curve.short(options);\n  else if (options.type === 'edwards')\n    this.curve = new elliptic.curve.edwards(options);\n  else\n    this.curve = new elliptic.curve.mont(options);\n  this.g = this.curve.g;\n  this.n = this.curve.n;\n  this.hash = options.hash;\n\n  assert(this.g.validate(), 'Invalid curve');\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n}\ncurves.PresetCurve = PresetCurve;\n\nfunction defineCurve(name, options) {\n  Object.defineProperty(curves, name, {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n      var curve = new PresetCurve(options);\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        value: curve\n      });\n      return curve;\n    }\n  });\n}\n\ndefineCurve('p192', {\n  type: 'short',\n  prime: 'p192',\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'\n  ]\n});\n\ndefineCurve('p224', {\n  type: 'short',\n  prime: 'p224',\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'\n  ]\n});\n\ndefineCurve('p256', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'\n  ]\n});\n\ndefineCurve('p384', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 ffffffff',\n  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 fffffffc',\n  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +\n     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +\n     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n  hash: hash.sha384,\n  gRed: false,\n  g: [\n    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +\n    '5502f25d bf55296c 3a545e38 72760ab7',\n    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +\n    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'\n  ]\n});\n\ndefineCurve('p521', {\n  type: 'short',\n  prime: null,\n  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff',\n  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff fffffffc',\n  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +\n     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +\n     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +\n     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n  hash: hash.sha512,\n  gRed: false,\n  g: [\n    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +\n    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +\n    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',\n    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +\n    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +\n    '3fad0761 353c7086 a272c240 88be9476 9fd16650'\n  ]\n});\n\ndefineCurve('curve25519', {\n  type: 'mont',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '76d06',\n  b: '0',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '9'\n  ]\n});\n\ndefineCurve('ed25519', {\n  type: 'edwards',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '-1',\n  c: '1',\n  // -121665 * (121666^(-1)) (mod P)\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\n\n    // 4/5\n    '6666666666666666666666666666666666666666666666666666666666666658'\n  ]\n});\n\nvar pre;\ntry {\n  pre = require('./precomputed/secp256k1');\n} catch (e) {\n  pre = undefined;\n}\n\ndefineCurve('secp256k1', {\n  type: 'short',\n  prime: 'k256',\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n  a: '0',\n  b: '7',\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n  h: '1',\n  hash: hash.sha256,\n\n  // Precomputed endomorphism\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n  basis: [\n    {\n      a: '3086d221a7d46bcde86c90e49284eb15',\n      b: '-e4437ed6010e88286f547fa90abfe4c3'\n    },\n    {\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n      b: '3086d221a7d46bcde86c90e49284eb15'\n    }\n  ],\n\n  gRed: false,\n  g: [\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n    pre\n  ]\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/curves.js\n// module id = 118\n// module chunks = 0","'use strict';\n\nvar BN = require('bn.js');\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\n\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EC(options) {\n  if (!(this instanceof EC))\n    return new EC(options);\n\n  // Shortcut `elliptic.ec(curve-name)`\n  if (typeof options === 'string') {\n    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);\n\n    options = elliptic.curves[options];\n  }\n\n  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n  if (options instanceof elliptic.curves.PresetCurve)\n    options = { curve: options };\n\n  this.curve = options.curve.curve;\n  this.n = this.curve.n;\n  this.nh = this.n.ushrn(1);\n  this.g = this.curve.g;\n\n  // Point on curve\n  this.g = options.curve.g;\n  this.g.precompute(options.curve.n.bitLength() + 1);\n\n  // Hash for function for DRBG\n  this.hash = options.hash || options.curve.hash;\n}\nmodule.exports = EC;\n\nEC.prototype.keyPair = function keyPair(options) {\n  return new KeyPair(this, options);\n};\n\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n  return KeyPair.fromPrivate(this, priv, enc);\n};\n\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n  return KeyPair.fromPublic(this, pub, enc);\n};\n\nEC.prototype.genKeyPair = function genKeyPair(options) {\n  if (!options)\n    options = {};\n\n  // Instantiate Hmac_DRBG\n  var drbg = new elliptic.hmacDRBG({\n    hash: this.hash,\n    pers: options.pers,\n    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),\n    nonce: this.n.toArray()\n  });\n\n  var bytes = this.n.byteLength();\n  var ns2 = this.n.sub(new BN(2));\n  do {\n    var priv = new BN(drbg.generate(bytes));\n    if (priv.cmp(ns2) > 0)\n      continue;\n\n    priv.iaddn(1);\n    return this.keyFromPrivate(priv);\n  } while (true);\n};\n\nEC.prototype._truncateToN = function truncateToN(msg, truncOnly) {\n  var delta = msg.byteLength() * 8 - this.n.bitLength();\n  if (delta > 0)\n    msg = msg.ushrn(delta);\n  if (!truncOnly && msg.cmp(this.n) >= 0)\n    return msg.sub(this.n);\n  else\n    return msg;\n};\n\nEC.prototype.sign = function sign(msg, key, enc, options) {\n  if (typeof enc === 'object') {\n    options = enc;\n    enc = null;\n  }\n  if (!options)\n    options = {};\n\n  key = this.keyFromPrivate(key, enc);\n  msg = this._truncateToN(new BN(msg, 16));\n\n  // Zero-extend key to provide enough entropy\n  var bytes = this.n.byteLength();\n  var bkey = key.getPrivate().toArray('be', bytes);\n\n  // Zero-extend nonce to have the same byte size as N\n  var nonce = msg.toArray('be', bytes);\n\n  // Instantiate Hmac_DRBG\n  var drbg = new elliptic.hmacDRBG({\n    hash: this.hash,\n    entropy: bkey,\n    nonce: nonce,\n    pers: options.pers,\n    persEnc: options.persEnc\n  });\n\n  // Number of bytes to generate\n  var ns1 = this.n.sub(new BN(1));\n\n  for (var iter = 0; true; iter++) {\n    var k = options.k ?\n        options.k(iter) :\n        new BN(drbg.generate(this.n.byteLength()));\n    k = this._truncateToN(k, true);\n    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n      continue;\n\n    var kp = this.g.mul(k);\n    if (kp.isInfinity())\n      continue;\n\n    var kpX = kp.getX();\n    var r = kpX.umod(this.n);\n    if (r.cmpn(0) === 0)\n      continue;\n\n    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n    s = s.umod(this.n);\n    if (s.cmpn(0) === 0)\n      continue;\n\n    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |\n                        (kpX.cmp(r) !== 0 ? 2 : 0);\n\n    // Use complement of `s`, if it is > `n / 2`\n    if (options.canonical && s.cmp(this.nh) > 0) {\n      s = this.n.sub(s);\n      recoveryParam ^= 1;\n    }\n\n    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });\n  }\n};\n\nEC.prototype.verify = function verify(msg, signature, key, enc) {\n  msg = this._truncateToN(new BN(msg, 16));\n  key = this.keyFromPublic(key, enc);\n  signature = new Signature(signature, 'hex');\n\n  // Perform primitive values validation\n  var r = signature.r;\n  var s = signature.s;\n  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n    return false;\n  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n    return false;\n\n  // Validate signature\n  var sinv = s.invm(this.n);\n  var u1 = sinv.mul(msg).umod(this.n);\n  var u2 = sinv.mul(r).umod(this.n);\n\n  if (!this.curve._maxwellTrick) {\n    var p = this.g.mulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity())\n      return false;\n\n    return p.getX().umod(this.n).cmp(r) === 0;\n  }\n\n  // NOTE: Greg Maxwell's trick, inspired by:\n  // https://git.io/vad3K\n\n  var p = this.g.jmulAdd(u1, key.getPublic(), u2);\n  if (p.isInfinity())\n    return false;\n\n  // Compare `p.x` of Jacobian point with `r`,\n  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n  // inverse of `p.z^2`\n  return p.eqXToP(r);\n};\n\nEC.prototype.recoverPubKey = function(msg, signature, j, enc) {\n  assert((3 & j) === j, 'The recovery param is more than two bits');\n  signature = new Signature(signature, enc);\n\n  var n = this.n;\n  var e = new BN(msg);\n  var r = signature.r;\n  var s = signature.s;\n\n  // A set LSB signifies that the y-coordinate is odd\n  var isYOdd = j & 1;\n  var isSecondKey = j >> 1;\n  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n    throw new Error('Unable to find sencond key candinate');\n\n  // 1.1. Let x = r + jn.\n  if (isSecondKey)\n    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n  else\n    r = this.curve.pointFromX(r, isYOdd);\n\n  var rInv = signature.r.invm(n);\n  var s1 = n.sub(e).mul(rInv).umod(n);\n  var s2 = s.mul(rInv).umod(n);\n\n  // 1.6.1 Compute Q = r^-1 (sR -  eG)\n  //               Q = r^-1 (sR + -eG)\n  return this.g.mulAdd(s1, r, s2);\n};\n\nEC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\n  signature = new Signature(signature, enc);\n  if (signature.recoveryParam !== null)\n    return signature.recoveryParam;\n\n  for (var i = 0; i < 4; i++) {\n    var Qprime;\n    try {\n      Qprime = this.recoverPubKey(e, signature, i);\n    } catch (e) {\n      continue;\n    }\n\n    if (Qprime.eq(Q))\n      return i;\n  }\n  throw new Error('Unable to find valid recovery factor');\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/ec/index.js\n// module id = 119\n// module chunks = 0","'use strict';\n\nvar BN = require('bn.js');\n\nfunction KeyPair(ec, options) {\n  this.ec = ec;\n  this.priv = null;\n  this.pub = null;\n\n  // KeyPair(ec, { priv: ..., pub: ... })\n  if (options.priv)\n    this._importPrivate(options.priv, options.privEnc);\n  if (options.pub)\n    this._importPublic(options.pub, options.pubEnc);\n}\nmodule.exports = KeyPair;\n\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n  if (pub instanceof KeyPair)\n    return pub;\n\n  return new KeyPair(ec, {\n    pub: pub,\n    pubEnc: enc\n  });\n};\n\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n  if (priv instanceof KeyPair)\n    return priv;\n\n  return new KeyPair(ec, {\n    priv: priv,\n    privEnc: enc\n  });\n};\n\nKeyPair.prototype.validate = function validate() {\n  var pub = this.getPublic();\n\n  if (pub.isInfinity())\n    return { result: false, reason: 'Invalid public key' };\n  if (!pub.validate())\n    return { result: false, reason: 'Public key is not a point' };\n  if (!pub.mul(this.ec.curve.n).isInfinity())\n    return { result: false, reason: 'Public key * N != O' };\n\n  return { result: true, reason: null };\n};\n\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n  // compact is optional argument\n  if (typeof compact === 'string') {\n    enc = compact;\n    compact = null;\n  }\n\n  if (!this.pub)\n    this.pub = this.ec.g.mul(this.priv);\n\n  if (!enc)\n    return this.pub;\n\n  return this.pub.encode(enc, compact);\n};\n\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n  if (enc === 'hex')\n    return this.priv.toString(16, 2);\n  else\n    return this.priv;\n};\n\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n  this.priv = new BN(key, enc || 16);\n\n  // Ensure that the priv won't be bigger than n, otherwise we may fail\n  // in fixed multiplication method\n  this.priv = this.priv.umod(this.ec.curve.n);\n};\n\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n  if (key.x || key.y) {\n    this.pub = this.ec.curve.point(key.x, key.y);\n    return;\n  }\n  this.pub = this.ec.curve.decodePoint(key, enc);\n};\n\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n  return pub.mul(this.priv).getX();\n};\n\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n  return this.ec.sign(msg, this, enc, options);\n};\n\nKeyPair.prototype.verify = function verify(msg, signature) {\n  return this.ec.verify(msg, signature, this);\n};\n\nKeyPair.prototype.inspect = function inspect() {\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/ec/key.js\n// module id = 120\n// module chunks = 0","'use strict';\n\nvar BN = require('bn.js');\n\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\n\nfunction Signature(options, enc) {\n  if (options instanceof Signature)\n    return options;\n\n  if (this._importDER(options, enc))\n    return;\n\n  assert(options.r && options.s, 'Signature without r or s');\n  this.r = new BN(options.r, 16);\n  this.s = new BN(options.s, 16);\n  if (options.recoveryParam === undefined)\n    this.recoveryParam = null;\n  else\n    this.recoveryParam = options.recoveryParam;\n}\nmodule.exports = Signature;\n\nfunction Position() {\n  this.place = 0;\n}\n\nfunction getLength(buf, p) {\n  var initial = buf[p.place++];\n  if (!(initial & 0x80)) {\n    return initial;\n  }\n  var octetLen = initial & 0xf;\n  var val = 0;\n  for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n    val <<= 8;\n    val |= buf[off];\n  }\n  p.place = off;\n  return val;\n}\n\nfunction rmPadding(buf) {\n  var i = 0;\n  var len = buf.length - 1;\n  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n    i++;\n  }\n  if (i === 0) {\n    return buf;\n  }\n  return buf.slice(i);\n}\n\nSignature.prototype._importDER = function _importDER(data, enc) {\n  data = utils.toArray(data, enc);\n  var p = new Position();\n  if (data[p.place++] !== 0x30) {\n    return false;\n  }\n  var len = getLength(data, p);\n  if ((len + p.place) !== data.length) {\n    return false;\n  }\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var rlen = getLength(data, p);\n  var r = data.slice(p.place, rlen + p.place);\n  p.place += rlen;\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var slen = getLength(data, p);\n  if (data.length !== slen + p.place) {\n    return false;\n  }\n  var s = data.slice(p.place, slen + p.place);\n  if (r[0] === 0 && (r[1] & 0x80)) {\n    r = r.slice(1);\n  }\n  if (s[0] === 0 && (s[1] & 0x80)) {\n    s = s.slice(1);\n  }\n\n  this.r = new BN(r);\n  this.s = new BN(s);\n  this.recoveryParam = null;\n\n  return true;\n};\n\nfunction constructLength(arr, len) {\n  if (len < 0x80) {\n    arr.push(len);\n    return;\n  }\n  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n  arr.push(octets | 0x80);\n  while (--octets) {\n    arr.push((len >>> (octets << 3)) & 0xff);\n  }\n  arr.push(len);\n}\n\nSignature.prototype.toDER = function toDER(enc) {\n  var r = this.r.toArray();\n  var s = this.s.toArray();\n\n  // Pad values\n  if (r[0] & 0x80)\n    r = [ 0 ].concat(r);\n  // Pad values\n  if (s[0] & 0x80)\n    s = [ 0 ].concat(s);\n\n  r = rmPadding(r);\n  s = rmPadding(s);\n\n  while (!s[0] && !(s[1] & 0x80)) {\n    s = s.slice(1);\n  }\n  var arr = [ 0x02 ];\n  constructLength(arr, r.length);\n  arr = arr.concat(r);\n  arr.push(0x02);\n  constructLength(arr, s.length);\n  var backHalf = arr.concat(s);\n  var res = [ 0x30 ];\n  constructLength(res, backHalf.length);\n  res = res.concat(backHalf);\n  return utils.encode(res, enc);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/ec/signature.js\n// module id = 121\n// module chunks = 0","'use strict';\n\nvar hash = require('hash.js');\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EDDSA(curve) {\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\n\n  if (!(this instanceof EDDSA))\n    return new EDDSA(curve);\n\n  var curve = elliptic.curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = hash.sha512;\n}\n\nmodule.exports = EDDSA;\n\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\nEDDSA.prototype.sign = function sign(message, secret) {\n  message = parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\n               .mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\n};\n\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\nEDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = parseBytes(message);\n  sig = this.makeSignature(sig);\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\nEDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n  for (var i = 0; i < arguments.length; i++)\n    hash.update(arguments[i]);\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return KeyPair.fromPublic(this, pub);\n};\n\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return KeyPair.fromSecret(this, secret);\n};\n\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof Signature)\n    return sig;\n  return new Signature(this, sig);\n};\n\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\nEDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = utils.parseBytes(bytes);\n\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n\n  var y = utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return utils.intFromLE(bytes);\n};\n\nEDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/eddsa/index.js\n// module id = 122\n// module chunks = 0","'use strict';\n\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n\n/**\n* @param {EDDSA} eddsa - instance\n* @param {Object} params - public/private key parameters\n*\n* @param {Array<Byte>} [params.secret] - secret seed bytes\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n*\n*/\nfunction KeyPair(eddsa, params) {\n  this.eddsa = eddsa;\n  this._secret = parseBytes(params.secret);\n  if (eddsa.isPoint(params.pub))\n    this._pub = params.pub;\n  else\n    this._pubBytes = parseBytes(params.pub);\n}\n\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n  if (pub instanceof KeyPair)\n    return pub;\n  return new KeyPair(eddsa, { pub: pub });\n};\n\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n  if (secret instanceof KeyPair)\n    return secret;\n  return new KeyPair(eddsa, { secret: secret });\n};\n\nKeyPair.prototype.secret = function secret() {\n  return this._secret;\n};\n\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\n  return this.eddsa.encodePoint(this.pub());\n});\n\ncachedProperty(KeyPair, 'pub', function pub() {\n  if (this._pubBytes)\n    return this.eddsa.decodePoint(this._pubBytes);\n  return this.eddsa.g.mul(this.priv());\n});\n\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\n  var eddsa = this.eddsa;\n  var hash = this.hash();\n  var lastIx = eddsa.encodingLength - 1;\n\n  var a = hash.slice(0, eddsa.encodingLength);\n  a[0] &= 248;\n  a[lastIx] &= 127;\n  a[lastIx] |= 64;\n\n  return a;\n});\n\ncachedProperty(KeyPair, 'priv', function priv() {\n  return this.eddsa.decodeInt(this.privBytes());\n});\n\ncachedProperty(KeyPair, 'hash', function hash() {\n  return this.eddsa.hash().update(this.secret()).digest();\n});\n\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\n  return this.hash().slice(this.eddsa.encodingLength);\n});\n\nKeyPair.prototype.sign = function sign(message) {\n  assert(this._secret, 'KeyPair can only verify');\n  return this.eddsa.sign(message, this);\n};\n\nKeyPair.prototype.verify = function verify(message, sig) {\n  return this.eddsa.verify(message, sig, this);\n};\n\nKeyPair.prototype.getSecret = function getSecret(enc) {\n  assert(this._secret, 'KeyPair is public only');\n  return utils.encode(this.secret(), enc);\n};\n\nKeyPair.prototype.getPublic = function getPublic(enc) {\n  return utils.encode(this.pubBytes(), enc);\n};\n\nmodule.exports = KeyPair;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/eddsa/key.js\n// module id = 123\n// module chunks = 0","'use strict';\n\nvar BN = require('bn.js');\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/\nfunction Signature(eddsa, sig) {\n  this.eddsa = eddsa;\n\n  if (typeof sig !== 'object')\n    sig = parseBytes(sig);\n\n  if (Array.isArray(sig)) {\n    sig = {\n      R: sig.slice(0, eddsa.encodingLength),\n      S: sig.slice(eddsa.encodingLength)\n    };\n  }\n\n  assert(sig.R && sig.S, 'Signature without R or S');\n\n  if (eddsa.isPoint(sig.R))\n    this._R = sig.R;\n  if (sig.S instanceof BN)\n    this._S = sig.S;\n\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\n\ncachedProperty(Signature, 'S', function S() {\n  return this.eddsa.decodeInt(this.Sencoded());\n});\n\ncachedProperty(Signature, 'R', function R() {\n  return this.eddsa.decodePoint(this.Rencoded());\n});\n\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\n  return this.eddsa.encodePoint(this.R());\n});\n\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\n  return this.eddsa.encodeInt(this.S());\n});\n\nSignature.prototype.toBytes = function toBytes() {\n  return this.Rencoded().concat(this.Sencoded());\n};\n\nSignature.prototype.toHex = function toHex() {\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\n};\n\nmodule.exports = Signature;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/eddsa/signature.js\n// module id = 124\n// module chunks = 0","'use strict';\n\nvar hash = require('hash.js');\nvar elliptic = require('../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.outSize;\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n  this.reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = utils.toArray(options.entropy, options.entropyEnc);\n  var nonce = utils.toArray(options.nonce, options.nonceEnc);\n  var pers = utils.toArray(options.pers, options.persEnc);\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new Array(this.outLen / 8);\n  this.V = new Array(this.outLen / 8);\n  for (var i = 0; i < this.V.length; i++) {\n    this.K[i] = 0x00;\n    this.V[i] = 0x01;\n  }\n\n  this._update(seed);\n  this.reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new hash.hmac(this.hash, this.K);\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac()\n                 .update(this.V)\n                 .update([ 0x00 ]);\n  if (seed)\n    kmac = kmac.update(seed);\n  this.K = kmac.digest();\n  this.V = this._hmac().update(this.V).digest();\n  if (!seed)\n    return;\n\n  this.K = this._hmac()\n               .update(this.V)\n               .update([ 0x01 ])\n               .update(seed)\n               .digest();\n  this.V = this._hmac().update(this.V).digest();\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  entropy = utils.toBuffer(entropy, entropyEnc);\n  add = utils.toBuffer(add, addEnc);\n\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this.reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this.reseed > this.reseedInterval)\n    throw new Error('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = utils.toArray(add, addEnc);\n    this._update(add);\n  }\n\n  var temp = [];\n  while (temp.length < len) {\n    this.V = this._hmac().update(this.V).digest();\n    temp = temp.concat(this.V);\n  }\n\n  var res = temp.slice(0, len);\n  this._update(add);\n  this.reseed++;\n  return utils.encode(res, enc);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/hmac-drbg.js\n// module id = 125\n// module chunks = 0","module.exports = {\n  doubles: {\n    step: 4,\n    points: [\n      [\n        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',\n        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'\n      ],\n      [\n        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',\n        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'\n      ],\n      [\n        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',\n        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'\n      ],\n      [\n        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',\n        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'\n      ],\n      [\n        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',\n        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'\n      ],\n      [\n        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',\n        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'\n      ],\n      [\n        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',\n        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'\n      ],\n      [\n        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',\n        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'\n      ],\n      [\n        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',\n        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'\n      ],\n      [\n        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',\n        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'\n      ],\n      [\n        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',\n        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'\n      ],\n      [\n        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',\n        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'\n      ],\n      [\n        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',\n        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'\n      ],\n      [\n        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',\n        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'\n      ],\n      [\n        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',\n        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'\n      ],\n      [\n        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',\n        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'\n      ],\n      [\n        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',\n        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'\n      ],\n      [\n        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',\n        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'\n      ],\n      [\n        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',\n        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'\n      ],\n      [\n        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',\n        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'\n      ],\n      [\n        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',\n        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'\n      ],\n      [\n        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',\n        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'\n      ],\n      [\n        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',\n        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'\n      ],\n      [\n        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',\n        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'\n      ],\n      [\n        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',\n        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'\n      ],\n      [\n        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',\n        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'\n      ],\n      [\n        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',\n        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'\n      ],\n      [\n        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',\n        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'\n      ],\n      [\n        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',\n        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'\n      ],\n      [\n        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',\n        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'\n      ],\n      [\n        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',\n        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'\n      ],\n      [\n        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',\n        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'\n      ],\n      [\n        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',\n        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'\n      ],\n      [\n        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',\n        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'\n      ],\n      [\n        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',\n        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'\n      ],\n      [\n        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',\n        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'\n      ],\n      [\n        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',\n        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'\n      ],\n      [\n        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',\n        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'\n      ],\n      [\n        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',\n        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'\n      ],\n      [\n        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',\n        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'\n      ],\n      [\n        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',\n        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'\n      ],\n      [\n        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',\n        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'\n      ],\n      [\n        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',\n        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'\n      ],\n      [\n        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',\n        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'\n      ],\n      [\n        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',\n        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'\n      ],\n      [\n        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',\n        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'\n      ],\n      [\n        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',\n        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'\n      ],\n      [\n        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',\n        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'\n      ],\n      [\n        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',\n        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'\n      ],\n      [\n        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',\n        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'\n      ],\n      [\n        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',\n        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'\n      ],\n      [\n        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',\n        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'\n      ],\n      [\n        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',\n        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'\n      ],\n      [\n        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',\n        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'\n      ],\n      [\n        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',\n        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'\n      ],\n      [\n        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',\n        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'\n      ],\n      [\n        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',\n        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'\n      ],\n      [\n        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',\n        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'\n      ],\n      [\n        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',\n        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'\n      ],\n      [\n        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',\n        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'\n      ],\n      [\n        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',\n        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'\n      ],\n      [\n        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',\n        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'\n      ],\n      [\n        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',\n        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'\n      ],\n      [\n        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',\n        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'\n      ],\n      [\n        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',\n        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'\n      ]\n    ]\n  },\n  naf: {\n    wnd: 7,\n    points: [\n      [\n        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',\n        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'\n      ],\n      [\n        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',\n        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'\n      ],\n      [\n        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',\n        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'\n      ],\n      [\n        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',\n        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'\n      ],\n      [\n        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',\n        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'\n      ],\n      [\n        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',\n        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'\n      ],\n      [\n        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',\n        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'\n      ],\n      [\n        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',\n        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'\n      ],\n      [\n        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',\n        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'\n      ],\n      [\n        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',\n        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'\n      ],\n      [\n        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',\n        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'\n      ],\n      [\n        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',\n        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'\n      ],\n      [\n        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',\n        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'\n      ],\n      [\n        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',\n        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'\n      ],\n      [\n        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',\n        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'\n      ],\n      [\n        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',\n        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'\n      ],\n      [\n        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',\n        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'\n      ],\n      [\n        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',\n        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'\n      ],\n      [\n        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',\n        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'\n      ],\n      [\n        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',\n        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'\n      ],\n      [\n        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',\n        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'\n      ],\n      [\n        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',\n        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'\n      ],\n      [\n        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',\n        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'\n      ],\n      [\n        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',\n        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'\n      ],\n      [\n        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',\n        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'\n      ],\n      [\n        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',\n        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'\n      ],\n      [\n        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',\n        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'\n      ],\n      [\n        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',\n        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'\n      ],\n      [\n        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',\n        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'\n      ],\n      [\n        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',\n        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'\n      ],\n      [\n        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',\n        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'\n      ],\n      [\n        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',\n        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'\n      ],\n      [\n        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',\n        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'\n      ],\n      [\n        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',\n        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'\n      ],\n      [\n        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',\n        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'\n      ],\n      [\n        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',\n        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'\n      ],\n      [\n        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',\n        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'\n      ],\n      [\n        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',\n        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'\n      ],\n      [\n        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',\n        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'\n      ],\n      [\n        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',\n        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'\n      ],\n      [\n        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',\n        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'\n      ],\n      [\n        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',\n        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'\n      ],\n      [\n        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',\n        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'\n      ],\n      [\n        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',\n        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'\n      ],\n      [\n        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',\n        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'\n      ],\n      [\n        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',\n        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'\n      ],\n      [\n        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',\n        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'\n      ],\n      [\n        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',\n        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'\n      ],\n      [\n        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',\n        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'\n      ],\n      [\n        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',\n        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'\n      ],\n      [\n        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',\n        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'\n      ],\n      [\n        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',\n        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'\n      ],\n      [\n        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',\n        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'\n      ],\n      [\n        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',\n        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'\n      ],\n      [\n        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',\n        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'\n      ],\n      [\n        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',\n        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'\n      ],\n      [\n        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',\n        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'\n      ],\n      [\n        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',\n        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'\n      ],\n      [\n        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',\n        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'\n      ],\n      [\n        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',\n        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'\n      ],\n      [\n        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',\n        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'\n      ],\n      [\n        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',\n        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'\n      ],\n      [\n        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',\n        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'\n      ],\n      [\n        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',\n        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'\n      ],\n      [\n        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',\n        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'\n      ],\n      [\n        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',\n        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'\n      ],\n      [\n        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',\n        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'\n      ],\n      [\n        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',\n        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'\n      ],\n      [\n        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',\n        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'\n      ],\n      [\n        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',\n        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'\n      ],\n      [\n        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',\n        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'\n      ],\n      [\n        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',\n        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'\n      ],\n      [\n        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',\n        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'\n      ],\n      [\n        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',\n        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'\n      ],\n      [\n        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',\n        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'\n      ],\n      [\n        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',\n        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'\n      ],\n      [\n        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',\n        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'\n      ],\n      [\n        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',\n        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'\n      ],\n      [\n        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',\n        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'\n      ],\n      [\n        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',\n        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'\n      ],\n      [\n        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',\n        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'\n      ],\n      [\n        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',\n        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'\n      ],\n      [\n        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',\n        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'\n      ],\n      [\n        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',\n        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'\n      ],\n      [\n        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',\n        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'\n      ],\n      [\n        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',\n        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'\n      ],\n      [\n        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',\n        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'\n      ],\n      [\n        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',\n        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'\n      ],\n      [\n        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',\n        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'\n      ],\n      [\n        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',\n        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'\n      ],\n      [\n        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',\n        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'\n      ],\n      [\n        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',\n        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'\n      ],\n      [\n        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',\n        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'\n      ],\n      [\n        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',\n        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'\n      ],\n      [\n        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',\n        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'\n      ],\n      [\n        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',\n        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'\n      ],\n      [\n        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',\n        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'\n      ],\n      [\n        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',\n        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'\n      ],\n      [\n        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',\n        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'\n      ],\n      [\n        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',\n        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'\n      ],\n      [\n        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',\n        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'\n      ],\n      [\n        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',\n        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'\n      ],\n      [\n        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',\n        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'\n      ],\n      [\n        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',\n        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'\n      ],\n      [\n        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',\n        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'\n      ],\n      [\n        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',\n        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'\n      ],\n      [\n        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',\n        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'\n      ],\n      [\n        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',\n        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'\n      ],\n      [\n        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',\n        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'\n      ],\n      [\n        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',\n        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'\n      ],\n      [\n        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',\n        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'\n      ],\n      [\n        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',\n        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'\n      ],\n      [\n        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',\n        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'\n      ],\n      [\n        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',\n        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'\n      ],\n      [\n        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',\n        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'\n      ],\n      [\n        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',\n        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'\n      ],\n      [\n        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',\n        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'\n      ],\n      [\n        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',\n        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'\n      ],\n      [\n        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',\n        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'\n      ],\n      [\n        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',\n        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'\n      ],\n      [\n        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',\n        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'\n      ],\n      [\n        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',\n        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'\n      ],\n      [\n        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',\n        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'\n      ],\n      [\n        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',\n        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'\n      ],\n      [\n        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',\n        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'\n      ],\n      [\n        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',\n        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'\n      ],\n      [\n        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',\n        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'\n      ]\n    ]\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/precomputed/secp256k1.js\n// module id = 126\n// module chunks = 0","'use strict';\n\nvar utils = exports;\nvar BN = require('bn.js');\n\nutils.assert = function assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n};\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg !== 'string') {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n    return res;\n  }\n  if (!enc) {\n    for (var i = 0; i < msg.length; i++) {\n      var c = msg.charCodeAt(i);\n      var hi = c >> 8;\n      var lo = c & 0xff;\n      if (hi)\n        res.push(hi, lo);\n      else\n        res.push(lo);\n    }\n  } else if (enc === 'hex') {\n    msg = msg.replace(/[^a-z0-9]+/ig, '');\n    if (msg.length % 2 !== 0)\n      msg = '0' + msg;\n    for (var i = 0; i < msg.length; i += 2)\n      res.push(parseInt(msg[i] + msg[i + 1], 16));\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nutils.encode = function encode(arr, enc) {\n  if (enc === 'hex')\n    return toHex(arr);\n  else\n    return arr;\n};\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w) {\n  var naf = [];\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n  while (k.cmpn(1) >= 0) {\n    var z;\n    if (k.isOdd()) {\n      var mod = k.andln(ws - 1);\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n    naf.push(z);\n\n    // Optimization, shift by word if possible\n    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;\n    for (var i = 1; i < shift; i++)\n      naf.push(0);\n    k.iushrn(shift);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    []\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      var m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      var m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n           this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n                                     bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new BN(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/lib/elliptic/utils.js\n// module id = 127\n// module chunks = 0","var params = require('./params.json')\nparams.genesisState = require('./genesisState.json')\nparams.bootstrapNodes = require('./bootstrapNodes.json')\nmodule.exports = params\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ethereum-common/index.js\n// module id = 128\n// module chunks = 0","const utils = require('ethereumjs-util')\nconst params = require('ethereum-common')\nconst BN = utils.BN\n  /**\n   * An object that repersents the block header\n   * @constructor\n   * @param {Array} data raw data, deserialized\n   * @prop {Buffer} parentHash the blocks' parent's hash\n   * @prop {Buffer} uncleHash sha3(rlp_encode(uncle_list))\n   * @prop {Buffer} coinbase the miner address\n   * @prop {Buffer} stateRoot The root of a Merkle Patricia tree\n   * @prop {Buffer} transactionTrie the root of a Trie containing the transactions\n   * @prop {Buffer} receiptTrie the root of a Trie containing the transaction Reciept\n   * @prop {Buffer} bloom\n   * @prop {Buffer} difficulty\n   * @prop {Buffer} number the block's height\n   * @prop {Buffer} gasLimit\n   * @prop {Buffer} gasUsed\n   * @prop {Buffer} timestamp\n   * @prop {Buffer} extraData\n   * @prop {Array.<Buffer>} raw an array of buffers containing the raw blocks.\n   */\nvar BlockHeader = module.exports = function (data) {\n  var fields = [{\n    name: 'parentHash',\n    length: 32,\n    default: utils.zeros(32)\n  }, {\n    name: 'uncleHash',\n    default: utils.SHA3_RLP_ARRAY\n  }, {\n    name: 'coinbase',\n    length: 20,\n    default: utils.zeros(20)\n  }, {\n    name: 'stateRoot',\n    length: 32,\n    default: utils.zeros(32)\n  }, {\n    name: 'transactionsTrie',\n    length: 32,\n    default: utils.SHA3_RLP\n  }, {\n    name: 'receiptTrie',\n    length: 32,\n    default: utils.SHA3_RLP\n  }, {\n    name: 'bloom',\n    default: utils.zeros(256)\n  }, {\n    name: 'difficulty',\n    default: new Buffer([])\n  }, {\n    name: 'number',\n    default: utils.intToBuffer(params.homeSteadForkNumber.v)\n  }, {\n    name: 'gasLimit',\n    default: new Buffer('ffffffffffffff', 'hex')\n  }, {\n    name: 'gasUsed',\n    empty: true,\n    default: new Buffer([])\n  }, {\n    name: 'timestamp',\n    default: new Buffer([])\n  }, {\n    name: 'extraData',\n    allowZero: true,\n    empty: true,\n    default: new Buffer([])\n  }, {\n    name: 'mixHash',\n    default: utils.zeros(32)\n      // length: 32\n  }, {\n    name: 'nonce',\n    default: new Buffer([]) // sha3(42)\n  }]\n  utils.defineProperties(this, fields, data)\n}\n\n/**\n * Returns the canoncical difficulty of the block\n * @method canonicalDifficulty\n * @param {Block} parentBlock the parent `Block` of the this header\n * @return {BN}\n */\nBlockHeader.prototype.canonicalDifficulty = function (parentBlock) {\n  const blockTs = new BN(this.timestamp)\n  const parentTs = new BN(parentBlock.header.timestamp)\n  const parentDif = new BN(parentBlock.header.difficulty)\n  const minimumDifficulty = new BN(params.minimumDifficulty.v)\n  var offset = parentDif.div(new BN(params.difficultyBoundDivisor.v))\n  var dif\n\n  if (this.isHomestead()) {\n    // homestead\n    // 1 - (block_timestamp - parent_timestamp) // 10\n    var a = blockTs.sub(parentTs).divn(10).neg().addn(1)\n    var cutoff = new BN(-99)\n    // MAX(cutoff, a)\n    if (cutoff.cmp(a) === 1) {\n      a = cutoff\n    }\n    dif = parentDif.add(offset.mul(a))\n  } else {\n    // prehomestead\n    if (parentTs.addn(params.durationLimit.v).cmp(blockTs) === 1) {\n      dif = offset.add(parentDif)\n    } else {\n      dif = parentDif.sub(offset)\n    }\n  }\n\n  var exp = new BN(this.number).divn(100000).subn(2)\n  if (!exp.isNeg()) {\n    dif.iadd(new BN(2).pow(exp))\n  }\n\n  if (dif.cmp(minimumDifficulty) === -1) {\n    dif = minimumDifficulty\n  }\n\n  return dif\n}\n\n/**\n * checks that the block's `difficuly` matches the canonical difficulty\n * @method validateDifficulty\n * @param {Block} parentBlock this block's parent\n * @return {Boolean}\n */\nBlockHeader.prototype.validateDifficulty = function (parentBlock) {\n  const dif = this.canonicalDifficulty(parentBlock)\n  return dif.cmp(new BN(this.difficulty)) === 0\n}\n\n/**\n * Validates the gasLimit\n * @method validateGasLimit\n * @param {Block} parentBlock this block's parent\n * @returns {Boolean}\n */\nBlockHeader.prototype.validateGasLimit = function (parentBlock) {\n  const pGasLimit = utils.bufferToInt(parentBlock.header.gasLimit)\n  const gasLimit = utils.bufferToInt(this.gasLimit)\n  const a = Math.floor(pGasLimit / params.gasLimitBoundDivisor.v)\n  const maxGasLimit = pGasLimit + a\n  const minGasLimit = pGasLimit - a\n\n  return maxGasLimit > gasLimit && minGasLimit < gasLimit && params.minGasLimit.v <= gasLimit\n}\n\n/**\n * Validates the entire block header\n * @method validate\n * @param {Blockchain} blockChain the blockchain that this block is validating against\n * @param {Bignum} [height] if this is an uncle header, this is the height of the block that is including it\n * @param {Function} cb the callback function. The callback is given an `error` if the block is invalid\n */\nBlockHeader.prototype.validate = function (blockchain, height, cb) {\n  var self = this\n  if (arguments.length === 2) {\n    cb = height\n    height = false\n  }\n\n  if (this.isGenesis()) {\n    return cb()\n  }\n\n  // find the blocks parent\n  blockchain.getBlock(self.parentHash, function (err, parentBlock) {\n    if (err) {\n      return cb('could not find parent block')\n    }\n\n    self.parentBlock = parentBlock\n\n    var number = new BN(self.number)\n    if (number.cmp(new BN(parentBlock.header.number).addn(1)) !== 0) {\n      return cb('invalid number')\n    }\n\n    if (height) {\n      var dif = height.sub(new BN(parentBlock.header.number))\n      if (!(dif.cmpn(8) === -1 && dif.cmpn(1) === 1)) {\n        return cb('uncle block has a parent that is too old or to young')\n      }\n    }\n\n    if (!self.validateDifficulty(parentBlock)) {\n      return cb('invalid Difficulty')\n    }\n\n    if (!self.validateGasLimit(parentBlock)) {\n      return cb('invalid gas limit')\n    }\n\n    if (utils.bufferToInt(parentBlock.header.number) + 1 !== utils.bufferToInt(self.number)) {\n      return cb('invalid heigth')\n    }\n\n    if (utils.bufferToInt(self.timestamp) <= utils.bufferToInt(parentBlock.header.timestamp)) {\n      return cb('invalid timestamp')\n    }\n\n    if (self.extraData.length > params.maximumExtraDataSize.v) {\n      return cb('invalid amount of extra data')\n    }\n\n    cb()\n  })\n}\n\n/**\n * Returns the sha3 hash of the blockheader\n * @method hash\n * @return {Buffer}\n */\nBlockHeader.prototype.hash = function () {\n  return utils.rlphash(this.raw)\n}\n\n/**\n * checks if the blockheader is a genesis header\n * @method isGenesis\n * @return {Boolean}\n */\nBlockHeader.prototype.isGenesis = function () {\n  return this.number.toString('hex') === ''\n}\n\n/**\n * Determines if a given block part of homestead or not\n * @method isHomestead\n * @return Boolean\n */\nBlockHeader.prototype.isHomestead = function () {\n  return utils.bufferToInt(this.number) >= params.homeSteadForkNumber.v\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ethereumjs-block/header.js\n// module id = 129\n// module chunks = 0","const SHA3 = require('keccakjs')\nconst secp256k1 = require('secp256k1')\nconst assert = require('assert')\nconst rlp = require('rlp')\nconst BN = require('bn.js')\nconst createHash = require('create-hash')\n\n/**\n * the max integer that this VM can handle (a ```BN```)\n * @var {BN} MAX_INTEGER\n */\nexports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)\n\n/**\n * 2^256 (a ```BN```)\n * @var {BN} TWO_POW256\n */\nexports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16)\n\n/**\n * SHA3-256 hash of null (a ```String```)\n * @var {String} SHA3_NULL_S\n */\nexports.SHA3_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n\n/**\n * SHA3-256 hash of null (a ```Buffer```)\n * @var {Buffer} SHA3_NULL\n */\nexports.SHA3_NULL = new Buffer(exports.SHA3_NULL_S, 'hex')\n\n/**\n * SHA3-256 of an RLP of an empty array (a ```String```)\n * @var {String} SHA3_RLP_ARRAY_S\n */\nexports.SHA3_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'\n\n/**\n * SHA3-256 of an RLP of an empty array (a ```Buffer```)\n * @var {Buffer} SHA3_RLP_ARRAY\n */\nexports.SHA3_RLP_ARRAY = new Buffer(exports.SHA3_RLP_ARRAY_S, 'hex')\n\n/**\n * SHA3-256 hash of the RLP of null  (a ```String```)\n * @var {String} SHA3_RLP_S\n */\nexports.SHA3_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'\n\n/**\n * SHA3-256 hash of the RLP of null (a ```Buffer```)\n * @var {Buffer} SHA3_RLP\n */\nexports.SHA3_RLP = new Buffer(exports.SHA3_RLP_S, 'hex')\n\n/**\n * [`BN`](https://github.com/indutny/bn.js)\n * @var {Function}\n */\nexports.BN = BN\n\n/**\n * [`rlp`](https://github.com/ethereumjs/rlp)\n * @var {Function}\n */\nexports.rlp = rlp\n\n/**\n * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)\n * @var {Object}\n */\nexports.secp256k1 = secp256k1\n\n/**\n * Returns a buffer filled with 0s\n * @method zeros\n * @param {Number} bytes  the number of bytes the buffer should be\n * @return {Buffer}\n */\nexports.zeros = function (bytes) {\n  var buf = new Buffer(bytes)\n  buf.fill(0)\n  return buf\n}\n\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method lsetLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @param {Boolean} [right=false] whether to start padding form the left or right\n * @return {Buffer|Array}\n */\nexports.setLengthLeft = exports.setLength = function (msg, length, right) {\n  var buf = exports.zeros(length)\n  msg = exports.toBuffer(msg)\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf)\n      return buf\n    }\n    return msg.slice(0, length)\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length)\n      return buf\n    }\n    return msg.slice(-length)\n  }\n}\n\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method lsetLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @return {Buffer|Array}\n */\nexports.setLengthRight = function (msg, length) {\n  return exports.setLength(msg, length, true)\n}\n\n/**\n * Trims leading zeros from a `Buffer` or an `Array`\n * @method unpad\n * @param {Buffer|Array|String} a\n * @return {Buffer|Array|String}\n */\nexports.unpad = exports.stripZeros = function (a) {\n  a = exports.stripHexPrefix(a)\n  var first = a[0]\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1)\n    first = a[0]\n  }\n  return a\n}\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @method toBuffer\n * @param {*} v the value\n */\nexports.toBuffer = function (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = new Buffer(v)\n    } else if (typeof v === 'string') {\n      if (exports.isHexPrefixed(v)) {\n        v = new Buffer(exports.padToEven(exports.stripHexPrefix(v)), 'hex')\n      } else {\n        v = new Buffer(v)\n      }\n    } else if (typeof v === 'number') {\n      v = exports.intToBuffer(v)\n    } else if (v === null || v === undefined) {\n      v = new Buffer([])\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = new Buffer(v.toArray())\n    } else {\n      throw new Error('invalid type')\n    }\n  }\n  return v\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @method intToHex\n * @param {Number} i\n * @return {String}\n */\nexports.intToHex = function (i) {\n  assert(i % 1 === 0, 'number is not a integer')\n  assert(i >= 0, 'number must be positive')\n  var hex = i.toString(16)\n  if (hex.length % 2) {\n    hex = '0' + hex\n  }\n\n  return '0x' + hex\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @method intToBuffer\n * @param {Number} i\n * @return {Buffer}\n */\nexports.intToBuffer = function (i) {\n  var hex = exports.intToHex(i)\n  return new Buffer(hex.slice(2), 'hex')\n}\n\n/**\n * Converts a `Buffer` to a `Number`\n * @method bufferToInt\n * @param {Buffer} buf\n * @return {Number}\n */\nexports.bufferToInt = function (buf) {\n  return parseInt(exports.bufferToHex(buf), 16)\n}\n\n/**\n * Converts a `Buffer` into a hex `String`\n * @method bufferToHex\n * @param {Buffer} buf\n * @return {String}\n */\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf)\n  if (buf.length === 0) {\n    return 0\n  }\n\n  return '0x' + buf.toString('hex')\n}\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @method fromSigned\n * @param {Buffer} num\n * @return {BN}\n */\nexports.fromSigned = function (num) {\n  return new BN(num).fromTwos(256)\n}\n\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @method toUnsigned\n * @param {BN} num\n * @return {Buffer}\n */\nexports.toUnsigned = function (num) {\n  return new Buffer(num.toTwos(256).toArray())\n}\n\n/**\n * Creates SHA-3 hash of the input\n * @method sha3\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bytes=256] the SHA width\n * @return {Buffer}\n */\nexports.sha3 = function (a, bytes) {\n  a = exports.toBuffer(a)\n  if (!bytes) bytes = 256\n\n  var h = new SHA3(bytes)\n  if (a) {\n    h.update(a)\n  }\n  return new Buffer(h.digest('hex'), 'hex')\n}\n\n/**\n * Creates SHA256 hash of the input\n * @method sha256\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.sha256 = function (a) {\n  a = exports.toBuffer(a)\n  return createHash('sha256').update(a).digest()\n}\n\n/**\n * Creates RIPEMD160 hash of the input\n * @method ripemd160\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Boolean} padded whether it should be padded to 256 bits or not\n * @return {Buffer}\n */\nexports.ripemd160 = function (a, padded) {\n  a = exports.toBuffer(a)\n  var hash = createHash('rmd160').update(a).digest()\n  if (padded === true) {\n    return exports.setLength(hash, 32)\n  } else {\n    return hash\n  }\n}\n\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input\n * @method rlphash\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.rlphash = function (a) {\n  return exports.sha3(rlp.encode(a))\n}\n\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n * @method isValidPrivate\n * @param {Buffer} privateKey\n * @return {Boolean}\n */\nexports.isValidPrivate = function (privateKey) {\n  return secp256k1.privateKeyVerify(privateKey)\n}\n\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @method isValidPublic\n * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Boolean}\n */\nexports.isValidPublic = function (publicKey, sanitize) {\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return secp256k1.publicKeyVerify(Buffer.concat([ new Buffer([4]), publicKey ]))\n  }\n\n  if (!sanitize) {\n    return false\n  }\n\n  return secp256k1.publicKeyVerify(publicKey)\n}\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @method publicToAddress\n * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Buffer}\n */\nexports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {\n  pubKey = exports.toBuffer(pubKey)\n  if (sanitize && (pubKey.length !== 64)) {\n    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1)\n  }\n  assert(pubKey.length === 64)\n  // Only take the lower 160bits of the hash\n  return exports.sha3(pubKey).slice(-20)\n}\n\n/**\n * Returns the ethereum public key of a given private key\n * @method privateToPublic\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nvar privateToPublic = exports.privateToPublic = function (privateKey) {\n  privateKey = exports.toBuffer(privateKey)\n  // skip the type flag and use the X, Y points\n  return secp256k1.publicKeyCreate(privateKey, false).slice(1)\n}\n\n/**\n * Converts a public key to the Ethereum format.\n * @method importPublic\n * @param {Buffer} publicKey\n * @return {Buffer}\n */\nexports.importPublic = function (publicKey) {\n  publicKey = exports.toBuffer(publicKey)\n  if (publicKey.length !== 64) {\n    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1)\n  }\n  return publicKey\n}\n\n/**\n * ECDSA sign\n * @method ecsign\n * @param {Buffer} msgHash\n * @param {Buffer} privateKey\n * @return {Object}\n */\nexports.ecsign = function (msgHash, privateKey) {\n  var sig = secp256k1.sign(msgHash, privateKey)\n\n  var ret = {}\n  ret.r = sig.signature.slice(0, 32)\n  ret.s = sig.signature.slice(32, 64)\n  ret.v = sig.recovery + 27\n  return ret\n}\n\n/**\n * ECDSA public key recovery from signature\n * @method ecrecover\n * @param {Buffer} msgHash\n * @param {Buffer} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {Buffer} publicKey\n */\nexports.ecrecover = function (msgHash, v, r, s) {\n  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64)\n  var recovery = exports.bufferToInt(v) - 27\n  if (recovery !== 0 && recovery !== 1) {\n    throw new Error('Invalid signature v value')\n  }\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery)\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1)\n}\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method\n * @method toRpcSig\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {String} sig\n */\nexports.toRpcSig = function (v, r, s) {\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053\n  return exports.bufferToHex(Buffer.concat([ r, s, exports.toBuffer(v - 27) ]))\n}\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * @method fromRpcSig\n * @param {String} sig\n * @return {Object}\n */\nexports.fromRpcSig = function (sig) {\n  sig = exports.toBuffer(sig)\n\n  var v = sig[64]\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27\n  }\n\n  return {\n    v: v,\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64)\n  }\n}\n\n/**\n * Returns the ethereum address of a given private key\n * @method privateToAddress\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nexports.privateToAddress = function (privateKey) {\n  return exports.publicToAddress(privateToPublic(privateKey))\n}\n\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too\n * @method isValidAddress\n * @param {String} address\n * @return {Boolean}\n */\nexports.isValidAddress = function (address) {\n  return /^0x[0-9a-fA-F]{40}$/i.test(address)\n}\n\n/**\n * Returns a checksummed address\n * @method toChecksumAddress\n * @param {String} address\n * @return {String}\n */\nexports.toChecksumAddress = function (address) {\n  address = exports.stripHexPrefix(address).toLowerCase()\n  var hash = exports.sha3(address).toString('hex')\n  var ret = '0x'\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase()\n    } else {\n      ret += address[i]\n    }\n  }\n\n  return ret\n}\n\n/**\n * Checks if the address is a valid checksummed address\n * @method isValidChecksumAddress\n * @param {Buffer} address\n * @return {Boolean}\n */\nexports.isValidChecksumAddress = function (address) {\n  return exports.isValidAddress(address) && (exports.toChecksumAddress(address) === address)\n}\n\n/**\n * Generates an address of a newly created contract\n * @method generateAddress\n * @param {Buffer} from the address which is creating this new address\n * @param {Buffer} nonce the nonce of the from account\n * @return {Buffer}\n */\nexports.generateAddress = function (from, nonce) {\n  from = exports.toBuffer(from)\n  nonce = new BN(nonce)\n\n  if (nonce.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    nonce = null\n  } else {\n    nonce = new Buffer(nonce.toArray())\n  }\n\n  // Only take the lower 160bits of the hash\n  return exports.rlphash([from, nonce]).slice(-20)\n}\n\n/**\n * Returns true if the supplied address belongs to a precompiled account\n * @method isPrecompiled\n * @param {Buffer|String} address\n * @return {Boolean}\n */\nexports.isPrecompiled = function (address) {\n  var a = exports.unpad(address)\n  return a.length === 1 && a[0] > 0 && a[0] < 5\n}\n\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with \"0x\"\n * @method isHexPrefixed\n * @param {String} str\n * @return {Boolean}\n */\nexports.isHexPrefixed = function (str) {\n  return str.slice(0, 2) === '0x'\n}\n\n/**\n * Removes \"0x\" from a given `String`\n * @method stripHexPrefix\n * @param {String} str\n * @return {String}\n */\nexports.stripHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str\n  }\n  return exports.isHexPrefixed(str) ? str.slice(2) : str\n}\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\"\n * @method addHexPrefix\n * @param {String} str\n * @return {String}\n */\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str\n  }\n\n  return exports.isHexPrefixed(str) ? str : '0x' + str\n}\n\n/**\n * Pads a `String` to have an even length\n * @method padToEven\n * @param {String} a\n * @return {String}\n */\nexports.padToEven = function (a) {\n  if (a.length % 2) a = '0' + a\n  return a\n}\n\n/**\n * Converts a `Buffer` or `Array` to JSON\n * @method BAToJSON\n * @param {Buffer|Array} ba\n * @return {Array|String|null}\n */\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return '0x' + ba.toString('hex')\n  } else if (ba instanceof Array) {\n    var array = []\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]))\n    }\n    return array\n  }\n}\n\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @method defineProperties\n * @param {Object} self the `Object` to define properties on\n * @param {Array} fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param {*} data data to be validated against the definitions\n */\nexports.defineProperties = function (self, fields, data) {\n  self.raw = []\n  self._fields = []\n\n  // attach the `toJSON`\n  self.toJSON = function (label) {\n    if (label) {\n      var obj = {}\n      self._fields.forEach(function (field) {\n        obj[field] = '0x' + self[field].toString('hex')\n      })\n      return obj\n    }\n    return exports.baToJSON(this.raw)\n  }\n\n  self.serialize = function serialize () {\n    return rlp.encode(self.raw)\n  }\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name)\n    function getter () {\n      return self.raw[i]\n    }\n    function setter (v) {\n      v = exports.toBuffer(v)\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = new Buffer([])\n      }\n\n      if (field.allowLess && field.length) {\n        v = exports.stripZeros(v)\n        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes')\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length)\n      }\n\n      self.raw[i] = v\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    })\n\n    if (field.default) {\n      self[field.name] = field.default\n    }\n\n    // attach alias\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      })\n    }\n  })\n\n  // if the constuctor is passed data\n  if (data) {\n    if (typeof data === 'string') {\n      data = new Buffer(exports.stripHexPrefix(data), 'hex')\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data)\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw (new Error('wrong number of fields in data'))\n      }\n\n      // make sure all the items are buffers\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = exports.toBuffer(d)\n      })\n    } else if (typeof data === 'object') {\n      for (var prop in data) {\n        if (self._fields.indexOf(prop) !== -1) {\n          self[prop] = data[prop]\n        }\n      }\n    } else {\n      throw new Error('invalid data')\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ethereumjs-util/index.js\n// module id = 130\n// module chunks = 0","var util = require('util')\n\nvar INDENT_START = /[\\{\\[]/\nvar INDENT_END = /[\\}\\]]/\n\nmodule.exports = function() {\n  var lines = []\n  var indent = 0\n\n  var push = function(str) {\n    var spaces = ''\n    while (spaces.length < indent*2) spaces += '  '\n    lines.push(spaces+str)\n  }\n\n  var line = function(fmt) {\n    if (!fmt) return line\n\n    if (INDENT_END.test(fmt.trim()[0]) && INDENT_START.test(fmt[fmt.length-1])) {\n      indent--\n      push(util.format.apply(util, arguments))\n      indent++\n      return line\n    }\n    if (INDENT_START.test(fmt[fmt.length-1])) {\n      push(util.format.apply(util, arguments))\n      indent++\n      return line\n    }\n    if (INDENT_END.test(fmt.trim()[0])) {\n      indent--\n      push(util.format.apply(util, arguments))\n      return line\n    }\n\n    push(util.format.apply(util, arguments))\n    return line\n  }\n\n  line.toString = function() {\n    return lines.join('\\n')\n  }\n\n  line.toFunction = function(scope) {\n    var src = 'return ('+line.toString()+')'\n\n    var keys = Object.keys(scope || {}).map(function(key) {\n      return key\n    })\n\n    var vals = keys.map(function(key) {\n      return scope[key]\n    })\n\n    return Function.apply(null, keys.concat(src)).apply(null, vals)\n  }\n\n  if (arguments.length) line.apply(null, arguments)\n\n  return line\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/generate-function/index.js\n// module id = 131\n// module chunks = 0","var isProperty = require('is-property')\n\nvar gen = function(obj, prop) {\n  return isProperty(prop) ? obj+'.'+prop : obj+'['+JSON.stringify(prop)+']'\n}\n\ngen.valid = isProperty\ngen.property = function (prop) {\n return isProperty(prop) ? prop : JSON.stringify(prop)\n}\n\nmodule.exports = gen\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/generate-object-property/index.js\n// module id = 132\n// module chunks = 0","var hash = require('../hash');\nvar utils = hash.utils;\nvar assert = utils.assert;\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/hash.js/lib/hash/common.js\n// module id = 133\n// module chunks = 0","var hmac = exports;\n\nvar hash = require('../hash');\nvar utils = hash.utils;\nvar assert = utils.assert;\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (var i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (var i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/hash.js/lib/hash/hmac.js\n// module id = 134\n// module chunks = 0","var hash = require('../hash');\nvar utils = hash.utils;\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = hash.common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/hash.js/lib/hash/ripemd.js\n// module id = 135\n// module chunks = 0","var hash = require('../hash');\nvar utils = hash.utils;\nvar assert = utils.assert;\n\nvar rotr32 = utils.rotr32;\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\nvar BlockHash = hash.common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nexports.sha256 = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nexports.sha224 = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [ 0x6a09e667, 0xf3bcc908,\n             0xbb67ae85, 0x84caa73b,\n             0x3c6ef372, 0xfe94f82b,\n             0xa54ff53a, 0x5f1d36f1,\n             0x510e527f, 0xade682d1,\n             0x9b05688c, 0x2b3e6c1f,\n             0x1f83d9ab, 0xfb41bd6b,\n             0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nexports.sha512 = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(c0_hi, c0_lo,\n                      c1_hi, c1_lo,\n                      c2_hi, c2_lo,\n                      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,\n                          c1_hi, c1_lo,\n                          c2_hi, c2_lo,\n                          c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(c0_hi, c0_lo,\n                           c1_hi, c1_lo,\n                           c2_hi, c2_lo,\n                           c3_hi, c3_lo,\n                           c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(c0_hi, c0_lo,\n                           c1_hi, c1_lo,\n                           c2_hi, c2_lo,\n                           c3_hi, c3_lo,\n                           c4_hi, c4_lo);\n\n    var c0_hi = s0_512_hi(ah, al);\n    var c0_lo = s0_512_lo(ah, al);\n    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [ 0xcbbb9d5d, 0xc1059ed8,\n             0x629a292a, 0x367cd507,\n             0x9159015a, 0x3070dd17,\n             0x152fecd8, 0xf70e5939,\n             0x67332667, 0xffc00b31,\n             0x8eb44a87, 0x68581511,\n             0xdb0c2e0d, 0x64f98fa7,\n             0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nexports.sha384 = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,\n             0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nexports.sha1 = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (var i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\n\nfunction ch64_hi(xh, xl, yh, yl, zh, zl) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh, zl) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/hash.js/lib/hash/sha.js\n// module id = 136\n// module chunks = 0","var utils = exports;\nvar inherits = require('inherits');\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        var hi = c >> 8;\n        var lo = c & 0xff;\n        if (hi)\n          res.push(hi, lo);\n        else\n          res.push(lo);\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (var i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nutils.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nutils.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nutils.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nutils.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nutils.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nutils.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nutils.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nutils.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nutils.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nutils.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nutils.sum32_5 = sum32_5;\n\nfunction assert(cond, msg) {\n  if (!cond)\n    throw new Error(msg || 'Assertion failed');\n}\nutils.assert = assert;\n\nutils.inherits = inherits;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n};\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n};\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n};\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n};\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n};\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n};\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n};\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n};\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n};\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n};\nexports.shr64_lo = shr64_lo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/hash.js/lib/hash/utils.js\n// module id = 137\n// module chunks = 0","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ieee754/index.js\n// module id = 138\n// module chunks = 0","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar createWrite = require('pull-write');\nvar pull = require('pull-stream');\n\nmodule.exports = function () {\n  function MemoryBlobStore() {\n    _classCallCheck(this, MemoryBlobStore);\n\n    this.store = {};\n  }\n\n  _createClass(MemoryBlobStore, [{\n    key: 'write',\n    value: function write(key, cb) {\n      var _this = this;\n\n      cb = cb || function () {};\n\n      if (!key) {\n        return cb(new Error('Missing key'));\n      }\n\n      this.store[key] = new Buffer([]);\n\n      return createWrite(function (data, cb) {\n        _this.store[key] = Buffer.concat([_this.store[key]].concat(data));\n        cb();\n      }, null, 100, cb);\n    }\n  }, {\n    key: 'read',\n    value: function read(key) {\n      if (!key) {\n        return pull.error(new Error('Missing key'));\n      }\n\n      var place = this.store[key];\n      if (place) {\n        return pull.values([this.store[key]]);\n      }\n\n      return pull.error(new Error('Unkown key ' + key));\n    }\n  }, {\n    key: 'exists',\n    value: function exists(key, cb) {\n      cb = cb || function () {};\n\n      if (!key) {\n        return cb(new Error('Missing key'));\n      }\n\n      cb(null, Boolean(this.store[key]));\n    }\n  }, {\n    key: 'remove',\n    value: function remove(key, cb) {\n      cb = cb || function () {};\n\n      if (!key) {\n        return cb(new Error('Missing key'));\n      }\n\n      delete this.store[key];\n      cb();\n    }\n  }]);\n\n  return MemoryBlobStore;\n}();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/interface-pull-blob-store/lib/index.js\n// module id = 139\n// module chunks = 0","'use strict'\n\nconst parallelLimit = require('async/parallelLimit')\nconst pull = require('pull-stream')\n\n// BlockService is a hybrid block datastore. It stores data in a local\n// datastore and may retrieve data from a remote Exchange.\n// It uses an internal `datastore.Datastore` instance to store values.\nmodule.exports = class BlockService {\n  constructor (ipfsRepo) {\n    this._repo = ipfsRepo\n    this._bitswap = null\n  }\n\n  goOnline (bitswap) {\n    this._bitswap = bitswap\n  }\n\n  goOffline () {\n    this._bitswap = null\n  }\n\n  isOnline () {\n    return this._bitswap != null\n  }\n\n  // Note: we have to pass the CID, so that bitswap can then use it for\n  // the smart selectors. For now, passing the CID is used so that we know\n  // the right multihash, this means that now we have multiple hashes official\n  // support \\o/\n  put (blockAndCID, callback) {\n    callback = callback || (() => {})\n    if (!blockAndCID) {\n      return callback(new Error('Missing block and CID'))\n    }\n\n    pull(\n      pull.values([\n        blockAndCID\n      ]),\n      this.putStream(),\n      pull.onEnd(callback)\n    )\n  }\n\n  putStream () {\n    let ps\n    if (this.isOnline()) {\n      // NOTE: This will have to change in order for bitswap\n      // to understand CID\n      ps = this._bitswap.putStream()\n    } else {\n      ps = this._repo.blockstore.putStream()\n    }\n\n    return pull(\n      pull.map((blockAndCID) => {\n        return {\n          data: blockAndCID.block.data,\n          key: blockAndCID.cid.multihash\n        }\n      }),\n      ps\n    )\n  }\n\n  get (cid, callback) {\n    pull(\n      this.getStream(cid),\n      pull.collect((err, result) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, result[0])\n      })\n    )\n  }\n\n  getStream (cid) {\n    if (this.isOnline()) {\n      return this._bitswap.getStream(cid.multihash)\n    }\n\n    return this._repo.blockstore.getStream(cid.multihash)\n  }\n\n  delete (cids, callback) {\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    parallelLimit(cids.map((cid) => (next) => {\n      this._repo.blockstore.delete(cid.multihash, next)\n    }), 100, callback)\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipfs-block-service/src/index.js\n// module id = 140\n// module chunks = 0","'use strict'\n\nconst assert = require('assert')\n\nconst stores = require('./stores')\n\nmodule.exports = class Repo {\n  constructor (repoPath, options) {\n    assert.equal(typeof repoPath, 'string', 'missing repoPath')\n    assert(options, 'missing options')\n    assert(options.stores, 'missing options.stores')\n\n    this.path = repoPath\n\n    const blobStores = initializeBlobStores(options.stores)\n\n    const setup = (name, needs) => {\n      needs = needs || {}\n      const args = [repoPath, blobStores[name]]\n      if (needs.locks) {\n        args.push(this.locks)\n      }\n\n      if (needs.config) {\n        args.push(this.config)\n      }\n\n      return stores[name].setUp.apply(stores[name], args)\n    }\n\n    this.locks = setup('locks')\n    this.version = setup('version', {locks: true})\n    this.config = setup('config', {locks: true})\n    this.keys = setup('keys', {locks: true, config: true})\n    this.blockstore = setup('blockstore', {locks: true})\n  }\n\n  exists (callback) {\n    this.version.exists(callback)\n  }\n}\n\nfunction initializeBlobStores (store) {\n  if (store.constructor) {\n    return {\n      keys: store,\n      config: store,\n      blockstore: store,\n      logs: store,\n      locks: store,\n      version: store\n    }\n  }\n\n  return store\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipfs-repo/src/index.js\n// module id = 141\n// module chunks = 0","'use strict'\n\nconst Block = require('ipfs-block')\nconst Lock = require('lock')\nconst base32 = require('base32.js')\nconst path = require('path')\nconst pull = require('pull-stream')\nconst pullWrite = require('pull-write')\nconst pullDefer = require('pull-defer/source')\nconst parallel = require('async/parallel')\n\nconst PREFIX_LENGTH = 5\nconst EXTENSION = 'data'\n\nexports = module.exports\n\nfunction multihashToPath (multihash) {\n  const encoder = new base32.Encoder()\n  const hash = encoder.write(multihash).finalize()\n  const filename = `${hash}.${EXTENSION}`\n  const folder = filename.slice(0, PREFIX_LENGTH)\n\n  return path.join(folder, filename)\n}\n\nexports.setUp = (basePath, BlobStore, locks) => {\n  const store = new BlobStore(basePath + '/blocks')\n  const lock = new Lock()\n\n  // blockBlob is an object with:\n  // { data: <>, key: <> }\n  function writeBlock (blockBlob, callback) {\n    if (!blockBlob || !blockBlob.data) {\n      return callback(new Error('Invalid block'))\n    }\n\n    const key = multihashToPath(blockBlob.key)\n\n    lock(key, (release) => {\n      pull(\n        pull.values([\n          blockBlob.data\n        ]),\n        store.write(key, release(released))\n      )\n    })\n\n    // called once the lock is released\n    function released (err) {\n      if (err) {\n        return callback(err)\n      }\n      callback(null, { key: key })\n    }\n  }\n\n  return {\n    // returns a pull-stream of one block being read\n    getStream (key) {\n      if (!key) {\n        return pull.error(new Error('Invalid key'))\n      }\n\n      const blockPath = multihashToPath(key)\n      const deferred = pullDefer()\n\n      lock(blockPath, (release) => {\n        pull(\n          store.read(blockPath),\n          pull.collect(release(released))\n        )\n      })\n\n      function released (err, data) {\n        if (err) {\n          return deferred.abort(err)\n        }\n\n        deferred.resolve(\n          pull.values([\n            new Block(Buffer.concat(data))\n          ])\n        )\n      }\n\n      return deferred\n    },\n\n    /*\n     * putStream - write multiple blocks\n     *\n     * returns a pull-stream that expects blockBlobs\n     *\n     * NOTE: blockBlob is a { data: <>, key: <> } and not a\n     * ipfs-block instance. This is because Block instances support\n     * several types of hashing and it is up to the BlockService\n     * to understand the right one to use (given the CID)\n     */\n    // TODO\n    // consider using a more explicit name, this can cause some confusion\n    // since the natural association is\n    //   getStream - createReadStream - read one\n    //   putStream - createWriteStream - write one\n    // where in fact it is:\n    //   getStream - createReadStream - read one (the same)\n    //   putStream - createFilesWriteStream = write several\n    //\n    putStream () {\n      let ended = false\n      let written = []\n      let push = null\n\n      const sink = pullWrite((blockBlobs, cb) => {\n        const tasks = writeTasks(blockBlobs)\n        parallel(tasks, cb)\n      }, null, 100, (err) => {\n        ended = err || true\n        if (push) {\n          push(ended)\n        }\n      })\n\n      const source = (end, cb) => {\n        if (end) {\n          ended = end\n          return cb(end)\n        }\n\n        if (written.length) {\n          return cb(null, written.shift())\n        }\n\n        if (ended) {\n          return cb(ended)\n        }\n\n        push = cb\n      }\n\n      /*\n       * Creates individual tasks to write each block blob that can be\n       * exectured in parallel\n       */\n      function writeTasks (blockBlobs) {\n        return blockBlobs.map((blockBlob) => {\n          return (cb) => {\n            writeBlock(blockBlob, (err, meta) => {\n              if (err) {\n                return cb(err)\n              }\n\n              if (push) {\n                const read = push\n                push = null\n                read(null, meta)\n                return cb()\n              }\n\n              written.push(meta)\n              cb()\n            })\n          }\n        })\n      }\n\n      return {\n        source: source,\n        sink: sink\n      }\n    },\n\n    has (key, callback) {\n      if (!key) {\n        return callback(new Error('Invalid key'))\n      }\n\n      const blockPath = multihashToPath(key)\n      store.exists(blockPath, callback)\n    },\n\n    delete (key, callback) {\n      if (!key) {\n        return callback(new Error('Invalid key'))\n      }\n\n      const blockPath = multihashToPath(key)\n      store.remove(blockPath, callback)\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipfs-repo/src/stores/blockstore.js\n// module id = 142\n// module chunks = 0","'use strict'\n\nconst pull = require('pull-stream')\nconst series = require('async/series')\n\nexports = module.exports\n\nexports.setUp = (basePath, BlobStore, locks) => {\n  const store = new BlobStore(basePath)\n  const configFile = 'config'\n\n  return {\n    get (callback) {\n      pull(\n        store.read(configFile),\n        pull.collect((err, values) => {\n          if (err) {\n            return callback(err)\n          }\n\n          const config = Buffer.concat(values)\n          let result\n          try {\n            result = JSON.parse(config.toString())\n          } catch (err) {\n            return callback(err)\n          }\n\n          callback(null, result)\n        })\n      )\n    },\n\n    set (config, callback) {\n      series([\n        (cb) => locks.lock(cb),\n        (cb) => {\n          pull(\n            pull.values([\n              new Buffer(JSON.stringify(config, null, 2))\n            ]),\n            store.write(configFile, cb)\n          )\n        }\n      ], (err) => {\n        locks.unlock((err2) => {\n          callback(err || err2)\n        })\n      })\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipfs-repo/src/stores/config.js\n// module id = 143\n// module chunks = 0","'use strict'\n\nexports = module.exports\n\nexports.locks = require('./locks')\nexports.version = require('./version')\nexports.config = require('./config')\nexports.keys = require('./keys')\nexports.blockstore = require('./blockstore')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipfs-repo/src/stores/index.js\n// module id = 144\n// module chunks = 0","'use strict'\n\nexports = module.exports\n\nexports.setUp = (basePath, BlobStore, locks, config) => {\n  return {\n    get (callback) {\n      config.get((err, config) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, config.Identity.PrivKey)\n      })\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipfs-repo/src/stores/keys.js\n// module id = 145\n// module chunks = 0","'use strict'\n\nconst pull = require('pull-stream')\nconst series = require('async/series')\n\nexports = module.exports\n\nexports.setUp = (basePath, BlobStore) => {\n  const store = new BlobStore(basePath)\n  const lockFile = 'repo.lock'\n\n  return {\n    lock (callback) {\n      function createLock () {\n        pull(\n          pull.values([\n            new Buffer('LOCK')\n          ]),\n          store.write(lockFile, callback)\n        )\n      }\n\n      function doesExist (err, exists) {\n        if (err) {\n          return callback(err)\n        }\n\n        if (exists) {\n          // default 100ms\n          setTimeout(function () {\n            store.exists(lockFile, doesExist)\n          }, 100)\n          return\n        }\n\n        createLock()\n      }\n\n      store.exists(lockFile, doesExist)\n    },\n\n    unlock (callback) {\n      series([\n        (cb) => {\n          store.remove(lockFile, cb)\n        },\n        (cb) => {\n          store.exists(lockFile, (err, exists) => {\n            if (err) {\n              return cb(err)\n            }\n\n            if (exists) {\n              return cb(new Error('failed to remove lock'))\n            }\n\n            cb()\n          })\n        }\n      ], callback)\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipfs-repo/src/stores/locks.js\n// module id = 146\n// module chunks = 0","'use strict'\n\nconst pull = require('pull-stream')\nconst series = require('async/series')\nconst toBuffer = require('safe-buffer').Buffer.from\n\nexports = module.exports\n\nexports.setUp = (basePath, BlobStore, locks) => {\n  const store = new BlobStore(basePath)\n  const versionFile = 'version'\n\n  return {\n    exists (callback) {\n      store.exists(versionFile, callback)\n    },\n    get (callback) {\n      pull(\n        store.read(versionFile),\n        pull.collect((err, values) => {\n          if (err) {\n            return callback(err)\n          }\n\n          const version = Buffer.concat(values).toString('utf8')\n          callback(null, version)\n        })\n      )\n    },\n    set (value, callback) {\n      series([\n        (cb) => locks.lock(cb),\n        (cb) => {\n          const values = [\n            Buffer.isBuffer(value) ? value : toBuffer(value)\n          ]\n          pull(\n            pull.values(values),\n            store.write(versionFile, cb)\n          )\n        }\n      ], (err) => {\n        locks.unlock((err2) => {\n          callback(err || err2)\n        })\n      })\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipfs-repo/src/stores/version.js\n// module id = 147\n// module chunks = 0","'use strict';\n\n/*\n * Consult table at: https://github.com/multiformats/multicodec\n */\n\nmodule.exports = {\n  raw: new Buffer('00', 'hex'),\n  'dag-pb': new Buffer('70', 'hex'),\n  'dag-cbor': new Buffer('71', 'hex'),\n  'eth-block': new Buffer('90', 'hex'),\n  'eth-tx': new Buffer('91', 'hex')\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-cbor/~/cids/lib/codecs.js\n// module id = 148\n// module chunks = 0","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar mh = require('multihashes');\nvar multibase = require('multibase');\nvar multicodec = require('multicodec');\n\nvar codecs = require('./codecs');\n\n// CID: <mbase><version><mcodec><mhash>\n\nvar CID = function () {\n  /*\n   * if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Buffer)\n   *   if (0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   *\n   * ..if only JS had traits..\n   */\n  function CID(version, codec, multihash) {\n    _classCallCheck(this, CID);\n\n    if (typeof version === 'string') {\n      if (multibase.isEncoded(version)) {\n        // CID String (encoded with multibase)\n        var cid = multibase.decode(version);\n        this.version = parseInt(cid.slice(0, 1).toString('hex'), 16);\n        this.codec = multicodec.getCodec(cid.slice(1));\n        this.multihash = multicodec.rmPrefix(cid.slice(1));\n      } else {\n        // bs58 string encoded multihash\n        this.codec = 'dag-pb';\n        this.multihash = mh.fromB58String(version);\n        this.version = 0;\n      }\n    } else if (Buffer.isBuffer(version)) {\n      var firstByte = version.slice(0, 1);\n      var v = parseInt(firstByte.toString('hex'), 16);\n      if (v === 0 || v === 1) {\n        // CID\n        var _cid = version;\n        this.version = v;\n        this.codec = multicodec.getCodec(_cid.slice(1));\n        this.multihash = multicodec.rmPrefix(_cid.slice(1));\n      } else {\n        // multihash\n        this.codec = 'dag-pb';\n        this.multihash = version;\n        this.version = 0;\n      }\n    } else if (typeof version === 'number') {\n      if (typeof codec !== 'string') {\n        throw new Error('codec must be string');\n      }\n      if (!(version === 0 || version === 1)) {\n        throw new Error('version must be a number equal to 0 or 1');\n      }\n      mh.validate(multihash);\n      this.codec = codec;\n      this.version = version;\n      this.multihash = multihash;\n    }\n  }\n\n  _createClass(CID, [{\n    key: 'toV0',\n    value: function toV0() {\n      return this.multihash;\n    }\n  }, {\n    key: 'toV1',\n    value: function toV1() {\n      return this.buffer;\n    }\n\n    /* defaults to base58btc */\n\n  }, {\n    key: 'toBaseEncodedString',\n    value: function toBaseEncodedString(base) {\n      base = base || 'base58btc';\n\n      switch (this.version) {\n        case 0:\n          return mh.toB58String(this.multihash);\n        case 1:\n          return multibase.encode(base, this.buffer).toString();\n        default:\n          throw new Error('Unsupported version');\n      }\n    }\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return {\n        codec: this.codec,\n        version: this.version,\n        hash: this.multihash\n      };\n    }\n  }, {\n    key: 'equals',\n    value: function equals(other) {\n      return this.codec === other.codec && this.version === other.version && this.multihash.equals(other.multihash);\n    }\n  }, {\n    key: 'buffer',\n    get: function get() {\n      switch (this.version) {\n        case 0:\n          return this.multihash;\n        case 1:\n          return Buffer.concat([Buffer('01', 'hex'), Buffer(codecs[this.codec]), this.multihash]);\n        default:\n          throw new Error('unsupported version');\n      }\n    }\n  }]);\n\n  return CID;\n}();\n\nCID.codecs = codecs;\nCID.isCID = function (other) {\n  return other.constructor.name === 'CID';\n};\n\nmodule.exports = CID;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-cbor/~/cids/lib/index.js\n// module id = 149\n// module chunks = 0","'use strict';\n\nexports.names = {\n  sha1: 0x11,\n  'sha2-256': 0x12,\n  'sha2-512': 0x13,\n  sha3: 0x14,\n  blake2b: 0x40,\n  blake2s: 0x41\n};\n\nexports.codes = {\n  0x11: 'sha1',\n  0x12: 'sha2-256',\n  0x13: 'sha2-512',\n  0x14: 'sha3',\n  0x40: 'blake2b',\n  0x41: 'blake2s'\n};\n\nexports.defaultLengths = {\n  0x11: 20,\n  0x12: 32,\n  0x13: 64,\n  0x14: 64,\n  0x40: 64,\n  0x41: 32\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-cbor/~/cids/~/multihashes/lib/constants.js\n// module id = 150\n// module chunks = 0","'use strict';\n\nvar bs58 = require('bs58');\n\nvar cs = require('./constants');\n\nexports.toHexString = function toHexString(m) {\n  if (!Buffer.isBuffer(m)) {\n    throw new Error('must be passed a buffer');\n  }\n\n  return m.toString('hex');\n};\n\nexports.fromHexString = function fromHexString(s) {\n  return new Buffer(s, 'hex');\n};\n\nexports.toB58String = function toB58String(m) {\n  if (!Buffer.isBuffer(m)) {\n    throw new Error('must be passed a buffer');\n  }\n\n  return bs58.encode(m);\n};\n\nexports.fromB58String = function fromB58String(s) {\n  var encoded = s;\n  if (Buffer.isBuffer(s)) {\n    encoded = s.toString();\n  }\n\n  return new Buffer(bs58.decode(encoded));\n};\n\n// Decode a hash from the given Multihash.\nexports.decode = function decode(buf) {\n  exports.validate(buf);\n\n  var code = buf[0];\n\n  return {\n    code: code,\n    name: cs.codes[code],\n    length: buf[1],\n    digest: buf.slice(2)\n  };\n};\n\n// Encode a hash digest along with the specified function code.\n// Note: the length is derived from the length of the digest itself.\nexports.encode = function encode(digest, code, length) {\n  if (!digest || !code) {\n    throw new Error('multihash encode requires at least two args: digest, code');\n  }\n\n  // ensure it's a hashfunction code.\n  var hashfn = exports.coerceCode(code);\n\n  if (!Buffer.isBuffer(digest)) {\n    throw new Error('digest should be a Buffer');\n  }\n\n  if (length == null) {\n    length = digest.length;\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.');\n  }\n\n  if (length > 127) {\n    throw new Error('multihash does not yet support digest lengths greater than 127 bytes.');\n  }\n\n  return Buffer.concat([new Buffer([hashfn, length]), digest]);\n};\n\n// Converts a hashfn name into the matching code\nexports.coerceCode = function coerceCode(name) {\n  var code = name;\n\n  if (typeof name === 'string') {\n    if (!cs.names[name]) {\n      throw new Error('Unrecognized hash function named: ' + name);\n    }\n    code = cs.names[name];\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error('Hash function code should be a number. Got: ' + code);\n  }\n\n  if (!cs.codes[code] && !exports.isAppCode(code)) {\n    throw new Error('Unrecognized function code: ' + code);\n  }\n\n  return code;\n};\n\n// Checks wether a code is part of the app range\nexports.isAppCode = function appCode(code) {\n  return code > 0 && code < 0x10;\n};\n\n// Checks whether a multihash code is valid.\nexports.isValidCode = function validCode(code) {\n  if (exports.isAppCode(code)) {\n    return true;\n  }\n\n  if (cs.codes[code]) {\n    return true;\n  }\n\n  return false;\n};\n\nexports.validate = function validate(multihash) {\n  if (!Buffer.isBuffer(multihash)) {\n    throw new Error('multihash must be a Buffer');\n  }\n\n  if (multihash.length < 3) {\n    throw new Error('multihash too short. must be > 3 bytes.');\n  }\n\n  if (multihash.length > 129) {\n    throw new Error('multihash too long. must be < 129 bytes.');\n  }\n\n  var code = multihash[0];\n\n  if (!exports.isValidCode(code)) {\n    throw new Error('multihash unknown function code: 0x' + code.toString(16));\n  }\n\n  if (multihash.slice(2).length !== multihash[1]) {\n    throw new Error('multihash length inconsistent: 0x' + multihash.toString('hex'));\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-cbor/~/cids/~/multihashes/lib/index.js\n// module id = 151\n// module chunks = 0","'use strict';\n\nvar varint = require('varint');\n\n// spec and table at: https://github.com/multiformats/multicodec\n\n// TODO revisit all of these once https://github.com/multiformats/multicodec/pull/16 is merged\n\nexports = module.exports;\n\n// Miscellaneous\nexports.raw = varintBuf(0); // 0x00\n\n// bases encodings\n\n// Serialization formats\nexports.protobuf = varintBuf(80); // 0x50\nexports.cbor = varintBuf(81); // 0x51\nexports.rlp = varintBuf(96); // 0x60\n\n// Multiformats\nexports.multicodec = varintBuf(64); // 0x40\nexports.multihash = varintBuf(65); // 0x41\nexports.multiaddr = varintBuf(66); // 0x42\n\n// multihashes\n\n// multiaddrs\n\n// archiving formats\n\n// image formats\n\n// video formats\n\n// VCS formats\n\n// IPLD formats\nexports['dag-pb'] = new Buffer('70', 'hex');\nexports['dag-cbor'] = new Buffer('71', 'hex');\nexports['eth-block'] = new Buffer('90', 'hex');\nexports['eth-tx'] = new Buffer('91', 'hex');\n\nfunction varintBuf(n) {\n  return new Buffer(varint.encode(n));\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-cbor/~/multicodec/lib/base-table.js\n// module id = 152\n// module chunks = 0","'use strict';\n\nvar table = require('./base-table');\nvar varint = require('varint');\n\nexports = module.exports;\n\nexports.addPrefix = function (multicodecStrOrCode, data) {\n  var pfx = void 0;\n\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    pfx = multicodecStrOrCode;\n  } else {\n    if (table[multicodecStrOrCode]) {\n      pfx = table[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n  return Buffer.concat([pfx, data]);\n};\n\nexports.rmPrefix = function (data) {\n  varint.decode(data);\n  return data.slice(varint.decode.bytes);\n};\n\nexports.getCodec = function (prefixedData) {\n  var v = varint.decode(prefixedData);\n  var code = new Buffer(v.toString(16), 'hex');\n  var codec = void 0;\n\n  Object.keys(table).forEach(function (mc) {\n    if (code.equals(table[mc])) {\n      codec = mc;\n    }\n  });\n\n  return codec;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-cbor/~/multicodec/lib/index.js\n// module id = 153\n// module chunks = 0","'use strict'\n\nexports.util = require('./util.js')\nexports.resolver = require('./resolver.js')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-cbor/src/index.js\n// module id = 154\n// module chunks = 0","'use strict';\n\n/*\n * Consult table at: https://github.com/multiformats/multicodec\n */\n\nmodule.exports = {\n  raw: new Buffer('00', 'hex'),\n  'dag-pb': new Buffer('70', 'hex'),\n  'dag-cbor': new Buffer('71', 'hex'),\n  'eth-block': new Buffer('90', 'hex'),\n  'eth-tx': new Buffer('91', 'hex')\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/~/cids/lib/codecs.js\n// module id = 155\n// module chunks = 0","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar mh = require('multihashes');\nvar multibase = require('multibase');\nvar multicodec = require('multicodec');\n\nvar codecs = require('./codecs');\n\n// CID: <mbase><version><mcodec><mhash>\n\nvar CID = function () {\n  /*\n   * if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Buffer)\n   *   if (0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   *\n   * ..if only JS had traits..\n   */\n  function CID(version, codec, multihash) {\n    _classCallCheck(this, CID);\n\n    if (typeof version === 'string') {\n      if (multibase.isEncoded(version)) {\n        // CID String (encoded with multibase)\n        var cid = multibase.decode(version);\n        this.version = parseInt(cid.slice(0, 1).toString('hex'), 16);\n        this.codec = multicodec.getCodec(cid.slice(1));\n        this.multihash = multicodec.rmPrefix(cid.slice(1));\n      } else {\n        // bs58 string encoded multihash\n        this.codec = 'dag-pb';\n        this.multihash = mh.fromB58String(version);\n        this.version = 0;\n      }\n    } else if (Buffer.isBuffer(version)) {\n      var firstByte = version.slice(0, 1);\n      var v = parseInt(firstByte.toString('hex'), 16);\n      if (v === 0 || v === 1) {\n        // CID\n        var _cid = version;\n        this.version = v;\n        this.codec = multicodec.getCodec(_cid.slice(1));\n        this.multihash = multicodec.rmPrefix(_cid.slice(1));\n      } else {\n        // multihash\n        this.codec = 'dag-pb';\n        this.multihash = version;\n        this.version = 0;\n      }\n    } else if (typeof version === 'number') {\n      if (typeof codec !== 'string') {\n        throw new Error('codec must be string');\n      }\n      if (!(version === 0 || version === 1)) {\n        throw new Error('version must be a number equal to 0 or 1');\n      }\n      mh.validate(multihash);\n      this.codec = codec;\n      this.version = version;\n      this.multihash = multihash;\n    }\n  }\n\n  _createClass(CID, [{\n    key: 'toV0',\n    value: function toV0() {\n      return this.multihash;\n    }\n  }, {\n    key: 'toV1',\n    value: function toV1() {\n      return this.buffer;\n    }\n\n    /* defaults to base58btc */\n\n  }, {\n    key: 'toBaseEncodedString',\n    value: function toBaseEncodedString(base) {\n      base = base || 'base58btc';\n\n      switch (this.version) {\n        case 0:\n          return mh.toB58String(this.multihash);\n        case 1:\n          return multibase.encode(base, this.buffer).toString();\n        default:\n          throw new Error('Unsupported version');\n      }\n    }\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return {\n        codec: this.codec,\n        version: this.version,\n        hash: this.multihash\n      };\n    }\n  }, {\n    key: 'equals',\n    value: function equals(other) {\n      return this.codec === other.codec && this.version === other.version && this.multihash.equals(other.multihash);\n    }\n  }, {\n    key: 'buffer',\n    get: function get() {\n      switch (this.version) {\n        case 0:\n          return this.multihash;\n        case 1:\n          return Buffer.concat([Buffer('01', 'hex'), Buffer(codecs[this.codec]), this.multihash]);\n        default:\n          throw new Error('unsupported version');\n      }\n    }\n  }]);\n\n  return CID;\n}();\n\nCID.codecs = codecs;\nCID.isCID = function (other) {\n  return other.constructor.name === 'CID';\n};\n\nmodule.exports = CID;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/~/cids/lib/index.js\n// module id = 156\n// module chunks = 0","'use strict';\n\nexports.names = {\n  sha1: 0x11,\n  'sha2-256': 0x12,\n  'sha2-512': 0x13,\n  sha3: 0x14,\n  blake2b: 0x40,\n  blake2s: 0x41\n};\n\nexports.codes = {\n  0x11: 'sha1',\n  0x12: 'sha2-256',\n  0x13: 'sha2-512',\n  0x14: 'sha3',\n  0x40: 'blake2b',\n  0x41: 'blake2s'\n};\n\nexports.defaultLengths = {\n  0x11: 20,\n  0x12: 32,\n  0x13: 64,\n  0x14: 64,\n  0x40: 64,\n  0x41: 32\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/~/cids/~/multihashes/lib/constants.js\n// module id = 157\n// module chunks = 0","'use strict';\n\nvar bs58 = require('bs58');\n\nvar cs = require('./constants');\n\nexports.toHexString = function toHexString(m) {\n  if (!Buffer.isBuffer(m)) {\n    throw new Error('must be passed a buffer');\n  }\n\n  return m.toString('hex');\n};\n\nexports.fromHexString = function fromHexString(s) {\n  return new Buffer(s, 'hex');\n};\n\nexports.toB58String = function toB58String(m) {\n  if (!Buffer.isBuffer(m)) {\n    throw new Error('must be passed a buffer');\n  }\n\n  return bs58.encode(m);\n};\n\nexports.fromB58String = function fromB58String(s) {\n  var encoded = s;\n  if (Buffer.isBuffer(s)) {\n    encoded = s.toString();\n  }\n\n  return new Buffer(bs58.decode(encoded));\n};\n\n// Decode a hash from the given Multihash.\nexports.decode = function decode(buf) {\n  exports.validate(buf);\n\n  var code = buf[0];\n\n  return {\n    code: code,\n    name: cs.codes[code],\n    length: buf[1],\n    digest: buf.slice(2)\n  };\n};\n\n// Encode a hash digest along with the specified function code.\n// Note: the length is derived from the length of the digest itself.\nexports.encode = function encode(digest, code, length) {\n  if (!digest || !code) {\n    throw new Error('multihash encode requires at least two args: digest, code');\n  }\n\n  // ensure it's a hashfunction code.\n  var hashfn = exports.coerceCode(code);\n\n  if (!Buffer.isBuffer(digest)) {\n    throw new Error('digest should be a Buffer');\n  }\n\n  if (length == null) {\n    length = digest.length;\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.');\n  }\n\n  if (length > 127) {\n    throw new Error('multihash does not yet support digest lengths greater than 127 bytes.');\n  }\n\n  return Buffer.concat([new Buffer([hashfn, length]), digest]);\n};\n\n// Converts a hashfn name into the matching code\nexports.coerceCode = function coerceCode(name) {\n  var code = name;\n\n  if (typeof name === 'string') {\n    if (!cs.names[name]) {\n      throw new Error('Unrecognized hash function named: ' + name);\n    }\n    code = cs.names[name];\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error('Hash function code should be a number. Got: ' + code);\n  }\n\n  if (!cs.codes[code] && !exports.isAppCode(code)) {\n    throw new Error('Unrecognized function code: ' + code);\n  }\n\n  return code;\n};\n\n// Checks wether a code is part of the app range\nexports.isAppCode = function appCode(code) {\n  return code > 0 && code < 0x10;\n};\n\n// Checks whether a multihash code is valid.\nexports.isValidCode = function validCode(code) {\n  if (exports.isAppCode(code)) {\n    return true;\n  }\n\n  if (cs.codes[code]) {\n    return true;\n  }\n\n  return false;\n};\n\nexports.validate = function validate(multihash) {\n  if (!Buffer.isBuffer(multihash)) {\n    throw new Error('multihash must be a Buffer');\n  }\n\n  if (multihash.length < 3) {\n    throw new Error('multihash too short. must be > 3 bytes.');\n  }\n\n  if (multihash.length > 129) {\n    throw new Error('multihash too long. must be < 129 bytes.');\n  }\n\n  var code = multihash[0];\n\n  if (!exports.isValidCode(code)) {\n    throw new Error('multihash unknown function code: 0x' + code.toString(16));\n  }\n\n  if (multihash.slice(2).length !== multihash[1]) {\n    throw new Error('multihash length inconsistent: 0x' + multihash.toString('hex'));\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/~/cids/~/multihashes/lib/index.js\n// module id = 158\n// module chunks = 0","'use strict';\n\nvar varint = require('varint');\n\n// spec and table at: https://github.com/multiformats/multicodec\n\n// TODO revisit all of these once https://github.com/multiformats/multicodec/pull/16 is merged\n\nexports = module.exports;\n\n// Miscellaneous\nexports.raw = varintBuf(0); // 0x00\n\n// bases encodings\n\n// Serialization formats\nexports.protobuf = varintBuf(80); // 0x50\nexports.cbor = varintBuf(81); // 0x51\nexports.rlp = varintBuf(96); // 0x60\n\n// Multiformats\nexports.multicodec = varintBuf(64); // 0x40\nexports.multihash = varintBuf(65); // 0x41\nexports.multiaddr = varintBuf(66); // 0x42\n\n// multihashes\n\n// multiaddrs\n\n// archiving formats\n\n// image formats\n\n// video formats\n\n// VCS formats\n\n// IPLD formats\nexports['dag-pb'] = new Buffer('70', 'hex');\nexports['dag-cbor'] = new Buffer('71', 'hex');\nexports['eth-block'] = new Buffer('90', 'hex');\nexports['eth-tx'] = new Buffer('91', 'hex');\n\nfunction varintBuf(n) {\n  return new Buffer(varint.encode(n));\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/~/multicodec/lib/base-table.js\n// module id = 159\n// module chunks = 0","'use strict';\n\nvar table = require('./base-table');\nvar varint = require('varint');\n\nexports = module.exports;\n\nexports.addPrefix = function (multicodecStrOrCode, data) {\n  var pfx = void 0;\n\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    pfx = multicodecStrOrCode;\n  } else {\n    if (table[multicodecStrOrCode]) {\n      pfx = table[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n  return Buffer.concat([pfx, data]);\n};\n\nexports.rmPrefix = function (data) {\n  varint.decode(data);\n  return data.slice(varint.decode.bytes);\n};\n\nexports.getCodec = function (prefixedData) {\n  var v = varint.decode(prefixedData);\n  var code = new Buffer(v.toString(16), 'hex');\n  var codec = void 0;\n\n  Object.keys(table).forEach(function (mc) {\n    if (code.equals(table[mc])) {\n      codec = mc;\n    }\n  });\n\n  return codec;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/~/multicodec/lib/index.js\n// module id = 160\n// module chunks = 0","'use strict'\n\nconst DAGLink = require('./index.js')\n\nfunction create (name, size, multihash, callback) {\n  const link = new DAGLink(name, size, multihash)\n  callback(null, link)\n}\n\nmodule.exports = create\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/src/dag-link/create.js\n// module id = 161\n// module chunks = 0","'use strict'\n\nconst dagNodeUtil = require('./util')\nconst cloneLinks = dagNodeUtil.cloneLinks\nconst cloneData = dagNodeUtil.cloneData\nconst toDAGLink = dagNodeUtil.toDAGLink\nconst DAGLink = require('./../dag-link')\nconst create = require('./create')\n\nfunction addLink (node, link, callback) {\n  const links = cloneLinks(node)\n  const data = cloneData(node)\n\n  if ((link.constructor && link.constructor.name === 'DAGLink')) {\n    // It's a DAGLink instance\n    // no need to do anything\n  } else if (link.constructor && link.constructor.name === 'DAGNode') {\n    // It's a DAGNode instance\n    // convert to link\n    link = toDAGLink(link)\n  } else {\n    // It's a Object with name, multihash/link and size\n    link.multihash = link.multihash || link.hash\n    try {\n      link = new DAGLink(link.name, link.size, link.multihash)\n    } catch (err) {\n      return callback(err)\n    }\n  }\n\n  links.push(link)\n  create(data, links, callback)\n}\n\nmodule.exports = addLink\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/src/dag-node/addLink.js\n// module id = 162\n// module chunks = 0","'use strict'\n\nconst dagNodeUtil = require('./util')\nconst cloneLinks = dagNodeUtil.cloneLinks\nconst cloneData = dagNodeUtil.cloneData\nconst create = require('./create')\n\nfunction clone (dagNode, callback) {\n  const data = cloneData(dagNode)\n  const links = cloneLinks(dagNode)\n  create(data, links, callback)\n}\n\nmodule.exports = clone\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/src/dag-node/clone.js\n// module id = 163\n// module chunks = 0","'use strict'\n\nconst dagNodeUtil = require('./util')\nconst cloneLinks = dagNodeUtil.cloneLinks\nconst cloneData = dagNodeUtil.cloneData\nconst create = require('./create')\n\nfunction rmLink (dagNode, nameOrMultihash, callback) {\n  const data = cloneData(dagNode)\n  let links = cloneLinks(dagNode)\n\n  if (typeof nameOrMultihash === 'string') {\n    links = links.filter((link) => link.name !== nameOrMultihash)\n  } else if (Buffer.isBuffer(nameOrMultihash)) {\n    links = links.filter((link) => !link.multihash.equals(nameOrMultihash))\n  } else {\n    return callback(new Error('second arg needs to be a name or multihash'), null)\n  }\n\n  create(data, links, callback)\n}\n\nmodule.exports = rmLink\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/src/dag-node/rmLink.js\n// module id = 164\n// module chunks = 0","'use strict'\n\nmodule.exports = `// An IPFS MerkleDAG Link\nmessage PBLink {\n\n  // multihash of the target object\n  optional bytes Hash = 1;\n\n  // utf string name. should be unique per object\n  optional string Name = 2;\n\n  // cumulative size of target object\n  optional uint64 Tsize = 3;\n}\n\n// An IPFS MerkleDAG Node\nmessage PBNode {\n\n  // refs to other objects\n  repeated PBLink Links = 2;\n\n  // opaque user data\n  optional bytes Data = 1;\n}`\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/src/dag.proto.js\n// module id = 165\n// module chunks = 0","'use strict'\n\nexports.DAGNode = require('./dag-node')\nexports.DAGLink = require('./dag-link')\n\n/*\n * Functions to fulfil IPLD Format interface\n * https://github.com/ipld/interface-ipld-format\n */\nexports.resolver = require('./resolver')\nexports.util = require('./util')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/src/index.js\n// module id = 166\n// module chunks = 0","'use strict'\n\nconst util = require('./util')\nconst bs58 = require('bs58')\n\nexports = module.exports\n\nexports.multicodec = 'dag-pb'\n\n/*\n * resolve: receives a path and a block and returns the value on path,\n * throw if not possible. `block` is an IPFS Block instance (contains data+key)\n */\nexports.resolve = (block, path, callback) => {\n  util.deserialize(block.data, gotNode)\n\n  function gotNode (err, node) {\n    if (err) {\n      return callback(err)\n    }\n\n    const split = path.split('/')\n\n    if (split[0] === 'links') {\n      let remainderPath = ''\n\n      // all links\n      if (!split[1]) {\n        return callback(null, {\n          value: node.links.map((l) => {\n            return l.toJSON()\n          }),\n          remainderPath: ''\n        })\n      }\n\n      // select one link\n\n      const values = {}\n\n      // populate both index number and name to enable both cases\n      // for the resolver\n      node.links.forEach((l, i) => {\n        const link = l.toJSON()\n        values[i] = link.multihash\n        values[link.name] = link.multihash\n      })\n\n      let value = values[split[1]]\n\n      // if remainderPath exists, value needs to be CID\n      if (split[2]) {\n        split.shift()\n        split.shift()\n        remainderPath = split.join('/')\n\n        value = {\n          '/': value\n        }\n      }\n\n      callback(null, { value: value, remainderPath: remainderPath })\n    } else if (split[0] === 'data') {\n      callback(null, { value: node.data, remainderPath: '' })\n    } else {\n      callback(new Error('path not available'))\n    }\n  }\n}\n\n/*\n * tree: returns a flattened array with paths: values of the project. options\n * is an object that can carry several options (i.e. nestness)\n */\nexports.tree = (block, options, callback) => {\n  if (typeof options === 'function') {\n    callback = options\n    options = {}\n  }\n\n  if (!options) {\n    options = {}\n  }\n\n  util.deserialize(block.data, (err, node) => {\n    if (err) {\n      return callback(err)\n    }\n    const paths = []\n    node.links.forEach((link) => {\n      paths.push({\n        path: link.name || '',\n        value: bs58.encode(link.multihash).toString()\n      })\n    })\n\n    if (node.data && node.data.length > 0) {\n      paths.push({ path: 'data', value: node.data })\n    }\n\n    callback(null, paths)\n  })\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-dag-pb/src/resolver.js\n// module id = 167\n// module chunks = 0","'use strict'\n\nexports.util = require('./util.js')\nexports.resolver = require('./resolver.js')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-eth-block/src/index.js\n// module id = 168\n// module chunks = 0","'use strict'\n\nconst util = require('./util')\nconst cidForHash = require('./common').cidForHash\n\nexports = module.exports\n\nexports.multicodec = 'eth-block'\n\n/*\n * resolve: receives a path and a block and returns the value on path,\n * throw if not possible. `block` is an IPFS Block instance (contains data + key)\n */\nexports.resolve = (block, path, callback) => {\n  let result\n  util.deserialize(block.data, (err, node) => {\n    if (err) return callback(err)\n\n    // root\n    if (!path || path === '/') {\n      result = { value: node, remainderPath: '' }\n      return callback(null, result)\n    }\n\n    // check tree results\n    let pathParts = path.split('/')\n    let firstPart = pathParts.shift()\n    let remainderPath = pathParts.join('/')\n    \n    exports.tree(block, (err, paths) => {\n      let treeResult = paths.find(child => child.path === firstPart)\n      if (!treeResult) {\n        let err = new Error('Path not found (\"' + firstPart + '\").')\n        return callback(err)\n      }\n\n      result = {\n        value: treeResult.value,\n        remainderPath: remainderPath,\n      }\n      return callback(null, result)\n    })\n    \n  })\n}\n\n/*\n * tree: returns a flattened array with paths: values of the project. options\n * are option (i.e. nestness)\n */\n\nexports.tree = (block, options, callback) => {\n  // parse arguments\n  if (typeof options === 'function') {\n    callback = options\n    options = undefined\n  }\n  if (!options) {\n    options = {}\n  }\n\n  util.deserialize(block.data, (err, blockHeader) => {\n    if (err) return cb(err)\n    \n    const paths = []  \n\n    // external links\n    paths.push({\n      path: 'parent',\n      value: { '/': cidForHash('eth-block', blockHeader.parentHash).toBaseEncodedString() },\n    })\n    // paths.push({\n    //   path: 'ommers',\n    //   value: { '/': cidForHash('eth-block-list', blockHeader.uncleHash).toBaseEncodedString() },\n    // })\n    // paths.push({\n    //   path: 'transactions',\n    //   value: { '/': cidForHash('eth-tx-trie', blockHeader.transactionsTrie).toBaseEncodedString() },\n    // })\n    // paths.push({\n    //   path: 'transactionReceipts',\n    //   value: { '/': cidForHash('eth-tx-receipt-trie', blockHeader.receiptTrie).toBaseEncodedString() },\n    // })\n    // paths.push({\n    //   path: 'state',\n    //   value: { '/': cidForHash('eth-state-trie', blockHeader.stateRoot).toBaseEncodedString() },\n    // })\n\n    // external links as data\n    paths.push({\n      path: 'parentHash',\n      value: blockHeader.parentHash,\n    })\n    paths.push({\n      path: 'ommerHash',\n      value: blockHeader.uncleHash,\n    })\n    paths.push({\n      path: 'transactionTrieRoot',\n      value: blockHeader.transactionsTrie,\n    })\n    paths.push({\n      path: 'transactionReceiptTrieRoot',\n      value: blockHeader.receiptTrie,\n    })\n    paths.push({\n      path: 'stateRoot',\n      value: blockHeader.stateRoot,\n    })\n\n    // internal data\n    paths.push({\n      path: 'authorAddress',\n      value: blockHeader.coinbase,\n    })\n    paths.push({\n      path: 'bloom',\n      value: blockHeader.bloom,\n    })\n    paths.push({\n      path: 'difficulty',\n      value: blockHeader.difficulty,\n    })\n    paths.push({\n      path: 'number',\n      value: blockHeader.number,\n    })\n    paths.push({\n      path: 'gasLimit',\n      value: blockHeader.gasLimit,\n    })\n    paths.push({\n      path: 'gasUsed',\n      value: blockHeader.gasUsed,\n    })\n    paths.push({\n      path: 'timestamp',\n      value: blockHeader.timestamp,\n    })\n    paths.push({\n      path: 'extraData',\n      value: blockHeader.extraData,\n    })\n    paths.push({\n      path: 'mixHash',\n      value: blockHeader.mixHash,\n    })\n    paths.push({\n      path: 'nonce',\n      value: blockHeader.nonce,\n    })\n\n    callback(null, paths)\n\n  })\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ipld-eth-block/src/resolver.js\n// module id = 169\n// module chunks = 0","\"use strict\"\nfunction isProperty(str) {\n  return /^[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/.test(str)\n}\nmodule.exports = isProperty\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/is-property/is-property.js\n// module id = 170\n// module chunks = 0","/**\r\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\r\n *\r\n * @version 0.5.5\r\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n * @copyright Chen, Yi-Cyuan 2015-2016\r\n * @license MIT\r\n */\r\n(function (root) {\r\n  'use strict';\r\n\r\n  var NODE_JS = typeof process == 'object' && process.versions && process.versions.node;\r\n  if (NODE_JS) {\r\n    root = global;\r\n  }\r\n  var COMMON_JS = !root.JS_SHA3_TEST && typeof module == 'object' && module.exports;\r\n  var HEX_CHARS = '0123456789abcdef'.split('');\r\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\r\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\r\n  var PADDING = [6, 1536, 393216, 100663296];\r\n  var SHIFT = [0, 8, 16, 24];\r\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\r\n            0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, \r\n            2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, \r\n            2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\r\n            2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\r\n  var BITS = [224, 256, 384, 512];\r\n  var SHAKE_BITS = [128, 256];\r\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];\r\n\r\n  var createOutputMethod = function (bits, padding, outputType) {\r\n    return function (message) {\r\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\r\n    }\r\n  };\r\n\r\n  var createShakeOutputMethod = function (bits, padding, outputType) {\r\n    return function (message, outputBits) {\r\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\r\n    }\r\n  };\r\n\r\n  var createMethod = function (bits, padding) {\r\n    var method = createOutputMethod(bits, padding, 'hex');\r\n    method.create = function () {\r\n      return new Keccak(bits, padding, bits);\r\n    };\r\n    method.update = function (message) {\r\n      return method.create().update(message);\r\n    };\r\n    for (var i = 0;i < OUTPUT_TYPES.length;++i) {\r\n      var type = OUTPUT_TYPES[i];\r\n      method[type] = createOutputMethod(bits, padding, type);\r\n    }\r\n    return method;\r\n  };\r\n\r\n  var createShakeMethod = function (bits, padding) {\r\n    var method = createShakeOutputMethod(bits, padding, 'hex');\r\n    method.create = function (outputBits) {\r\n      return new Keccak(bits, padding, outputBits);\r\n    };\r\n    method.update = function (message, outputBits) {\r\n      return method.create(outputBits).update(message);\r\n    };\r\n    for (var i = 0;i < OUTPUT_TYPES.length;++i) {\r\n      var type = OUTPUT_TYPES[i];\r\n      method[type] = createShakeOutputMethod(bits, padding, type);\r\n    }\r\n    return method;\r\n  };\r\n\r\n  var algorithms = [\r\n    {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},\r\n    {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},\r\n    {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}\r\n  ];\r\n\r\n  var methods = {};\r\n\r\n  for (var i = 0;i < algorithms.length;++i) {\r\n    var algorithm = algorithms[i];\r\n    var bits  = algorithm.bits;\r\n    for (var j = 0;j < bits.length;++j) {\r\n      methods[algorithm.name +'_' + bits[j]] = algorithm.createMethod(bits[j], algorithm.padding);\r\n    }\r\n  }\r\n\r\n  function Keccak(bits, padding, outputBits) {\r\n    this.blocks = [];\r\n    this.s = [];\r\n    this.padding = padding;\r\n    this.outputBits = outputBits;\r\n    this.reset = true;\r\n    this.block = 0;\r\n    this.start = 0;\r\n    this.blockCount = (1600 - (bits << 1)) >> 5;\r\n    this.byteCount = this.blockCount << 2;\r\n    this.outputBlocks = outputBits >> 5;\r\n    this.extraBytes = (outputBits & 31) >> 3;\r\n\r\n    for (var i = 0;i < 50;++i) {\r\n      this.s[i] = 0;\r\n    }\r\n  };\r\n\r\n  Keccak.prototype.update = function (message) {\r\n    var notString = typeof message != 'string';\r\n    if (notString && message.constructor == root.ArrayBuffer) {\r\n      message = new Uint8Array(message);\r\n    }\r\n    var length = message.length, blocks = this.blocks, byteCount = this.byteCount, \r\n        blockCount = this.blockCount, index = 0, s = this.s, i, code;\r\n    \r\n    while (index < length) {\r\n      if (this.reset) {\r\n        this.reset = false;\r\n        blocks[0] = this.block;\r\n        for (i = 1;i < blockCount + 1;++i) {\r\n          blocks[i] = 0;\r\n        }\r\n      }\r\n      if (notString) {\r\n        for (i = this.start;index < length && i < byteCount;++index) {\r\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\r\n        }\r\n      } else {\r\n        for (i = this.start;index < length && i < byteCount;++index) {\r\n          code = message.charCodeAt(index);\r\n          if (code < 0x80) {\r\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\r\n          } else if (code < 0x800) {\r\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          } else if (code < 0xd800 || code >= 0xe000) {\r\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          } else {\r\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          }\r\n        }\r\n      }\r\n      this.lastByteIndex = i;\r\n      if (i >= byteCount) {\r\n        this.start = i - byteCount;\r\n        this.block = blocks[blockCount];\r\n        for (i = 0;i < blockCount;++i) {\r\n          s[i] ^= blocks[i];\r\n        }\r\n        f(s);\r\n        this.reset = true;\r\n      } else {\r\n        this.start = i;\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  Keccak.prototype.finalize = function () {\r\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\r\n    blocks[i >> 2] |= this.padding[i & 3];\r\n    if (this.lastByteIndex == this.byteCount) {\r\n      blocks[0] = blocks[blockCount];\r\n      for (i = 1;i < blockCount + 1;++i) {\r\n        blocks[i] = 0;\r\n      }\r\n    }\r\n    blocks[blockCount - 1] |= 0x80000000;\r\n    for (i = 0;i < blockCount;++i) {\r\n      s[i] ^= blocks[i];\r\n    }\r\n    f(s);\r\n  };\r\n\r\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\r\n    this.finalize();\r\n\r\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, \r\n        extraBytes = this.extraBytes, i = 0, j = 0;\r\n    var hex = '', block;\r\n    while (j < outputBlocks) {\r\n      for (i = 0;i < blockCount && j < outputBlocks;++i, ++j) {\r\n        block = s[i];\r\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\r\n               HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\r\n               HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\r\n               HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\r\n      }\r\n      if (j % blockCount == 0) {\r\n        f(s);\r\n        i = 0;\r\n      }\r\n    }\r\n    if (extraBytes) {\r\n      block = s[i];\r\n      if (extraBytes > 0) {\r\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\r\n      }\r\n      if (extraBytes > 1) {\r\n        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\r\n      }\r\n      if (extraBytes > 2) {\r\n        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\r\n      }\r\n    }\r\n    return hex;\r\n  };\r\n\r\n  Keccak.prototype.arrayBuffer = function () {\r\n    this.finalize();\r\n\r\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, \r\n        extraBytes = this.extraBytes, i = 0, j = 0;\r\n    var bytes = this.outputBits >> 3;\r\n    var buffer;\r\n    if (extraBytes) {\r\n      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\r\n    } else {\r\n      buffer = new ArrayBuffer(bytes);\r\n    }\r\n    var array = new Uint32Array(buffer);\r\n    while (j < outputBlocks) {\r\n      for (i = 0;i < blockCount && j < outputBlocks;++i, ++j) {\r\n        array[j] = s[i];\r\n      }\r\n      if (j % blockCount == 0) {\r\n        f(s);\r\n      }\r\n    }\r\n    if (extraBytes) {\r\n      array[i] = s[i];\r\n      buffer = buffer.slice(0, bytes);\r\n    }\r\n    return buffer;\r\n  };\r\n\r\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\r\n\r\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\r\n    this.finalize();\r\n\r\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, \r\n        extraBytes = this.extraBytes, i = 0, j = 0;\r\n    var array = [], offset, block;\r\n    while (j < outputBlocks) {\r\n      for (i = 0;i < blockCount && j < outputBlocks;++i, ++j) {\r\n        offset = j << 2;\r\n        block = s[i];\r\n        array[offset] = block & 0xFF;\r\n        array[offset + 1] = (block >> 8) & 0xFF;\r\n        array[offset + 2] = (block >> 16) & 0xFF;\r\n        array[offset + 3] = (block >> 24) & 0xFF;\r\n      }\r\n      if (j % blockCount == 0) {\r\n        f(s);\r\n      }\r\n    }\r\n    if (extraBytes) {\r\n      offset = j << 2;\r\n      block = s[i];\r\n      if (extraBytes > 0) {\r\n        array[offset] = block & 0xFF;\r\n      }\r\n      if (extraBytes > 1) {\r\n        array[offset + 1] = (block >> 8) & 0xFF;\r\n      }\r\n      if (extraBytes > 2) {\r\n        array[offset + 2] = (block >> 16) & 0xFF;\r\n      }\r\n    }\r\n    return array;\r\n  };\r\n\r\n  var f = function (s) {\r\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, \r\n        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, \r\n        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, \r\n        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\r\n    for (n = 0;n < 48;n += 2) {\r\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\r\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\r\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\r\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\r\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\r\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\r\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\r\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\r\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\r\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\r\n\r\n      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\r\n      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\r\n      s[0] ^= h;\r\n      s[1] ^= l;\r\n      s[10] ^= h;\r\n      s[11] ^= l;\r\n      s[20] ^= h;\r\n      s[21] ^= l;\r\n      s[30] ^= h;\r\n      s[31] ^= l;\r\n      s[40] ^= h;\r\n      s[41] ^= l;\r\n      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\r\n      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\r\n      s[2] ^= h;\r\n      s[3] ^= l;\r\n      s[12] ^= h;\r\n      s[13] ^= l;\r\n      s[22] ^= h;\r\n      s[23] ^= l;\r\n      s[32] ^= h;\r\n      s[33] ^= l;\r\n      s[42] ^= h;\r\n      s[43] ^= l;\r\n      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\r\n      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\r\n      s[4] ^= h;\r\n      s[5] ^= l;\r\n      s[14] ^= h;\r\n      s[15] ^= l;\r\n      s[24] ^= h;\r\n      s[25] ^= l;\r\n      s[34] ^= h;\r\n      s[35] ^= l;\r\n      s[44] ^= h;\r\n      s[45] ^= l;\r\n      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\r\n      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\r\n      s[6] ^= h;\r\n      s[7] ^= l;\r\n      s[16] ^= h;\r\n      s[17] ^= l;\r\n      s[26] ^= h;\r\n      s[27] ^= l;\r\n      s[36] ^= h;\r\n      s[37] ^= l;\r\n      s[46] ^= h;\r\n      s[47] ^= l;\r\n      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\r\n      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\r\n      s[8] ^= h;\r\n      s[9] ^= l;\r\n      s[18] ^= h;\r\n      s[19] ^= l;\r\n      s[28] ^= h;\r\n      s[29] ^= l;\r\n      s[38] ^= h;\r\n      s[39] ^= l;\r\n      s[48] ^= h;\r\n      s[49] ^= l;\r\n\r\n      b0 = s[0];\r\n      b1 = s[1];\r\n      b32 = (s[11] << 4) | (s[10] >>> 28);\r\n      b33 = (s[10] << 4) | (s[11] >>> 28);\r\n      b14 = (s[20] << 3) | (s[21] >>> 29);\r\n      b15 = (s[21] << 3) | (s[20] >>> 29);\r\n      b46 = (s[31] << 9) | (s[30] >>> 23);\r\n      b47 = (s[30] << 9) | (s[31] >>> 23);\r\n      b28 = (s[40] << 18) | (s[41] >>> 14);\r\n      b29 = (s[41] << 18) | (s[40] >>> 14);\r\n      b20 = (s[2] << 1) | (s[3] >>> 31);\r\n      b21 = (s[3] << 1) | (s[2] >>> 31);\r\n      b2 = (s[13] << 12) | (s[12] >>> 20);\r\n      b3 = (s[12] << 12) | (s[13] >>> 20);\r\n      b34 = (s[22] << 10) | (s[23] >>> 22);\r\n      b35 = (s[23] << 10) | (s[22] >>> 22);\r\n      b16 = (s[33] << 13) | (s[32] >>> 19);\r\n      b17 = (s[32] << 13) | (s[33] >>> 19);\r\n      b48 = (s[42] << 2) | (s[43] >>> 30);\r\n      b49 = (s[43] << 2) | (s[42] >>> 30);\r\n      b40 = (s[5] << 30) | (s[4] >>> 2);\r\n      b41 = (s[4] << 30) | (s[5] >>> 2);\r\n      b22 = (s[14] << 6) | (s[15] >>> 26);\r\n      b23 = (s[15] << 6) | (s[14] >>> 26);\r\n      b4 = (s[25] << 11) | (s[24] >>> 21);\r\n      b5 = (s[24] << 11) | (s[25] >>> 21);\r\n      b36 = (s[34] << 15) | (s[35] >>> 17);\r\n      b37 = (s[35] << 15) | (s[34] >>> 17);\r\n      b18 = (s[45] << 29) | (s[44] >>> 3);\r\n      b19 = (s[44] << 29) | (s[45] >>> 3);\r\n      b10 = (s[6] << 28) | (s[7] >>> 4);\r\n      b11 = (s[7] << 28) | (s[6] >>> 4);\r\n      b42 = (s[17] << 23) | (s[16] >>> 9);\r\n      b43 = (s[16] << 23) | (s[17] >>> 9);\r\n      b24 = (s[26] << 25) | (s[27] >>> 7);\r\n      b25 = (s[27] << 25) | (s[26] >>> 7);\r\n      b6 = (s[36] << 21) | (s[37] >>> 11);\r\n      b7 = (s[37] << 21) | (s[36] >>> 11);\r\n      b38 = (s[47] << 24) | (s[46] >>> 8);\r\n      b39 = (s[46] << 24) | (s[47] >>> 8);\r\n      b30 = (s[8] << 27) | (s[9] >>> 5);\r\n      b31 = (s[9] << 27) | (s[8] >>> 5);\r\n      b12 = (s[18] << 20) | (s[19] >>> 12);\r\n      b13 = (s[19] << 20) | (s[18] >>> 12);\r\n      b44 = (s[29] << 7) | (s[28] >>> 25);\r\n      b45 = (s[28] << 7) | (s[29] >>> 25);\r\n      b26 = (s[38] << 8) | (s[39] >>> 24);\r\n      b27 = (s[39] << 8) | (s[38] >>> 24);\r\n      b8 = (s[48] << 14) | (s[49] >>> 18);\r\n      b9 = (s[49] << 14) | (s[48] >>> 18);\r\n\r\n      s[0] = b0 ^ (~b2 & b4);\r\n      s[1] = b1 ^ (~b3 & b5);\r\n      s[10] = b10 ^ (~b12 & b14);\r\n      s[11] = b11 ^ (~b13 & b15);\r\n      s[20] = b20 ^ (~b22 & b24);\r\n      s[21] = b21 ^ (~b23 & b25);\r\n      s[30] = b30 ^ (~b32 & b34);\r\n      s[31] = b31 ^ (~b33 & b35);\r\n      s[40] = b40 ^ (~b42 & b44);\r\n      s[41] = b41 ^ (~b43 & b45);\r\n      s[2] = b2 ^ (~b4 & b6);\r\n      s[3] = b3 ^ (~b5 & b7);\r\n      s[12] = b12 ^ (~b14 & b16);\r\n      s[13] = b13 ^ (~b15 & b17);\r\n      s[22] = b22 ^ (~b24 & b26);\r\n      s[23] = b23 ^ (~b25 & b27);\r\n      s[32] = b32 ^ (~b34 & b36);\r\n      s[33] = b33 ^ (~b35 & b37);\r\n      s[42] = b42 ^ (~b44 & b46);\r\n      s[43] = b43 ^ (~b45 & b47);\r\n      s[4] = b4 ^ (~b6 & b8);\r\n      s[5] = b5 ^ (~b7 & b9);\r\n      s[14] = b14 ^ (~b16 & b18);\r\n      s[15] = b15 ^ (~b17 & b19);\r\n      s[24] = b24 ^ (~b26 & b28);\r\n      s[25] = b25 ^ (~b27 & b29);\r\n      s[34] = b34 ^ (~b36 & b38);\r\n      s[35] = b35 ^ (~b37 & b39);\r\n      s[44] = b44 ^ (~b46 & b48);\r\n      s[45] = b45 ^ (~b47 & b49);\r\n      s[6] = b6 ^ (~b8 & b0);\r\n      s[7] = b7 ^ (~b9 & b1);\r\n      s[16] = b16 ^ (~b18 & b10);\r\n      s[17] = b17 ^ (~b19 & b11);\r\n      s[26] = b26 ^ (~b28 & b20);\r\n      s[27] = b27 ^ (~b29 & b21);\r\n      s[36] = b36 ^ (~b38 & b30);\r\n      s[37] = b37 ^ (~b39 & b31);\r\n      s[46] = b46 ^ (~b48 & b40);\r\n      s[47] = b47 ^ (~b49 & b41);\r\n      s[8] = b8 ^ (~b0 & b2);\r\n      s[9] = b9 ^ (~b1 & b3);\r\n      s[18] = b18 ^ (~b10 & b12);\r\n      s[19] = b19 ^ (~b11 & b13);\r\n      s[28] = b28 ^ (~b20 & b22);\r\n      s[29] = b29 ^ (~b21 & b23);\r\n      s[38] = b38 ^ (~b30 & b32);\r\n      s[39] = b39 ^ (~b31 & b33);\r\n      s[48] = b48 ^ (~b40 & b42);\r\n      s[49] = b49 ^ (~b41 & b43);\r\n\r\n      s[0] ^= RC[n];\r\n      s[1] ^= RC[n + 1];\r\n    }\r\n  }\r\n\r\n  if (COMMON_JS) {\r\n    module.exports = methods;\r\n  } else if (root) {\r\n    for (var key in methods) {\r\n      root[key] = methods[key];\r\n    }\r\n  }\r\n}(this));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/js-sha3/src/sha3.js\n// module id = 171\n// module chunks = 0","module.exports = {\n\t\"_args\": [\n\t\t[\n\t\t\t{\n\t\t\t\t\"raw\": \"elliptic@^6.2.3\",\n\t\t\t\t\"scope\": null,\n\t\t\t\t\"escapedName\": \"elliptic\",\n\t\t\t\t\"name\": \"elliptic\",\n\t\t\t\t\"rawSpec\": \"^6.2.3\",\n\t\t\t\t\"spec\": \">=6.2.3 <7.0.0\",\n\t\t\t\t\"type\": \"range\"\n\t\t\t},\n\t\t\t\"/Users/koruza/code/js-ipld-resolver/node_modules/secp256k1\"\n\t\t]\n\t],\n\t\"_from\": \"elliptic@>=6.2.3 <7.0.0\",\n\t\"_id\": \"elliptic@6.3.2\",\n\t\"_inCache\": true,\n\t\"_location\": \"/elliptic\",\n\t\"_nodeVersion\": \"6.3.0\",\n\t\"_npmOperationalInternal\": {\n\t\t\"host\": \"packages-16-east.internal.npmjs.com\",\n\t\t\"tmp\": \"tmp/elliptic-6.3.2.tgz_1473938837205_0.3108903462998569\"\n\t},\n\t\"_npmUser\": {\n\t\t\"name\": \"indutny\",\n\t\t\"email\": \"fedor@indutny.com\"\n\t},\n\t\"_npmVersion\": \"3.10.3\",\n\t\"_phantomChildren\": {},\n\t\"_requested\": {\n\t\t\"raw\": \"elliptic@^6.2.3\",\n\t\t\"scope\": null,\n\t\t\"escapedName\": \"elliptic\",\n\t\t\"name\": \"elliptic\",\n\t\t\"rawSpec\": \"^6.2.3\",\n\t\t\"spec\": \">=6.2.3 <7.0.0\",\n\t\t\"type\": \"range\"\n\t},\n\t\"_requiredBy\": [\n\t\t\"/browserify-sign\",\n\t\t\"/create-ecdh\",\n\t\t\"/secp256k1\"\n\t],\n\t\"_resolved\": \"https://registry.npmjs.org/elliptic/-/elliptic-6.3.2.tgz\",\n\t\"_shasum\": \"e4c81e0829cf0a65ab70e998b8232723b5c1bc48\",\n\t\"_shrinkwrap\": null,\n\t\"_spec\": \"elliptic@^6.2.3\",\n\t\"_where\": \"/Users/koruza/code/js-ipld-resolver/node_modules/secp256k1\",\n\t\"author\": {\n\t\t\"name\": \"Fedor Indutny\",\n\t\t\"email\": \"fedor@indutny.com\"\n\t},\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/indutny/elliptic/issues\"\n\t},\n\t\"dependencies\": {\n\t\t\"bn.js\": \"^4.4.0\",\n\t\t\"brorand\": \"^1.0.1\",\n\t\t\"hash.js\": \"^1.0.0\",\n\t\t\"inherits\": \"^2.0.1\"\n\t},\n\t\"description\": \"EC cryptography\",\n\t\"devDependencies\": {\n\t\t\"brfs\": \"^1.4.3\",\n\t\t\"coveralls\": \"^2.11.3\",\n\t\t\"grunt\": \"^0.4.5\",\n\t\t\"grunt-browserify\": \"^5.0.0\",\n\t\t\"grunt-contrib-connect\": \"^1.0.0\",\n\t\t\"grunt-contrib-copy\": \"^1.0.0\",\n\t\t\"grunt-contrib-uglify\": \"^1.0.1\",\n\t\t\"grunt-mocha-istanbul\": \"^3.0.1\",\n\t\t\"grunt-saucelabs\": \"^8.6.2\",\n\t\t\"istanbul\": \"^0.4.2\",\n\t\t\"jscs\": \"^2.9.0\",\n\t\t\"jshint\": \"^2.6.0\",\n\t\t\"mocha\": \"^2.1.0\"\n\t},\n\t\"directories\": {},\n\t\"dist\": {\n\t\t\"shasum\": \"e4c81e0829cf0a65ab70e998b8232723b5c1bc48\",\n\t\t\"tarball\": \"https://registry.npmjs.org/elliptic/-/elliptic-6.3.2.tgz\"\n\t},\n\t\"files\": [\n\t\t\"lib\"\n\t],\n\t\"gitHead\": \"cbace4683a4a548dc0306ef36756151a20299cd5\",\n\t\"homepage\": \"https://github.com/indutny/elliptic\",\n\t\"keywords\": [\n\t\t\"EC\",\n\t\t\"Elliptic\",\n\t\t\"curve\",\n\t\t\"Cryptography\"\n\t],\n\t\"license\": \"MIT\",\n\t\"main\": \"lib/elliptic.js\",\n\t\"maintainers\": [\n\t\t{\n\t\t\t\"name\": \"indutny\",\n\t\t\t\"email\": \"fedor@indutny.com\"\n\t\t}\n\t],\n\t\"name\": \"elliptic\",\n\t\"optionalDependencies\": {},\n\t\"readme\": \"ERROR: No README data found!\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+ssh://git@github.com/indutny/elliptic.git\"\n\t},\n\t\"scripts\": {\n\t\t\"jscs\": \"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\n\t\t\"jshint\": \"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",\n\t\t\"lint\": \"npm run jscs && npm run jshint\",\n\t\t\"test\": \"npm run lint && npm run unit\",\n\t\t\"unit\": \"istanbul test _mocha --reporter=spec test/index.js\",\n\t\t\"version\": \"grunt dist && git add dist/\"\n\t},\n\t\"version\": \"6.3.2\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/elliptic/package.json\n// module id = 172\n// module chunks = 0","module.exports = [\n\t{\n\t\t\"ip\": \"52.16.188.185\",\n\t\t\"port\": \"30303\",\n\t\t\"id\": \"a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c\"\n\t},\n\t{\n\t\t\"ip\": \"54.94.239.50\",\n\t\t\"port\": \"30303\",\n\t\t\"id\": \"de471bccee3d042261d52e9bff31458daecc406142b401d4cd848f677479f73104b9fdeb090af9583d3391b7f10cb2ba9e26865dd5fca4fcdc0fb1e3b723c786\"\n\t},\n\t{\n\t\t\"ip\": \"52.74.57.123\",\n\t\t\"port\": \"30303\",\n\t\t\"id\": \"1118980bf48b0a3640bdba04e0fe78b1add18e1cd99bf22d53daac1fd9972ad650df52176e7c7d89d1114cfef2bc23a2959aa54998a46afcf7d91809f0855082\"\n\t},\n\t{\n\t\t\"ip\": \"5.1.83.226\",\n\t\t\"port\": \"30303\",\n\t\t\"id\": \"979b7fa28feeb35a4741660a16076f1943202cb72b6af70d327f053e248bab9ba81760f39d0701ef1d8f89cc1fbd2cacba0710a12cd5314d5e0c9021aa3637f9\"\n\t}\n];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ethereum-common/bootstrapNodes.json\n// module id = 173\n// module chunks = 0","module.exports = {\n\t\"3282791d6fd713f1e94f4bfd565eaa78b3a0599d\": \"1337000000000000000000\",\n\t\"17961d633bcf20a7b029a7d94b7df4da2ec5427f\": \"229427000000000000000\",\n\t\"493a67fe23decc63b10dda75f3287695a81bd5ab\": \"880000000000000000000\",\n\t\"01fb8ec12425a04f813e46c54c05748ca6b29aa9\": \"259800000000000000000\",\n\t\"d2a030ac8952325f9e1db378a71485a24e1b07b2\": \"2000000000000000000000\",\n\t\"77a34907f305a54c85db09c363fde3c47e6ae21f\": \"985000000000000000000\",\n\t\"391a77405c09a72b5e8436237aaaf95d68da1709\": \"49082000000000000000\",\n\t\"00aada25ea2286709abb422d41923fd380cd04c7\": \"650100000000000000000\",\n\t\"acc46a2a555c74ded4a2bd094e821b97843b40c0\": \"1940000000000000000000\",\n\t\"de07fb5b7a464e3ba7fbe09e9acb271af5338c58\": \"50000000000000000000\",\n\t\"4c696be99f3a690440c3436a59a7d7e937d6ba0d\": \"3460000000000000000000\",\n\t\"fa33553285a973719a0d5f956ff861b2d89ed304\": \"20000000000000000000\",\n\t\"67cfda6e70bf7657d39059b59790e5145afdbe61\": \"646000000000000000000\",\n\t\"a321091d3018064279db399d2b2a88a6f440ae24\": \"3200000000000000000000\",\n\t\"fb3fa1ac08aba9cc3bf0fe9d483820688f65b410\": \"30000000000000000000000\",\n\t\"6715c14035fb57bb3d667f7b707498c41074b855\": \"700000000000000000000\",\n\t\"d4344f7d5cad65d17e5c2d0e7323943d6f62fe92\": \"267400000000000000000\",\n\t\"a3294626ec2984c43b43da4d5d8e4669b11d4b59\": \"1008000000000000000000\",\n\t\"656018584130db83ab0591a8128d9381666a8d0e\": \"63960000000000000000\",\n\t\"0fa010ce0c731d3b628e36b91f571300e49dbeab\": \"999800000000000000000\",\n\t\"3098b65db93ecacaf7353c48808390a223d57684\": \"449965000000000000000\",\n\t\"ae635bf73831119d2d29c0d04ff8f8d8d0a57a46\": \"1337000000000000000000\",\n\t\"0f7515ff0e808f695e0c20485ff96ed2f7b79310\": \"1000169000000000000000\",\n\t\"8b30c04098d7a7e6420c357ea7bfa49bac9a8a18\": \"8000200000000000000000\",\n\t\"64dba2d6615b8bd7571836dc75bc79d314f5ecee\": \"10000000000000000000000\",\n\t\"e7912d4cf4562c573ddc5b71e37310e378ef86c9\": \"394000000000000000000\",\n\t\"a4da34450d22ec0ffcede0004b02f7872ee0b73a\": \"93342000000000000000\",\n\t\"34437d1465640b136cb5841c3f934f9ba0b7097d\": \"173000000000000000000\",\n\t\"c652871d192422c6bc235fa063b44a7e1d43e385\": \"155000000000000000000\",\n\t\"a8a708e84f82db86a35502193b4c6ee9a76ebe8f\": \"1015200000000000000000\",\n\t\"5c3f567faff7bad1b5120022e8cbcaa82b4917b3\": \"2000000000000000000000\",\n\t\"dbc1d0ee2bab531140de137722cd36bdb4e47194\": \"200000000000000000000\",\n\t\"f59dab1bf8df11327e61f9b7a14b563a96ec3554\": \"6000000000000000000000\",\n\t\"456f8d746682b224679349064d1b368c7c05b176\": \"3700000000000000000000\",\n\t\"5f13154631466dcb1353c890932a7c97e0878e90\": \"6000000000000000000000\",\n\t\"f4b1626e24f30bcad9273c527fcc714b5d007b8f\": \"200000000000000000000\",\n\t\"a8db0b9b201453333c757f6ad9bcb555c02da93b\": \"2199970000000000000000\",\n\t\"a0fc7e53c5ebd27a2abdac45261f84ab3b51aefb\": \"3008250000000000000000\",\n\t\"1b636b7a496f044d7359596e353a104616436f6b\": \"360354000000000000000\",\n\t\"74bce9ec38362d6c94ccac26d5c0e13a8b3b1d40\": \"999954000000000000000\",\n\t\"9834682180b982d166badb9d9d1d9bbf016d87ee\": \"2000000000000000000000\",\n\t\"1e6e0153fc161bc05e656bbb144c7187bf4fe84d\": \"2000000000000000000000\",\n\t\"989c0ccff654da03aeb11af701054561d6297e1d\": \"4000000000000000000000\",\n\t\"78a1e254409fb1b55a7cb4dd8eba3b30c8bad9ef\": \"100000000000000000000\",\n\t\"9ef1896b007c32a15114fb89d73dbd47f9122b69\": \"4000000000000000000000\",\n\t\"33320dd90f2baa110dd334872a998f148426453c\": \"999972000000000000000\",\n\t\"e72e1d335cc29a96b9b1c02f003a16d971e90b9d\": \"1580000000000000000000\",\n\t\"0921605f99164e3bcc28f31caece78973182561d\": \"793744000000000000000\",\n\t\"fc00a420a36107dfd5f495128a5fe5abb2db0f34\": \"5960000000000000000000\",\n\t\"dfcbdf09454e1a5e4a40d3eef7c5cf1cd3de9486\": \"4000000000000000000000\",\n\t\"646e043d0597a664948fbb0dc15475a3a4f3a6ed\": \"20000000000000000000\",\n\t\"79aeb34566b974c35a5881dec020927da7df5d25\": \"2000000000000000000000\",\n\t\"dbadc61ed5f0460a7f18e51b2fb2614d9264a0e0\": \"40000000000000000000\",\n\t\"97b91efe7350c2d57e7e406bab18f3617bcde14a\": \"9999980000000000000000\",\n\t\"8398e07ebcb4f75ff2116de77c1c2a99f303a4cf\": \"500000000000000000000\",\n\t\"f02796295101674288c1d93467053d042219b794\": \"740000000000000000000\",\n\t\"f4ed848ec961739c2c7e352f435ba70a7cd5db38\": \"1970000000000000000000\",\n\t\"82485728d0e281563758c75ab27ed9e882a0002d\": \"147000000000000000000\",\n\t\"427ec668ac9404e895cc861511d1620a4912be98\": \"40000000000000000000000\",\n\t\"1bbc199e586790be87afedc849c04726745c5d7b\": \"4000000000000000000000\",\n\t\"10d945334ecde47beb9ca3816c173dfbbd0b5333\": \"1400000000000000000000\",\n\t\"1dcebcb7656df5dcaa3368a055d22f9ed6cdd940\": \"499800000000000000000\",\n\t\"2ac1f8d7bf721f3cfe74d20fea9b87a28aaa982c\": \"161000000000000000000\",\n\t\"0a47ad9059a249fc936b2662353da6905f75c2b9\": \"2000000000000000000000\",\n\t\"768498934e37e905f1d0e77b44b574bcf3ec4ae8\": \"20000000000000000000000\",\n\t\"f46b6b9c7cb552829c1d3dfd8ffb11aabae782f6\": \"21000000000000000000\",\n\t\"7aea25d42b2612286e99c53697c6bc4100e2dbbf\": \"2000000000000000000000\",\n\t\"af3615c789d0b1152ad4db25fe5dcf222804cf62\": \"1000000000000000000000\",\n\t\"92e6581e1da1f9b846e09347333dc818e2d2ac66\": \"3640000000000000000000\",\n\t\"240305727313d01e73542c775ff59d11cd35f819\": \"5931229000000000000000\",\n\t\"b95cfda8465ba9c2661b249fc3ab661bdfa35ff0\": \"318949000000000000000\",\n\t\"1b0d076817e8d68ee2df4e1da1c1142d198c4435\": \"1550000000000000000000\",\n\t\"93c2e64e5de5589ed25006e843196ee9b1cf0b3e\": \"1670000000000000000000\",\n\t\"0e2e504a2d1122b5a9feee5cb1451bf4c2ace87b\": \"3940000000000000000000\",\n\t\"22b96ab2cad55db100b53001f9e4db378104c807\": \"10000000000000000000000\",\n\t\"a927d48bb6cb814bc609cbcaa9151f5d459a27e1\": \"271600000000000000000\",\n\t\"5cbd8daf27ddf704cdd0d909a789ba36ed4f37b2\": \"13400000000000000000\",\n\t\"9adbd3bc7b0afc05d1d2eda49ff863939c48db46\": \"199955000000000000000\",\n\t\"ac7e03702723cb16ee27e22dd0b815dc2d5cae9f\": \"16000000000000000000000\",\n\t\"1e210e7047886daa52aaf70f4b991dac68e3025e\": \"200000000000000000000\",\n\t\"c98048687f2bfcc9bd90ed18736c57edd352b65d\": \"1000000000000000000000\",\n\t\"81c18c2a238ddc4cba230a072dd7dc101e620273\": \"1337000000000000000000\",\n\t\"cb3d766c983f192bcecac70f4ee03dd9ff714d51\": \"100000000000000000000\",\n\t\"44a63d18424587b9b307bfc3c364ae10cd04c713\": \"20000000000000000000\",\n\t\"4ab2d34f04834fbf7479649cab923d2c4725c553\": \"3520000000000000000000\",\n\t\"b834acf3015322c58382eeb2b79638906e88b6de\": \"24000000000000000000000\",\n\t\"7d551397f79a2988b064afd0efebee802c7721bc\": \"39400000000000000000000\",\n\t\"b537d36a70eeb8d3e5c80de815225c1158cb92c4\": \"1500000000000000000000\",\n\t\"805ce51297a0793b812067f017b3e7b2df9bb1f9\": \"100000000000000000000\",\n\t\"085ba65febe23eefc2c802666ab1262382cfc494\": \"400000000000000000000\",\n\t\"b1c0d08b36e184f9952a4037e3e53a667d070a4e\": \"1000000000000000000000\",\n\t\"83fe5a1b328bae440711beaf6aad6026eda6d220\": \"20000000000000000000000\",\n\t\"7fd679e5fb0da2a5d116194dcb508318edc580f3\": \"6560000000000000000000\",\n\t\"41ad369f758fef38a19aa3149379832c818ef2a0\": \"1000060000000000000000\",\n\t\"6d846dc12657e91af25008519c3e857f51707dd6\": \"4590000000000000000000\",\n\t\"c02d6eadeacf1b78b3ca85035c637bb1ce01f490\": \"4000000000000000000000\",\n\t\"826eb7cd7319b82dd07a1f3b409071d96e39677f\": \"1000000000000000000000\",\n\t\"4ac9905a4cb6ab1cfd62546ee5917300b87c4fde\": \"1015200000000000000000\",\n\t\"cf6e52e6b77480b1867efec6446d9fc3cc3577e8\": \"222010000000000000000\",\n\t\"2476b2bb751ce748e1a4c4ff7b230be0c15d2245\": \"4000000000000000000000\",\n\t\"1a505e62a74e87e577473e4f3afa16bedd3cfa52\": \"500000000000000000000\",\n\t\"21d02705f3f64905d80ed9147913ea8c7307d695\": \"1363740000000000000000\",\n\t\"7b1daf14891b8a1e1bd429d8b36b9a4aa1d9afbf\": \"500000000000000000000\",\n\t\"5338ef70eac9dd9af5a0503b5efad1039e67e725\": \"2674000000000000000000\",\n\t\"50ca86b5eb1d01874df8e5f34945d49c6c1ab848\": \"1000000000000000000000\",\n\t\"f3cc8bcb559465f81bfe583bd7ab0a2306453b9e\": \"20000000000000000000000\",\n\t\"5c323457e187761a8276e359b7b7af3f3b6e3df6\": \"10000000000000000000000\",\n\t\"4d82d7700c123bb919419bbaf046799c6b0e2c66\": \"20000000000000000000000\",\n\t\"8a66abbc2d30ce21a833b0db8e561d5105e0a72c\": \"699958000000000000000\",\n\t\"2ae53866fc2d14d572ab73b4a065a1188267f527\": \"8000000000000000000000\",\n\t\"9af5c9894c33e42c2c518e3ac670ea9505d1b53e\": \"18200000000000000000\",\n\t\"cba25c7a503cc8e0d04971ca05c762f9b762b48b\": \"500000000000000000000\",\n\t\"fda3042819af3e662900e1b92b4358eda6e92590\": \"118200000000000000000000\",\n\t\"9bd7c38a4210304a4d653edeff1b3ce45fce7843\": \"282000000000000000000\",\n\t\"edc22fb92c638e1e21ff5cf039daa6e734dafb29\": \"298000000000000000000\",\n\t\"a1f193a0592f1feb9fdfc90aa813784eb80471c9\": \"1400000000000000000000\",\n\t\"e97fde0b67716325cf0ecce8a191a3761b2c791d\": \"1004700000000000000000\",\n\t\"110237cf9117e767922fc4a1b78d7964da82df20\": \"3940000000000000000000\",\n\t\"e32f95766d57b5cd4b173289d6876f9e64558194\": \"100000000000000000000\",\n\t\"f2d59c8923759073d6f415aaf8eb065ff2f3b685\": \"7880000000000000000000\",\n\t\"c53d79f7cb9b70952fd30fce58d54b9f0b59f647\": \"5089200000000000000000\",\n\t\"9eb281c32719c40fdb3e216db0f37fbc73a026b7\": \"20000000000000000000\",\n\t\"2d6511fd7a3800b26854c7ec39c0dcb5f4c4e8e8\": \"399910000000000000000\",\n\t\"61ba87c77e9b596de7ba0e326fddfeec2163ef66\": \"200000000000000000000\",\n\t\"de1121829c9a08284087a43fbd2fc1142a3233b4\": \"1000000000000000000000\",\n\t\"22a25812ab56dcc423175ed1d8adacce33cd1810\": \"1850000000000000000000\",\n\t\"518cef27b10582b6d14f69483ddaa0dd3c87bb5c\": \"600000000000000000000\",\n\t\"59161749fedcf1c721f2202d13ade2abcf460b3d\": \"2000000000000000000000\",\n\t\"3e36c17253c11cf38974ed0db1b759160da63783\": \"7000000000000000000000\",\n\t\"cbfa76db04ce38fb205d37b8d377cf1380da0317\": \"1430000000000000000000\",\n\t\"a7e83772bc200f9006aa2a260dbaa8483dc52b30\": \"207730000000000000000\",\n\t\"e87eac6d602b4109c9671bf57b950c2cfdb99d55\": \"49932000000000000000\",\n\t\"9b06ad841dffbe4ccf46f1039fc386f3c321446e\": \"2000000000000000000000\",\n\t\"e0f903c1e48ac421ab48528f3d4a2648080fe043\": \"1015200000000000000000\",\n\t\"5d872b122e994ef27c71d7deb457bf65429eca6c\": \"7999973000000000000000\",\n\t\"f34083ecea385017aa40bdd35ef7effb4ce7762d\": \"400000000000000000000\",\n\t\"7f3709391f3fbeba3592d175c740e87a09541d02\": \"480000000000000000000\",\n\t\"888e94917083d152202b53163939869d271175b4\": \"4000000000000000000000\",\n\t\"bed4c8f006a27c1e5f7ce205de75f516bfb9f764\": \"16000000000000000000000\",\n\t\"b3a6bd41f9d9c3201e050b87198fbda399342210\": \"3622615000000000000000\",\n\t\"550aadae1221b07afea39fba2ed62e05e5b7b5f9\": \"20000000000000000000\",\n\t\"bcedc4267ccb89b31bb764d7211171008d94d44d\": \"200000000000000000000\",\n\t\"6229dcc203b1edccfdf06e87910c452a1f4d7a72\": \"32500000000000000000000\",\n\t\"94be3ae54f62d663b0d4cc9e1ea8fe9556ea9ebf\": \"23280000000000000000\",\n\t\"0e0c9d005ea016c295cd795cc9213e87febc33eb\": \"198000000000000000000\",\n\t\"55d057bcc04bd0f4af9642513aa5090bb3ff93fe\": \"1106680000000000000000\",\n\t\"ed9e030ca75cb1d29ea01d0d4cdfdccd3844b6e4\": \"30895000000000000000\",\n\t\"86c4ce06d9ac185bb148d96f7b7abe73f441006d\": \"10000000000000000000000\",\n\t\"2c04115c3e52961b0dc0b0bf31fba4546f5966fd\": \"200000000000000000000\",\n\t\"b959dce02e91d9db02b1bd8b7d17a9c41a97af09\": \"8000000000000000000000\",\n\t\"e01547ba42fcafaf93938becf7699f74290af74f\": \"2000000000000000000000\",\n\t\"c593d6e37d14b566643ac4135f243caa0787c182\": \"12000000000000000000000\",\n\t\"2c0ee134d8b36145b47beee7af8d2738dbda08e8\": \"201000000000000000000\",\n\t\"0ef54ac7264d2254abbb5f8b41adde875157db7c\": \"40000000000000000000\",\n\t\"0349634dc2a9e80c3f7721ee2b5046aeaaedfbb5\": \"4000000000000000000000\",\n\t\"873e49135c3391991060290aa7f6ccb8f85a78db\": \"20000000000000000000\",\n\t\"05236d4c90d065f9e3938358aaffd777b86aec49\": \"500000000000000000000\",\n\t\"d2abd84a181093e5e229136f42d835e8235de109\": \"100007000000000000000\",\n\t\"b56a780028039c81caf37b6775c620e786954764\": \"2000000000000000000000\",\n\t\"86df73bd377f2c09de63c45d67f283eaefa0f4ab\": \"1000000000000000000000\",\n\t\"7670b02f2c3cf8fd4f4730f3381a71ea431c33c7\": \"267400000000000000000\",\n\t\"24aa1151bb765fa3a89ca50eb6e1b1c706417fd4\": \"3100000000000000000000\",\n\t\"43227d65334e691cf231b4a4e1d339b95d598afb\": \"10000000000000000000000\",\n\t\"695550656cbf90b75d92ad9122d90d23ca68ca4d\": \"1000000000000000000000\",\n\t\"5281733473e00d87f11e9955e589b59f4ac28e7a\": \"660360000000000000000000\",\n\t\"99a96bf2242ea1b39ece6fcc0d18aed00c0179f3\": \"300000000000000000000\",\n\t\"b1cf94f8091505055f010ab4bac696e0ca0f67a1\": \"1580000000000000000000\",\n\t\"54391b4d176d476cea164e5fb535c69700cb2535\": \"100076000000000000000\",\n\t\"152f2bd229ddf3cb0fdaf455c183209c0e1e39a2\": \"2000000000000000000000\",\n\t\"affc99d5ebb4a84fe7788d97dce274b038240438\": \"5000000000000000000000\",\n\t\"23df8f48ee009256ea797e1fa369beebcf6bc663\": \"2302671000000000000000\",\n\t\"3a72d635aadeee4382349db98a1813a4cfeb3df1\": \"200000000000000000000000\",\n\t\"ce26f9a5305f8381094354dbfc92664e84f902b5\": \"230200000000000000000\",\n\t\"d283b8edb10a25528a4404de1c65e7410dbcaa67\": \"12000000000000000000000\",\n\t\"a7859fc07f756ea7dcebbccd42f05817582d973f\": \"10000000000000000000000\",\n\t\"b28181a458a440f1c6bb1de8400281a3148f4c35\": \"376000000000000000000\",\n\t\"27b1694eafa165ebd7cc7bc99e74814a951419dc\": \"800000000000000000000\",\n\t\"66cc8ab23c00d1b82acd7d73f38c99e0d05a4fa6\": \"100000000000000000000\",\n\t\"926082cb7eed4b1993ad245a477267e1c33cd568\": \"374300000000000000000\",\n\t\"4a47fc3e177f567a1e3893e000e36bba23520ab8\": \"2000000000000000000000\",\n\t\"594a76f06935388dde5e234696a0668bc20d2ddc\": \"2800000000000000000000\",\n\t\"e91fa0badaddb9a97e88d3f4db7c55d6bb7430fe\": \"376000000000000000000\",\n\t\"574de1b3f38d915846ae3718564a5ada20c2f3ed\": \"4000000000000000000000\",\n\t\"5816c2687777b6d7d2a2432d59a41fa059e3a406\": \"133700000000000000000000\",\n\t\"b50955aa6e341571986608bdc891c2139f540cdf\": \"1970000000000000000000\",\n\t\"6d44974a31d187eda16ddd47b9c7ec5002d61fbe\": \"940000000000000000000\",\n\t\"80abec5aa36e5c9d098f1b942881bd5acac6963d\": \"2000000000000000000000\",\n\t\"294f494b3f2e143c2ffc9738cbfd9501850b874e\": \"2240000000000000000000\",\n\t\"bca3ffd4683fba0ad3bbc90734b611da9cfb457e\": \"200000000000000000000\",\n\t\"5992624c54cdec60a5ae938033af8be0c50cbb0a\": \"3621678000000000000000\",\n\t\"6560941328ff587cbc56c38c78238a7bb5f442f6\": \"744900000000000000000\",\n\t\"74b7e0228baed65957aebb4d916d333aae164f0e\": \"2000000000000000000000\",\n\t\"8516fcaf77c893970fcd1a958ba9a00e49044019\": \"196279000000000000000\",\n\t\"b992a967308c02b98af91ee760fd3b6b4824ab0e\": \"2000000000000000000000\",\n\t\"30bb4357cd6910c86d2238bf727cbe8156680e62\": \"100014000000000000000\",\n\t\"b8cc0f060aad92d4eb8b36b3b95ce9e90eb383d7\": \"150000000000000000000000\",\n\t\"28d4ebf41e3d3c451e943bdd7e1f175fae932a3d\": \"6000000000000000000000\",\n\t\"8c83d424a3cf24d51f01923dd54a18d6b6fede7b\": \"4000000000000000000000\",\n\t\"7efc90766a00bc52372cac97fabd8a3c831f8ecd\": \"158000000000000000000\",\n\t\"7c2b9603884a4f2e464eceb97d17938d828bc02c\": \"3000000000000000000000\",\n\t\"9d250ae4f110d71cafc7b0adb52e8d9acb6679b8\": \"9840000000000000000000\",\n\t\"61b3df2e9e9fd968131f1e88f0a0eb5bd765464d\": \"4000000000000000000000\",\n\t\"9ae13bd882f2576575921a94974cbea861ba0d35\": \"3160000000000000000000\",\n\t\"3d09688d93ad07f3abe68c722723cd680990435e\": \"29999948000000000000000\",\n\t\"5e58e255fc19870a04305ff2a04631f2ff294bb1\": \"17600000000000000000\",\n\t\"bcaed0acb6a76f113f7c613555a2c3b0f5bf34a5\": \"193600000000000000000\",\n\t\"159adce27aa10b47236429a34a5ac42cad5b6416\": \"31867951000000000000000\",\n\t\"e834c64318205ca7dd4a21abcb08266cb21ff02c\": \"999999000000000000000\",\n\t\"7b6a84718dd86e63338429ac811d7c8a860f21f1\": \"1790000000000000000000\",\n\t\"2118c116ab0cdf6fd11d54a4309307b477c3fc0f\": \"10000000000000000000000\",\n\t\"34a901a69f036bcf9f7843c0ba01b426e8c3dc2b\": \"4000000000000000000000\",\n\t\"c7d44fe32c7f8cd5f1a97427b6cd3afc9e45023e\": \"1580000000000000000000\",\n\t\"c6045b3c350b4ce9ca0c6b754fb41a69b97e9900\": \"925000000000000000000\",\n\t\"cf5a6f9df75579c644f794711215b30d77a0ce40\": \"2000000000000000000000\",\n\t\"e2904b1aefa056398b6234cb35811288d736db67\": \"40000000000000000000\",\n\t\"7101bd799e411cde14bdfac25b067ac890eab8e8\": \"1450054000000000000000\",\n\t\"cc45fb3a555bad807b388a0357c855205f7c75e8\": \"865000000000000000000\",\n\t\"ff0c3c7798e8733dd2668152891bab80a8be955c\": \"80220000000000000000\",\n\t\"3536453322c1466cb905af5c335ca8db74bff1e6\": \"447000000000000000000\",\n\t\"08cac8952641d8fc526ec1ab4f2df826a5e7710f\": \"300000000000000000000\",\n\t\"0d8aab8f74ea862cdf766805009d3f3e42d8d00b\": \"5820000000000000000000\",\n\t\"8908760cd39b9c1e8184e6a752ee888e3f0b7045\": \"6000000000000000000000\",\n\t\"8156360bbd370961ceca6b6691d75006ad204cf2\": \"40000000000000000000000\",\n\t\"a304588f0d850cd8d38f76e9e83c1bf63e333ede\": \"39800000000000000000\",\n\t\"14c63ba2dcb1dd4df33ddab11c4f0007fa96a62d\": \"15500000000000000000000\",\n\t\"a009bf076f1ba3fa57d2a7217218bed5565a7a7a\": \"1000000000000000000000\",\n\t\"1c89060f987c518fa079ec2c0a5ebfa30f5d20f7\": \"38000000000000000000000\",\n\t\"8895eb726226edc3f78cc6a515077b3296fdb95e\": \"3940000000000000000000\",\n\t\"7919e7627f9b7d54ea3b14bb4dd4649f4f39dee0\": \"1670000000000000000000\",\n\t\"b3c65b845aba6cd816fbaae983e0e46c82aa8622\": \"1000000000000000000000\",\n\t\"eff51d72adfae143edf3a42b1aec55a2ccdd0b90\": \"300000000000000000000\",\n\t\"05bb64a916be66f460f5e3b64332110d209e19ae\": \"4200000000000000000000\",\n\t\"d5b117ec116eb846418961eb7edb629cd0dd697f\": \"3000000000000000000000\",\n\t\"05e97b09492cd68f63b12b892ed1d11d152c0eca\": \"1015200000000000000000\",\n\t\"84cc7878da605fdb019fab9b4ccfc157709cdda5\": \"1336922000000000000000\",\n\t\"79cac6494f11ef2798748cb53285bd8e22f97cda\": \"2000000000000000000000\",\n\t\"bd5a8c94bd8be6470644f70c8f8a33a8a55c6341\": \"200000000000000000000\",\n\t\"b119e79aa9b916526581cbf521ef474ae84dcff4\": \"1470700000000000000000\",\n\t\"aff1045adf27a1aa329461b24de1bae9948a698b\": \"33400000000000000000\",\n\t\"4398628ea6632d393e929cbd928464c568aa4a0c\": \"1400000000000000000000\",\n\t\"99997668f7c1a4ff9e31f9977ae3224bcb887a85\": \"291200000000000000000\",\n\t\"bc0e8745c3a549445c2be900f52300804ab56289\": \"33104697000000000000000\",\n\t\"e5bab4f0afd8a9d1a381b45761aa18f3d3cce105\": \"1508010000000000000000\",\n\t\"be60037e90714a4b917e61f193d834906703b13a\": \"1700000000000000000000\",\n\t\"8ed4284c0f47449c15b8d9b3245de8beb6ce80bf\": \"800000000000000000000\",\n\t\"333ad1596401e05aea2d36ca47318ef4cd2cb3df\": \"2910000000000000000000\",\n\t\"22db559f2c3c1475a2e6ffe83a5979599196a7fa\": \"1000000000000000000000\",\n\t\"fdf449f108c6fb4f5a2b081eed7e45e6919e4d25\": \"2000000000000000000000\",\n\t\"0be1bcb90343fae5303173f461bd914a4839056c\": \"6000000000000000000000\",\n\t\"b981ad5e6b7793a23fc6c1e8692eb2965d18d0da\": \"9999924000000000000000\",\n\t\"c75d2259306aec7df022768c69899a652185dbc4\": \"4000000000000000000000\",\n\t\"6c2e9be6d4ab450fd12531f33f028c614674f197\": \"3580000000000000000000\",\n\t\"6dcc7e64fcafcbc2dc6c0e5e662cb347bffcd702\": \"20000000000000000000000\",\n\t\"aabdb35c1514984a039213793f3345a168e81ff1\": \"309760000000000000000\",\n\t\"d315deea1d8c1271f9d1311263ab47c007afb6f5\": \"69760000000000000000\",\n\t\"4faf90b76ecfb9631bf9022176032d8b2c207009\": \"1000032000000000000000\",\n\t\"3e7a966b5dc357ffb07e9fe067c45791fd8e3049\": \"59100000000000000000\",\n\t\"2e64a8d71111a22f4c5de1e039b336f68d398a7c\": \"2000000000000000000000\",\n\t\"181fbba852a7f50178b1c7f03ed9e58d54162929\": \"666000000000000000000\",\n\t\"4f7330096f79ed264ee0127f5d30d2f73c52b3d8\": \"499970000000000000000\",\n\t\"a8a8dbdd1a85d1beee2569e91ccc4d09ae7f6ea1\": \"5800000000000000000000\",\n\t\"1f9c3268458da301a2be5ab08257f77bb5a98aa4\": \"200000000000000000000\",\n\t\"fc372ff6927cb396d9cf29803500110da632bc52\": \"2000000000000000000000\",\n\t\"4fa554ab955c249217386a4d3263bbf72895434e\": \"19982000000000000000\",\n\t\"2a59e47ea5d8f0e7c028a3e8e093a49c1b50b9a3\": \"2000000000000000000000\",\n\t\"5e32c72191b8392c55f510d8e3326e3a60501d62\": \"44000000000000000000000\",\n\t\"1dfaee077212f1beaf0e6f2f1840537ae154ad86\": \"1000000000000000000000\",\n\t\"7eaba035e2af3793fd74674b102540cf190addb9\": \"1273000000000000000000\",\n\t\"d62edb96fce2969aaf6c545e967cf1c0bc805205\": \"85705000000000000000\",\n\t\"220dc68df019b6b0ccbffb784b5a5ab4b15d4060\": \"3940000000000000000000\",\n\t\"45bb829652d8bfb58b8527f0ecb621c29e212ec3\": \"2000000000000000000000\",\n\t\"79b120eb8806732321288f675a27a9225f1cd2eb\": \"2465000000000000000000\",\n\t\"740af1eefd3365d78ba7b12cb1a673e06a077246\": \"19700000000000000000000\",\n\t\"0f042c9c2fb18766f836bb59f735f27dc329fe3c\": \"10000000000000000000000\",\n\t\"6dda5f788a6c688ddf921fa3852eb6d6c6c62966\": \"40000000000000000000\",\n\t\"96ad579bbfa8db8ebec9d286a72e4661eed8e356\": \"1070750000000000000000\",\n\t\"0c2073ba44d3ddbdb639c04e191039a71716237f\": \"1430000000000000000000\",\n\t\"1a3520453582c718a21c42375bc50773255253e1\": \"790000000000000000000\",\n\t\"efcaae9ff64d2cd95b5249dcffe7faa0a0c0e44d\": \"401100000000000000000\",\n\t\"0a3de155d5ecd8e81c1ff9bbf0378301f8d4c623\": \"4000000000000000000000\",\n\t\"80f07ac09e7b2c3c0a3d1e9413a544c73a41becb\": \"20000000000000000000\",\n\t\"c3631c7698b6c5111989bf452727b3f9395a6dea\": \"10683500000000000000000\",\n\t\"4cc22c9bc9ad05d875a397dbe847ed221c920c67\": \"2000000000000000000000\",\n\t\"1a987e3f83de75a42f1bde7c997c19217b4a5f24\": \"2000000000000000000000\",\n\t\"5b2b64e9c058e382a8b299224eecaa16e09c8d92\": \"161000000000000000000\",\n\t\"86caafacf32aa0317c032ac36babed974791dc03\": \"40000000000000000000000\",\n\t\"1cd1f0a314cbb200de0a0cb1ef97e920709d97c2\": \"2000000000000000000000\",\n\t\"7d980f4b566bb045517e4c14c87750de9346744b\": \"1337000000000000000000\",\n\t\"8b5f29cc2faa262cdef30ef554f50eb488146eac\": \"5818250000000000000000\",\n\t\"5153a0c3c8912881bf1c3501bf64b45649e48222\": \"4000000000000000000000\",\n\t\"d21a7341eb84fd151054e5e387bb25d36e499c09\": \"14000000000000000000000\",\n\t\"9560e8ac6718a6a1cdcff189d603c9063e413da6\": \"4000000000000000000000\",\n\t\"e49ba0cd96816c4607773cf8a5970bb5bc16a1e6\": \"1670000000000000000000\",\n\t\"b8ac117d9f0dba80901445823c4c9d4fa3fedc6e\": \"15759015000000000000000\",\n\t\"af67fd3e127fd9dc36eb3fcd6a80c7be4f7532b2\": \"1670000000000000000000\",\n\t\"b43c27f7a0a122084b98f483922541c8836cee2c\": \"715000000000000000000\",\n\t\"4d9279962029a8bd45639737e98b511eff074c21\": \"1337000000000000000000\",\n\t\"c667441e7f29799aba616451d53b3f489f9e0f48\": \"13920000000000000000000\",\n\t\"275875ff4fbb0cf3a430213127487f7608d04cba\": \"500080000000000000000\",\n\t\"9a953b5bcc709379fcb559d7b916afdaa50cadcc\": \"100000000000000000000\",\n\t\"7ea791ebab0445a00efdfc4e4a8e9a7e7565136d\": \"18200000000000000000\",\n\t\"6ffe5cf82cc9ea5e36cad7c2974ce7249f3749e6\": \"1940000000000000000000\",\n\t\"f1b4ecc63525f7432c3d834ffe2b970fbeb87212\": \"3000064000000000000000\",\n\t\"6b72a8f061cfe6996ad447d3c72c28c0c08ab3a7\": \"4271316000000000000000\",\n\t\"bba3c68004248e489573abb2743677066b24c8a7\": \"2000000000000000000000\",\n\t\"b7c0d0cc0b4d342d4062bac624ccc3c70cc6da3f\": \"4000000000000000000000\",\n\t\"fe98c664c3e447a95e69bd582171b7176ea2a685\": \"4000000000000000000000\",\n\t\"ce71086d4c602554b82dcbfce88d20634d53cc4d\": \"43250000000000000000000\",\n\t\"1c601993789207f965bb865cbb4cd657cce76fc0\": \"98294000000000000000\",\n\t\"476b5599089a3fb6f29c6c72e49b2e4740ea808d\": \"2800000000000000000000\",\n\t\"3439998b247cb4bf8bc80a6d2b3527f1dfe9a6d2\": \"140000000000000000000\",\n\t\"c4f7d2e2e22084c44f70feaab6c32105f3da376f\": \"1970000000000000000000\",\n\t\"c1eba5684aa1b24cba63150263b7a9131aeec28d\": \"20000000000000000000\",\n\t\"94ad4bad824bd0eb9ea49c58cebcc0ff5e08346b\": \"1940000000000000000000\",\n\t\"ded877378407b94e781c4ef4af7cfc5bc220b516\": \"372500000000000000000\",\n\t\"699c9ee47195511f35f862ca4c22fd35ae8ffbf4\": \"80000000000000000000\",\n\t\"e3a89a1927cc4e2d43fbcda1e414d324a7d9e057\": \"205500000000000000000\",\n\t\"4d93696fa24859f5d2939aebfa54b4b51ae1dccc\": \"19100000000000000000\",\n\t\"0af65f14784e55a6f95667fd73252a1c94072d2a\": \"192987000000000000000\",\n\t\"5b70c49cc98b3df3fbe2b1597f5c1b6347a388b7\": \"970000000000000000000\",\n\t\"426f78f70db259ac8534145b2934f4ef1098b5d8\": \"360000000000000000000\",\n\t\"58b8ae8f63ef35ed0762f0b6233d4ac14e64b64d\": \"2000000000000000000000\",\n\t\"8eae29435598ba8f1c93428cdb3e2b4d31078e00\": \"2000000000000000000000\",\n\t\"17fd9b551a98cb61c2e07fbf41d3e8c9a530cba5\": \"26989000000000000000\",\n\t\"ab3e78294ba886a0cfd5d3487fb3a3078d338d6e\": \"1970000000000000000000\",\n\t\"bdf6e68c0cd7584080e847d72cbb23aad46aeb1d\": \"1970000000000000000000\",\n\t\"f989346772995ec1906faffeba2a7fe7de9c6bab\": \"6685000000000000000000\",\n\t\"dc5f5ad663a6f263327d64cac9cb133d2c960597\": \"2000000000000000000000\",\n\t\"68fe1357218d095849cd579842c4aa02ff888d93\": \"2000000000000000000000\",\n\t\"e09c68e61998d9c81b14e4ee802ba7adf6d74cdb\": \"4000000000000000000000\",\n\t\"890fe11f3c24db8732d6c2e772e2297c7e65f139\": \"62980000000000000000000\",\n\t\"a76929890a7b47fb859196016c6fdd8289ceb755\": \"5000000000000000000000\",\n\t\"2dc79d6e7f55bce2e2d0c02ad07ceca8bb529354\": \"1580000000000000000000\",\n\t\"19687daa39c368139b6e7be60dc1753a9f0cbea3\": \"8000000000000000000000\",\n\t\"c69be440134d6280980144a9f64d84748a37f349\": \"715000000000000000000\",\n\t\"3d8d0723721e73a6c0d860aa0557abd14c1ee362\": \"5000000000000000000000\",\n\t\"2b241f037337eb4acc61849bd272ac133f7cdf4b\": \"378000000000000000000000\",\n\t\"24b95ebef79500baa0eda72e77f877415df75c33\": \"910000000000000000000\",\n\t\"106ed5c719b5261477890425ae7551dc59bd255c\": \"11979600000000000000000\",\n\t\"5b2e2f1618552eab0db98add55637c2951f1fb19\": \"12000000000000000000000\",\n\t\"403145cb4ae7489fcc90cd985c6dc782b3cc4e44\": \"5999800000000000000000\",\n\t\"e8be24f289443ee473bc76822f55098d89b91cc5\": \"2000000000000000000000\",\n\t\"f6bc37b1d2a3788d589b6de212dc1713b2f6e78e\": \"5000000000000000000000\",\n\t\"67fc527dce1785f0fb8bc7e518b1c669f7ecdfb5\": \"240000000000000000000\",\n\t\"6580b1bc94390f04b397bd73e95d96ef11eaf3a8\": \"20000000000000000000\",\n\t\"98bf4af3810b842387db70c14d46099626003d10\": \"4000000000000000000000\",\n\t\"17993d312aa1106957868f6a55a5e8f12f77c843\": \"450065000000000000000\",\n\t\"0729b4b47c09eb16158464c8aa7fd9690b438839\": \"1999800000000000000000\",\n\t\"ae70e69d2c4a0af818807b1a2705f79fd0b5dbc4\": \"985000000000000000000\",\n\t\"38b50146e71916a5448de12a4d742135dcf39833\": \"32200000000000000000000\",\n\t\"38439aaa24e3636f3a18e020ea1da7e145160d86\": \"2600000000000000000000\",\n\t\"54b4429b182f0377be7e626939c5db6440f75d7a\": \"1970000000000000000000\",\n\t\"7179726f5c71ae1b6d16a68428174e6b34b23646\": \"7353500000000000000000\",\n\t\"c2ee91d3ef58c9d1a589844ea1ae3125d6c5ba69\": \"970000000000000000000\",\n\t\"912304118b80473d9e9fe3ee458fbe610ffda2bb\": \"200000000000000000000\",\n\t\"3308b03466c27a17dfe1aafceb81e16d2934566f\": \"17000000000000000000000\",\n\t\"10346414bec6d3dcc44e50e54d54c2b8c3734e3e\": \"4000000000000000000000\",\n\t\"4fee50c5f988206b09a573469fb1d0b42ebb6dce\": \"2009400000000000000000\",\n\t\"9ece1400800936c7c6485fcdd3626017d09afbf6\": \"310000000000000000000\",\n\t\"ddf3ad76353810be6a89d731b787f6f17188612b\": \"20000000000000000000000\",\n\t\"72402300e81d146c2e644e2bbda1da163ca3fb56\": \"7000000000000000000000\",\n\t\"bb4b4a4b548070ff41432c9e08a0ca6fa7bc9f76\": \"850000000000000000000\",\n\t\"c3dd58903886303b928625257ae1a013d71ae216\": \"2000000000000000000000\",\n\t\"ca6c818befd251361e02744068be99d8aa60b84a\": \"6000000000000000000000\",\n\t\"b8d2ddc66f308c0158ae3ccb7b869f7d199d7b32\": \"844800000000000000000\",\n\t\"8e486a0442d171c8605be348fee57eb5085eff0d\": \"4000000000000000000000\",\n\t\"a807104f2703d679f8deafc442befe849e42950b\": \"2000000000000000000000\",\n\t\"bb61a04bffd57c10470d45c39103f64650347616\": \"1000000000000000000000\",\n\t\"d1c45954a62b911ad701ff2e90131e8ceb89c95c\": \"1394000000000000000000\",\n\t\"5e65458be964ae449f71773704979766f8898761\": \"528600000000000000000\",\n\t\"f9b37825f03073d31e249378c30c795c33f83af2\": \"200152000000000000000\",\n\t\"e309974ce39d60aadf2e69673251bf0e04760a10\": \"254030000000000000000\",\n\t\"d541ac187ad7e090522de6da3213e9a7f4439673\": \"2000000000000000000000\",\n\t\"f33efc6397aa65fb53a8f07a0f893aae30e8bcee\": \"2304850000000000000000\",\n\t\"d2f1998e1cb1580cec4f6c047dcd3dcec54cf73c\": \"200000000000000000000\",\n\t\"0ed76c2c3b5d50ff8fb50b3eeacd681590be1c2d\": \"100000000000000000000\",\n\t\"637d67d87f586f0a5a479e20ee13ea310a10b647\": \"48300000000000000000000\",\n\t\"1a5ee533acbfb3a2d76d5b685277b796c56a052b\": \"2000000000000000000000\",\n\t\"323fca5ed77f699f9d9930f5ceeff8e56f59f03c\": \"1337000000000000000000\",\n\t\"a5fe2ce97f0e8c3856be0de5f4dcb2ce5d389a16\": \"22892000000000000000\",\n\t\"93258255b37c7f58f4b10673a932dd3afd90f4f2\": \"1000000000000000000000\",\n\t\"950fe9c6cad50c18f11a9ed9c45740a6180612d0\": \"8000000000000000000000\",\n\t\"ee31167f9cc93b3c6465609d79db0cde90e8484c\": \"2000000000000000000000\",\n\t\"6ebb5e6957aa821ef659b6018a393a504cae4450\": \"2000000000000000000000\",\n\t\"be305a796e33bbf7f9aeae6512959066efda1010\": \"10880000000000000000000\",\n\t\"537f9d4d31ef70839d84b0d9cdb72b9afedbdf35\": \"70000000000000000000000\",\n\t\"fe9e1197d7974a7648dcc7a03112a88edbc9045d\": \"4925000000000000000000\",\n\t\"99f77f998b20e0bcdcd9fc838641526cf25918ef\": \"1790000000000000000000\",\n\t\"76ffc157ad6bf8d56d9a1a7fddbc0fea010aabf4\": \"1000000000000000000000\",\n\t\"defe9141f4704599159d7b223de42bffd80496b3\": \"100000000000000000000\",\n\t\"7b1bf53a9cbe83a7dea434579fe72aac8d2a0cd0\": \"199800000000000000000\",\n\t\"23ccc3c6acd85c2e460c4ffdd82bc75dc849ea14\": \"4000000000000000000000\",\n\t\"9f86a066edb61fcb5856de93b75c8c791864b97b\": \"2000000000000000000000\",\n\t\"871b8a8b51dea1989a5921f13ec1a955a515ad47\": \"8000000000000000000000\",\n\t\"4efcd9c79fb4334ca6247b0a33bd9cc33208e272\": \"1337000000000000000000\",\n\t\"35ac1d3ed7464fa3db14e7729213ceaa378c095e\": \"1520000000000000000000\",\n\t\"c69d663c8d60908391c8d236191533fdf7775613\": \"485000000000000000000\",\n\t\"c2ed5ffdd1add855a2692fe062b5d618742360d4\": \"1200000000000000000000\",\n\t\"454f0141d721d33cbdc41018bd01119aa4784818\": \"6000000000000000000000\",\n\t\"6c8687e3417710bb8a93559021a1469e6a86bc77\": \"11126675000000000000000\",\n\t\"ec5b198a00cfb55a97b5d53644cffa8a04d2ab45\": \"2000000000000000000000\",\n\t\"cd59f3dde77e09940befb6ee58031965cae7a336\": \"10000000000000000000000\",\n\t\"8eebec1a62c08b05a7d1d59180af9ff0d18e3f36\": \"500000000000000000000\",\n\t\"92a971a739799f8cb48ea8475d72b2d2474172e6\": \"3940000000000000000000\",\n\t\"bed4649df646e2819229032d8868556fe1e053d3\": \"18200000000000000000\",\n\t\"c50fe415a641b0856c4e75bf960515441afa358d\": \"2000000000000000000000\",\n\t\"91f516146cda20281719978060c6be4149067c88\": \"2000000000000000000000\",\n\t\"54a1370116fe22099e015d07cd2669dd291cc9d1\": \"20000000000000000000\",\n\t\"80c04efd310f440483c73f744b5b9e64599ce3ec\": \"1200000000000000000000\",\n\t\"a8914c95b560ec13f140577338c32bcbb77d3a7a\": \"180000000000000000000\",\n\t\"e3c812737ac606baf7522ad817428a36050e7a34\": \"1940000000000000000000\",\n\t\"6d1456fff0104ee844a3314737843338d24cd66c\": \"141840000000000000000\",\n\t\"0e6ece99111cad1961c748ed3df51edd69d2a3b1\": \"100000000000000000000000\",\n\t\"019d709579ff4bc09fdcdde431dc1447d2c260bc\": \"20000000000000000000\",\n\t\"ebff84bbef423071e604c361bba677f5593def4e\": \"10000000000000000000000\",\n\t\"e10c540088113fa6ec00b4b2c8824f8796e96ec4\": \"236400000000000000000000\",\n\t\"e03220c697bcd28f26ef0b74404a8beb06b2ba7b\": \"8000000000000000000000\",\n\t\"e69a6cdb3a8a7db8e1f30c8b84cd73bae02bc0f8\": \"16915503000000000000000\",\n\t\"e5fb31a5caee6a96de393bdbf89fbe65fe125bb3\": \"1000000000000000000000\",\n\t\"030fb3401f72bd3418b7d1da75bf8c519dd707dc\": \"3000000000000000000000\",\n\t\"1c751e7f24df9d94a637a5dedeffc58277b5db19\": \"3220000000000000000000\",\n\t\"bded7e07d0711e684de65ac8b2ab57c55c1a8645\": \"591000000000000000000\",\n\t\"dd7ff441ba6ffe3671f3c0dabbff1823a5043370\": \"2000000000000000000000\",\n\t\"b55474ba58f0f2f40e6cbabed4ea176e011fcad6\": \"1970000000000000000000\",\n\t\"b92427ad7578b4bfe20a9f63a7c5506d5ca12dc8\": \"2000000000000000000000\",\n\t\"91a8baaed012ea2e63803b593d0d0c2aab4c5b0a\": \"1500000000000000000000\",\n\t\"a97e072144499fe5ebbd354acc7e7efb58985d08\": \"2674000000000000000000\",\n\t\"75c2ffa1bef54919d2097f7a142d2e14f9b04a58\": \"2673866000000000000000\",\n\t\"53faf165be031ec18330d9fce5bd1281a1af08db\": \"140000000000000000000\",\n\t\"055ab658c6f0ed4f875ed6742e4bc7292d1abbf0\": \"83500000000000000000\",\n\t\"6f18ec767e320508195f1374500e3f2e125689ff\": \"1000000000000000000000\",\n\t\"90fc537b210658660a83baa9ac4a8402f65746a8\": \"1880000000000000000000\",\n\t\"34664d220fa7f37958024a3332d684bcc6d4c8bd\": \"10000000000000000000000\",\n\t\"15acb61568ec4af7ea2819386181b116a6c5ee70\": \"31000000000000000000000\",\n\t\"69d98f38a3ba3dbc01fa5c2c1427d862832f2f70\": \"100000000000000000000000\",\n\t\"ece1152682b7598fe2d1e21ec15533885435ac85\": \"4000000000000000000000\",\n\t\"f618d9b104411480a863e623fc55232d1a4f48aa\": \"265793000000000000000\",\n\t\"f9debaecb5f339beea4894e5204bfa340d067f25\": \"1665000000000000000000\",\n\t\"5e731b55ced452bb3f3fe871ddc3ed7ee6510a8f\": \"3000000000000000000000\",\n\t\"67df242d240dd4b8071d72f8fcf35bb3809d71e8\": \"4000000000000000000000\",\n\t\"c4cf930e5d116ab8d13b9f9a7ec4ab5003a6abde\": \"320000000000000000000\",\n\t\"01a25a5f5af0169b30864c3be4d7563ccd44f09e\": \"1430000000000000000000\",\n\t\"7f6efb6f4318876d2ee624e27595f44446f68e93\": \"1550000000000000000000\",\n\t\"82249fe70f61c6b16f19a324840fdc020231bb02\": \"9504014000000000000000\",\n\t\"205237c4be146fba99478f3a7dad17b09138da95\": \"2000000000000000000000\",\n\t\"fd1fb5a89a89a721b8797068fbc47f3e9d52e149\": \"236400000000000000000\",\n\t\"e47fbaed99fc209962604ebd20e240f74f4591f1\": \"2000000000000000000000\",\n\t\"a24c3ab62181e9a15b78c4621e4c7c588127be26\": \"162410000000000000000\",\n\t\"b6cd7432d5161be79768ad45de3e447a07982063\": \"4000000000000000000000\",\n\t\"32a70691255c9fc9791a4f75c8b81f388e0a2503\": \"985000000000000000000\",\n\t\"562f16d79abfcec3943e34b20f05f97bdfcda605\": \"4000000000000000000000\",\n\t\"dbc66965e426ff1ac87ad6eb78c1d95271158f9f\": \"18200000000000000000\",\n\t\"7e87863ec43a481df04d017762edcb5caa629b5a\": \"39400000000000000000\",\n\t\"587d6849b168f6c3332b7abae7eb6c42c37f48bf\": \"880000000000000000000\",\n\t\"721158be5762b119cc9b2035e88ee4ee78f29b82\": \"10000000000000000000000\",\n\t\"84b91e2e2902d05e2b591b41083bd7beb2d52c74\": \"9848621000000000000000\",\n\t\"632cecb10cfcf38ec986b43b8770adece9200221\": \"20000000000000000000\",\n\t\"c34e3ba1322ed0571183a24f94204ee49c186641\": \"58200000000000000000\",\n\t\"ae78bb849139a6ba38ae92a09a69601cc4cb62d1\": \"500000000000000000000\",\n\t\"5ce0b6862cce9162e87e0849e387cb5df4f9118c\": \"1670000000000000000000\",\n\t\"f52c0a7877345fe0c233bb0f04fd6ab18b6f14ba\": \"400440000000000000000000\",\n\t\"e016dc138e25815b90be3fe9eee8ffb2e105624f\": \"500000000000000000000\",\n\t\"5789d01db12c816ac268e9af19dc0dd6d99f15df\": \"200000000000000000000\",\n\t\"d8b77db9b81bbe90427b62f702b201ffc29ff618\": \"930200000000000000000\",\n\t\"5dff811dad819ece3ba602c383fb5dc64c0a3a48\": \"186000000000000000000\",\n\t\"af3087e62e04bf900d5a54dc3e946274da92423b\": \"20000000000000000000\",\n\t\"8c1023fde1574db8bb54f1739670157ca47da652\": \"6969382000000000000000\",\n\t\"bb3b010b18e6e2be1135871026b7ba15ea0fde24\": \"10044000000000000000000\",\n\t\"cabdaf354f4720a466a764a528d60e3a482a393c\": \"1000000000000000000000\",\n\t\"94bbc67d13f89ebca594be94bc5170920c30d9f3\": \"80200000000000000000\",\n\t\"3275496fd4dd8931fd69fb0a0b04c4d1ff879ef5\": \"446000000000000000000\",\n\t\"281250a29121270a4ee5d78d24feafe82c70ba3a\": \"1000000000000000000000\",\n\t\"590ccb5911cf78f6f622f535c474375f4a12cfcf\": \"20000000000000000000000\",\n\t\"542e8096bafb88162606002e8c8a3ed19814aeac\": \"2000000000000000000000\",\n\t\"a65426cff378ed23253513b19f496de45fa7e18f\": \"7200000000000000000000\",\n\t\"4aa693b122f314482a47b11cc77c68a497876162\": \"1970000000000000000000\",\n\t\"d9b783d31d32adc50fa3eacaa15d92b568eaeb47\": \"34010000000000000000000\",\n\t\"068e655766b944fb263619658740b850c94afa31\": \"35200000000000000000\",\n\t\"9e23c5e4b782b00a5fadf1aead87dacf5b0367a1\": \"20000000000000000000\",\n\t\"bf17f397f8f46f1bae45d187148c06eeb959fa4d\": \"1001440000000000000000\",\n\t\"8578e10212ca14ff0732a8241e37467db85632a9\": \"6000000000000000000000\",\n\t\"2cb5495a505336c2465410d1cae095b8e1ba5cdd\": \"20000000000000000000000\",\n\t\"695b0f5242753701b264a67071a2dc880836b8db\": \"16400000000000000000\",\n\t\"f2edde37f9a8c39ddea24d79f4015757d06bf786\": \"100000000000000000000000\",\n\t\"480f31b989311e4124c6a7465f5a44094d36f9d0\": \"1025000000000000000000\",\n\t\"cf157612764e0fd696c8cb5fba85df4c0ddc3cb0\": \"30000000000000000000000\",\n\t\"27521deb3b6ef1416ea4c781a2e5d7b36ee81c61\": \"2000000000000000000000\",\n\t\"6efd90b535e00bbd889fda7e9c3184f879a151db\": \"10100000000000000000000\",\n\t\"b635a4bc71fb28fdd5d2c322983a56c284426e69\": \"170000000000000000000\",\n\t\"a17c9e4323069518189d5207a0728dcb92306a3f\": \"1000000000000000000000\",\n\t\"6af940f63ec9b8d876272aca96fef65cdacecdea\": \"3000000000000000000000\",\n\t\"469358709332c82b887e20bcddd0220f8edba7d0\": \"17300000000000000000000\",\n\t\"a257ad594bd88328a7d90fc0a907df95eecae316\": \"520510000000000000000\",\n\t\"6f051666cb4f7bd2b1907221b829b555d7a3db74\": \"1760000000000000000000\",\n\t\"46bfc5b207eb2013e2e60f775fecd71810c5990c\": \"1550000000000000000000\",\n\t\"62b9081e7710345e38e02e16449ace1b85bcfc4e\": \"910000000000000000000\",\n\t\"bc73f7b1ca3b773b34249ada2e2c8a9274cc17c2\": \"2000000000000000000000\",\n\t\"1adaf4abfa867db17f99af6abebf707a3cf55df6\": \"6000000000000000000000\",\n\t\"8d629c20608135491b5013f1002586a0383130e5\": \"1370000000000000000000\",\n\t\"38e46de4453c38e941e7930f43304f94bb7b2be8\": \"2005500000000000000000\",\n\t\"3485f621256433b98a4200dad857efe55937ec98\": \"2000000000000000000000\",\n\t\"775c10c93e0db7205b2643458233c64fc33fd75b\": \"2000000000000000000000\",\n\t\"7c4401ae98f12ef6de39ae24cf9fc51f80eba16b\": \"200000000000000000000\",\n\t\"17b807afa3ddd647e723542e7b52fee39527f306\": \"400010000000000000000\",\n\t\"0ab366e6e7d5abbce6b44a438d69a1cabb90d133\": \"320000000000000000000\",\n\t\"194ffe78bbf5d20dd18a1f01da552e00b7b11db1\": \"7000000000000000000000\",\n\t\"c45d47ab0c9aa98a5bd62d16223ea2471b121ca4\": \"593640000000000000000\",\n\t\"2487c3c4be86a2723d917c06b458550170c3edba\": \"1000000000000000000000\",\n\t\"ec4d08aa2e47496dca87225de33f2b40a8a5b36f\": \"158000000000000000000\",\n\t\"aaa8defe11e3613f11067fb983625a08995a8dfc\": \"200000000000000000000\",\n\t\"50bb67c8b8d8bd0f63c4760904f2d333f400aace\": \"2000000000000000000000\",\n\t\"1227e10a4dbf9caca31b1780239f557615fc35c1\": \"200000000000000000000\",\n\t\"44a8989e32308121f72466978db395d1f76c3a4b\": \"7236900000000000000000\",\n\t\"59569a21d28fba4bda37753405a081f2063da150\": \"4000000000000000000000\",\n\t\"c3756bcdcc7eec74ed896adfc335275930266e08\": \"6000000000000000000000\",\n\t\"ce3a61f0461b00935e85fa1ead82c45e5a64d488\": \"500000000000000000000\",\n\t\"012f396a2b5eb83559bac515e5210df2c8c362ba\": \"200000000000000000000\",\n\t\"93bc7d9a4abd44c8bbb8fe8ba804c61ad8d6576c\": \"3999922000000000000000\",\n\t\"e20bb9f3966419e14bbbaaaa6789e92496cfa479\": \"3465116000000000000000\",\n\t\"9eef442d291a447d74c5d253c49ef324eac1d8f0\": \"3420000000000000000000\",\n\t\"db6c2a73dac7424ab0d031b66761122566c01043\": \"3000000000000000000000\",\n\t\"704d243c2978e46c2c86adbecd246e3b295ff633\": \"2012000000000000000000\",\n\t\"d2ff672016f63b2f85398f4a6fedbb60a50d3cce\": \"342500000000000000000\",\n\t\"d2051cb3cb6704f0548cc890ab0a19db3415b42a\": \"334000000000000000000\",\n\t\"1111e5dbf45e6f906d62866f1708101788ddd571\": \"1300200000000000000000\",\n\t\"6a686bf220b593deb9b7324615fb9144ded3f39d\": \"1460000000000000000000\",\n\t\"911feea61fe0ed50c5b9e5a0d66071399d28bdc6\": \"60000000000000000000\",\n\t\"3881defae1c07b3ce04c78abe26b0cdc8d73f010\": \"200000000000000000000\",\n\t\"ea94f32808a2ef8a9bf0861d1d2404f7b7be258a\": \"20000000000000000000\",\n\t\"2eef6b1417d7b10ecfc19b123a8a89e73e526c58\": \"600000000000000000000\",\n\t\"dd8af9e7765223f4446f44d3d509819a3d3db411\": \"10000000000000000000000\",\n\t\"2efc4c647dac6acac35577ad221758fef6616faa\": \"8000000000000000000000\",\n\t\"1547b9bf7ad66274f3413827231ba405ee8c88c1\": \"17300000000000000000000\",\n\t\"250a40cef3202397f240469548beb5626af4f23c\": \"92500000000000000000\",\n\t\"c175be3194e669422d15fee81eb9f2c56c67d9c9\": \"200000000000000000000\",\n\t\"c9e02608066828848aeb28c73672a12925181f4d\": \"500038000000000000000\",\n\t\"8229ceb9f0d70839498d44e6abed93c5ca059f5d\": \"123300000000000000000000\",\n\t\"39f198331e4b21c1b760a3155f4ab2fe00a74619\": \"2000000000000000000000\",\n\t\"3ffcb870d4023d255d5167d8a507cefc366b68ba\": \"649400000000000000000\",\n\t\"00dae27b350bae20c5652124af5d8b5cba001ec1\": \"40000000000000000000\",\n\t\"fc5500825105cf712a318a5e9c3bfc69c89d0c12\": \"4000000000000000000000\",\n\t\"1ed8bb3f06778b039e9961d81cb71a73e6787c8e\": \"2000000000000000000000\",\n\t\"530ffac3bc3412e2ec0ea47b7981c770f5bb2f35\": \"133700000000000000000\",\n\t\"5f344b01c7191a32d0762ac188f0ec2dd460911d\": \"1000000000000000000000\",\n\t\"5cfa9877f719c79d9e494a08d1e41cf103fc87c9\": \"200000000000000000000\",\n\t\"f6eaac7032d492ef17fd6095afc11d634f56b382\": \"500038000000000000000\",\n\t\"962c0dec8a3d464bf39b1215eafd26480ae490cd\": \"2001680000000000000000\",\n\t\"262a8bfd7d9dc5dd3ad78161b6bb560824373655\": \"1169820000000000000000\",\n\t\"9b4824ff9fb2abda554dee4fb8cf549165570631\": \"20000000000000000000\",\n\t\"bb3b9005f46fd2ca3b30162599928c77d9f6b601\": \"8000014000000000000000\",\n\t\"f7dc251196fbcbb77c947d7c1946b0ff65021cea\": \"1000000000000000000000\",\n\t\"af1148ef6c8e103d7530efc91679c9ac27000993\": \"200000000000000000000\",\n\t\"0bb2650ea01aca755bc0c017b64b1ab5a66d82e3\": \"1337000000000000000000\",\n\t\"0cda12bf72d461bbc479eb92e6491d057e6b5ad1\": \"10000000000000000000000\",\n\t\"4e5b77f9066159e615933f2dda7477fa4e47d648\": \"200000000000000000000\",\n\t\"391161b0e43c302066e8a68d2ce7e199ecdb1d57\": \"4000000000000000000000\",\n\t\"c7e330cd0c890ac99fe771fcc7e7b009b7413d8a\": \"4000000000000000000000\",\n\t\"d4b38a5fdb63e01714e9801db47bc990bd509183\": \"5999000000000000000000\",\n\t\"bc0f98598f88056a26339620923b8f1eb074a9fd\": \"200000000000000000000\",\n\t\"dbc59ed88973dead310884223af49763c05030f1\": \"20000000000000000000\",\n\t\"0f85e42b1df321a4b3e835b50c00b06173968436\": \"985000000000000000000\",\n\t\"d7788ef28658aa06cc53e1f3f0de58e5c371be78\": \"6685000000000000000000\",\n\t\"ecd276af64c79d1bd9a92b86b5e88d9a95eb88f8\": \"20000000000000000000\",\n\t\"81c9e1aee2d3365d53bcfdcd96c7c538b0fd7eec\": \"1820000000000000000000\",\n\t\"5d39ef9ea6bdfff15d11fe91f561a6f9e31f5da5\": \"2000000000000000000000\",\n\t\"99878f9d6e0a7ed9aec78297b73879a80195afe0\": \"3980000000000000000000\",\n\t\"7294c918b1aefb4d25927ef9d799e71f93a28e85\": \"197000000000000000000\",\n\t\"a33f70da7275ef057104dfa7db64f472e9f5d553\": \"80220000000000000000\",\n\t\"255bdd6474cc8262f26a22c38f45940e1ceea69b\": \"4000000000000000000000\",\n\t\"52f8b509fee1a874ab6f9d87367fbeaf15ac137f\": \"1000000000000000000000\",\n\t\"e2728a3e8c2aaac983d05dc6877374a8f446eee9\": \"197600000000000000000\",\n\t\"ed0206cb23315128f8caff26f6a30b985467d022\": \"40000000000000000000000\",\n\t\"87cf36ad03c9eae9053abb5242de9117bb0f2a0b\": \"500000000000000000000\",\n\t\"a929c8bd71db0c308dac06080a1747f21b1465aa\": \"500000000000000000000\",\n\t\"9da6e075989c7419094cc9f6d2e49393bb199688\": \"11100000000000000000000\",\n\t\"763eece0b08ac89e32bfa4bece769514d8cb5b85\": \"4000000000000000000000\",\n\t\"5df3277ca85936c7a0d2c0795605ad25095e7159\": \"2000000000000000000000\",\n\t\"7163758cbb6c4c525e0414a40a049dcccce919bb\": \"200000000000000000000\",\n\t\"14cdddbc8b09e6675a9e9e05091cb92238c39e1e\": \"5100000000000000000000\",\n\t\"b3b7f493b44a2c8d80ec78b1cdc75a652b73b06c\": \"2000000000000000000000\",\n\t\"c69b855539ce1b04714728eec25a37f367951de7\": \"2000000000000000000000\",\n\t\"052eab1f61b6d45517283f41d1441824878749d0\": \"4000000000000000000000\",\n\t\"515651d6db4faf9ecd103a921bbbbe6ae970fdd4\": \"20000000000000000000000\",\n\t\"c7aff91929797489555a2ff1d14d5c695a108355\": \"1000000000000000000000\",\n\t\"d7ca7fdcfebe4588eff5421d1522b61328df7bf3\": \"4001070000000000000000\",\n\t\"eefba12dfc996742db790464ca7d273be6e81b3e\": \"1000000000000000000000\",\n\t\"ebaa216de9cc5a43031707d36fe6d5bedc05bdf0\": \"1969606000000000000000\",\n\t\"559194304f14b1b93afe444f0624e053c23a0009\": \"400000000000000000000\",\n\t\"4ecc19948dd9cd87b4c7201ab48e758f28e7cc76\": \"500200000000000000000\",\n\t\"f224eb900b37b4490eee6a0b6420d85c947d8733\": \"970000000000000000000\",\n\t\"97810bafc37e84306332aacb35e92ad911d23d24\": \"1000000000000000000000\",\n\t\"bd67d2e2f82da8861341bc96a2c0791fddf39e40\": \"200014000000000000000\",\n\t\"1b6495891240e64e594493c2662171db5e30ce13\": \"172400000000000000000\",\n\t\"00bdd4013aa31c04616c2bc9785f2788f915679b\": \"13400000000000000000\",\n\t\"c6ae287ddbe1149ba16ddcca4fe06aa2eaa988a9\": \"400000000000000000000\",\n\t\"b7c9f12b038e73436d17e1c12ffe1aeccdb3f58c\": \"540000000000000000000\",\n\t\"c1b500011cfba95d7cd636e95e6cbf6167464b25\": \"200000000000000000000\",\n\t\"39e0db4d60568c800b8c5500026c2594f5768960\": \"1000000000000000000000\",\n\t\"40e3c283f7e24de0410c121bee60a5607f3e29a6\": \"1000000000000000000000\",\n\t\"2f7d3290851be5c6b4b43f7d4574329f61a792c3\": \"100000000000000000000\",\n\t\"c33ece935a8f4ef938ea7e1bac87cb925d8490ca\": \"33122000000000000000000\",\n\t\"57bddf078834009c89d88e6282759dc45335b470\": \"2148000000000000000000\",\n\t\"50ad187ab21167c2b6e78be0153f44504a07945e\": \"100076000000000000000\",\n\t\"5bd24aac3612b20c609eb46779bf95698407c57c\": \"1970000000000000000000\",\n\t\"16526c9edf943efa4f6d0f0bae81e18b31c54079\": \"985000000000000000000\",\n\t\"4c6a9dc2cab10abb2e7c137006f08fecb5b779e1\": \"499000000000000000000\",\n\t\"02c9f7940a7b8b7a410bf83dc9c22333d4275dd3\": \"5000000000000000000000\",\n\t\"b9fd3833e88e7cf1fa9879bdf55af4b99cd5ce3f\": \"1000000000000000000000\",\n\t\"7e268f131ddf687cc325c412f78ba961205e9112\": \"16000600000000000000000\",\n\t\"180478a655d78d0f3b0c4f202b61485bc4002fd5\": \"2000000000000000000000\",\n\t\"ed4014538cee664a2fbcb6dc669f7ab16d0ba57c\": \"200000000000000000000\",\n\t\"f63a579bc3eac2a9490410128dbcebe6d9de8243\": \"1490000000000000000000\",\n\t\"5d822d9b3ef4b502627407da272f67814a6becd4\": \"20000000000000000000\",\n\t\"eb52ab10553492329c1c54833ae610f398a65b9d\": \"152000000000000000000\",\n\t\"63340a57716bfa63eb6cd133721202575bf796f0\": \"209967000000000000000\",\n\t\"933bf33f8299702b3a902642c33e0bfaea5c1ca3\": \"15200000000000000000\",\n\t\"25bc49ef288cd165e525c661a812cf84fbec8f33\": \"338464000000000000000\",\n\t\"c8231ba5a411a13e222b29bfc1083f763158f226\": \"1000090000000000000000\",\n\t\"6c15ec3520bf8ebbc820bd0ff19778375494cf9d\": \"2005500000000000000000\",\n\t\"aaced8a9563b1bc311dbdffc1ae7f57519c4440c\": \"2000000000000000000000\",\n\t\"d90f3009db437e4e11c780bec8896f738d65ef0d\": \"4000000000000000000000\",\n\t\"5603241eb8f08f721e348c9d9ad92f48e390aa24\": \"200000000000000000000\",\n\t\"53cec6c88092f756efe56f7db11228a2db45b122\": \"4000000000000000000000\",\n\t\"194cebb4929882bf3b4bf9864c2b1b0f62c283f9\": \"571300000000000000000\",\n\t\"4be8628a8154874e048d80c142181022b180bcc1\": \"60000000000000000000\",\n\t\"5fd973af366aa5157c54659bcfb27cbfa5ac15d6\": \"4000000000000000000000\",\n\t\"303139bc596403d5d3931f774c66c4ba467454db\": \"1699830000000000000000\",\n\t\"87584a3f613bd4fac74c1e780b86d6caeb890cb2\": \"1700000000000000000000\",\n\t\"77f4e3bdf056883cc87280dbe640a18a0d02a207\": \"193806000000000000000\",\n\t\"4de3fe34a6fbf634c051997f47cc7f48791f5824\": \"1999000000000000000000\",\n\t\"c45a1ca1036b95004187cdac44a36e33a94ab5c3\": \"254800000000000000000\",\n\t\"65d33eb39cda6453b19e61c1fe4db93170ef9d34\": \"13370000000000000000\",\n\t\"f65616be9c8b797e7415227c9138faa0891742d7\": \"790000000000000000000\",\n\t\"e17812f66c5e65941e186c46922b6e7b2f0eeb46\": \"1820000000000000000000\",\n\t\"d47f50df89a1cff96513bef1b2ae3a2971accf2c\": \"840000000000000000000\",\n\t\"8ed1528b447ed4297902f639c514d0944a88f8c8\": \"198800000000000000000\",\n\t\"a4fb14409a67b45688a8593e5cc2cf596ced6f11\": \"1790000000000000000000\",\n\t\"855d9aef2c39c6230d09c99ef6494989abe68785\": \"161000000000000000000\",\n\t\"778c43d11afe3b586ff374192d96a7f23d2b9b7f\": \"2577139000000000000000\",\n\t\"e3ece1f632711d13bfffa1f8f6840871ee58fb27\": \"4000000000000000000000\",\n\t\"beb3358c50cf9f75ffc76d443c2c7f55075a0589\": \"2674000000000000000000\",\n\t\"f156dc0b2a981e5b55d3f2f03b8134e331dbadb7\": \"100000000000000000000\",\n\t\"eb9cc9fe0869d2dab52cc7aae8fd57adb35f9feb\": \"1966000000000000000000\",\n\t\"2467c6a5c696ede9a1e542bf1ad06bcc4b06aca0\": \"18500000000000000000\",\n\t\"ec75b4a47513120ba5f86039814f1998e3817ac3\": \"178756000000000000000\",\n\t\"9c3d0692ceeef80aa4965ceed262ffc7f069f2dc\": \"200000000000000000000\",\n\t\"e05029aceb0778675bef1741ab2cd2931ef7c84b\": \"5000057000000000000000\",\n\t\"41d3b731a326e76858baa5f4bd89b57b36932343\": \"394000000000000000000\",\n\t\"c346cb1fbce2ab285d8e5401f42dd7234d37e86d\": \"83500000000000000000\",\n\t\"45f4fc60f08eaca10598f0336329801e3c92cb46\": \"200000000000000000000\",\n\t\"f04a6a379708b9428d722aa2b06b77e88935cf89\": \"300000000000000000000\",\n\t\"232832cd5977e00a4c30d0163f2e24f088a6cb09\": \"3000000000000000000000\",\n\t\"d2ac0d3a58605e1d0f0eb3de25b2cad129ed6058\": \"4000000000000000000000\",\n\t\"a356551bb77d4f45a6d7e09f0a089e79cca249cb\": \"340000000000000000000\",\n\t\"b50c9f5789ae44e2dce017c714caf00c830084c2\": \"394000000000000000000\",\n\t\"21fd6c5d97f9c600b76821ddd4e776350fce2be0\": \"1999946000000000000000\",\n\t\"f0d5c31ccb6cbe30c7c9ea19f268d159851f8c9c\": \"16700000000000000000000\",\n\t\"ab7091932e4bc39dbb552380ca934fd7166d1e6e\": \"3340000000000000000000\",\n\t\"acd8dd91f714764c45677c63d852e56eb9eece2e\": \"2000000000000000000000\",\n\t\"57d032a43d164e71aa2ef3ffd8491b0a4ef1ea5b\": \"2000000000000000000000\",\n\t\"5af46a25ac09cb73616b53b14fb42ff0a51cddb2\": \"4000000000000000000000\",\n\t\"1ea6bf2f15ae9c1dbc64daa7f8ea4d0d81aad3eb\": \"4200000000000000000000\",\n\t\"03337012ae1d7ff3ee7f697c403e7780188bf0ef\": \"200000000000000000000\",\n\t\"32eb64be1b5dede408c6bdefbe6e405c16b7ed02\": \"1970000000000000000000\",\n\t\"22e2488e2da26a49ae84c01bd54b21f2947891c6\": \"1730000000000000000000\",\n\t\"be98a77fd41097b34f59d7589baad021659ff712\": \"900000000000000000000\",\n\t\"dda4ed2a58a8dd20a73275347b580d71b95bf99a\": \"399000000000000000000\",\n\t\"671110d96aaff11523cc546bf9940eedffb2faf7\": \"4000000000000000000000\",\n\t\"5d71799c8df3bccb7ee446df50b8312bc4eb71c5\": \"200000000000000000000\",\n\t\"ae179a460db66326743d24e67523a57b246daf7f\": \"4722920000000000000000\",\n\t\"198bfcf1b07ae308fa2c02069ac9dafe7135fb47\": \"20000000000000000000\",\n\t\"4662a1765ee921842ddc88898d1dc8627597bd7e\": \"10000000000000000000000\",\n\t\"783eec8aa5dac77b2e6623ed5198a431abbaee07\": \"440000000000000000000\",\n\t\"ed6643c0e8884b2d3211853785a08bf8f33ed29f\": \"1337000000000000000000\",\n\t\"5cc7d3066d45d27621f78bb4b339473e442a860f\": \"9999908000000000000000\",\n\t\"94ef8be45077c7d4c5652740de946a62624f713f\": \"100085000000000000000\",\n\t\"2f853817afd3b8f3b86e9f60ee77b5d97773c0e3\": \"1451450000000000000000\",\n\t\"3e0b8ed86ed669e12723af7572fbacfe829b1e16\": \"1499800000000000000000\",\n\t\"fa68e0cb3edf51f0a6f211c9b2cb5e073c9bffe6\": \"291200000000000000000\",\n\t\"2c234f505ca8dcc77d9b7e01d257c318cc19396d\": \"100000000000000000000\",\n\t\"f3f24fc29e20403fc0e8f5ebbb553426f78270a2\": \"100000000000000000000\",\n\t\"91546b79ecf69f936b5a561508b0d7e50cc5992f\": \"267400000000000000000\",\n\t\"435443b81dfdb9bd8c6787bc2518e2d47e57c15f\": \"5968500000000000000000\",\n\t\"3a06e3bb1edcfd0c44c3074de0bb606b049894a2\": \"10000000000000000000000\",\n\t\"3a3108c1e680a33b336c21131334409d97e5adec\": \"20000000000000000000\",\n\t\"2caf6bf4ec7d5a19c5e0897a5eeb011dcece4210\": \"139740000000000000000\",\n\t\"f44f8551ace933720712c5c491cdb6f2f951736c\": \"4000000000000000000000\",\n\t\"5bc1f95507b1018642e45cd9c0e22733b9b1a326\": \"100000000000000000000\",\n\t\"94ca56de777fd453177f5e0694c478e66aff8a84\": \"500000000000000000000\",\n\t\"afdd1b786162b8317e20f0e979f4b2ce486d765d\": \"20000000000000000000\",\n\t\"3a805fa0f7387f73055b7858ca8519edd93d634f\": \"1850000000000000000000\",\n\t\"8b36224c7356e751f0c066c35e3b44860364bfc2\": \"998987000000000000000\",\n\t\"cfecbea07c27002f65fe534bb8842d0925c78402\": \"4000000000000000000000\",\n\t\"482982ac1f1c6d1721feecd9b9c96cd949805055\": \"10000000000000000000000\",\n\t\"af880fc7567d5595cacce15c3fc14c8742c26c9e\": \"133700000000000000000\",\n\t\"acc1c78786ab4d2b3b277135b5ba123e0400486b\": \"78800000000000000000\",\n\t\"41f27e744bd29de2b0598f02a0bb9f98e681eaa4\": \"7760000000000000000000\",\n\t\"09a025316f967fa8b9a1d60700063f5a68001caa\": \"38200000000000000000\",\n\t\"391f20176d12360d724d51470a90703675594a4d\": \"1600000000000000000000\",\n\t\"fe4d8403216fd571572bf1bdb01d00578978d688\": \"9850000000000000000000\",\n\t\"900f0b8e35b668f81ef252b13855aa5007d012e7\": \"425000000000000000000\",\n\t\"c35b95a2a3737cb8f0f596b34524872bd30da234\": \"7540000000000000000000\",\n\t\"412a68f6c645559cc977fc4964047a201d1bb0e2\": \"50000000000000000000000\",\n\t\"d3dad1b6d08d4581ccae65a8732db6ac69f0c69e\": \"6000000000000000000000\",\n\t\"35855ec641ab9e081ed0c2a6dcd81354d0244a87\": \"1201897000000000000000\",\n\t\"88015d7203c5e0224aeda286ed12f1a51b789333\": \"4999711000000000000000\",\n\t\"251c12722c6879227992a304eb3576cd18434ea5\": \"2000000000000000000000\",\n\t\"1f6f0030349752061c96072bc3d6eb3549208d6b\": \"23891000000000000000\",\n\t\"86153063a1ae7f02f1a88136d4d69c7c5e3e4327\": \"1000000000000000000000\",\n\t\"78355df0a230f83d032c703154414de3eedab557\": \"2000000000000000000000\",\n\t\"c5b56cd234267c28e89c6f6b2266b086a12f970c\": \"4000000000000000000000\",\n\t\"3e3cd3bec06591d6346f254b621eb41c89008d31\": \"993800000000000000000\",\n\t\"378ea1dc8edc19bae82638029ea8752ce98bcfcd\": \"2000000000000000000000\",\n\t\"67632046dcb25a54936928a96f423f3320cbed92\": \"2000000000000000000000\",\n\t\"ddbee6f094eae63420b003fb4757142aea6cd0fd\": \"2000000000000000000000\",\n\t\"b555d00f9190cc3677aef314acd73fdc39399259\": \"2000000000000000000000\",\n\t\"e230fe1bff03186d0219f15d4c481b7d59be286a\": \"36710000000000000000\",\n\t\"3e4e9265223c9738324cf20bd06006d0073edb8c\": \"133700000000000000000\",\n\t\"7450ff7f99eaa9116275deac68e428df5bbcd8b9\": \"2000000000000000000000\",\n\t\"021f69043de88c4917ca10f1842897eec0589c7c\": \"1978760000000000000000\",\n\t\"351787843505f8e4eff46566cce6a59f4d1c5fe7\": \"9250000000000000000000\",\n\t\"ebd37b256563e30c6f9289a8e2702f0852880833\": \"1999944000000000000000\",\n\t\"ed41e1a28f5caa843880ef4e8b08bd6c33141edf\": \"790174000000000000000\",\n\t\"8d238e036596987643d73173c37b0ad06055b96c\": \"2089724000000000000000\",\n\t\"478e524ef2a381d70c82588a93ca7a5fa9d51cbf\": \"254908000000000000000000\",\n\t\"4419ac618d5dea7cdc6077206fb07dbdd71c1702\": \"4000000000000000000000\",\n\t\"ca25ff34934c1942e22a4e7bd56f14021a1af088\": \"197000000000000000000\",\n\t\"5552f4b3ed3e1da79a2f78bb13e8ae5a68a9df3b\": \"1000000000000000000000\",\n\t\"4354221e62dc09e6406436163a185ef06d114a81\": \"2000000000000000000000\",\n\t\"ca0432cb157b5179f02ebba5c9d1b54fec4d88ca\": \"1000000000000000000000\",\n\t\"8a780ab87a9145fe10ed60fa476a740af4cab1d2\": \"334000000000000000000\",\n\t\"4ff676e27f681a982d8fd9d20e648b3dce05e945\": \"2800000000000000000000\",\n\t\"6c63fc85029a2654d79b2bea4de349e4524577c5\": \"660000000000000000000\",\n\t\"1ac089c3bc4d82f06a20051a9d732dc0e734cb61\": \"700300000000000000000\",\n\t\"4bf4479799ef82eea20943374f56a1bf54001e5e\": \"3940000000000000000000\",\n\t\"08411652c871713609af0062a8a1281bf1bbcfd9\": \"1400000000000000000000\",\n\t\"e1bfaa5a45c504428923c4a61192a55b1400b45d\": \"2674000000000000000000\",\n\t\"5e1fbd4e58e2312b3c78d7aaaafa10bf9c3189e3\": \"40000000000000000000000\",\n\t\"bb27c6a7f91075475ab229619040f804c8ec7a6a\": \"10000000000000000000000\",\n\t\"5d8d31faa864e22159cd6f5175ccecc53fa54d72\": \"26980000000000000000000\",\n\t\"2dd8eeef87194abc2ce7585da1e35b7cea780cb7\": \"999999000000000000000\",\n\t\"0e1801e70b6262861b1134ccbc391f568afc92f7\": \"4000000000000000000000\",\n\t\"61042b80fd6095d1b87be2f00f109fabafd157a6\": \"100000000000000000000\",\n\t\"fb5518714cefc36d04865de5915ef0ff47dfe743\": \"2000000000000000000000\",\n\t\"b5add1e7809f7d03069bfe883b0a932210be8712\": \"1000000000000000000000\",\n\t\"c2e2d498f70dcd0859e50b023a710a6d4b2133bd\": \"1037130000000000000000\",\n\t\"4ad047fae67ef162fe68fedbc27d3b65caf10c36\": \"1970000000000000000000\",\n\t\"69cb3e2153998d86e5ee20c1fcd1a6baeeb2863f\": \"4000000000000000000000\",\n\t\"683633010a88686bea5a98ea53e87997cbf73e69\": \"99960000000000000000\",\n\t\"6cb11ecb32d3ce829601310636f5a10cf7cf9b5f\": \"20068370000000000000000\",\n\t\"a613456996408af1c2e93e177788ab55895e2b32\": \"6366000000000000000000\",\n\t\"8308ed0af7f8a3c1751fafc877b5a42af7d35882\": \"1000000000000000000000\",\n\t\"e5edf8123f2403ce1a0299becf7aac744d075f23\": \"200200000000000000000\",\n\t\"05665155cc49cbf6aabdd5ae92cbfaad82b8c0c1\": \"400000000000000000000\",\n\t\"00b277b099a8e866ca0ec65bcb87284fd142a582\": \"1970000000000000000000\",\n\t\"4b9e068fc4680976e61504912985fd5ce94bab0d\": \"668500000000000000000\",\n\t\"12134e7f6b017bf48e855a399ca58e2e892fa5c8\": \"1000000000000000000000\",\n\t\"dffcea5421ec15900c6ecfc777184e140e209e24\": \"19980000000000000000\",\n\t\"2132c0516a2e17174ac547c43b7b0020d1eb4c59\": \"985000000000000000000\",\n\t\"d39a5da460392b940b3c69bc03757bf3f2e82489\": \"7019250000000000000000\",\n\t\"66c8331efe7198e98b2d32b938688e3241d0e24f\": \"9620000000000000000000\",\n\t\"bdca2a0ff34588af625fa8e28fc3015ab5a3aa00\": \"2339800000000000000000\",\n\t\"7dfc342dffcf45dfee74f84c0995397bd1a63172\": \"250000000000000000000\",\n\t\"a202547242806f6e70e74058d6e5292defc8c8d4\": \"2002000000000000000000\",\n\t\"3bbc13d04accc0707aebdcaef087d0b87e0b5ee3\": \"3520000000000000000000\",\n\t\"be5cba8d37427986e8ca2600e858bb03c359520f\": \"2955000000000000000000\",\n\t\"4174fa1bc12a3b7183cbabb77a0b59557ba5f1db\": \"2000000000000000000000\",\n\t\"9eb3a7cb5e6726427a3a361cfa8d6164dbd0ba16\": \"804000000000000000000\",\n\t\"25e661c939863acc044e6f17b5698cce379ec3cc\": \"1370000000000000000000\",\n\t\"24bd5904059091d2f9e12d6a26a010ca22ab14e8\": \"1880000000000000000000\",\n\t\"c96626728aaa4c4fb3d31c26df3af310081710d1\": \"3340000000000000000000\",\n\t\"0fb5d2c673bfb1ddca141b9894fd6d3f05da6720\": \"100000000000000000000\",\n\t\"2de31afd189a13a76ff6fe73ead9f74bb5c4a629\": \"6000000000000000000000\",\n\t\"bd09126c891c4a83068059fe0e15796c4661a9f4\": \"800000000000000000000\",\n\t\"496f5843f6d24cd98d255e4c23d1e1f023227545\": \"1754143000000000000000\",\n\t\"540cf23dd95c4d558a279d778d2b3735b3164191\": \"10000000000000000000000\",\n\t\"9b5ec18e8313887df461d2902e81e67a8f113bb1\": \"100000000000000000000\",\n\t\"b7a7f77c348f92a9f1100c6bd829a8ac6d7fcf91\": \"1820000000000000000000\",\n\t\"2590126870e0bde8a663ab040a72a5573d8d41c2\": \"5000000000000000000000\",\n\t\"090fa9367bda57d0d3253a0a8ff76ce0b8e19a73\": \"1000000000000000000000\",\n\t\"2a5ba9e34cd58da54c9a2712663a3be274c8e47b\": \"197000000000000000000\",\n\t\"3e8641d43c42003f0a33c929f711079deb2b9e46\": \"500000000000000000000\",\n\t\"f4d97664cc4eec9edbe7fa09f4750a663b507d79\": \"4000000000000000000000\",\n\t\"b1540e94cff3465cc3d187e7c8e3bdaf984659e2\": \"2989950000000000000000\",\n\t\"f96883582459908c827627e86f28e646f9c7fc7a\": \"8350000000000000000000\",\n\t\"d4feed99e8917c5c5458635f3603ecb7e817a7d0\": \"300031000000000000000\",\n\t\"14b1603ec62b20022033eec4d6d6655ac24a015a\": \"50000000000000000000\",\n\t\"af8e1dcb314c950d3687434d309858e1a8739cd4\": \"267400000000000000000\",\n\t\"4b9206ba6b549a1a7f969e1d5dba867539d1fa67\": \"7880000000000000000000\",\n\t\"471010da492f4018833b088d9872901e06129174\": \"500000000000000000000\",\n\t\"d243184c801e5d79d2063f3578dbae81e7b3a9cb\": \"1989700000000000000000\",\n\t\"3eada8c92f56067e1bb73ce378da56dc2cdfd365\": \"2210000000000000000000\",\n\t\"33ea6b7855e05b07ab80dab1e14de9b649e99b6c\": \"532000000000000000000\",\n\t\"700711e311bb947355f755b579250ca7fd765a3e\": \"1790000000000000000000\",\n\t\"87fb26c31e48644d693134205cae43b21f18614b\": \"1370000000000000000000\",\n\t\"001d14804b399c6ef80e64576f657660804fec0b\": \"4200000000000000000000\",\n\t\"f9642086b1fbae61a6804dbe5fb15ec2d2b537f4\": \"2000000000000000000000\",\n\t\"6919dd5e5dfb1afa404703b9faea8cee35d00d70\": \"5910000000000000000000\",\n\t\"9ac4da51d27822d1e208c96ea64a1e5b55299723\": \"100040000000000000000\",\n\t\"1bd8ebaa7674bb18e19198db244f570313075f43\": \"150000000000000000000\",\n\t\"e64ef012658d54f8e8609c4e9023c09fe865c83b\": \"28000000000000000000\",\n\t\"43b079baf0727999e66bf743d5bcbf776c3b0922\": \"2000000000000000000000\",\n\t\"06ac26ad92cb859bd5905ddce4266aa0ec50a9c5\": \"775000000000000000000\",\n\t\"99c1d9f40c6ab7f8a92fce2fdce47a54a586c53f\": \"985000000000000000000\",\n\t\"4ae93082e45187c26160e66792f57fad3551c73a\": \"21658000000000000000000\",\n\t\"7da7613445a21299aa74f0ad71431ec43fbb1be9\": \"68000000000000000000\",\n\t\"4a9a26fd0a8ba10f977da4f77c31908dab4a8016\": \"1790000000000000000000\",\n\t\"972c2f96aa00cf8a2f205abcf8937c0c75f5d8d9\": \"200000000000000000000\",\n\t\"b5046cb3dc1dedbd364514a2848e44c1de4ed147\": \"16445100000000000000000\",\n\t\"48c2ee91a50756d8ce9abeeb7589d22c6fee5dfb\": \"3220000000000000000000\",\n\t\"46c1aa2244b9c8a957ca8fac431b0595a3b86824\": \"4000000000000000000000\",\n\t\"21fd0bade5f4ef7474d058b7f3d854cb1300524e\": \"20000000000000000000\",\n\t\"1864a3c7b48155448c54c88c708f166709736d31\": \"133700000000000000000\",\n\t\"5dd53ae897526b167d39f1744ef7c3da5b37a293\": \"8000000000000000000000\",\n\t\"ece111670b563ccdbebca52384290ecd68fe5c92\": \"20000000000000000000\",\n\t\"74d671d99cbea1ab57906375b63ff42b50451d17\": \"1000000000000000000000\",\n\t\"5717cc9301511d4a81b9f583148beed3d3cc8309\": \"2600000000000000000000\",\n\t\"8f92844f282a92999ee5b4a8d773d06b694dbd9f\": \"1940000000000000000000\",\n\t\"b5a606f4ddcbb9471ec67f658caf2b00ee73025e\": \"4325000000000000000000\",\n\t\"bdb60b823a1173d45a0792245fb496f1fd3301cf\": \"2000000000000000000000\",\n\t\"1d2615f8b6ca5012b663bdd094b0c5137c778ddf\": \"10000000000000000000000\",\n\t\"82ff716fdf033ec7e942c909d9831867b8b6e2ef\": \"1790000000000000000000\",\n\t\"44c14765127cde11fab46c5d2cf4d4b2890023fd\": \"2000000000000000000000\",\n\t\"c72cb301258e91bc08998a805dd192f25c2f9a35\": \"591000000000000000000\",\n\t\"ad732c976593eec4783b4e2ecd793979780bfedb\": \"2000000000000000000000\",\n\t\"d8f62036f03b7635b858f1103f8a1d9019a892b6\": \"50000000000000000000\",\n\t\"0a06fad7dcd7a492cbc053eeabde6934b39d8637\": \"20000000000000000000\",\n\t\"67f2bb78b8d3e11f7c458a10b5c8e0a1d374467d\": \"1790000000000000000000\",\n\t\"4b5cdb1e428c91dd7cb54a6aed4571da054bfe52\": \"88000000000000000000\",\n\t\"b3557d39b5411b84445f5f54f38f62d2714d0087\": \"600000000000000000000\",\n\t\"0b0e055b28cbd03dc5ff44aa64f3dce04f5e63fb\": \"2000000000000000000000\",\n\t\"9b2be7f56754f505e3441a10f7f0e20fd3ddf849\": \"340000000000000000000\",\n\t\"0b93fca4a4f09cac20db60e065edcccc11e0a5b6\": \"200000000000000000000\",\n\t\"3bc85d6c735b9cda4bba5f48b24b13e70630307b\": \"1970000000000000000000\",\n\t\"52102354a6aca95d8a2e86d5debda6de69346076\": \"2000000000000000000000\",\n\t\"cda4530f4b9bc50905b79d17c28fc46f95349bdf\": \"942000000000000000000\",\n\t\"ff545bbb66fbd00eb5e6373ff4e326f5feb5fe12\": \"20000000000000000000\",\n\t\"4030a925706b2c101c8c5cb9bd05fbb4f6759b18\": \"4000000000000000000000\",\n\t\"f11e01c7a9d12499005f4dae7716095a34176277\": \"400000000000000000000\",\n\t\"a4826b6c3882fad0ed5c8fbb25cc40cc4f33759f\": \"2068000000000000000000\",\n\t\"28510e6eff1fc829b6576f4328bc3938ec7a6580\": \"10000000000000000000000\",\n\t\"9ce5363b13e8238aa4dd15acd0b2e8afe0873247\": \"200000000000000000000\",\n\t\"d97bc84abd47c05bbf457b2ef659d61ca5e5e48f\": \"122000000000000000000\",\n\t\"4a719061f5285495b37b9d7ef8a51b07d6e6acac\": \"199800000000000000000\",\n\t\"8b714522fa2839620470edcf0c4401b713663df1\": \"200000000000000000000\",\n\t\"b6decf82969819ba02de29b9b593f21b64eeda0f\": \"740000000000000000000\",\n\t\"c87d3ae3d88704d9ab0009dcc1a0067131f8ba3c\": \"1969606000000000000000\",\n\t\"dccb370ed68aa922283043ef7cad1b9d403fc34a\": \"4000000000000000000000\",\n\t\"2d532df4c63911d1ce91f6d1fcbff7960f78a885\": \"1669833000000000000000\",\n\t\"1fcfd1d57f872290560cb62d600e1defbefccc1c\": \"1490000000000000000000\",\n\t\"d9e27eb07dfc71a706060c7f079238ca93e88539\": \"1000000000000000000000\",\n\t\"da7732f02f2e272eaf28df972ecc0ddeed9cf498\": \"205274000000000000000\",\n\t\"bf09d77048e270b662330e9486b38b43cd781495\": \"436000000000000000000000\",\n\t\"619f171445d42b02e2e07004ad8afe694fa53d6a\": \"20000000000000000000\",\n\t\"2bdd03bebbee273b6ca1059b34999a5bbd61bb79\": \"20000000000000000000\",\n\t\"8da1d359ba6cb4bcc57d7a437720d55db2f01c72\": \"80000000000000000000\",\n\t\"be935793f45b70d8045d2654d8dd3ad24b5b6137\": \"880000000000000000000\",\n\t\"ee71793e3acf12a7274f563961f537529d89c7de\": \"2000000000000000000000\",\n\t\"86f05d19063e9369c6004eb3f123943a7cff4eab\": \"1999944000000000000000\",\n\t\"87b10f9c280098179a2b76e9ce90be61fc844d0d\": \"1337000000000000000000\",\n\t\"243c84d12420570cc4ef3baba1c959c283249520\": \"2345000000000000000000\",\n\t\"6bc85acd5928722ef5095331ee88f484b8cf8357\": \"180000000000000000000\",\n\t\"2561a138dcf83bd813e0e7f108642be3de3d6f05\": \"999940000000000000000\",\n\t\"7d0350e40b338dda736661872be33f1f9752d755\": \"49933000000000000000\",\n\t\"e5dc9349cb52e161196122cf87a38936e2c57f34\": \"2000000000000000000000\",\n\t\"543a8c0efb8bcd15c543e2a6a4f807597631adef\": \"5893800000000000000000\",\n\t\"0413d0cf78c001898a378b918cd6e498ea773c4d\": \"280000000000000000000\",\n\t\"3708e59de6b4055088782902e0579c7201a8bf50\": \"200000000000000000000000\",\n\t\"699fc6d68a4775573c1dcdaec830fefd50397c4e\": \"60000000000000000000\",\n\t\"379a7f755a81a17edb7daaa28afc665dfa6be63a\": \"25000000000000000000\",\n\t\"260a230e4465077e0b14ee4442a482d5b0c914bf\": \"1677935000000000000000\",\n\t\"3daa01ceb70eaf9591fa521ba4a27ea9fb8ede4a\": \"1667400000000000000000\",\n\t\"7f3a1e45f67e92c880e573b43379d71ee089db54\": \"100000000000000000000000\",\n\t\"38643babea6011316cc797d9b093c897a17bdae7\": \"334400000000000000000\",\n\t\"84675e9177726d45eaa46b3992a340ba7f710c95\": \"1000000000000000000000\",\n\t\"0f83461ba224bb1e8fdd9dae535172b735acb4e0\": \"200000000000000000000\",\n\t\"31aa3b1ebe8c4dbcb6a708b1d74831e60e497660\": \"400000000000000000000\",\n\t\"a32cf7dde20c3dd5679ff5e325845c70c5962662\": \"20000000000000000000\",\n\t\"c007f0bdb6e7009202b7af3ea90902697c721413\": \"2999966000000000000000\",\n\t\"05c64004a9a826e94e5e4ee267fa2a7632dd4e6f\": \"16191931000000000000000\",\n\t\"f622e584a6623eaaf99f2be49e5380c5cbcf5cd8\": \"200000000000000000000\",\n\t\"9dc10fa38f9fb06810e11f60173ec3d2fd6a751e\": \"1970000000000000000000\",\n\t\"423c3107f4bace414e499c64390a51f74615ca5e\": \"2000000000000000000000\",\n\t\"92438e5203b6346ff886d7c36288aacccc78ceca\": \"1000000000000000000000\",\n\t\"bef07d97c3481f9d6aee1c98f9d91a180a32442b\": \"100000000000000000000000\",\n\t\"55aa5d313ebb084da0e7801091e29e92c5dec3aa\": \"2000000000000000000000\",\n\t\"89c433d601fad714da6369308fd26c1dc9942bbf\": \"2000000000000000000000\",\n\t\"25106ab6755df86d6b63a187703b0cfea0e594a0\": \"27400000000000000000\",\n\t\"494256e99b0f9cd6e5ebca3899863252900165c8\": \"14000000000000000000000\",\n\t\"5f4ace4c1cc13391e01f00b198e1f20b5f91cbf5\": \"5000196000000000000000\",\n\t\"135cecd955e5798370769230159303d9b1839f66\": \"5000000000000000000000\",\n\t\"ced81ec3533ff1bfebf3e3843ee740ad11758d3e\": \"1970000000000000000000\",\n\t\"688eb3853bbcc50ecfee0fa87f0ab693cabdef02\": \"31600000000000000000000\",\n\t\"2159240813a73095a7ebf7c3b3743e8028ae5f09\": \"2000000000000000000000\",\n\t\"99d1579cd42682b7644e1d4f7128441eeffe339d\": \"20000000000000000000000\",\n\t\"8a243a0a9fea49b839547745ff2d11af3f4b0522\": \"985000000000000000000\",\n\t\"c1a41a5a27199226e4c7eb198b031b59196f9842\": \"191000000000000000000\",\n\t\"7514adbdc63f483f304d8e94b67ff3309f180b82\": \"622911000000000000000\",\n\t\"74aeec915de01cc69b2cb5a6356feea14658c6c5\": \"232500000000000000000\",\n\t\"76f9ad3d9bbd04ae055c1477c0c35e7592cb2a20\": \"40200000000000000000000\",\n\t\"a8a7b68adab4e3eadff19ffa58e34a3fcec0d96a\": \"6000000000000000000000\",\n\t\"60de22a1507432a47b01cc68c52a0bf8a2e0d098\": \"19100000000000000000\",\n\t\"ceb33d78e7547a9da2e87d51aec5f3441c87923a\": \"20000000000000000000\",\n\t\"432809a2390f07c665921ff37d547d12f1c9966a\": \"30000000000000000000000\",\n\t\"d5e656a1b916f9bf45afb07dd8afaf73b4c56f41\": \"97000000000000000000\",\n\t\"e3410bb7557cf91d79fa69d0dfea0aa075402651\": \"2000000000000000000000\",\n\t\"dee942d5caf5fac11421d86b010b458e5c392990\": \"4000000000000000000000\",\n\t\"a98f109835f5eacd0543647c34a6b269e3802fac\": \"400000000000000000000\",\n\t\"932b9c04d40d2ac83083d94298169dae81ab2ed0\": \"2000000000000000000000\",\n\t\"ba10f2764290f875434372f79dbf713801caac01\": \"955000000000000000000\",\n\t\"a2c7eaffdc2c9d937345206c909a52dfb14c478f\": \"143000000000000000000\",\n\t\"6c67e0d7b62e2a08506945a5dfe38263339f1f22\": \"1970000000000000000000\",\n\t\"60c3714fdddb634659e4a2b1ea42c4728cc7b8ba\": \"13370000000000000000\",\n\t\"73b4d499de3f38bf35aaf769a6e318bc6d123692\": \"2000000000000000000000\",\n\t\"3b22dea3c25f1b59c7bd27bb91d3a3eaecef3984\": \"100000000000000000000\",\n\t\"1e3badb1b6e1380e27039c576ae6222e963a5b53\": \"20000000000000000000000\",\n\t\"abd4d6c1666358c0406fdf3af248f78ece830104\": \"2112000000000000000000\",\n\t\"0c925ad5eb352c8ef76d0c222d115b0791b962a1\": \"3180000000000000000000\",\n\t\"be9186c34a52514abb9107860f674f97b821bd5b\": \"509600000000000000000\",\n\t\"b7f67314cb832e32e63b15a40ce0d7ffbdb26985\": \"1060866000000000000000\",\n\t\"3f30d3bc9f602232bc724288ca46cd0b0788f715\": \"4000000000000000000000\",\n\t\"970abd53a54fca4a6429207c182d4d57bb39d4a0\": \"2000000000000000000000\",\n\t\"36d85dc3683156e63bf880a9fab7788cf8143a27\": \"20000000000000000000000\",\n\t\"2836123046b284e5ef102bfd22b1765e508116ad\": \"411880000000000000000\",\n\t\"de06d5ea777a4eb1475e605dbcbf43444e8037ea\": \"50000000000000000000000\",\n\t\"9af11399511c213181bfda3a8b264c05fc81b3ce\": \"14000000000000000000000\",\n\t\"e2191215983f33fd33e22cd4a2490054da53fddc\": \"15800000000000000000\",\n\t\"2eebf59432b52892f9380bd140aa99dcf8ad0c0f\": \"152000000000000000000\",\n\t\"dc087f9390fb9e976ac23ab689544a0942ec2021\": \"1820000000000000000000\",\n\t\"fd4b989558ae11be0c3b36e2d6f2a54a9343ca2e\": \"2000000000000000000000\",\n\t\"770c2fb2c4a81753ac0182ea460ec09c90a516f8\": \"20000000000000000000\",\n\t\"b28dbfc6499894f73a71faa00abe0f4bc9d19f2a\": \"100000000000000000000\",\n\t\"b0cef8e8fb8984a6019f01c679f272bbe68f5c77\": \"152000000000000000000\",\n\t\"f400f93d5f5c7e3fc303129ac8fb0c2f786407fa\": \"2000000000000000000000\",\n\t\"f2133431d1d9a37ba2f0762bc40c5acc8aa6978e\": \"2000000000000000000000\",\n\t\"9003d270891ba2df643da8341583193545e3e000\": \"4000000000000000000000\",\n\t\"8938d1b4daee55a54d738cf17e4477f6794e46f7\": \"18200000000000000000\",\n\t\"98e6f547db88e75f1f9c8ac2c5cf1627ba580b3e\": \"1000000000000000000000\",\n\t\"009fdbf44e1f4a6362b769c39a475f95a96c2bc7\": \"564000000000000000000\",\n\t\"d0f9597811b0b992bb7d3757aa25b4c2561d32e2\": \"500000000000000000000\",\n\t\"dcd10c55bb854f754434f1219c2c9a98ace79f03\": \"4000086000000000000000\",\n\t\"67048f3a12a4dd1f626c64264cb1d7971de2ca38\": \"180000000000000000000\",\n\t\"d33cf82bf14c592640a08608914c237079d5be34\": \"2000000000000000000000\",\n\t\"f5b068989df29c253577d0405ade6e0e7528f89e\": \"1610000000000000000000\",\n\t\"a9a8eca11a23d64689a2aa3e417dbb3d336bb59a\": \"262025000000000000000\",\n\t\"99413704b1a32e70f3bc0d69dd881c38566b54cb\": \"27382708000000000000000\",\n\t\"2a085e25b64862f5e68d768e2b0f7a8529858eee\": \"1983618000000000000000\",\n\t\"833d3fae542ad5f8b50ce19bde2bec579180c88c\": \"346000000000000000000\",\n\t\"c3483d6e88ac1f4ae73cc4408d6c03abe0e49dca\": \"17000000000000000000000\",\n\t\"fde395bc0b6d5cbb4c1d8fea3e0b4bff635e9db7\": \"2000000000000000000000\",\n\t\"eddacd94ec89a2ef968fcf977a08f1fae2757869\": \"8000000000000000000000\",\n\t\"dc29119745d2337320da51e19100c948d980b915\": \"160000000000000000000\",\n\t\"640bf87415e0cf407301e5599a68366da09bbac8\": \"493207000000000000000\",\n\t\"afcc7dbb8356d842d43ae7e23c8422b022a30803\": \"30400000000000000000000\",\n\t\"9120e71173e1ba19ba8f9f4fdbdcaa34e1d6bb78\": \"2000000000000000000000\",\n\t\"9092918707c621fdbd1d90fb80eb787fd26f7350\": \"2460000000000000000000\",\n\t\"263e57dacbe0149f82fe65a2664898866ff5b463\": \"38000000000000000000000\",\n\t\"315db7439fa1d5b423afa7dd7198c1cf74c918bc\": \"600000000000000000000\",\n\t\"09b4668696f86a080f8bebb91db8e6f87015915a\": \"656010000000000000000\",\n\t\"5c31996dcac015f9be985b611f468730ef244d90\": \"200000000000000000000\",\n\t\"b1179589e19db9d41557bbec1cb24ccc2dec1c7f\": \"100000000000000000000000\",\n\t\"3b1937d5e793b89b63fb8eb5f1b1c9ca6ba0fa8e\": \"2000000000000000000000\",\n\t\"c9127b7f6629ee13fc3f60bc2f4467a20745a762\": \"16465639000000000000000\",\n\t\"7306de0e288b56cfdf987ef0d3cc29660793f6dd\": \"508060000000000000000\",\n\t\"2aa192777ca5b978b6b2c2ff800ac1860f753f47\": \"335000000000000000000\",\n\t\"55da9dcdca61cbfe1f133c7bcefc867b9c8122f9\": \"880000000000000000000\",\n\t\"cdd9efac4d6d60bd71d95585dce5d59705c13564\": \"100000000000000000000\",\n\t\"ad8e48a377695de014363a523a28b1a40c78f208\": \"1000000000000000000000\",\n\t\"252b6555afdc80f2d96d972d17db84ea5ad521ac\": \"7880000000000000000000\",\n\t\"60ab71cd26ea6d6e59a7a0f627ee079c885ebbf6\": \"26740000000000000000\",\n\t\"f40b134fea22c6b29c8457f49f000f9cda789adb\": \"600000000000000000000\",\n\t\"85a2f6ea94d05e8c1d9ae2f4910338a358e98ded\": \"2000000000000000000000\",\n\t\"ae13a08511110f32e53be4127845c843a1a57c7b\": \"500000000000000000000\",\n\t\"40db1ba585ce34531edec5494849391381e6ccd3\": \"1790000000000000000000\",\n\t\"0c5589a7a89b9ad15b02751930415948a875fbef\": \"126000000000000000000\",\n\t\"89054430dcdc28ac15fa635ef87c105e602bf70c\": \"108000000000000000000\",\n\t\"6c882c27732cef5c7c13a686f0a2ea77555ac289\": \"100000000000000000000000\",\n\t\"de374299c1d07d79537385190f442ef9ca24061f\": \"133700000000000000000\",\n\t\"b146a0b925553cf06fcaf54a1b4dfea621290757\": \"2000200000000000000000\",\n\t\"09ae49e37f121df5dc158cfde806f173a06b0c7f\": \"3988000000000000000000\",\n\t\"b758896f1baa864f17ebed16d953886fee68aae6\": \"1000000000000000000000\",\n\t\"30730466b8eb6dc90d5496aa76a3472d7dbe0bbe\": \"1999800000000000000000\",\n\t\"fc02734033e57f70517e0afc7ee62461f06fad8e\": \"394000000000000000000\",\n\t\"a9b2d2e0494eab18e07d37bbb856d80e80f84cd3\": \"10000000000000000000000\",\n\t\"95278b08dee7c0f2c8c0f722f9fcbbb9a5241fda\": \"2408672000000000000000\",\n\t\"dab6bcdb83cf24a0ae1cb21b3b5b83c2f3824927\": \"50000000000000000000000\",\n\t\"94439ca9cc169a79d4a09cae5e67764a6f871a21\": \"240000000000000000000\",\n\t\"e06c29a81517e0d487b67fb0b6aabc4f57368388\": \"401100000000000000000\",\n\t\"458e3cc99e947844a18e6a42918fef7e7f5f5eb3\": \"36400000000000000000000\",\n\t\"0a9804137803ba6868d93a55f9985fcd540451e4\": \"13370000000000000000\",\n\t\"40630024bd2c58d248edd8465617b2bf1647da0e\": \"1000000000000000000000\",\n\t\"15224ad1c0face46f9f556e4774a3025ad06bd52\": \"13370000000000000000\",\n\t\"2e2810dee44ae4dff3d86342ab126657d653c336\": \"200000000000000000000\",\n\t\"48a30de1c919d3fd3180e97d5f2b2a9dbd964d2d\": \"44000000000000000000\",\n\t\"46a30b8a808931217445c3f5a93e882c0345b426\": \"250019000000000000000\",\n\t\"455396a4bbd9bae8af9fb7c4d64d471db9c24505\": \"161000000000000000000\",\n\t\"edfda2d5db98f9380714664d54b4ee971a1cae03\": \"40044000000000000000\",\n\t\"f5eadcd2d1b8657a121f33c458a8b13e76b65526\": \"249828000000000000000\",\n\t\"90e7070f4d033fe6910c9efe5a278e1fc6234def\": \"100392000000000000000\",\n\t\"d55508adbbbe9be81b80f97a6ea89add68da674f\": \"2000000000000000000000\",\n\t\"66925de3e43f4b41bf9dadde27d5488ef569ea0d\": \"39400000000000000000\",\n\t\"b7c077946674ba9341fb4c747a5d50f5d2da6415\": \"1000000000000000000000\",\n\t\"c52d1a0c73c2a1be84915185f8b34faa0adf1de3\": \"1400001000000000000000\",\n\t\"79b8aad879dd30567e8778d2d231c8f37ab8734e\": \"2000000000000000000000\",\n\t\"3aae4872fd9093cbcad1406f1e8078bab50359e2\": \"39400000000000000000\",\n\t\"b2e9d76bf50fc36bf7d3944b63e9ca889b699968\": \"2660000000000000000000\",\n\t\"405f596b94b947344c033ce2dcbff12e25b79784\": \"2000000000000000000000\",\n\t\"232cb1cd49993c144a3f88b3611e233569a86bd6\": \"15576000000000000000000\",\n\t\"9e232c08c14dc1a6ed0b8a3b2868977ba5c17d10\": \"20000000000000000000\",\n\t\"095270cc42141dd998ad2862dbd1fe9b44e7e650\": \"1200000000000000000000\",\n\t\"15d99468507aa0413fb60dca2adc7f569cb36b54\": \"2000000000000000000000\",\n\t\"04852732b4c652f6c2e58eb36587e60a62da14db\": \"20000000000000000000000\",\n\t\"ecf24cdd7c22928c441e694de4aa31b0fab59778\": \"600000000000000000000\",\n\t\"512b91bbfaa9e581ef683fc90d9db22a8f49f48b\": \"310000000000000000000000\",\n\t\"a88577a073fbaf33c4cd202e00ea70ef711b4006\": \"2000000000000000000000\",\n\t\"00acc6f082a442828764d11f58d6894ae408f073\": \"60000000000000000000000\",\n\t\"0355bcacbd21441e95adeedc30c17218c8a408ce\": \"400000000000000000000\",\n\t\"4e73cf2379f124860f73d6d91bf59acc5cfc845b\": \"40110000000000000000\",\n\t\"2a742b8910941e0932830a1d9692cfd28494cf40\": \"499986000000000000000\",\n\t\"41a8c2830081b102df6e0131657c07ab635b54ce\": \"1999944000000000000000\",\n\t\"b63064bd3355e6e07e2d377024125a33776c4afa\": \"38800000000000000000000\",\n\t\"1a25e1c5bc7e5f50ec16f8885f210ea1b938800e\": \"4000000000000000000000\",\n\t\"09b59b8698a7fbd3d2f8c73a008988de3e406b2b\": \"40000000000000000000000\",\n\t\"c555b93156f09101233c6f7cf6eb3c4f196d3346\": \"3000000000000000000000\",\n\t\"12f32c0a1f2daab676fe69abd9e018352d4ccd45\": \"50000000000000000000\",\n\t\"5956b28ec7890b76fc061a1feb52d82ae81fb635\": \"2000000000000000000000\",\n\t\"c739259e7f85f2659bef5f609ed86b3d596c201e\": \"200000000000000000000\",\n\t\"fae92c1370e9e1859a5df83b56d0f586aa3b404c\": \"106480000000000000000\",\n\t\"d5a7bec332adde18b3104b5792546aa59b879b52\": \"2000000000000000000000\",\n\t\"4f88dfd01091a45a9e2676021e64286cd36b8d34\": \"1000000000000000000000\",\n\t\"102c477d69aadba9a0b0f62b7459e17fbb1c1561\": \"2000000000000000000000\",\n\t\"34272d5e7574315dcae9abbd317bac90289d4765\": \"1820000000000000000000\",\n\t\"fe615d975c0887e0c9113ec7298420a793af8b96\": \"8000000000000000000000\",\n\t\"487adf7d70a6740f8d51cbdd68bb3f91c4a5ce68\": \"66850000000000000000\",\n\t\"7e5d9993104e4cb545e179a2a3f971f744f98482\": \"2000000000000000000000\",\n\t\"5529830a61c1f13c197e550beddfd6bd195c9d02\": \"10000000000000000000000\",\n\t\"2f282abbb6d4a3c3cd3b5ca812f7643e80305f06\": \"1850000000000000000000\",\n\t\"7352586d021ad0cf77e0e928404a59f374ff4582\": \"3400000000000000000000\",\n\t\"03f7b92008813ae0a676eb212814afab35221069\": \"2000000000000000000000\",\n\t\"056686078fb6bcf9ba0a8a8dc63a906f5feac0ea\": \"499800000000000000000\",\n\t\"8063379a7bf2cb923a84c5093e68dac7f75481c5\": \"322102000000000000000\",\n\t\"200264a09f8c68e3e6629795280f56254f8640d0\": \"20000000000000000000\",\n\t\"5a891155f50e42074374c739baadf7df2651153a\": \"4775000000000000000000\",\n\t\"80022a1207e910911fc92849b069ab0cdad043d3\": \"13370000000000000000\",\n\t\"e781ec732d401202bb9bd13860910dd6c29ac0b6\": \"1240000000000000000000\",\n\t\"4c2f1afef7c5868c44832fc77cb03b55f89e6d6e\": \"20000000000000000000000\",\n\t\"34ff582952ff24458f7b13d51f0b4f987022c1fe\": \"2804400000000000000000\",\n\t\"73914b22fc2f131584247d82be4fecbf978ad4ba\": \"2000000000000000000000\",\n\t\"562be95aba17c5371fe2ba828799b1f55d2177d6\": \"38200000000000000000000\",\n\t\"648f5bd2a2ae8902db37847d1cb0db9390b06248\": \"7769965000000000000000\",\n\t\"6a9758743b603eea3aa0524b42889723c4153948\": \"10100000000000000000000\",\n\t\"5985c59a449dfc5da787d8244e746c6d70caa55f\": \"100000000000000000000\",\n\t\"56ee197f4bbf9f1b0662e41c2bbd9aa1f799e846\": \"1000000000000000000000\",\n\t\"d47c242edffea091bc54d57df5d1fdb93101476c\": \"2914000000000000000000\",\n\t\"d482e7f68e41f238fe517829de15477fe0f6dd1d\": \"500000000000000000000\",\n\t\"05bf4fcfe772e45b826443852e6c351350ce72a2\": \"8000000000000000000000\",\n\t\"f10462e58fcc07f39584a187639451167e859201\": \"169830000000000000000\",\n\t\"1aa27699cada8dc3a76f7933aa66c71919040e88\": \"400000000000000000000\",\n\t\"24046b91da9b61b629cb8b8ec0c351a07e0703e4\": \"2000000000000000000000\",\n\t\"41033c1b6d05e1ca89b0948fc64453fbe87ab25e\": \"1337000000000000000000\",\n\t\"369822f5578b40dd1f4471706b22cd971352da6b\": \"346000000000000000000\",\n\t\"044e853144e3364495e7a69fa1d46abea3ac0964\": \"49225000000000000000\",\n\t\"abf728cf9312f22128024e7046c251f5dc5901ed\": \"29550000000000000000000\",\n\t\"d781f7fc09184611568570b4986e2c72872b7ed0\": \"20002000000000000000\",\n\t\"6bb4a661a33a71d424d49bb5df28622ed4dffcf4\": \"630400000000000000000\",\n\t\"fef3b3dead1a6926d49aa32b12c22af54d9ff985\": \"1000000000000000000000\",\n\t\"fa410971ad229c3036f41acf852f2ac999281950\": \"3997400000000000000000\",\n\t\"de176b5284bcee3a838ba24f67fc7cbf67d78ef6\": \"37600000000000000000\",\n\t\"23120046f6832102a752a76656691c863e17e59c\": \"329800000000000000000\",\n\t\"a2f472fe4f22b77db489219ea4023d11582a9329\": \"40000000000000000000000\",\n\t\"f0d64cf9df09741133d170485fd24b005011d520\": \"498680000000000000000\",\n\t\"8b505e2871f7deb7a63895208e8227dcaa1bff05\": \"61216600000000000000000\",\n\t\"481e3a91bfdc2f1c8428a0119d03a41601417e1c\": \"1000000000000000000000\",\n\t\"bc69a0d2a31c3dbf7a9122116901b2bdfe9802a0\": \"3000000000000000000000\",\n\t\"20a81680e465f88790f0074f60b4f35f5d1e6aa5\": \"1279851000000000000000\",\n\t\"194a6bb302b8aba7a5b579df93e0df1574967625\": \"500000000000000000000\",\n\t\"264cc8086a8710f91b21720905912cd7964ae868\": \"26740000000000000000\",\n\t\"24aca08d5be85ebb9f3132dfc1b620824edfedf9\": \"18200000000000000000\",\n\t\"1851a063ccdb30549077f1d139e72de7971197d5\": \"2000000000000000000000\",\n\t\"f64a4ac8d540a9289c68d960d5fb7cc45a77831c\": \"2000000000000000000000\",\n\t\"c3db5657bb72f10d58f231fddf11980aff678693\": \"5910000000000000000000\",\n\t\"b46ace865e2c50ea4698d216ab455dff5a11cd72\": \"1000000000000000000000\",\n\t\"9faea13c733412dc4b490402bfef27a0397a9bc3\": \"310000000000000000000\",\n\t\"b40594c4f3664ef849cca6227b8a25aa690925ee\": \"4000000000000000000000\",\n\t\"672fa0a019088db3166f6119438d07a99f8ba224\": \"13370000000000000000000\",\n\t\"c1ffad07db96138c4b2a530ec1c7de29b8a0592c\": \"17600000000000000000\",\n\t\"87af25d3f6f8eea15313d5fe4557e810c524c083\": \"19700000000000000000000\",\n\t\"d6a22e598dabd38ea6e958bd79d48ddd9604f4df\": \"1000000000000000000000\",\n\t\"a2a435de44a01bd0ecb29e44e47644e46a0cdffb\": \"500171000000000000000\",\n\t\"549b47649cfad993e4064d2636a4baa0623305cc\": \"601650000000000000000\",\n\t\"1321b605026f4ffb296a3e0edcb390c9c85608b7\": \"2000000000000000000000\",\n\t\"b4bf24cb83686bc469869fefb044b909716993e2\": \"2000000000000000000000\",\n\t\"12d91a92d74fc861a729646db192a125b79f5374\": \"18200000000000000000\",\n\t\"7f0662b410298c99f311d3a1454a1eedba2fea76\": \"200000000000000000000\",\n\t\"83908aa7478a6d1c9b9b0281148f8f9f242b9fdc\": \"2000000000000000000000\",\n\t\"c1438c99dd51ef1ca8386af0a317e9b041457888\": \"223500000000000000000\",\n\t\"545bb070e781172eb1608af7fc2895d6cb87197e\": \"2244000000000000000000\",\n\t\"161d26ef6759ba5b9f20fdcd66f16132c352415e\": \"2000000000000000000000\",\n\t\"d7f370d4bed9d57c6f49c999de729ee569d3f4e4\": \"200000000000000000000\",\n\t\"90e35aabb2deef408bb9b5acef714457dfde6272\": \"100076000000000000000\",\n\t\"0fcfc4065008cfd323305f6286b57a4dd7eee23b\": \"20000000000000000000000\",\n\t\"cd725d70be97e677e3c8e85c0b26ef31e9955045\": \"1337000000000000000000\",\n\t\"dcf6b657266e91a4dae6033ddac15332dd8d2b34\": \"1760000000000000000000\",\n\t\"31f006f3494ed6c16eb92aaf9044fa8abb5fd5a3\": \"500000000000000000000\",\n\t\"cdea386f9d0fd804d02818f237b7d9fa7646d35e\": \"3012139000000000000000\",\n\t\"d45b3341e8f15c80329320c3977e3b90e7826a7e\": \"500000000000000000000\",\n\t\"0b649da3b96a102cdc6db652a0c07d65b1e443e6\": \"2000000000000000000000\",\n\t\"0a58fddd71898de773a74fdae45e7bd84ef43646\": \"20000000000000000000\",\n\t\"0256149f5b5063bea14e15661ffb58f9b459a957\": \"704000000000000000000\",\n\t\"4438e880cb2766b0c1ceaec9d2418fceb952a044\": \"133712000000000000000\",\n\t\"9ed80eda7f55054db9fb5282451688f26bb374c1\": \"300000000000000000000\",\n\t\"8dab948ae81da301d972e3f617a912e5a753712e\": \"400000000000000000000\",\n\t\"5b5d8c8eed6c85ac215661de026676823faa0a0c\": \"20000000000000000000000\",\n\t\"46722a36a01e841d03f780935e917d85d5a67abd\": \"14900000000000000000\",\n\t\"d4b8bdf3df9a51b0b91d16abbea05bb4783c8661\": \"1000000000000000000000\",\n\t\"98f6b8e6213dbc9a5581f4cce6655f95252bdb07\": \"319968000000000000000\",\n\t\"3599493ce65772cf93e98af1195ec0955dc98002\": \"1500048000000000000000\",\n\t\"ecab5aba5b828de1705381f38bc744b32ba1b437\": \"940000000000000000000\",\n\t\"9a82826d3c29481dcc2bd2950047e8b60486c338\": \"20000000000000000000000\",\n\t\"6c474bc66a54780066aa4f512eefa773abf919c7\": \"94000000000000000000\",\n\t\"d5903e9978ee20a38c3f498d63d57f31a39f6a06\": \"10380000000000000000000\",\n\t\"341480cc8cb476f8d01ff30812e7c70e05afaf5d\": \"2000000000000000000000\",\n\t\"af771039345a343001bc0f8a5923b126b60d509c\": \"985000000000000000000\",\n\t\"b5a4679685fa14196c2e9230c8c4e33bffbc10e2\": \"1400000000000000000000\",\n\t\"2a400dff8594de7228b4fd15c32322b75bb87da8\": \"95810000000000000000\",\n\t\"a1336dfb96b6bcbe4b3edf3205be5723c90fad52\": \"5000000000000000000000\",\n\t\"e9b1f1fca3fa47269f21b061c353b7f5e96d905a\": \"500000000000000000000\",\n\t\"0ee414940487fd24e390378285c5d7b9334d8b65\": \"2680000000000000000000\",\n\t\"6ab5b4c41cddb829690c2fda7f20c85e629dd5d5\": \"1860000000000000000000\",\n\t\"dd63042f25ed32884ad26e3ad959eb94ea36bf67\": \"21340000000000000000000\",\n\t\"c0b3f244bca7b7de5b48a53edb9cbeab0b6d88c0\": \"5820000000000000000000\",\n\t\"ed1a5c43c574d4e934299b24f1472cdc9fd6f010\": \"200000000000000000000\",\n\t\"b2d9ab9664bcf6df203c346fc692fd9cbab9205e\": \"438000000000000000000\",\n\t\"ede8c2cb876fbe8a4cca8290361a7ea01a69fdf8\": \"7813091000000000000000\",\n\t\"6a7c252042e7468a3ff773d6450bba85efa26391\": \"500000000000000000000\",\n\t\"a106e6923edd53ca8ed650968a9108d6ccfd9670\": \"9499935000000000000000\",\n\t\"031e25db516b0f099faebfd94f890cf96660836b\": \"2000000000000000000000\",\n\t\"7fdbc3a844e40d96b2f3a635322e6065f4ca0e84\": \"2000000000000000000000\",\n\t\"df47a61b72535193c561cccc75c3f3ce0804a20e\": \"398000000000000000000\",\n\t\"ed31305c319f9273d3936d8f5b2f71e9b1b22963\": \"100000000000000000000\",\n\t\"a6b2d573297360102c07a18fc21df2e7499ff4eb\": \"4011000000000000000000\",\n\t\"f68464bf64f2411356e4d3250efefe5c50a5f65b\": \"20000000000000000000\",\n\t\"927cc2bfda0e088d02eff70b38b08aa53cc30941\": \"1852700000000000000000\",\n\t\"41cb9896445f70a10a14215296daf614e32cf4d5\": \"1910000000000000000000\",\n\t\"3ad70243d88bf0400f57c8c1fd57811848af162a\": \"860000000000000000000\",\n\t\"63b9754d75d12d384039ec69063c0be210d5e0e3\": \"2694055000000000000000\",\n\t\"ad1799aad7602b4540cd832f9db5f11150f1687a\": \"2000000000000000000000\",\n\t\"a8b65ba3171a3f77a6350b9daf1f8d55b4d201eb\": \"745000000000000000000\",\n\t\"ad0a4ae478e9636e88c604f242cf5439c6d45639\": \"3520000000000000000000\",\n\t\"4cd0b0a6436362595ceade052ebc9b929fb6c6c0\": \"2000000000000000000000\",\n\t\"c1d4af38e9ba799040894849b8a8219375f1ac78\": \"20000000000000000000000\",\n\t\"49ddee902e1d0c99d1b11af3cc8a96f78e4dcf1a\": \"199358000000000000000\",\n\t\"ae842210f44d14c4a4db91fc9d3b3b50014f7bf7\": \"4000000000000000000000\",\n\t\"10a1c42dc1ba746986b985a522a73c93eae64c63\": \"1000000000000000000000\",\n\t\"5103bc09933e9921fd53dc536f11f05d0d47107d\": \"4000000000000000000000\",\n\t\"c88eec54d305c928cc2848c2fee23531acb96d49\": \"1999946000000000000000\",\n\t\"9a2ce43b5d89d6936b8e8c354791b8afff962425\": \"2000000000000000000000\",\n\t\"562020e3ed792d2f1835fe5f55417d5111460c6a\": \"20000000000000000000000\",\n\t\"ed16ce39feef3bd7f5d162045e0f67c0f00046bb\": \"20000000000000000000\",\n\t\"ab948a4ae3795cbca13126e19253bdc21d3a8514\": \"200000000000000000000\",\n\t\"c12b7f40df9a2f7bf983661422ab84c9c1f50858\": \"8000000000000000000000\",\n\t\"62e6b2f5eb94fa7a43831fc87e254a3fe3bf8f89\": \"250000000000000000000\",\n\t\"423bca47abc00c7057e3ad34fca63e375fbd8b4a\": \"18000000000000000000000\",\n\t\"5ff326cd60fd136b245e29e9087a6ad3a6527f0d\": \"1880000000000000000000\",\n\t\"79ffb4ac13812a0b78c4a37b8275223e176bfda5\": \"17300000000000000000\",\n\t\"f757fc8720d3c4fa5277075e60bd5c411aebd977\": \"2000000000000000000000\",\n\t\"0bdbc54cc8bdbbb402a08911e2232a5460ce866b\": \"3000000000000000000000\",\n\t\"9ee9760cc273d4706aa08375c3e46fa230aff3d5\": \"8950000000000000000000\",\n\t\"d23a24d7f9468343c143a41d73b88f7cbe63be5e\": \"200000000000000000000\",\n\t\"46d80631284203f6288ecd4e5758bb9d41d05dbe\": \"2000000000000000000000\",\n\t\"3f4cd1399f8a34eddb9a17a471fc922b5870aafc\": \"200000000000000000000\",\n\t\"44c54eaa8ac940f9e80f1e74e82fc14f1676856a\": \"7880000000000000000000\",\n\t\"aec27ff5d7f9ddda91183f46f9d52543b6cd2b2f\": \"450000000000000000000\",\n\t\"203c6283f20df7bc86542fdfb4e763ecdbbbeef5\": \"25000000000000000000000\",\n\t\"bcaf347918efb2d63dde03e39275bbe97d26df50\": \"100000000000000000000\",\n\t\"974d0541ab4a47ec7f75369c0069b64a1b817710\": \"400000000000000000000\",\n\t\"5da54785c9bd30575c89deb59d2041d20a39e17b\": \"1967031000000000000000\",\n\t\"1fb463a0389983df7d593f7bdd6d78497fed8879\": \"20000000000000000000\",\n\t\"6e1ea4b183e252c9bb7767a006d4b43696cb8ae9\": \"294245000000000000000\",\n\t\"c2aa74847e86edfdd3f3db22f8a2152feee5b7f7\": \"2048852000000000000000\",\n\t\"a13b9d82a99b3c9bba5ae72ef2199edc7d3bb36c\": \"1999944000000000000000\",\n\t\"5135fb8757600cf474546252f74dc0746d06262c\": \"2000000000000000000000\",\n\t\"43e7ec846358d7d0f937ad1c350ba069d7bf72bf\": \"118800000000000000000\",\n\t\"f2ed3e77254acb83231dc0860e1a11242ba627db\": \"1980000000000000000000\",\n\t\"c0a02ab94ebe56d045b41b629b98462e3a024a93\": \"100000000000000000000\",\n\t\"f21549bdd1487912f900a7523db5f7626121bba3\": \"10000000000000000000000\",\n\t\"886d0a9e17c9c095af2ea2358b89ec705212ee94\": \"28000000000000000000\",\n\t\"211b29cefc79ae976744fdebcebd3cbb32c51303\": \"14000000000000000000000\",\n\t\"b8c2703d8c3f2f44c584bc10e7c0a6b64c1c097e\": \"5550000000000000000000\",\n\t\"ec30addd895b82ee319e54fb04cb2bb03971f36b\": \"2000000000000000000000\",\n\t\"b71b62f4b448c02b1201cb5e394ae627b0a560ee\": \"500000000000000000000\",\n\t\"e1334e998379dfe983177062791b90f80ee22d8d\": \"500000000000000000000\",\n\t\"1d633097a85225a1ff4321b12988fdd55c2b3844\": \"4000000000000000000000\",\n\t\"8bd8d4c4e943f6c8073921dc17e3e8d7a0761627\": \"2933330000000000000000\",\n\t\"a5d96e697d46358d119af7819dc7087f6ae47fef\": \"14605131000000000000000\",\n\t\"d0809498c548047a1e2a2aa6a29cd61a0ee268bd\": \"2000000000000000000000\",\n\t\"3cd6b7593cbee77830a8b19d0801958fcd4bc57a\": \"500000000000000000000\",\n\t\"ead4d2eefb76abae5533961edd11400406b298fc\": \"3880000000000000000000\",\n\t\"6331028cbb5a21485bc51b565142993bdb2582a9\": \"534800000000000000000\",\n\t\"163bad4a122b457d64e8150a413eae4d07023e6b\": \"18800000000000000000\",\n\t\"c522e20fbf04ed7f6b05a37b4718d6fce0142e1a\": \"4000000000000000000000\",\n\t\"2d9bad6f1ee02a70f1f13def5cccb27a9a274031\": \"1790000000000000000000\",\n\t\"5ed0d6338559ef44dc7a61edeb893fa5d83fa1b5\": \"220000000000000000000\",\n\t\"ec8c1d7b6aaccd429db3a91ee4c9eb1ca4f6f73c\": \"4250000000000000000000\",\n\t\"3896ad743579d38e2302454d1fb6e2ab69e01bfd\": \"1880000000000000000000\",\n\t\"e73ccf436725c151e255ccf5210cfce5a43f13e3\": \"19982000000000000000\",\n\t\"9483d98f14a33fdc118d403955c29935edfc5f70\": \"459600000000000000000\",\n\t\"1cfcf7517f0c08459720942b647ad192aa9c8828\": \"800000000000000000000\",\n\t\"8d378f0edc0bb0f0686d6a20be6a7692c4fa24b8\": \"100000000000000000000\",\n\t\"06f68de3d739db41121eacf779aada3de8762107\": \"28000000000000000000\",\n\t\"9909650dd5b1397b8b8b0eb69499b291b0ad1213\": \"200000000000000000000\",\n\t\"b66675142e3111a1c2ea1eb2419cfa42aaf7a234\": \"1000000000000000000000\",\n\t\"7836f7ef6bc7bd0ff3acaf449c84dd6b1e2c939f\": \"4142296000000000000000\",\n\t\"3ddedbe48923fbf9e536bf9ffb0747c9cdd39eef\": \"16100000000000000000000\",\n\t\"c47d610b399250f70ecf1389bab6292c91264f23\": \"288800000000000000000\",\n\t\"51a6d627f66a8923d88d6094c4715380d3057cb6\": \"1152044000000000000000\",\n\t\"6c0cc917cbee7d7c099763f14e64df7d34e2bf09\": \"250000000000000000000\",\n\t\"aaaae68b321402c8ebc13468f341c63c0cf03fce\": \"1520000000000000000000\",\n\t\"819cdaa5303678ef7cec59d48c82163acc60b952\": \"14523448000000000000000\",\n\t\"d071192966eb69c3520fca3aa4dd04297ea04b4e\": \"110000000000000000000\",\n\t\"e53425d8df1f11c341ff58ae5f1438abf1ca53cf\": \"322000000000000000000\",\n\t\"8ffe322997b8e404422d19c54aadb18f5bc8e9b7\": \"3940000000000000000000\",\n\t\"305f78d618b990b4295bac8a2dfa262884f804ea\": \"4000000000000000000000\",\n\t\"274d69170fe7141401882b886ac4618c6ae40edb\": \"955000000000000000000\",\n\t\"69c94e07c4a9be3384d95dfa3cb9290051873b7b\": \"70000000000000000000\",\n\t\"859c600cf13d1d0273d5d1da3cd789e495899f27\": \"2674000000000000000000\",\n\t\"c06cebbbf7f5149a66f7eb976b3e47d56516da2f\": \"2000000000000000000000\",\n\t\"37bbc47212d82fcb5ee08f5225ecc2041ad2da7d\": \"3280000000000000000000\",\n\t\"11e7997edd904503d77da6038ab0a4c834bbd563\": \"388000000000000000000\",\n\t\"d333627445f2d787901ef33bb2a8a3675e27ffec\": \"400000000000000000000\",\n\t\"16a58e985dccd707a594d193e7cca78b5d027849\": \"1360000000000000000000\",\n\t\"f8ae857b67a4a2893a3fbe7c7a87ff1c01c6a6e7\": \"4000000000000000000000\",\n\t\"491561db8b6fafb9007e62d050c282e92c4b6bc8\": \"30000000000000000000000\",\n\t\"21df1ec24b4e4bfe79b0c095cebae198f291fbd1\": \"20000000000000000000000\",\n\t\"e208812a684098f3da4efe6aba256256adfe3fe6\": \"2000000000000000000000\",\n\t\"f4ec8e97a20aa5f8dd206f55207e06b813df2cc0\": \"200000000000000000000\",\n\t\"29eb7eefdae9feb449c63ff5f279d67510eb1422\": \"19400000000000000000\",\n\t\"0d678706d037187f3e22e6f69b99a592d11ebc59\": \"1580000000000000000000\",\n\t\"de6d363106cc6238d2f092f0f0372136d1cd50c6\": \"5348000000000000000000\",\n\t\"c8710d7e8b5a3bd69a42fe0fa8b87c357fddcdc8\": \"4000000000000000000000\",\n\t\"5267f4d41292f370863c90d793296903843625c7\": \"1400000000000000000000\",\n\t\"4cda41dd533991290794e22ae324143e309b3d3d\": \"2400000000000000000000\",\n\t\"f8a50cee2e688ceee3aca4d4a29725d4072cc483\": \"2000000000000000000000\",\n\t\"5ed3bbc05240e0d399eb6ddfe60f62de4d9509af\": \"193999806000000000000000\",\n\t\"0befb54707f61b2c9fb04715ab026e1bb72042bd\": \"4000000000000000000000\",\n\t\"cab9a301e6bd46e940355028eccd40ce4d5a1ac3\": \"400000000000000000000\",\n\t\"64672da3ab052821a0243d1ce4b6e0a36517b8eb\": \"200000000000000000000\",\n\t\"eac0827eff0c6e3ff28a7d4a54f65cb7689d7b99\": \"2856500000000000000000\",\n\t\"f4b6cdcfcb24230b337d770df6034dfbd4e1503f\": \"19000000000000000000000\",\n\t\"7be2f7680c802da6154c92c0194ae732517a7169\": \"18200000000000000000\",\n\t\"869f1aa30e4455beb1822091de5cadec79a8f946\": \"8000000000000000000000\",\n\t\"c4681e73bb0e32f6b726204831ff69baa4877e32\": \"1820000000000000000000\",\n\t\"962cd22a8edf1e4f4e55b4b15ddbfb5d9d541971\": \"2000000000000000000000\",\n\t\"131df8d330eb7cc7147d0a55576f05de8d26a8b7\": \"188000000000000000000\",\n\t\"19f99f2c0b46ce8906875dc9f90ae104dae35594\": \"4507300000000000000000\",\n\t\"91bb3f79022bf3c453f4ff256e269b15cf2c9cbd\": \"1519000000000000000000\",\n\t\"7301dc4cf26d7186f2a11bf8b08bf229463f64a3\": \"2000000000000000000000\",\n\t\"7cbca88fca6a0060b960985c9aa1b02534dc2208\": \"462500000000000000000\",\n\t\"f3c1abd29dc57b41dc192d0e384d021df0b4f6d4\": \"2798000000000000000000\",\n\t\"5d32f6f86e787ff78e63d78b0ef95fe6071852b8\": \"401100000000000000000\",\n\t\"1678c5f2a522393225196361894f53cc752fe2f3\": \"1936000000000000000000\",\n\t\"1cf04cb14380059efd3f238b65d5beb86afa14d8\": \"20000000000000000000\",\n\t\"52e1731350f983cc2c4189842fde0613fad50ce1\": \"11640000000000000000000\",\n\t\"d0b11d6f2bce945e0c6a5020c3b52753f803f9d1\": \"200000000000000000000\",\n\t\"409bd75085821c1de70cdc3b11ffc3d923c74010\": \"4000000000000000000000\",\n\t\"0bb7160aba293762f8734f3e0326ffc9a4cac190\": \"1000000000000000000000\",\n\t\"7aad4dbcd3acf997df93586956f72b64d8ad94ee\": \"4000000000000000000000\",\n\t\"2dec98329d1f96c3a59caa7981755452d4da49d5\": \"200000000000000000000\",\n\t\"c18ab467feb5a0aadfff91230ff056464d78d800\": \"2000000000000000000000\",\n\t\"c90c3765156bca8e4897ab802419153cbe5225a9\": \"200000000000000000000\",\n\t\"85c8f3cc7a354feac99a5e7bfe7cdfa351cfe355\": \"400000000000000000000\",\n\t\"f4fc4d39bc0c2c4068a36de50e4ab4d4db7e340a\": \"25380000000000000000\",\n\t\"f50abbd4aa45d3eb88515465a8ba0b310fd9b521\": \"6685000000000000000000\",\n\t\"4d200110124008d56f76981256420c946a6ff45c\": \"199955000000000000000\",\n\t\"f4ba6a46d55140c439cbcf076cc657136262f4f8\": \"2000000000000000000000\",\n\t\"fa7adf660b8d99ce15933d7c5f072f3cbeb99d33\": \"5910000000000000000000\",\n\t\"84503334630d77f74147f68b2e086613c8f1ade9\": \"1600000000000000000000\",\n\t\"31ed858788bda4d5270992221cc04206ec62610d\": \"1176000000000000000000\",\n\t\"bfbca418d3529cb393081062032a6e1183c6b2dc\": \"8000000000000000000000\",\n\t\"8263ece5d709e0d7ae71cca868ed37cd2fef807b\": \"990000000000000000000\",\n\t\"23ba3864da583dab56f420873c37679690e02f00\": \"9800000000000000000000\",\n\t\"cedcb3a1d6843fb6bef643617deaf38f8e98dd5f\": \"477500000000000000000\",\n\t\"8fac748f784a0fed68dba43319b42a75b4649c6e\": \"910000000000000000000\",\n\t\"18b8bcf98321da61fb4e3eacc1ec5417272dc27e\": \"880000000000000000000\",\n\t\"776943ffb2ef5cdd35b83c28bc046bd4f4677098\": \"3000000000000000000000\",\n\t\"fb8113f94d9173eefd5a3073f516803a10b286ae\": \"80000000000000000000\",\n\t\"3e8349b67f5745449f659367d9ad4712db5b895a\": \"1820000000000000000000\",\n\t\"79cfa9780ae6d87b2c31883f09276986c89a6735\": \"1000000000000000000000\",\n\t\"5006fe4c22173980f00c74342b39cd231c653129\": \"2000000000000000000000\",\n\t\"13848b46ea75beb7eaa85f59d866d77fd24cf21a\": \"50000000000000000000000\",\n\t\"d64a2d50f8858537188a24e0f50df1681ab07ed7\": \"38800000000000000000000\",\n\t\"4f9ce2af9b8c5e42c6808a3870ec576f313545d1\": \"10000000000000000000000\",\n\t\"8764d02722000996ecd475b433298e9f540b05bf\": \"200000000000000000000\",\n\t\"3b7c77dbe95dc2602ce3269a9545d04965fefdbd\": \"2000000000000000000000\",\n\t\"c9dcbb056f4db7d9da39936202c5bd8230b3b477\": \"20000000000000000000000\",\n\t\"9ecbabb0b22782b3754429e1757aaba04b81189f\": \"823743000000000000000\",\n\t\"831c44b3084047184b2ad218680640903750c45d\": \"1970000000000000000000\",\n\t\"ff8eb07de3d49d9d52bbe8e5b26dbe1d160fa834\": \"3986000000000000000000\",\n\t\"8ccf3aa21ab742576ad8c422f71bb188591dea8a\": \"1000000000000000000000\",\n\t\"ddac312a9655426a9c0c9efa3fd82559ef4505bf\": \"401100000000000000000\",\n\t\"9a3e2b1bf346dd070b027357feac44a4b2c97db8\": \"10000000000000000000000\",\n\t\"69d39d510889e552a396135bfcdb06e37e387633\": \"4000000000000000000000\",\n\t\"83a3148833d9644984f7c475a7850716efb480ff\": \"3400000000000000000000\",\n\t\"62b4a9226e61683c72c183254690daf511b4117a\": \"260000000000000000000\",\n\t\"50763add868fd7361178342fc055eaa2b95f6846\": \"66838000000000000000\",\n\t\"91898eab8c05c0222883cd4db23b7795e1a24ad7\": \"2000000000000000000000\",\n\t\"066647cfc85d23d37605573d208ca154b244d76c\": \"10000000000000000000000\",\n\t\"aaf9ee4b886c6d1e95496fd274235bf4ecfcb07d\": \"1400000000000000000000\",\n\t\"06860a93525955ff624940fadcffb8e149fd599c\": \"1999800000000000000000\",\n\t\"e81c2d346c0adf4cc56708f6394ba6c8c8a64a1e\": \"2000000000000000000000\",\n\t\"41a8e236a30e6d63c1ff644d132aa25c89537e01\": \"20000000000000000000\",\n\t\"6a679e378fdce6bfd97fe62f043c6f6405d79e99\": \"4000000000000000000000\",\n\t\"933436c8472655f64c3afaaf7c4c621c83a62b38\": \"1000000000000000000000\",\n\t\"abe07ced6ac5ddf991eff6c3da226a741bd243fe\": \"10000000000000000000000\",\n\t\"bb56a404723cff20d0685488b05a02cdc35aacaa\": \"20000000000000000000\",\n\t\"0d551ec1a2133c981d5fc6a8c8173f9e7c4f47af\": \"2000000000000000000000\",\n\t\"23376ecabf746ce53321cf42c86649b92b67b2ff\": \"2000000000000000000000\",\n\t\"644ba6c61082e989109f5c11d4b40e991660d403\": \"4000000000000000000000\",\n\t\"680d5911ed8dd9eec45c060c223f89a7f620bbd5\": \"20000000000000000000000\",\n\t\"cb1bb6f1da5eb10d4899f7e61d06c1b00fdfb52d\": \"1038000000000000000000\",\n\t\"303a30ac4286ae17cf483dad7b870c6bd64d7b4a\": \"500000000000000000000\",\n\t\"7b0b31ff6e24745ead8ed9bb85fc0bf2fe1d55d4\": \"800000000000000000000\",\n\t\"854691ce714f325ced55ce5928ce9ba12facd1b8\": \"4380000000000000000000\",\n\t\"a13cfe826d6d1841dcae443be8c387518136b5e8\": \"140000000000000000000000\",\n\t\"5fcd84546896dd081db1a320bd4d8c1dd1528c4c\": \"20000000000000000000\",\n\t\"3db5fe6a68bd3612ac15a99a61e555928eeceaf3\": \"1580000000000000000000\",\n\t\"7a79e30ff057f70a3d0191f7f53f761537af7dff\": \"400000000000000000000\",\n\t\"3d3fad49c9e5d2759c8e8e5a7a4d60a0dd135692\": \"20000000000000000000\",\n\t\"05a830724302bc0f6ebdaa1ebeeeb46e6ce00b39\": \"98500000000000000000\",\n\t\"e4b6ae22c7735f5b89f34dd77ad0975f0acc9181\": \"1000000000000000000000\",\n\t\"3f2dd55db7eab0ebee65b33ed8202c1e992e958b\": \"820000000000000000000\",\n\t\"395d6d255520a8db29abc47d83a5db8a1a7df087\": \"100000000000000000000\",\n\t\"1cc90876004109cd79a3dea866cb840ac364ba1b\": \"2000000000000000000000\",\n\t\"c83e9d6a58253beebeb793e6f28b054a58491b74\": \"281800000000000000000\",\n\t\"901d99b699e5c6911519cb2076b4c76330c54d22\": \"2000000000000000000000\",\n\t\"3a9132b7093d3ec42e1e4fb8cb31ecdd43ae773c\": \"2000000000000000000000\",\n\t\"b41eaf5d51a5ba1ba39bb418dbb54fab750efb1f\": \"1000000000000000000000\",\n\t\"aa493d3f4fb866491cf8f800efb7e2324ed7cfe5\": \"1700000000000000000000\",\n\t\"509982f56237ee458951047e0a2230f804e2e895\": \"17500000000000000000000\",\n\t\"316e92a91bbda68b9e2f98b3c048934e3cc0b416\": \"2000000000000000000000\",\n\t\"a3430e1f647f321ed34739562323c7d623410b56\": \"999942000000000000000\",\n\t\"fca43bbc23a0d321ba9e46b929735ce7d8ef0c18\": \"20000000000000000000\",\n\t\"ff45cb34c928364d9cc9d8bb00373474618f06f3\": \"100000000000000000000\",\n\t\"8c999591fd72ef7111efca7a9e97a2356b3b000a\": \"4084000000000000000000\",\n\t\"8579dadf1a395a3471e20b6f763d9a0ff19a3f6f\": \"4000000000000000000000\",\n\t\"c8d4e1599d03b79809e0130a8dc38408f05e8cd3\": \"2945500000000000000000\",\n\t\"2abce1808940cd4ef5b5e05285f82df7a9ab5e03\": \"9800000000000000000000\",\n\t\"0bb0c12682a2f15c9b5741b2385cbe41f034068e\": \"1500000000000000000000\",\n\t\"08b7bdcf944d5570838be70460243a8694485858\": \"2000000000000000000000\",\n\t\"c452e0e4b3d6ae06b836f032ca09db409ddfe0fb\": \"800000000000000000000\",\n\t\"48d4f2468f963fd79a006198bb67895d2d5aa4d3\": \"1400000000000000000000\",\n\t\"f9e7222faaf0f4da40c1c4a40630373a09bed7b6\": \"2865000000000000000000\",\n\t\"bf59aee281fa43fe97194351a9857e01a3b897b2\": \"600000000000000000000\",\n\t\"da0d4b7ef91fb55ad265f251142067f10376ced6\": \"20000000000000000000000\",\n\t\"2c6f5c124cc789f8bb398e3f889751bc4b602d9e\": \"24928000000000000000\",\n\t\"c85ef27d820403805fc9ed259fff64acb8d6346a\": \"2000000000000000000000\",\n\t\"9aa8308f42910e5ade09c1a5e282d6d91710bdbf\": \"200000000000000000000\",\n\t\"9e4cec353ac3e381835e3c0991f8faa5b7d0a8e6\": \"9999917000000000000000\",\n\t\"137cf341e8516c815814ebcd73e6569af14cf7bc\": \"1000000000000000000000\",\n\t\"889da662eb4a0a2a069d2bc24b05b4ee2e92c41b\": \"1663417000000000000000\",\n\t\"0998d8273115b56af43c505e087aff0676ed3659\": \"3999984000000000000000\",\n\t\"3e4d13c55a84e46ed7e9cb90fd355e8ad991e38f\": \"1000000000000000000000\",\n\t\"abc068b4979b0ea64a62d3b7aa897d73810dc533\": \"1970000000000000000000\",\n\t\"d8fdf546674738c984d8fab857880b3e4280c09e\": \"20000000000000000000\",\n\t\"aff161740a6d909fe99c59a9b77945c91cc91448\": \"60000000000000000000\",\n\t\"92ad1b3d75fba67d54663da9fc848a8ade10fa67\": \"2000000000000000000000\",\n\t\"819eb4990b5aba5547093da12b6b3c1093df6d46\": \"1000000000000000000000\",\n\t\"643d9aeed4b180947ed2b9207cce4c3ddc55e1f7\": \"200000000000000000000\",\n\t\"ab3e62e77a8b225e411592b1af300752fe412463\": \"9850000000000000000000\",\n\t\"650b425555e4e4c51718146836a2c1ee77a5b421\": \"20000000000000000000000\",\n\t\"ba8e46d69d2e2343d86c60d82cf42c2041a0c1c2\": \"100000000000000000000\",\n\t\"f9570e924c95debb7061369792cf2efec2a82d5e\": \"20000000000000000000\",\n\t\"4dc4bf5e7589c47b28378d7503cf96488061dbbd\": \"1760000000000000000000\",\n\t\"3d7ea5bf03528100ed8af8aed2653e921b6e6725\": \"1000000000000000000000\",\n\t\"a02bde6461686e19ac650c970d0672e76dcb4fc2\": \"8865000000000000000000\",\n\t\"b0e760bb07c081777345e0578e8bc898226d4e3b\": \"2000000000000000000000\",\n\t\"979cbf21dfec8ace3f1c196d82df962534df394f\": \"2832860000000000000000\",\n\t\"9f8245c3ab7d173164861cd3991b94f1ba40a93a\": \"2860000000000000000000\",\n\t\"c25cf826550c8eaf10af2234fef904ddb95213be\": \"1000000000000000000000\",\n\t\"967bfaf76243cdb9403c67d2ceefdee90a3feb73\": \"970582000000000000000\",\n\t\"0b2113504534642a1daf102eee10b9ebde76e261\": \"2733351000000000000000\",\n\t\"74bc4a5e2045f4ff8db184cf3a9b0c065ad807d2\": \"2000000000000000000000\",\n\t\"f1da40736f99d5df3b068a5d745fafc6463fc9b1\": \"121546000000000000000\",\n\t\"0fa6c7b0973d0bae2940540e247d3627e37ca347\": \"1000000000000000000000\",\n\t\"72b05962fb2ad589d65ad16a22559eba1458f387\": \"133700000000000000000\",\n\t\"6ceae3733d8fa43d6cd80c1a96e8eb93109c83b7\": \"298000000000000000000\",\n\t\"28eaea78cd4d95faecfb68836eafe83520f3bbb7\": \"200000000000000000000\",\n\t\"f49f6f9baabc018c8f8e119e0115f491fc92a8a4\": \"10000000000000000000000\",\n\t\"833316985d47742bfed410604a91953c05fb12b0\": \"2000000000000000000000\",\n\t\"ead75016e3a0815072b6b108bcc1b799acf0383e\": \"2000000000000000000000\",\n\t\"0032403587947b9f15622a68d104d54d33dbd1cd\": \"77500000000000000000\",\n\t\"8f64b9c1246d857831643107d355b5c75fef5d4f\": \"1999944000000000000000\",\n\t\"15dcafcc2bace7b55b54c01a1c514626bf61ebd8\": \"9400000000000000000000\",\n\t\"6886ada7bbb0617bda842191c68c922ea3a8ac82\": \"1160000000000000000000\",\n\t\"f736dc96760012388fe88b66c06efe57e0d7cf0a\": \"2100000000000000000000\",\n\t\"0b288a5a8b75f3dc4191eb0457e1c83dbd204d25\": \"4853000000000000000000\",\n\t\"56b6c23dd2ec90b4728f3bb2e764c3c50c85f144\": \"1000000000000000000000\",\n\t\"6310b020fd98044957995092090f17f04e52cdfd\": \"1580000000000000000000\",\n\t\"b0baeb30e313776c4c6d247402ba4167afcda1cc\": \"1970000000000000000000\",\n\t\"7641f7d26a86cddb2be13081810e01c9c83c4b20\": \"13370000000000000000\",\n\t\"07a8dadec142571a7d53a4297051786d072cba55\": \"22729000000000000000\",\n\t\"cc73dd356b4979b579b401d4cc7a31a268ddce5a\": \"500000000000000000000\",\n\t\"adf1acfe99bc8c14b304c8d905ba27657b8a7bc4\": \"20000000000000000000000\",\n\t\"72dabb5b6eed9e99be915888f6568056381608f8\": \"208433000000000000000\",\n\t\"9de20ae76aa08263b205d5142461961e2408d266\": \"252000000000000000000\",\n\t\"9d4ff989b7bed9ab109d10c8c7e55f02d76734ad\": \"1000000000000000000000\",\n\t\"e58dd23238ee6ea7c2138d385df500c325f376be\": \"1820000000000000000000\",\n\t\"4bd6dd0cff23400e1730ba7b894504577d14e74a\": \"206028000000000000000000\",\n\t\"35147430c3106500e79fa2f502462e94703c23b1\": \"1999944000000000000000\",\n\t\"c0ae14d724832e2fce2778de7f7b8daf7b12a93e\": \"20000000000000000000\",\n\t\"b57413060af3f14eb479065f1e9d19b3757ae8cc\": \"40000000000000000000\",\n\t\"7d04d2edc058a1afc761d9c99ae4fc5c85d4c8a6\": \"314807840000000000000000\",\n\t\"1c94d636e684eb155895ce6db4a2588fba1d001b\": \"2000000000000000000000\",\n\t\"c721b2a7aa44c21298e85039d00e2e460e670b9c\": \"140800000000000000000\",\n\t\"2d89a8006a4f137a20dc2bec46fe2eb312ea9654\": \"200000000000000000000\",\n\t\"646afba71d849e80c0ed59cac519b278e7f7abe4\": \"1000000000000000000000\",\n\t\"71f2cdd1b046e2da2fbb5a26723422b8325e25a3\": \"99960000000000000000\",\n\t\"2c9fa72c95f37d08e9a36009e7a4b07f29bad41a\": \"16100000000000000000\",\n\t\"848fbd29d67cf4a013cb02a4b176ef244e9ee68d\": \"20116000000000000000\",\n\t\"68190ca885da4231874c1cfb42b1580a21737f38\": \"3820000000000000000000\",\n\t\"9adf458bff3599eee1a26398853c575bc38c6313\": \"280000000000000000000\",\n\t\"b72220ade364d0369f2d2da783ca474d7b9b34ce\": \"499986000000000000000\",\n\t\"38e2af73393ea98a1d993a74df5cd754b98d529a\": \"1790000000000000000000\",\n\t\"4d38d90f83f4515c03cc78326a154d358bd882b7\": \"185000000000000000000\",\n\t\"aa8eb0823b07b0e6d20aadda0e95cf3835be192e\": \"32000000000000000000\",\n\t\"008639dabbe3aeac887b5dc0e43e13bcd287d76c\": \"310200000000000000000\",\n\t\"fa3a0c4b903f6ea52ea7ab7b8863b6a616ad6650\": \"20000000000000000000\",\n\t\"e26bf322774e18288769d67e3107deb7447707b8\": \"2000000000000000000000\",\n\t\"e061a4f2fc77b296d19ada238e49a5cb8ecbfa70\": \"4000000000000000000000\",\n\t\"b320834836d1dbfda9e7a3184d1ad1fd4320ccc0\": \"1000000000000000000000\",\n\t\"0ed3bb3a4eb554cfca97947d575507cdfd6d21d8\": \"547863000000000000000\",\n\t\"32fa0e86cd087dd68d693190f32d93310909ed53\": \"4000000000000000000000\",\n\t\"5b759fa110a31c88469f54d44ba303d57dd3e10f\": \"1683760000000000000000\",\n\t\"136f4907cab41e27084b9845069ff2fd0c9ade79\": \"4000000000000000000000\",\n\t\"3d89e505cb46e211a53f32f167a877bec87f4b0a\": \"25019000000000000000\",\n\t\"57a852fdb9b1405bf53ccf9508f83299d3206c52\": \"2000000000000000000000\",\n\t\"747abc9649056d3926044d28c3ad09ed17b67d70\": \"5000057000000000000000\",\n\t\"5c29f9e9a523c1f8669448b55c48cbd47c25e610\": \"964320000000000000000\",\n\t\"30a9da72574c51e7ee0904ba1f73a6b7b83b9b9d\": \"20200000000000000000\",\n\t\"220e2b92c0f6c902b513d9f1e6fab6a8b0def3d7\": \"800000000000000000000\",\n\t\"5af7c072b2c5acd71c76addcce535cf7f8f93585\": \"20000000000000000000\",\n\t\"81556db27349ab8b27004944ed50a46e941a0f5f\": \"3998000000000000000000\",\n\t\"987618c85656207c7bac1507c0ffefa2fb64b092\": \"64419000000000000000\",\n\t\"e0f372347c96b55f7d4306034beb83266fd90966\": \"400000000000000000000\",\n\t\"71784c105117c1f68935797fe159abc74e43d16a\": \"2001600000000000000000\",\n\t\"9284f96ddb47b5186ee558aa31324df5361c0f73\": \"16000000000000000000000\",\n\t\"a60c1209754f5d87b181da4f0817a81859ef9fd8\": \"50000000000000000000\",\n\t\"5afda9405c8e9736514574da928de67456010918\": \"6008500000000000000000\",\n\t\"6978696d5150a9a263513f8f74c696f8b1397cab\": \"6640000000000000000000\",\n\t\"a9ad1926bc66bdb331588ea8193788534d982c98\": \"30000000000000000000000\",\n\t\"e3f80b40fb83fb97bb0d5230af4f6ed59b1c7cc8\": \"1337000000000000000000\",\n\t\"e207578e1f4ddb8ff6d5867b39582d71b9812ac5\": \"3880000000000000000000\",\n\t\"86883d54cd3915e549095530f9ab1805e8c5432d\": \"4000000000000000000000\",\n\t\"6974c8a414ceaefd3c2e4dfdbef430568d9a960b\": \"334250000000000000000\",\n\t\"532d32b00f305bcc24dcef56817d622f34fb2c24\": \"1800000000000000000000\",\n\t\"761f8a3a2af0a8bdbe1da009321fb29764eb62a1\": \"10000000000000000000000\",\n\t\"4677b04e0343a32131fd6abb39b1b6156bba3d5b\": \"200000000000000000000\",\n\t\"ef69781f32ffce33346f2c9ae3f08493f3e82f89\": \"18200000000000000000\",\n\t\"e3b3d2c9bf570be6a2f72adca1862c310936a43c\": \"100100000000000000000\",\n\t\"d19caf39bb377fdf2cf19bd4fb52591c2631a63c\": \"1000000000000000000000\",\n\t\"5d68324bcb776d3ffd0bf9fea91d9f037fd6ab0f\": \"2000000000000000000000\",\n\t\"1c99fe9bb6c6d1066d912099547fd1f4809eacd9\": \"2000000000000000000000\",\n\t\"bbfe0a830cace87b7293993a7e9496ce64f8e394\": \"6000000000000000000000\",\n\t\"26c0054b700d3a7c2dcbe275689d4f4cad16a335\": \"2000000000000000000000\",\n\t\"7d7e7c61779adb7706c94d32409a2bb4e994bf60\": \"865992000000000000000\",\n\t\"d037d215d11d1df3d54fbd321cd295c5465e273b\": \"1400000000000000000000\",\n\t\"08166f02313feae18bb044e7877c808b55b5bf58\": \"1970000000000000000000\",\n\t\"781b1501647a2e06c0ed43ff197fccec35e1700b\": \"3000000000000000000000\",\n\t\"74316adf25378c10f576d5b41a6f47fa98fce33d\": \"336082000000000000000\",\n\t\"44e2fdc679e6bee01e93ef4a3ab1bcce012abc7c\": \"410231000000000000000\",\n\t\"178eaf6b8554c45dfde16b78ce0c157f2ee31351\": \"320000000000000000000\",\n\t\"cf923a5d8fbc3d01aa079d1cfe4b43ce071b1611\": \"2000000000000000000000\",\n\t\"0c28847e4f09dfce5f9b25af7c4e530f59c880fe\": \"1000000000000000000000\",\n\t\"54ce88275956def5f9458e3b95decacd484021a0\": \"2000000000000000000000\",\n\t\"9d4213339a01551861764c87a93ce8f85f87959a\": \"200000000000000000000\",\n\t\"e559b5fd337b9c5572a9bf9e0f2521f7d446dbe4\": \"200000000000000000000\",\n\t\"dcb03bfa6c1131234e56b7ea7c4f721487546b7a\": \"1337000000000000000000\",\n\t\"db6ff71b3db0928f839e05a7323bfb57d29c87aa\": \"910000000000000000000\",\n\t\"eb7c202b462b7cc5855d7484755f6e26ef43a115\": \"2000000000000000000000\",\n\t\"323486ca64b375474fb2b759a9e7a135859bd9f6\": \"400000000000000000000\",\n\t\"2c1df8a76f48f6b54bcf9caf56f0ee1cf57ab33d\": \"10118000000000000000000\",\n\t\"2cd87866568dd81ad47d9d3ad0846e5a65507373\": \"400000000000000000000\",\n\t\"8566610901aace38b83244f3a9c831306a67b9dc\": \"3256000000000000000000\",\n\t\"1c257ad4a55105ea3b58ed374b198da266c85f63\": \"10000000000000000000000\",\n\t\"cf4f1138f1bd6bf5b6d485cce4c1017fcb85f07d\": \"882038000000000000000\",\n\t\"c934becaf71f225f8b4a4bf7b197f4ac9630345c\": \"20000000000000000000000\",\n\t\"1e2bf4ba8e5ef18d37de6d6ad636c4cae489d0cc\": \"2000000000000000000000\",\n\t\"9d78a975b7db5e4d8e28845cfbe7e31401be0dd9\": \"1340000000000000000000\",\n\t\"16aa52cb0b554723e7060f21f327b0a68315fea3\": \"250000000000000000000\",\n\t\"97e28973b860c567402800fbb63ce39a048a3d79\": \"97000000000000000000\",\n\t\"4ac5acad000b8877214cb1ae00eac9a37d59a0fd\": \"4000000000000000000000\",\n\t\"01226e0ad8d62277b162621c62c928e96e0b9a8c\": \"2000000000000000000000\",\n\t\"479abf2da4d58716fd973a0d13a75f530150260a\": \"20000000000000000000\",\n\t\"31d81d526c195e3f10b5c6db52b5e59afbe0a995\": \"264000000000000000000\",\n\t\"749087ac0f5a97c6fad021538bf1d6cda18e0daa\": \"1000000000000000000000\",\n\t\"1565af837ef3b0bd4e2b23568d5023cd34b16498\": \"393284000000000000000\",\n\t\"997d6592a31589acc31b9901fbeb3cc3d65b3215\": \"2000000000000000000000\",\n\t\"9d207517422cc0d60de7c237097a4d4fce20940c\": \"500000000000000000000\",\n\t\"24b8b446debd1947955dd084f2c544933346d3ad\": \"4324135000000000000000\",\n\t\"107a03cf0842dbdeb0618fb587ca69189ec92ff5\": \"1970000000000000000000\",\n\t\"7f603aec1759ea5f07c7f8d41a1428fbbaf9e762\": \"20000000000000000000\",\n\t\"53a244672895480f4a2b1cdf7da5e5a242ec4dbc\": \"1000000000000000000000\",\n\t\"7db4c7d5b797e9296e6382f203693db409449d62\": \"400000000000000000000\",\n\t\"2ae82dab92a66389eea1abb901d1d57f5a7cca0b\": \"2000000000000000000000\",\n\t\"16bc40215abbd9ae5d280b95b8010b4514ff1292\": \"200000000000000000000\",\n\t\"bba4fac3c42039d828e742cde0efffe774941b39\": \"1999946000000000000000\",\n\t\"5431ca427e6165a644bae326bd09750a178c650d\": \"2000000000000000000000\",\n\t\"dcf33965531380163168fc11f67e89c6f1bc178a\": \"334885000000000000000\",\n\t\"65fd02d704a12a4dace9471b0645f962a89671c8\": \"28615000000000000000\",\n\t\"135d1719bf03e3f866312479fe338118cd387e70\": \"2000000000000000000000\",\n\t\"f3159866c2bc86bba40f9d73bb99f1eee57bb9d7\": \"1000000000000000000000\",\n\t\"e3a4621b66004588e31206f718cb00a319889cf0\": \"2000000000000000000000\",\n\t\"abcdbc8f1dd13af578d4a4774a62182bedf9f9be\": \"36660000000000000000\",\n\t\"9fbe066de57236dc830725d32a02aef9246c6c5e\": \"2000000000000000000000\",\n\t\"81cfad760913d3c322fcc77b49c2ae3907e74f6e\": \"197000000000000000000\",\n\t\"0ab59d390702c9c059db148eb4f3fcfa7d04c7e7\": \"18200000000000000000\",\n\t\"2c2db28c3309375eea3c6d72cd6d0eec145afcc0\": \"2000000000000000000000\",\n\t\"08306de51981e7aca1856859b7c778696a6b69f9\": \"3200000000000000000000\",\n\t\"f814799f6ddf4dcb29c7ee870e75f9cc2d35326d\": \"1000000000000000000000\",\n\t\"ee867d20916bd2e9c9ece08aa04385db667c912e\": \"50000000000000000000000\",\n\t\"97a86f01ce3f7cfd4441330e1c9b19e1b10606ef\": \"2000000000000000000000\",\n\t\"4c759813ad1386bed27ffae9e4815e3630cca312\": \"2000000000000000000000\",\n\t\"8f226096c184ebb40105e08dac4d22e1c2d54d30\": \"306552000000000000000\",\n\t\"13acada8980affc7504921be84eb4944c8fbb2bd\": \"1601600000000000000000\",\n\t\"122dcfd81addb97d1a0e4925c4b549806e9f3beb\": \"1514954000000000000000\",\n\t\"232f525d55859b7d4e608d20487faadb00293135\": \"4000000000000000000000\",\n\t\"6f7ac681d45e418fce8b3a1db5bc3be6f06c9849\": \"2000000000000000000000\",\n\t\"0c8692eeff2a53d6d1688ed56a9ddbbd68dabba1\": \"2000000000000000000000\",\n\t\"6a6337833f8f6a6bf10ca7ec21aa810ed444f4cb\": \"1028200000000000000000\",\n\t\"209377b6ad3fe101c9685b3576545c6b1684e73c\": \"1820000000000000000000\",\n\t\"560fc08d079f047ed8d7df75551aa53501f57013\": \"7600000000000000000000\",\n\t\"8e78f351457d016f4ad2755ec7424e5c21ba6d51\": \"146000000000000000000\",\n\t\"2ce11a92fad024ff2b3e87e3b542e6c60dcbd996\": \"4000000000000000000000\",\n\t\"8ab839aeaf2ad37cb78bacbbb633bcc5c099dc46\": \"2000000000000000000000\",\n\t\"673144f0ec142e770f4834fee0ee311832f3087b\": \"500038000000000000000\",\n\t\"ba8a63f3f40de4a88388bc50212fea8e064fbb86\": \"2000000000000000000000\",\n\t\"ee899b02cbcb3939cd61de1342d50482abb68532\": \"1760000000000000000000\",\n\t\"c2d9eedbc9019263d9d16cc5ae072d1d3dd9db03\": \"20000000000000000000000\",\n\t\"355c0c39f5d5700b41d375b3f17851dcd52401f9\": \"3979000000000000000000\",\n\t\"8179c80970182cc5b7d82a4df06ea94db63a25f3\": \"727432000000000000000\",\n\t\"b388b5dfecd2c5e4b596577c642556dbfe277855\": \"20000000000000000000\",\n\t\"a9e28337e6357193d9e2cb236b01be44b81427df\": \"2200000000000000000000\",\n\t\"04ba4bb87140022c214a6fac42db5a16dd954045\": \"1000000000000000000000\",\n\t\"67c926093e9b8927933810d98222d62e2b8206bb\": \"1910000000000000000000\",\n\t\"ed7346766e1a676d0d06ec821867a276a083bf31\": \"4012890000000000000000\",\n\t\"92558226b384626cad48e09d966bf1395ee7ea5d\": \"334250000000000000000\",\n\t\"bdf693f833c3fe471753184788eb4bfe4adc3f96\": \"1970000000000000000000\",\n\t\"4474299d0ee090dc90789a1486489c3d0d645e6d\": \"1000000000000000000000\",\n\t\"b1178ad47383c31c8134a1941cbcd474d06244e2\": \"1000000000000000000000\",\n\t\"979d681c617da16f21bcaca101ed16ed015ab696\": \"1880000000000000000000\",\n\t\"6b20c080606a79c73bd8e75b11717a4e8db3f1c3\": \"299720000000000000000\",\n\t\"b85218f342f8012eda9f274e63ce2152b2dcfdab\": \"3100000000000000000000\",\n\t\"530b61e42f39426d2408d40852b9e34ab5ebebc5\": \"267400000000000000000\",\n\t\"76afc225f4fa307de484552bbe1d9d3f15074c4a\": \"2998800000000000000000\",\n\t\"1e783e522ab7df0acaac9eeed3593039e5ac7579\": \"203435800000000000000000\",\n\t\"0f7bf6373f771a4601762c4dae5fbbf4fedd9cc9\": \"2000000000000000000000\",\n\t\"7a8797690ab77b5470bf7c0c1bba612508e1ac7d\": \"8865000000000000000000\",\n\t\"2a2ab6b74c7af1d9476bb5bcb4524797bedc3552\": \"1000000000000000000000\",\n\t\"523e140dc811b186dee5d6c88bf68e90b8e096fd\": \"2000000000000000000000\",\n\t\"ea8168fbf225e786459ca6bb18d963d26b505309\": \"500000000000000000000\",\n\t\"20ff3ede8cadb5c37b48cb14580fb65e23090a7b\": \"42000000000000000000000\",\n\t\"e482d255ede56b04c3e8df151f56e9ca62aaa8c2\": \"500000000000000000000\",\n\t\"2e0880a34596230720f05ac8f065af8681dcb6c2\": \"100000000000000000000000\",\n\t\"c674f28c8afd073f8b799691b2f0584df942e844\": \"2000000000000000000000\",\n\t\"b646df98b49442746b61525c81a3b04ba3106250\": \"1970000000000000000000\",\n\t\"d55c1c8dfbe1e02cacbca60fdbdd405b09f0b75f\": \"2000000000000000000000\",\n\t\"65ebaed27edb9dcc1957aee5f452ac2105a65c0e\": \"43531987000000000000000\",\n\t\"f079e1b1265f50e8c8a98ec0c7815eb3aeac9eb4\": \"20094000000000000000\",\n\t\"867eba56748a5904350d2ca2a5ce9ca00b670a9b\": \"20000000000000000000000\",\n\t\"51ee0cca3bcb10cd3e983722ced8493d926c0866\": \"999972000000000000000\",\n\t\"88d541c840ce43cefbaf6d19af6b9859b573c145\": \"170000000000000000000\",\n\t\"f851b010f633c40af1a8f06a73ebbaab65077ab5\": \"4400000000000000000000\",\n\t\"e0aa69365555b73f282333d1e30c1bbd072854e8\": \"7000000000000000000000\",\n\t\"c7b1c83e63203f9547263ef6282e7da33b6ed659\": \"18200000000000000000\",\n\t\"af06f5fa6d1214ec43967d1bd4dde74ab814a938\": \"88000000000000000000\",\n\t\"991173601947c2084a62d639527e961512579af9\": \"600000000000000000000\",\n\t\"7a381122bada791a7ab1f6037dac80432753baad\": \"10000000000000000000000\",\n\t\"e766f34ff16f3cfcc97321721f43ddf5a38b0cf4\": \"1550000000000000000000\",\n\t\"d785a8f18c38b9bc4ffb9b8fa8c7727bd642ee1c\": \"1000000000000000000000\",\n\t\"aebd4f205de799b64b3564b256d42a711d37ef99\": \"1177100000000000000000\",\n\t\"a2fa17c0fb506ce494008b9557841c3f641b8cae\": \"20000000000000000000\",\n\t\"a8aca748f9d312ec747f8b6578142694c7e9f399\": \"2000000000000000000000\",\n\t\"950c68a40988154d2393fff8da7ccda99614f72c\": \"4597943000000000000000\",\n\t\"075d15e2d33d8b4fa7dba8b9e607f04a261e340b\": \"1910000000000000000000\",\n\t\"3616d448985f5d32aefa8b93a993e094bd854986\": \"205400000000000000000\",\n\t\"4bb9655cfb2a36ea7c637a7b859b4a3154e26ebe\": \"16000000000000000000000\",\n\t\"84949dba559a63bfc845ded06e9f2d9b7f11ef24\": \"2000000000000000000000\",\n\t\"937563d8a80fd5a537b0e66d20a02525d5d88660\": \"2500000000000000000000\",\n\t\"b183ebee4fcb42c220e47774f59d6c54d5e32ab1\": \"1604266000000000000000\",\n\t\"21e5d77320304c201c1e53b261a123d0a1063e81\": \"86972000000000000000\",\n\t\"fa14b566234abee73042c31d21717182cba14aa1\": \"328000000000000000000\",\n\t\"2da617695009cc57d26ad490b32a5dfbeb934e5e\": \"20000000000000000000000\",\n\t\"3326b88de806184454c40b27f309d9dd6dcfb978\": \"17900000000000000000000\",\n\t\"95e6a54b2d5f67a24a4875af75107ca7ea9fd2fa\": \"1337000000000000000000\",\n\t\"8db58e406e202df9bc703c480bd8ed248d52a032\": \"2000000000000000000000\",\n\t\"f777361a3dd8ab62e5f1b9b047568cc0b555704c\": \"1000000000000000000000\",\n\t\"83a93b5ba41bf88720e415790cdc0b67b4af34c4\": \"200000000000000000000\",\n\t\"8a1cc5ac111c49bfcfd848f37dd768aa65c88802\": \"10000000000000000000000\",\n\t\"52214378b54004056a7cc08c891327798ac6b248\": \"15200000000000000000000\",\n\t\"ad80d865b85c34d2e6494b2e7aefea6b9af184db\": \"4000000000000000000000\",\n\t\"e7d6240620f42c5edbb2ede6aec43da4ed9b5757\": \"1000000000000000000000\",\n\t\"d0e35e047646e759f4517093d6408642517f084d\": \"3939507000000000000000\",\n\t\"9340345ca6a3eabdb77363f2586043f29438ce0b\": \"530922000000000000000\",\n\t\"6640ccf053555c130ae2b656647ea6e31637b9ab\": \"1970000000000000000000\",\n\t\"184d86f3466ae6683b19729982e7a7e1a48347b2\": \"10000000000000000000000\",\n\t\"84ec06f24700fe42414cb9897c154c88de2f6132\": \"1337000000000000000000\",\n\t\"d1e5e234a9f44266a4a6241a84d7a1a55ad5a7fe\": \"20000000000000000000000\",\n\t\"e8a9a41740f44f54c3688b53e1ddd42e43c9fe94\": \"4000000000000000000000\",\n\t\"6e3a51db743d334d2fe88224b5fe7c008e80e624\": \"106000000000000000000\",\n\t\"3e94df5313fa520570ef232bc3311d5f622ff183\": \"2000000000000000000000\",\n\t\"8957727e72cf629020f4e05edf799aa7458062d0\": \"2200000000000000000000\",\n\t\"cf5e0eacd1b39d0655f2f77535ef6608eb950ba0\": \"2000000000000000000000\",\n\t\"f4aaa3a6163e3706577b49c0767e948a681e16ee\": \"2000000000000000000000\",\n\t\"97f1fe4c8083e596212a187728dd5cf80a31bec5\": \"20000000000000000000\",\n\t\"57d5fd0e3d3049330ffcdcd020456917657ba2da\": \"1991240000000000000000\",\n\t\"49bdbc7ba5abebb6389e91a3285220d3451bd253\": \"1000000000000000000000\",\n\t\"ae126b382cf257fad7f0bc7d16297e54cc7267da\": \"300000000000000000000\",\n\t\"bbf8616d97724af3def165d0e28cda89b800009a\": \"114063000000000000000\",\n\t\"adb948b1b6fefe207de65e9bbc2de98e605d0b57\": \"2000000000000000000000\",\n\t\"8a217db38bc35f215fd92906be42436fe7e6ed19\": \"6000000000000000000000\",\n\t\"e28b062259e96eeb3c8d4104943f9eb325893cf5\": \"1337000000000000000000\",\n\t\"6a6b18a45a76467e2e5d5a2ef911c3e12929857b\": \"82000000000000000000000\",\n\t\"cb68ae5abe02dcf8cbc5aa719c25814651af8b85\": \"500000000000000000000\",\n\t\"4c7e2e2b77ad0cd6f44acb2861f0fb8b28750ef9\": \"20000000000000000000\",\n\t\"58ba1569650e5bbbb21d35d3e175c0d6b0c651a9\": \"500000000000000000000\",\n\t\"1eb4bf73156a82a0a6822080c6edf49c469af8b9\": \"1910000000000000000000\",\n\t\"4103299671d46763978fa4aa19ee34b1fc952784\": \"200000000000000000000\",\n\t\"e321bb4a946adafdade4571fb15c0043d39ee35f\": \"1575212000000000000000\",\n\t\"893608751d68d046e85802926673cdf2f57f7cb8\": \"19700000000000000000\",\n\t\"70fee08b00c6c2c04a3c625c1ff77caf1c32df01\": \"200000000000000000000\",\n\t\"7b0fea1176d52159333a143c294943da36bbddb4\": \"9380000000000000000000\",\n\t\"d331c823825a9e5263d052d8915d4dcde07a5c37\": \"564000000000000000000\",\n\t\"a45432a6f2ac9d56577b938a37fabac8cc7c461c\": \"1000000000000000000000\",\n\t\"764fc46d428b6dbc228a0f5f55c9508c772eab9f\": \"26000000000000000000000\",\n\t\"1a95a8a8082e4652e4170df9271cb4bb4305f0b2\": \"50000000000000000000\",\n\t\"08c9f1bfb689fdf804d769f82123360215aff93b\": \"1970000000000000000000\",\n\t\"1572cdfab72a01ce968e78f5b5448da29853fbdd\": \"5061500000000000000000\",\n\t\"379c7166849bc24a02d6535e2def13daeef8aa8d\": \"100000000000000000000\",\n\t\"e0a254ac09b9725bebc8e460431dd0732ebcabbf\": \"6000000000000000000000\",\n\t\"3225c1ca5f2a9c88156bb7d9cdc44a326653c214\": \"400000000000000000000\",\n\t\"84686c7bad762c54b667d59f90943cd14d117a26\": \"20000000000000000000\",\n\t\"3d5a8b2b80be8b35d8ecf789b5ed7a0775c5076c\": \"20000000000000000000\",\n\t\"2ccf80e21898125eb4e807cd82e09b9d28592f6e\": \"2000000000000000000000\",\n\t\"dde969aef34ea87ac299b7597e292b4a0155cc8a\": \"298819000000000000000\",\n\t\"19e94e620050aad766b9e1bad931238312d4bf49\": \"2396000000000000000000\",\n\t\"959f57fded6ae37913d900b81e5f48a79322c627\": \"255599000000000000000\",\n\t\"b9b0a3219a3288d9b35b091b14650b8fe23dce2b\": \"14000000000000000000000\",\n\t\"3575c770668a9d179f1ef768c293f80166e2aa3d\": \"474000000000000000000\",\n\t\"58f05b262560503ca761c61890a4035f4c737280\": \"8000000000000000000000\",\n\t\"3286d1bc657a312c8847d93cb3cb7950f2b0c6e3\": \"20000000000000000000000\",\n\t\"1d9e6aaf8019a05f230e5def05af5d889bd4d0f2\": \"133700000000000000000\",\n\t\"a375b4bc24a24e1f797593cc302b2f331063fa5c\": \"200000000000000000000\",\n\t\"108ba7c2895c50e072dc6f964932d50c282d3034\": \"500000000000000000000\",\n\t\"b6b34a263f10c3d2eceb0acc559a7b2ab85ce565\": \"4000000000000000000000\",\n\t\"a4d2b429f1ad5349e31704969edc5f25ee8aca10\": \"10000000000000000000000\",\n\t\"674adb21df4c98c7a347ac4c3c24266757dd7039\": \"2000000000000000000000\",\n\t\"33565ba9da2c03e778ce12294f081dfe81064d24\": \"16000000000000000000000\",\n\t\"4ddda7586b2237b053a7f3289cf460dc57d37a09\": \"10000000000000000000000\",\n\t\"cc4faac00be6628f92ef6b8cb1b1e76aac81fa18\": \"205410000000000000000\",\n\t\"5f99dc8e49e61d57daef606acdd91b4d7007326a\": \"3000000000000000000000\",\n\t\"b8a979352759ba09e35aa5935df175bff678a108\": \"20000000000000000000\",\n\t\"86fff220e59305c09f483860d6f94e96fbe32f57\": \"42900000000000000000\",\n\t\"03e8b084537557e709eae2e1e1a5a6bce1ef8314\": \"20000000000000000000\",\n\t\"dda4ff7de491c687df4574dd1b17ff8f246ba3d1\": \"19600000000000000000000\",\n\t\"2538532936813c91e653284f017c80c3b8f8a36f\": \"2002000000000000000000\",\n\t\"5a82f96cd4b7e2d93d10f3185dc8f43d4b75aa69\": \"1999400000000000000000\",\n\t\"86740a46648e845a5d96461b18091ff57be8a16f\": \"98000000000000000000000\",\n\t\"7e3f63e13129a221ba1ab06326342cd98b5126ae\": \"1597960000000000000000\",\n\t\"1f5f3b34bd134b2781afe5a0424ac5846cdefd11\": \"99000000000000000000\",\n\t\"39936c2719450b9420cc2522cf91db01f227c1c1\": \"500000000000000000000\",\n\t\"967076a877b18ec15a415bb116f06ef32645dba3\": \"2000000000000000000000\",\n\t\"a42908e7fe53980a9abf4044e957a54b70e99cbe\": \"2000000000000000000000\",\n\t\"5eb371c407406c427b3b7de271ad3c1e04269579\": \"3000000000000000000000\",\n\t\"a570223ae3caa851418a9843a1ac55db4824f4fd\": \"200000000000000000000\",\n\t\"764692cccb33405dd0ab0c3379b49caf8e6221ba\": \"20000000000000000000\",\n\t\"a365918bfe3f2627b9f3a86775d8756e0fd8a94b\": \"400000000000000000000\",\n\t\"069ed0ab7aa77de571f16106051d92afe195f2d0\": \"200000000000000000000\",\n\t\"bd432a3916249b4724293af9146e49b8280a7f2a\": \"4000000000000000000000\",\n\t\"61c9dce8b2981cb40e98b0402bc3eb28348f03ac\": \"196910000000000000000\",\n\t\"8f1fcc3c51e252b693bc5b0ec3f63529fe69281e\": \"6000000000000000000000\",\n\t\"55fd08d18064bd202c0ec3d2cce0ce0b9d169c4d\": \"1970000000000000000000\",\n\t\"383a7c899ee18bc214969870bc7482f6d8f3570e\": \"10000000000000000000000\",\n\t\"b14cc8de33d6338236539a489020ce4655a32bc6\": \"8000000000000000000000\",\n\t\"448bf410ad9bbc2fecc4508d87a7fc2e4b8561ad\": \"199955000000000000000\",\n\t\"06f7dc8d1b9462cef6feb13368a7e3974b097f9f\": \"2000000000000000000000\",\n\t\"9c9f89a3910f6a2ae8a91047a17ab788bddec170\": \"10000000000000000000000\",\n\t\"5de598aba344378cab4431555b4f79992dc290c6\": \"1337000000000000000000\",\n\t\"87e6034ecf23f8b5639d5f0ea70a22538a920423\": \"328000000000000000000\",\n\t\"8b27392206b958cd375d7ef8af2cf8ef0598c0bc\": \"1000000000000000000000\",\n\t\"49136fe6e28b7453fcb16b6bbbe9aaacba8337fd\": \"2000000000000000000000\",\n\t\"6982fe8a867e93eb4a0bd051589399f2ec9a5292\": \"2000000000000000000000\",\n\t\"9fd1052a60506bd1a9ef003afd9d033c267d8e99\": \"1000000000000000000000\",\n\t\"d38fa2c4cc147ad06ad5a2f75579281f22a7cc1f\": \"20000000000000000000000\",\n\t\"6f794dbdf623daa6e0d00774ad6962737c921ea4\": \"2000000000000000000000\",\n\t\"e96b184e1f0f54924ac874f60bbf44707446b72b\": \"2910840000000000000000\",\n\t\"b5ba29917c78a1d9e5c5c713666c1e411d7f693a\": \"3100000000000000000000\",\n\t\"81d619ff5726f2405f12904c72eb1e24a0aaee4f\": \"20000000000000000000000\",\n\t\"b02fa29387ec12e37f6922ac4ce98c5b09e0b00f\": \"2000000000000000000000\",\n\t\"b7230d1d1ff2aca366963914a79df9f7c5ea2c98\": \"8000000000000000000000\",\n\t\"7b4007c45e5a573fdbb6f8bd746bf94ad04a3c26\": \"15202564000000000000000\",\n\t\"8d9a0c70d2262042df1017d6c303132024772712\": \"2000000000000000000000\",\n\t\"323aad41df4b6fc8fece8c93958aa901fa680843\": \"970000000000000000000\",\n\t\"db04fad9c49f9e880beb8fcf1d3a3890e4b3846f\": \"1242482000000000000000\",\n\t\"27824666d278d70423f03dfe1dc7a3f02f43e2b5\": \"1000070000000000000000\",\n\t\"e04920dc6ecc1d6ecc084f88aa0af5db97bf893a\": \"182000000000000000000\",\n\t\"b0c1b177a220e41f7c74d07cde8569c21c75c2f9\": \"5600000000000000000000\",\n\t\"7864dc999fe4f8e003c0f43decc39aae1522dc0f\": \"94400000000000000000\",\n\t\"c75c37ce2da06bbc40081159c6ba0f976e3993b1\": \"1078640000000000000000\",\n\t\"179a825e0f1f6e985309668465cffed436f6aea9\": \"20000000000000000000\",\n\t\"2c6b699d9ead349f067f45711a074a641db6a897\": \"20000000000000000000\",\n\t\"068ce8bd6e902a45cb83b51541b40f39c4469712\": \"5240000000000000000000\",\n\t\"767ac690791c2e23451089fe6c7083fe55deb62b\": \"820000000000000000000\",\n\t\"b34f04b8db65bba9c26efc4ce6efc50481f3d65d\": \"20000000000000000000000\",\n\t\"29aef48de8c9fbad4b9e4ca970797a5533eb722d\": \"10000000000000000000000\",\n\t\"0a0ecda6636f7716ef1973614687fd89a820a706\": \"394000000000000000000\",\n\t\"b32825d5f3db249ef4e85cc4f33153958976e8bc\": \"501375000000000000000\",\n\t\"7ef16fd8d15b378a0fba306b8d03dd98fc92619f\": \"700000000000000000000\",\n\t\"b58b52865ea55d8036f2fab26098b352ca837e18\": \"18200000000000000000\",\n\t\"9b658fb361e046d4fcaa8aef6d02a99111223625\": \"2000000000000000000000\",\n\t\"b2a498f03bd7178bd8a789a00f5237af79a3e3f8\": \"19400000000000000000000\",\n\t\"cb48fe8265d9af55eb7006bc335645b0a3a183be\": \"3000000000000000000000\",\n\t\"3cf9a1d465e78b7039e3694478e2627b36fcd141\": \"1372000000000000000000\",\n\t\"5db84400570069a9573cab04b4e6b69535e202b8\": \"9700000000000000000000\",\n\t\"214c89c5bd8e7d22bc574bb35e48950211c6f776\": \"18903000000000000000\",\n\t\"53396f4a26c2b4604496306c5442e7fcba272e36\": \"20055000000000000000000\",\n\t\"720994dbe56a3a95929774e20e1fe525cf3704e4\": \"8000000000000000000000\",\n\t\"3571cf7ad304ecaee595792f4bbfa484418549d6\": \"5825500000000000000000\",\n\t\"6042c644bae2b96f25f94d31f678c90dc96690db\": \"2000000000000000000000\",\n\t\"2e24b597873bb141bdb237ea8a5ab747799af02d\": \"20000000000000000000000\",\n\t\"08c802f87758349fa03e6bc2e2fd0791197eea9a\": \"2000000000000000000000\",\n\t\"297a88921b5fca10e5bb9ded60025437ae221694\": \"200000000000000000000\",\n\t\"aee49d68adedb081fd43705a5f78c778fb90de48\": \"20000000000000000000\",\n\t\"4cee901b4ac8b156c5e2f8a6f1bef572a7dceb7e\": \"1000000000000000000000\",\n\t\"dfaf31e622c03d9e18a0ddb8be60fbe3e661be0a\": \"9999800000000000000000\",\n\t\"00aa5381b2138ebeffc191d5d8c391753b7098d2\": \"990049000000000000000\",\n\t\"5b4c0c60f10ed2894bdb42d9dd1d210587810a0d\": \"500000000000000000000\",\n\t\"c44f4ab5bc60397c737eb0683391b633f83c48fa\": \"1000000000000000000000\",\n\t\"50bef2756248f9a7a380f91b051ba3be28a649ed\": \"1999884000000000000000\",\n\t\"1bd909ac0d4a1102ec98dcf2cca96a0adcd7a951\": \"20055000000000000000\",\n\t\"9ec03e02e587b7769def538413e97f7e55be71d8\": \"19700000000000000000000\",\n\t\"9874803fe1f3a0365e7922b14270eaeb032cc1b5\": \"1124500000000000000000\",\n\t\"4e2310191ead8d3bc6489873a5f0c2ec6b87e1be\": \"1000000000000000000000\",\n\t\"93678a3c57151aeb68efdc43ef4d36cb59a009f3\": \"30060000000000000000\",\n\t\"f483f607a21fcc28100a018c568ffbe140380410\": \"1000000000000000000000\",\n\t\"2a91a9fed41b7d0e5cd2d83158d3e8a41a9a2d71\": \"1940000000000000000000\",\n\t\"240e559e274aaef0c258998c979f671d1173b88b\": \"4000000000000000000000\",\n\t\"108a2b7c336f784779d8b54d02a8d31d9a139c0a\": \"10000000000000000000000\",\n\t\"9c98fdf1fdcd8ba8f4c5b04c3ae8587efdf0f6e6\": \"6000000000000000000000\",\n\t\"194ff44aefc17bd20efd7a204c47d1620c86db5d\": \"2999400000000000000000\",\n\t\"1f8116bd0af5570eaf0c56c49c7ab5e37a580458\": \"2000000000000000000000\",\n\t\"d79835e404fb86bf845fba090d6ba25e0c8866a6\": \"2400000000000000000000\",\n\t\"a8e7201ff619faffc332e6ad37ed41e301bf014a\": \"600000000000000000000\",\n\t\"286906b6bd4972e3c71655e04baf36260c7cb153\": \"340000000000000000000\",\n\t\"db4bc83b0e6baadb1156c5cf06e0f721808c52c7\": \"880000000000000000000\",\n\t\"a158148a2e0f3e92dc2ce38febc20107e3253c96\": \"2000000000000000000000\",\n\t\"9f6a322a6d469981426ae844865d7ee0bb15c7b3\": \"50003000000000000000\",\n\t\"32f29e8727a74c6b4301e3ffff0687c1b870dae9\": \"1000000000000000000000\",\n\t\"19918aa09e7d494e98ffa5db50350892f7156ac6\": \"10000000000000000000000\",\n\t\"5a5f8508da0ebebb90be9033bd4d9e274105ae00\": \"6685000000000000000000\",\n\t\"6fc25e7e00ca4f60a9fe6f28d1fde3542e2d1079\": \"792000000000000000000\",\n\t\"72094f3951ffc9771dced23ada080bcaf9c7cca7\": \"6000000000000000000000\",\n\t\"43f7e86e381ec51ec4906d1476cba97a3db584e4\": \"1000000000000000000000\",\n\t\"05696b73916bd3033e05521e3211dfec026e98e4\": \"2000000000000000000000\",\n\t\"5e7f70378775589fc66a81d3f653e954f55560eb\": \"2434000000000000000000\",\n\t\"895613236f3584216ad75c5d3e07e3fa6863a778\": \"2000000000000000000000\",\n\t\"4eb1454b573805c8aca37edec7149a41f61202f4\": \"300000000000000000000\",\n\t\"d99999a2490d9494a530cae4daf38554f4dd633e\": \"120000000000000000000\",\n\t\"1704cefcfb1331ec7a78388b29393e85c1af7916\": \"400000000000000000000\",\n\t\"ac4acfc36ed6094a27e118ecc911cd473e8fb91f\": \"1799800000000000000000\",\n\t\"a975b077fcb4cc8efcbf838459b6fa243a4159d6\": \"40000000000000000000\",\n\t\"9c405cf697956138065e11c5f7559e67245bd1a5\": \"200000000000000000000\",\n\t\"cafde855864c2598da3cafc05ad98df2898e8048\": \"14179272000000000000000\",\n\t\"8ef711e43a13918f1303e81d0ea78c9eefd67eb2\": \"4000000000000000000000\",\n\t\"0b14891999a65c9ef73308efe3100ca1b20e8192\": \"800000000000000000000\",\n\t\"47cf9cdaf92fc999cc5efbb7203c61e4f1cdd4c3\": \"131400000000000000000\",\n\t\"04ba8a3f03f08b895095994dda619edaacee3e7a\": \"2000000000000000000000\",\n\t\"02b6d65cb00b7b36e1fb5ed3632c4cb20a894130\": \"20000000000000000000000\",\n\t\"f99aee444b5783c093cfffd1c4632cf93c6f050c\": \"400000000000000000000\",\n\t\"2541314a0b408e95a694444977712a50713591ab\": \"1634706000000000000000\",\n\t\"3096dca34108085bcf04ae72b94574a13e1a3e1d\": \"200000000000000000000\",\n\t\"56df05bad46c3f00ae476ecf017bb8c877383ff1\": \"197248000000000000000\",\n\t\"6d59b21cd0e2748804d9abe064eac2bef0c95f27\": \"2000000000000000000000\",\n\t\"b29f5b7c1930d9f97a115e067066f0b54db44b3b\": \"1000000000000000000000\",\n\t\"888c16144933197cac26504dd76e06fd6600c789\": \"100000000000000000000\",\n\t\"dfe3c52a92c30396a4e33a50170dc900fcf8c9cf\": \"50000000000000000000\",\n\t\"f76f69cee4faa0a63b30ae1e7881f4f715657010\": \"200000000000000000000\",\n\t\"ee0007b0960d00908a94432a737557876aac7c31\": \"53053000000000000000\",\n\t\"effc15e487b1beda0a8d1325bdb4172240dc540a\": \"64940000000000000000\",\n\t\"40ab0a3e83d0c8ac9366910520eab1772bac3b1a\": \"976600000000000000000\",\n\t\"1895a0eb4a4372722fcbc5afe6936f289c88a419\": \"910000000000000000000\",\n\t\"81efe296ae76c860d1c5fbd33d47e8ce9996d157\": \"1000000000000000000000\",\n\t\"9ddd355e634ee9927e4b7f6c97e7bf3a2f1e687a\": \"50000000000000000000\",\n\t\"f2b4ab2c9427a9015ef6eefff5edb60139b719d1\": \"716800000000000000000\",\n\t\"765be2e12f629e6349b97d21b62a17b7c830edab\": \"6000000000000000000000\",\n\t\"ff61c9c1b7a3d8b53bba20b34466544b7b216644\": \"2000000000000000000000\",\n\t\"36a08fd6fd1ac17ce15ed57eefb12a2be28188bf\": \"1337000000000000000000\",\n\t\"17049311101d817efb1d65910f663662a699c98c\": \"1999800000000000000000\",\n\t\"30511832918d8034a7bee72ef2bfee440ecbbcf6\": \"16100000000000000000000\",\n\t\"d27c234ff7accace3d996708f8f9b04970f97d36\": \"1337000000000000000000\",\n\t\"a961171f5342b173dd70e7bfe5b5ca238b13bcdd\": \"3397053000000000000000\",\n\t\"30bf61b2d877fe10635126326fa189e4b0b1c3b0\": \"1027580000000000000000\",\n\t\"4bb6d86b8314c22d8d37ea516d0019f156aae12d\": \"1000000000000000000000\",\n\t\"5f363e0ab747e02d1b3b66abb69ea53c7baf523a\": \"11640000000000000000000\",\n\t\"283e11203749b1fa4f32febb71e49d135919382a\": \"1000000000000000000000\",\n\t\"ac5999a89d2dd286d5a80c6dee7e86aad40f9e12\": \"3880000000000000000000\",\n\t\"3f6dd3650ee428dcb7759553b017a96a94286ac9\": \"1337000000000000000000\",\n\t\"b3fc1d6881abfcb8becc0bb021b8b73b7233dd91\": \"50000000000000000000\",\n\t\"f0832a6bb25503eeca435be31b0bf905ca1fcf57\": \"6685000000000000000000\",\n\t\"9d7fda7070bf3ee9bbd9a41f55cad4854ae6c22c\": \"11027380000000000000000\",\n\t\"4b0bd8acfcbc53a6010b40d4d08ddd2d9d69622d\": \"668500000000000000000\",\n\t\"f3b668b3f14d920ebc379092db98031b67b219b3\": \"199955000000000000000\",\n\t\"d91d889164479ce436ece51763e22cda19b22d6b\": \"3365200000000000000000\",\n\t\"ffe28db53c9044b4ecd4053fd1b4b10d7056c688\": \"100000000000000000000\",\n\t\"c77b01a6e911fa988d01a3ab33646beef9c138f3\": \"721400000000000000000\",\n\t\"c0064f1d9474ab915d56906c9fb320a2c7098c9b\": \"358000000000000000000\",\n\t\"4e3edad4864dab64cae4c5417a76774053dc6432\": \"590943000000000000000\",\n\t\"71d2cc6d02578c65f73c575e76ce8fbcfadcf356\": \"72400000000000000000\",\n\t\"9971df60f0ae66dce9e8c84e17149f09f9c52f64\": \"200000000000000000000\",\n\t\"58e661d0ba73d6cf24099a5562b808f7b3673b68\": \"2000000000000000000000\",\n\t\"84b0ee6bb837d3a4c4c5011c3a228c0edab4634a\": \"20000000000000000000\",\n\t\"84375afbf59b3a1d61a1be32d075e0e15a4fbca5\": \"200000000000000000000\",\n\t\"9ae9476bfecd3591964dd325cf8c2a24faed82c1\": \"4000000000000000000000\",\n\t\"6a4c8907b600248057b1e46354b19bdc859c991a\": \"20000000000000000000\",\n\t\"1c045649cd53dc23541f8ed4d341812808d5dd9c\": \"7000000000000000000000\",\n\t\"c5e488cf2b5677933971f64cb8202dd05752a2c0\": \"1000000000000000000000\",\n\t\"eb25481fcd9c221f1ac7e5fd1ecd9307a16215b8\": \"197000000000000000000\",\n\t\"a61887818f914a20e31077290b83715a6b2d6ef9\": \"1880000000000000000000\",\n\t\"679437eacf437878dc293d48a39c87b7421a216c\": \"64528000000000000000\",\n\t\"331a1c26cc6994cdd3c14bece276ffff4b9df77c\": \"18049000000000000000\",\n\t\"75b95696e8ec4510d56868a7c1a735c68b244890\": \"6400000000000000000000\",\n\t\"a77f3ee19e9388bbbb2215c62397b96560132360\": \"200000000000000000000\",\n\t\"bc7afc8477412274fc265df13c054473427d43c6\": \"130034000000000000000\",\n\t\"91050a5cffadedb4bb6eaafbc9e5013428e96c80\": \"1700000000000000000000\",\n\t\"24586ec5451735eeaaeb470dc8736aae752f82e5\": \"17600000000000000000\",\n\t\"51039377eed0c573f986c5e8a95fb99a59e9330f\": \"1970000000000000000000\",\n\t\"fbb161fe875f09290a4b262bc60110848f0d2226\": \"2000000000000000000000\",\n\t\"ed52a2cc0869dc9e9f842bd0957c47a8e9b0c9ff\": \"9550000000000000000000\",\n\t\"bad235d5085dc7b068a67c412677b03e1836884c\": \"2000000000000000000000\",\n\t\"055eac4f1ad3f58f0bd024d68ea60dbe01c6afb3\": \"100000000000000000000\",\n\t\"4058808816fdaa3a5fc98ed47cfae6c18315422e\": \"199800000000000000000\",\n\t\"3540c7bd7a8442d5bee21a2180a1c4edff1649e0\": \"1239295000000000000000\",\n\t\"c5edbbd2ca0357654ad0ea4793f8c5cecd30e254\": \"6000000000000000000000\",\n\t\"b5906b0ae9a28158e8ac550e39da086ee3157623\": \"200000000000000000000\",\n\t\"4d801093c19ca9b8f342e33cc9c77bbd4c8312cf\": \"345005000000000000000\",\n\t\"206482ee6f138a778fe1ad62b180ce856fbb23e6\": \"2000000000000000000000\",\n\t\"c0ed0d4ad10de03435b153a0fc25de3b93f45204\": \"3160000000000000000000\",\n\t\"29e67990e1b6d52e1055ffe049c53195a81542cf\": \"20000000000000000000000\",\n\t\"e6d22209ffd0b87509ade3a8e2ef429879cb89b5\": \"17260000000000000000000\",\n\t\"d6644d40e90bc97fe7dfe7cabd3269fd579ba4b3\": \"159000000000000000000\",\n\t\"ece1290877b583e361a2d41b009346e6274e2538\": \"300000000000000000000\",\n\t\"ab3861226ffec1289187fb84a08ec3ed043264e8\": \"1000000000000000000000\",\n\t\"60e0bdd0a259bb9cb09d3f37e5cd8b9daceabf8a\": \"1370000000000000000000\",\n\t\"28b77585cb3d55a199ab291d3a18c68fe89a848a\": \"1960000000000000000000\",\n\t\"73128173489528012e76b41a5e28c68ba4e3a9d4\": \"1000000000000000000000\",\n\t\"018492488ba1a292342247b31855a55905fef269\": \"140000000000000000000\",\n\t\"0bb54c72fd6610bfa4363397e020384b022b0c49\": \"1337000000000000000000\",\n\t\"520f66a0e2657ff0ac4195f2f064cf2fa4b24250\": \"40000000000000000000\",\n\t\"a1432ed2c6b7777a88e8d46d388e70477f208ca5\": \"7999538000000000000000\",\n\t\"149ba10f0da2725dc704733e87f5a524ca88515e\": \"7880000000000000000000\",\n\t\"b287f7f8d8c3872c1b586bcd7d0aedbf7e732732\": \"20000000000000000000\",\n\t\"c46bbdef76d4ca60d316c07f5d1a780e3b165f7e\": \"2000000000000000000000\",\n\t\"b5a589dd9f4071dbb6fba89b3f5d5dae7d96c163\": \"2000000000000000000000\",\n\t\"d218efb4db981cdd6a797f4bd48c7c26293ceb40\": \"2975000000000000000000\",\n\t\"af87d2371ef378957fbd05ba2f1d66931b01e2b8\": \"700000000000000000000\",\n\t\"86ef6426211949cc37f4c75e7850369d0cf5f479\": \"13399196000000000000000\",\n\t\"fb3a0b0d6b6a718f6fc0292a825dc9247a90a5d0\": \"199950000000000000000\",\n\t\"da16dd5c3d1a2714358fe3752cae53dbab2be98c\": \"19400000000000000000000\",\n\t\"9eb7834e171d41e069a77947fca87622f0ba4e48\": \"100000000000000000000\",\n\t\"e1d91b0954cede221d6f24c7985fc59965fb98b8\": \"2000000000000000000000\",\n\t\"85d0d88754ac84b8b21ba93dd2bfec72626faba8\": \"1000000000000000000000\",\n\t\"695b4cce085856d9e1f9ff3e79942023359e5fbc\": \"5000000000000000000000\",\n\t\"9156d18029350e470408f15f1aa3be9f040a67c6\": \"1000000000000000000000\",\n\t\"a9d64b4f3bb7850722b58b478ba691375e224e42\": \"6000000000000000000000\",\n\t\"17e4a0e52bac3ee44efe0954e753d4b85d644e05\": \"2000000000000000000000\",\n\t\"b8a79c84945e47a9c3438683d6b5842cff7684b1\": \"2000000000000000000000\",\n\t\"cfac2e1bf33205b05533691a02267ee19cd81836\": \"1000000000000000000000\",\n\t\"6b992521ec852370848ad697cc2df64e63cc06ff\": \"1000000000000000000000\",\n\t\"60af0ee118443c9b37d2fead77f5e521debe1573\": \"1910000000000000000000\",\n\t\"c6dbdb9efd5ec1b3786e0671eb2279b253f215ed\": \"1000000000000000000000\",\n\t\"659c0a72c767a3a65ced0e1ca885a4c51fd9b779\": \"2000000000000000000000\",\n\t\"ed1276513b6fc68628a74185c2e20cbbca7817bf\": \"191000000000000000000\",\n\t\"5ad12c5ed4fa827e2150cfa0d68c0aa37b1769b8\": \"800000000000000000000\",\n\t\"17c0fef6986cfb2e4041f9979d9940b69dff3de2\": \"4000000000000000000000\",\n\t\"ca98c7988efa08e925ef9c9945520326e9f43b99\": \"4000000000000000000000\",\n\t\"fe8f1fdcab7fbec9a6a3fcc507619600505c36a3\": \"19700000000000000000\",\n\t\"4420aa35465be617ad2498f370de0a3cc4d230af\": \"2000000000000000000000\",\n\t\"8232d1f9742edf8dd927da353b2ae7b4cbce7592\": \"668500000000000000000\",\n\t\"eca5f58792b8c62d2af556717ee3ee3028be4dce\": \"2000000000000000000000\",\n\t\"6bf86f1e2f2b8032a95c4d7738a109d3d0ed8104\": \"1820000000000000000000\",\n\t\"3ac2f0ff1612e4a1c346d53382abf6d8a25baa53\": \"2000000000000000000000\",\n\t\"daa1bd7a9148fb865cd612dd35f162861d0f3bdc\": \"3066243000000000000000\",\n\t\"5169c60aee4ceed1849ab36d664cff97061e8ea8\": \"3000000000000000000000\",\n\t\"2a5e3a40d2cd0325766de73a3d671896b362c73b\": \"100000000000000000000000\",\n\t\"a83382b6e15267974a8550b98f7176c1a353f9be\": \"3541608000000000000000\",\n\t\"b50c149a1906fad2786ffb135aab501737e9e56f\": \"388000000000000000000\",\n\t\"d9775965b716476675a8d513eb14bbf7b07cd14a\": \"5076200000000000000000\",\n\t\"66662006015c1f8e3ccfcaebc8ee6807ee196303\": \"500024000000000000000\",\n\t\"78746a958dced4c764f876508c414a68342cecb9\": \"50600000000000000000\",\n\t\"e982e6f28c548f5f96f45e63f7ab708724f53fa1\": \"396238000000000000000\",\n\t\"740bfd52e01667a3419b029a1b8e45576a86a2db\": \"16800000000000000000000\",\n\t\"2bd252e0d732ff1d7c78f0a02e6cb25423cf1b1a\": \"2674000000000000000000\",\n\t\"2e2d7ea66b9f47d8cc52c01c52b6e191bc7d4786\": \"3999800000000000000000\",\n\t\"3e3161f1ea2fbf126e79da1801da9512b37988c9\": \"49250000000000000000000\",\n\t\"7e2ba86da52e785d8625334f3397ba1c4bf2e8d1\": \"197000000000000000000\",\n\t\"7608f437b31f18bc0b64d381ae86fd978ed7b31f\": \"50000000000000000000\",\n\t\"25a5a44d38a2f44c6a9db9cdbc6b1e2e97abb509\": \"17000000000000000000000\",\n\t\"745ad3abc6eeeb2471689b539e789ce2b8268306\": \"1129977000000000000000\",\n\t\"09e437d448861228a232b62ee8d37965a904ed9c\": \"21708305000000000000000\",\n\t\"be53322f43fbb58494d7cce19dda272b2450e827\": \"200018000000000000000\",\n\t\"4166fc08ca85f766fde831460e9dc93c0e21aa6c\": \"1000000000000000000000\",\n\t\"99c0174cf84e0783c220b4eb6ae18fe703854ad3\": \"2074800000000000000000\",\n\t\"3cf484524fbdfadae26dc185e32b2b630fd2e726\": \"448798000000000000000\",\n\t\"fdcd5d80b105897a57abc47865768b2900524295\": \"6400000000000000000000\",\n\t\"f22f4078febbbaa8b0e78e642c8a42f35d433905\": \"1999944000000000000000\",\n\t\"eac768bf14b8f9432e69eaa82a99fbeb94cd0c9c\": \"98500000000000000000000\",\n\t\"2639eee9873ceec26fcc9454b548b9e7c54aa65c\": \"1000000000000000000000\",\n\t\"c3c3c2510d678020485a63735d1307ec4ca6302b\": \"1000000000000000000000\",\n\t\"b73d6a77559c86cf6574242903394bacf96e3570\": \"91200000000000000000\",\n\t\"5ce2e7ceaaa18af0f8aafa7fbad74cc89e3cd436\": \"20000000000000000000000\",\n\t\"03377c0e556b640103289a6189e1aeae63493467\": \"20000000000000000000000\",\n\t\"6eb0a5a9ae96d22cf01d8fd6483b9f38f08c2c8b\": \"4000000000000000000000\",\n\t\"fc8215a0a69913f62a43bf1c8590b9ddcd0d8ddb\": \"2000000000000000000000\",\n\t\"4a835c25824c47ecbfc79439bf3f5c3481aa75cd\": \"1400000000000000000000\",\n\t\"b5493ef173724445cf345c035d279ba759f28d51\": \"20000000000000000000\",\n\t\"b9e90c1192b3d5d3e3ab0700f1bf655f5dd4347a\": \"499928000000000000000\",\n\t\"419bde7316cc1ed295c885ace342c79bf7ee33ea\": \"6000000000000000000000\",\n\t\"e4625501f52b7af52b19ed612e9d54fdd006b492\": \"209440000000000000000\",\n\t\"e9d599456b2543e6db80ea9b210e908026e2146e\": \"200000000000000000000\",\n\t\"2c06dd922b61514aafedd84488c0c28e6dcf0e99\": \"100000000000000000000000\",\n\t\"06b5ede6fdf1d6e9a34721379aeaa17c713dd82a\": \"2000000000000000000000\",\n\t\"d8930a39c77357c30ad3a060f00b06046331fd62\": \"820000000000000000000\",\n\t\"b2a2c2111612fb8bbb8e7dd9378d67f1a384f050\": \"20000000000000000000\",\n\t\"1f174f40a0447234e66653914d75bc003e5690dc\": \"160000000000000000000\",\n\t\"e06cb6294704eea7437c2fc3d30773b7bf38889a\": \"20094000000000000000\",\n\t\"cd06f8c1b5cdbd28e2d96b6346c3e85a0483ba24\": \"1000000000000000000000\",\n\t\"f316ef1df2ff4d6c1808dba663ec8093697968e0\": \"1794400000000000000000\",\n\t\"1e6915ebd9a19c81b692ad99b1218a592c1ac7b1\": \"4000000000000000000000\",\n\t\"885493bda36a0432976546c1ddce71c3f4570021\": \"216700000000000000000\",\n\t\"18b0407cdad4ce52600623bd5e1f6a81ab61f026\": \"319489000000000000000\",\n\t\"187d9f0c07f8eb74faaad15ebc7b80447417f782\": \"20000000000000000000\",\n\t\"5d6ccf806738091042ad97a6e095fe8c36aa79c5\": \"188000000000000000000\",\n\t\"53437fecf34ab9d435f4deb8ca181519e2592035\": \"188000000000000000000\",\n\t\"fd1faa347b0fcc804c2da86c36d5f1d18b7087bb\": \"52380000000000000000\",\n\t\"650cf67db060cce17568d5f2a423687c49647609\": \"100000000000000000000\",\n\t\"bcd95ef962462b6edfa10fda87d72242fe3edb5c\": \"334133000000000000000\",\n\t\"3b5e8b3c77f792decb7a8985df916efb490aac23\": \"2000000000000000000000\",\n\t\"f13b083093ba564e2dc631568cf7540d9a0ec719\": \"1999944000000000000000\",\n\t\"373c547e0cb5ce632e1c5ad66155720c01c40995\": \"4691588000000000000000\",\n\t\"7313461208455455465445a459b06c3773b0eb30\": \"2000000000000000000000\",\n\t\"441f37e8a029fd02482f289c49b5d06d00e408a4\": \"333333000000000000000\",\n\t\"d30d4c43adcf55b2cb53d68323264134498d89ce\": \"1000000000000000000000\",\n\t\"f648ea89c27525710172944e79edff847803b775\": \"100000000000000000000000\",\n\t\"0c7f869f8e90d53fdc03e8b2819b016b9d18eb26\": \"20000000000000000000000\",\n\t\"c71f92a3a54a7b8c2f5ea44305fccb84eee23148\": \"49980000000000000000\",\n\t\"7988901331e387f713faceb9005cb9b65136eb14\": \"1970000000000000000000\",\n\t\"e9a39a8bac0f01c349c64cedb69897f633234ed2\": \"3980000000000000000000\",\n\t\"ad2a5c00f923aaf21ab9f3fb066efa0a03de2fb2\": \"999996000000000000000\",\n\t\"f25259a5c939cd25966c9b6303d3731c53ddbc4c\": \"200000000000000000000\",\n\t\"d1682c2159018dc3d07f08240a8c606daf65f8e1\": \"200000000000000000000000\",\n\t\"a99991cebd98d9c838c25f7a7416d9e244ca250d\": \"1000000000000000000000\",\n\t\"5a285755391e914e58025faa48cc685f4fd4f5b8\": \"26000000000000000000000\",\n\t\"4d24b7ac47d2f27de90974ba3de5ead203544bcd\": \"100000000000000000000\",\n\t\"21b182f2da2b384493cf5f35f83d9d1ee14f2a21\": \"2000000000000000000000\",\n\t\"31ab088966ecc7229258f6098fce68cf39b38485\": \"1000000000000000000000\",\n\t\"4977a7939d0939689455ce2639d0ee5a4cd910ed\": \"1820000000000000000000\",\n\t\"07af938c1237a27c9030094dcf240750246e3d2c\": \"500000000000000000000\",\n\t\"4e2bfa4a466f82671b800eee426ad00c071ba170\": \"4000000000000000000000\",\n\t\"107379d4c467464f235bc18e55938aad3e688ad7\": \"50000000000000000000\",\n\t\"f7b29b82195c882dab7897c2ae95e77710f57875\": \"2199000000000000000000\",\n\t\"56586391040c57eec6f5affd8cd4abde10b50acc\": \"4000000000000000000000\",\n\t\"ac608e2bac9dd20728d2947effbbbf900a9ce94b\": \"6000600000000000000000\",\n\t\"48548b4ba62bcb2f0d34a88dc69a680e539cf046\": \"100084000000000000000\",\n\t\"1665ab1739d71119ee6132abbd926a279fe67948\": \"100000000000000000000\",\n\t\"af4493e8521ca89d95f5267c1ab63f9f45411e1b\": \"200000000000000000000\",\n\t\"bf6925c00751008440a6739a02bf2b6cdaab5e3a\": \"1000000000000000000000\",\n\t\"3fe40fbd919aad2818df01ee4df46c46842ac539\": \"6000000000000000000000\",\n\t\"455b9296921a74d1fc41617f43b8303e6f3ed76c\": \"4200000000000000000000\",\n\t\"7086b4bde3e35d4aeb24b825f1a215f99d85f745\": \"1999800000000000000000\",\n\t\"d4ee4919fb37f2bb970c3fff54aaf1f3dda6c03f\": \"40000000000000000000000\",\n\t\"a4489a50ead5d5445a7bee4d2d5536c2a76c41f8\": \"200000000000000000000\",\n\t\"505e4f7c275588c533a20ebd2ac13b409bbdea3c\": \"17600000000000000000\",\n\t\"3bb53598cc20e2055dc553b049404ac9b7dd1e83\": \"615020000000000000000\",\n\t\"52cd20403ba7eda6bc307a3d63b5911b817c1263\": \"20000000000000000000\",\n\t\"a211da03cc0e31ecce5309998718515528a090df\": \"200000000000000000000\",\n\t\"bcb422dc4dd2aae94abae95ea45dd1731bb6b0ba\": \"447500000000000000000\",\n\t\"cbde9734b8e6aa538c291d6d7facedb0f338f857\": \"2000000000000000000000\",\n\t\"171ca02a8b6d62bf4ca47e906914079861972cb2\": \"200000000000000000000\",\n\t\"d40d0055fd9a38488aff923fd03d35ec46d711b3\": \"4999711000000000000000\",\n\t\"3887192c7f705006b630091276b39ac680448d6b\": \"60000000000000000000\",\n\t\"3f3c8e61e5604cef0605d436dd22accd862217fc\": \"1337000000000000000000\",\n\t\"4258fd662fc4ce3295f0d4ed8f7bb1449600a0a9\": \"6719600000000000000000\",\n\t\"4571de672b9904bad8743692c21c4fdcea4c2e01\": \"4000000000000000000000\",\n\t\"5be045512a026e3f1cebfd5a7ec0cfc36f2dc16b\": \"120000000000000000000\",\n\t\"d6300b3215b11de762ecde4b70b7927d01291582\": \"2000000000000000000000\",\n\t\"f9e37447406c412197b2e2aebc001d6e30c98c60\": \"8346700000000000000000\",\n\t\"bd047ff1e69cc6b29ad26497a9a6f27a903fc4dd\": \"865000000000000000000\",\n\t\"23fa7eb51a48229598f97e762be0869652dffc66\": \"1000000000000000000000\",\n\t\"6679aeecd87a57a73f3356811d2cf49d0c4d96dc\": \"600000000000000000000\",\n\t\"23c55aeb5739876f0ac8d7ebea13be729685f000\": \"1337000000000000000000\",\n\t\"757b65876dbf29bf911d4f0692a2c9beb1139808\": \"4124263000000000000000\",\n\t\"e8fc36b0131ec120ac9e85afc10ce70b56d8b6ba\": \"200000000000000000000\",\n\t\"1a89899cbebdbb64bb26a195a63c08491fcd9eee\": \"2000000000000000000000\",\n\t\"6edf7f5283725c953ee64317f66188af1184b033\": \"8050000000000000000000\",\n\t\"297385e88634465685c231a314a0d5dcd146af01\": \"1550000000000000000000\",\n\t\"018f20a27b27ec441af723fd9099f2cbb79d6263\": \"2167000000000000000000\",\n\t\"a5a4227f6cf98825c0d5baff5315752ccc1a1391\": \"10000000000000000000000\",\n\t\"69517083e303d4fbb6c2114514215d69bc46a299\": \"100000000000000000000\",\n\t\"1dab172effa6fbee534c94b17e794edac54f55f8\": \"1970000000000000000000\",\n\t\"c6ee35934229693529dc41d9bb71a2496658b88e\": \"19700000000000000000000\",\n\t\"a8ee1df5d44b128469e913569ef6ac81eeda4fc8\": \"500000000000000000000\",\n\t\"35bd246865fab490ac087ac1f1d4f2c10d0cda03\": \"400000000000000000000\",\n\t\"4bf8bf1d35a231315764fc8001809a949294fc49\": \"66850000000000000000\",\n\t\"c70fa45576bf9c865f983893002c414926f61029\": \"400400000000000000000\",\n\t\"fdeaac2acf1d138e19f2fc3f9fb74592e3ed818a\": \"668500000000000000000\",\n\t\"bfbfbcb656c2992be8fcde8219fbc54aadd59f29\": \"9999924000000000000000\",\n\t\"1722c4cbe70a94b6559d425084caeed4d6e66e21\": \"4000000000000000000000\",\n\t\"00e681bc2d10db62de85848324492250348e90bf\": \"20000000000000000000000\",\n\t\"5c308bac4857d33baea074f3956d3621d9fa28e1\": \"4999711000000000000000\",\n\t\"68c08490c89bf0d6b6f320b1aca95c8312c00608\": \"4000000000000000000000\",\n\t\"ce1884ddbbb8e10e4dba6e44feeec2a7e5f92f05\": \"4000000000000000000000\",\n\t\"427417bd16b1b3d22dbb902d8f9657016f24a61c\": \"2000000000000000000000\",\n\t\"5ff93de6ee054cad459b2d5eb0f6870389dfcb74\": \"220000000000000000000\",\n\t\"71946b7117fc915ed107385f42d99ddac63249c2\": \"2000000000000000000000\",\n\t\"11ec00f849b6319cf51aa8dd8f66b35529c0be77\": \"2000000000000000000000\",\n\t\"610fd6ee4eebab10a8c55d0b4bd2e7d6ef817156\": \"20002000000000000000\",\n\t\"a422e4bf0bf74147cc895bed8f16d3cef3426154\": \"349281000000000000000\",\n\t\"745aecbaf9bb39b74a67ea1ce623de368481baa6\": \"10000000000000000000000\",\n\t\"9f496cb2069563144d0811677ba0e4713a0a4143\": \"1122000000000000000000\",\n\t\"c500b720734ed22938d78c5e48b2ba9367a575ba\": \"33400000000000000000000\",\n\t\"cd072e6e1833137995196d7bb1725fef8761f655\": \"6000000000000000000000\",\n\t\"94644ad116a41ce2ca7fbec609bdef738a2ac7c7\": \"5000000000000000000000\",\n\t\"e8d942d82f175ecb1c16a405b10143b3f46b963a\": \"568600000000000000000\",\n\t\"f73dd9c142b71bce11d06e30e7e7d032f2ec9c9e\": \"1970000000000000000000\",\n\t\"1327d759d56e0ab87af37ecf63fe01f310be100a\": \"659200000000000000000\",\n\t\"28fa2580f9ebe420f3e5eefdd371638e3b7af499\": \"6000000000000000000000\",\n\t\"024bdd2c7bfd500ee7404f7fb3e9fb31dd20fbd1\": \"180000000000000000000\",\n\t\"b4b14bf45455d0ab0803358b7524a72be1a2045b\": \"500000000000000000000\",\n\t\"b1e2dd95e39ae9775c55aeb13f12c2fa233053ba\": \"2000000000000000000000\",\n\t\"35b03ea4245736f57b85d2eb79628f036ddcd705\": \"4000000000000000000000\",\n\t\"eb2ef3d38fe652403cd4c9d85ed7f0682cd7c2de\": \"42784000000000000000000\",\n\t\"690594d306613cd3e2fd24bca9994ad98a3d73f8\": \"2000000000000000000000\",\n\t\"8397a1bc47acd647418159b99cea57e1e6532d6e\": \"9169160000000000000000\",\n\t\"b44815a0f28e569d0e921a4ade8fb2642526497a\": \"55500000000000000000\",\n\t\"e24109be2f513d87498e926a286499754f9ed49e\": \"886500000000000000000\",\n\t\"37ac29bda93f497bc4aeaab935452c431510341e\": \"985000000000000000000\",\n\t\"4a81abe4984c7c6bef63d69820e55743c61f201c\": \"16011846000000000000000\",\n\t\"66dcc5fb4ee7fee046e141819aa968799d644491\": \"1337000000000000000000\",\n\t\"43ff38743ed0cd43308c066509cc8e7e72c862aa\": \"1940000000000000000000\",\n\t\"b8f20005b61352ffa7699a1b52f01f5ab39167f1\": \"10000000000000000000000\",\n\t\"1cda411bd5163baeca1e558563601ce720e24ee1\": \"18200000000000000000\",\n\t\"86245f596691093ece3f3d3ca2263eace81941d9\": \"188000000000000000000\",\n\t\"f52a5882e8927d944b359b26366ba2b9cacfbae8\": \"25000080000000000000000\",\n\t\"118c18b2dce170e8f445753ba5d7513cb7636d2d\": \"8800000000000000000000\",\n\t\"7168b3bb8c167321d9bdb023a6e9fd11afc9afd9\": \"1790000000000000000000\",\n\t\"d9103bb6b67a55a7fece2d1af62d457c2178946d\": \"1000000000000000000000\",\n\t\"8b9fda7d981fe9d64287f85c94d83f9074849fcc\": \"14000000000000000000000\",\n\t\"91211712719f2b084d3b3875a85069f466363141\": \"1000000000000000000000\",\n\t\"4863849739265a63b0a2bf236a5913e6f959ce15\": \"1520000000000000000000\",\n\t\"c2d1778ef6ee5fe488c145f3586b6ebbe3fbb445\": \"1146000000000000000000\",\n\t\"2b77a4d88c0d56a3dbe3bae04a05f4fcd1b757e1\": \"300000000000000000000\",\n\t\"fe9c0fffefb803081256c0cf4d6659e6d33eb4fb\": \"1528000000000000000000\",\n\t\"893017ff1adad499aa065401b4236ce6e92b625a\": \"1999944000000000000000\",\n\t\"073c67e09b5c713c5221c8a0c7f3f74466c347b0\": \"19400000000000000000000\",\n\t\"93e303411afaf6c107a44101c9ac5b36e9d6538b\": \"66000000000000000000000\",\n\t\"0ec50aa823f465b9464b0bc0c4a57724a555f5d6\": \"59100000000000000000000\",\n\t\"a3e3a6ea509573e21bd0239ece0523a7b7d89b2f\": \"1970000000000000000000\",\n\t\"c069ef0eb34299abd2e32dabc47944b272334824\": \"120000000000000000000\",\n\t\"28a3da09a8194819ae199f2e6d9d1304817e28a5\": \"2000000000000000000000\",\n\t\"e9495ba5842728c0ed97be37d0e422b98d69202c\": \"2000000000000000000000\",\n\t\"bba976f1a1215f7512871892d45f7048acd356c8\": \"2000000000000000000000\",\n\t\"887cac41cd706f3345f2d34ac34e01752a6e5909\": \"595366000000000000000\",\n\t\"e0e0b2e29dde73af75987ee4446c829a189c95bc\": \"149000000000000000000\",\n\t\"4a5fae3b0372c230c125d6d470140337ab915656\": \"1600000000000000000000\",\n\t\"425177eb74ad0a9d9a5752228147ee6d6356a6e6\": \"13370000000000000000\",\n\t\"5db7bba1f9573f24115d8c8c62e9ce8895068e9f\": \"49984000000000000000\",\n\t\"fa6a37f018e97967937fc5e8617ba1d786dd5f77\": \"19999800000000000000000\",\n\t\"45e3a93e72144ada860cbc56ff85145ada38c6da\": \"1610000000000000000000\",\n\t\"67da922effa472a6b124e84ea8f86b24e0f515aa\": \"20000000000000000000\",\n\t\"aa9bd4589535db27fa2bc903ca17d679dd654806\": \"2000000000000000000000\",\n\t\"16a9e9b73ae98b864d1728798b8766dbc6ea8d12\": \"957480000000000000000\",\n\t\"d6580ab5ed4c7dfa506fa6fe64ad5ce129707732\": \"4000000000000000000000\",\n\t\"984a7985e3cc7eb5c93691f6f8cc7b8f245d01b2\": \"6000000000000000000000\",\n\t\"7746b6c6699c8f34ca2768a820f1ffa4c207fe05\": \"4000086000000000000000\",\n\t\"2fa491fb5920a6574ebd289f39c1b2430d2d9a6a\": \"2000000000000000000000\",\n\t\"fae76719d97eac41870428e940279d97dd57b2f6\": \"98500000000000000000000\",\n\t\"41b2dbd79dda9b864f6a7030275419c39d3efd3b\": \"3200000000000000000000\",\n\t\"dd8254121a6e942fc90828f2431f511dad7f32e6\": \"3018000000000000000000\",\n\t\"37fac1e6bc122e936dfb84de0c4bef6e0d60c2d7\": \"2000000000000000000000\",\n\t\"3a10888b7e149cae272c01302c327d0af01a0b24\": \"17000000000000000000\",\n\t\"401354a297952fa972ad383ca07a0a2811d74a71\": \"14000000000000000000\",\n\t\"51865db148881951f51251710e82b9be0d7eadb2\": \"2000000000000000000000\",\n\t\"bbbd6ecbb5752891b4ceb3cce73a8f477059376f\": \"36000000000000000000\",\n\t\"3f236108eec72289bac3a65cd283f95e041d144c\": \"999925000000000000000\",\n\t\"dc83b6fd0d512131204707eaf72ea0c8c9bef976\": \"2000000000000000000000\",\n\t\"036eeff5ba90a6879a14dff4c5043b18ca0460c9\": \"100000000000000000000\",\n\t\"fac5ca94758078fbfccd19db3558da7ee8a0a768\": \"1017500000000000000000\",\n\t\"d0d62c47ea60fb90a3639209bbfdd4d933991cc6\": \"194000000000000000000\",\n\t\"891cb8238c88e93a1bcf61db49bd82b47a7f4f84\": \"2680000000000000000000\",\n\t\"df53003346d65c5e7a646bc034f2b7d32fcbe56a\": \"2000000000000000000000\",\n\t\"6e89c51ea6de13e06cdc748b67c4410fe9bcab03\": \"4000000000000000000000\",\n\t\"a61cdbadf04b1e54c883de6005fcdf16beb8eb2f\": \"2000000000000000000000\",\n\t\"e3951de5aefaf0458768d774c254f7157735e505\": \"1600930000000000000000\",\n\t\"f2732cf2c13b8bb8e7492a988f5f89e38273ddc8\": \"600000000000000000000\",\n\t\"4752218e54de423f86c0501933917aea08c8fed5\": \"20000000000000000000000\",\n\t\"152f4e860ef3ee806a502777a1b8dbc91a907668\": \"600000000000000000000\",\n\t\"15b96f30c23b8664e7490651066b00c4391fbf84\": \"410650000000000000000\",\n\t\"8693e9b8be94425eef7969bc69f9d42f7cad671e\": \"1000090000000000000000\",\n\t\"f41557dfdfb1a1bdcefefe2eba1e21fe0a4a9942\": \"1970000000000000000000\",\n\t\"38458e0685573cb4d28f53098829904570179266\": \"40000000000000000000\",\n\t\"53e4d9696dcb3f4d7b3f70dcaa4eecb71782ff5c\": \"200000000000000000000\",\n\t\"2dca0e449ab646dbdfd393a96662960bcab5ae1e\": \"40000000000000000000000\",\n\t\"87d7ac0653ccc67aa9c3469eef4352193f7dbb86\": \"200000000000000000000000\",\n\t\"ae9f5c3fbbe0c9bcbf1af8ff74ea280b3a5d8b08\": \"1730000000000000000000\",\n\t\"7751f363a0a7fd0533190809ddaf9340d8d11291\": \"20000000000000000000\",\n\t\"708a2af425ceb01e87ffc1be54c0f532b20eacd6\": \"134159000000000000000\",\n\t\"ac122a03cd058c122e5fe17b872f4877f9df9572\": \"1969606000000000000000\",\n\t\"5da4ca88935c27f55c311048840e589e04a8a049\": \"80000000000000000000\",\n\t\"e67c2c1665c88338688187629f49e99b60b2d3ba\": \"200000000000000000000\",\n\t\"dec82373ade8ebcf2acb6f8bc2414dd7abb70d77\": \"200000000000000000000\",\n\t\"47c247f53b9fbeb17bba0703a00c009fdb0f6eae\": \"20000000000000000000000\",\n\t\"9a522e52c195bfb7cf5ffaaedb91a3ba7468161d\": \"1000000000000000000000\",\n\t\"3159e90c48a915904adfe292b22fa5fd5e72796b\": \"1008800000000000000000\",\n\t\"defddfd59b8d2c154eecf5c7c167bf0ba2905d3e\": \"93588000000000000000\",\n\t\"ad1d68a038fd2586067ef6d135d9628e79c2c924\": \"4686168000000000000000\",\n\t\"038e45eadd3d88b87fe4dab066680522f0dfc8f9\": \"10000000000000000000000\",\n\t\"2561ec0f379218fe5ed4e028a3f744aa41754c72\": \"13370000000000000000\",\n\t\"b95396daaa490df2569324fcc6623be052f132ca\": \"2000000000000000000000\",\n\t\"2376ada90333b1d181084c97e645e810aa5b76f1\": \"750000000000000000000\",\n\t\"07800d2f8068e448c79a4f69b1f15ef682aae5f6\": \"19400000000000000000000\",\n\t\"adeb204aa0c38e179e81a94ed8b3e7d53047c26b\": \"608000000000000000000\",\n\t\"0dc100b107011c7fc0a1339612a16ccec3285208\": \"2000000000000000000000\",\n\t\"f0b1340b996f6f0bf0d9561c849caf7f4430befa\": \"100000000000000000000\",\n\t\"e1443dbd95cc41237f613a48456988a04f683282\": \"4000086000000000000000\",\n\t\"d3c6f1e0f50ec3d2a67e6bcd193ec7ae38f1657f\": \"6618150000000000000000\",\n\t\"b68899e7610d4c93a23535bcc448945ba1666f1c\": \"200000000000000000000\",\n\t\"a7253763cf4a75df92ca1e766dc4ee8a2745147b\": \"10740000000000000000000\",\n\t\"75d67ce14e8d29e8c2ffe381917b930b1aff1a87\": \"3000000000000000000000\",\n\t\"493d48bda015a9bfcf1603936eab68024ce551e0\": \"22528000000000000000\",\n\t\"7ddd57165c87a2707f025dcfc2508c09834759bc\": \"1400000000000000000000\",\n\t\"cff7f89a4d4219a38295251331568210ffc1c134\": \"1760000000000000000000\",\n\t\"168d30e53fa681092b52e9bae15a0dcb41a8c9bb\": \"100000000000000000000\",\n\t\"99b743d1d9eff90d9a1934b4db21d519d89b4a38\": \"100000000000000000000\",\n\t\"a3d0b03cffbb269f796ac29d80bfb07dc7c6ad06\": \"2000000000000000000000\",\n\t\"816d9772cf11399116cc1e72c26c6774c9edd739\": \"200000000000000000000\",\n\t\"a880e2a8bf88a1a82648b4013c49c4594c433cc8\": \"4728000000000000000000\",\n\t\"2a44a7218fe44d65a1b4b7a7d9b1c2c52c8c3e34\": \"62221355000000000000000\",\n\t\"cb86edbc8bbb1f9131022be649565ebdb09e32a1\": \"2000000000000000000000\",\n\t\"3915eab5ab2e5977d075dec47d96b68b4b5cf515\": \"61520000000000000000000\",\n\t\"8165cab0eafb5a328fc41ac64dae715b2eef2c65\": \"1000000000000000000000\",\n\t\"416c86b72083d1f8907d84efd2d2d783dffa3efb\": \"1999944000000000000000\",\n\t\"c524086d46c8112b128b2faf6f7c7d8160a8386c\": \"400000000000000000000\",\n\t\"902d74a157f7d2b9a3378b1f56703730e03a1719\": \"4000000000000000000000\",\n\t\"74ef2869cbe608856045d8c2041118579f2236ea\": \"59724000000000000000\",\n\t\"af992dd669c0883e5515d3f3112a13f617a4c367\": \"2000000000000000000000\",\n\t\"4c6a248fc97d705def495ca20759169ef0d36471\": \"760000000000000000000\",\n\t\"974d2f17895f2902049deaaecf09c3046507402d\": \"14707000000000000000\",\n\t\"0239b4f21f8e05cd01512b2be7a0e18a6d974607\": \"1000000000000000000000\",\n\t\"b97a6733cd5fe99864b3b33460d1672434d5cafd\": \"1999579000000000000000\",\n\t\"f558a2b2dd26dd9593aae04531fd3c3cc3854b67\": \"198000000000000000000\",\n\t\"b577b6befa054e9c040461855094b002d7f57bd7\": \"114000000000000000000000\",\n\t\"73bfe7710f31cab949b7a2604fbf5239cee79015\": \"2000000000000000000000\",\n\t\"5717f2d8f18ffcc0e5fe247d3a4219037c3a649c\": \"3998000000000000000000\",\n\t\"20707e425d2a11d2c89f391b2b809f556c592421\": \"2000000000000000000000\",\n\t\"9a6708ddb8903c289f83fe889c1edcd61f854423\": \"1000000000000000000000\",\n\t\"fa27cc49d00b6c987336a875ae39da58fb041b2e\": \"10000000000000000000000\",\n\t\"d688e785c98f00f84b3aa1533355c7a258e87948\": \"500000000000000000000\",\n\t\"927cb7dc187036b5427bc7e200c5ec450c1d27d4\": \"216000000000000000000\",\n\t\"b2bfaa58b5196c5cb7f89de15f479d1838de713d\": \"21000000000000000000\",\n\t\"e180de9e86f57bafacd7904f9826b6b4b26337a3\": \"830400000000000000000\",\n\t\"a1204dad5f560728a35c0d8fc79481057bf77386\": \"1000000000000000000000\",\n\t\"6b0da25af267d7836c226bcae8d872d2ce52c941\": \"6000000000000000000000\",\n\t\"0517448dada761cc5ba4033ee881c83037036400\": \"1998000000000000000000\",\n\t\"7ed0a5a847bef9a9da7cba1d6411f5c316312619\": \"39842000000000000000\",\n\t\"5b5d517029321562111b43086d0b043591109a70\": \"2600000000000000000000\",\n\t\"56fc1a7bad4047237ce116146296238e078f93ad\": \"178000000000000000000\",\n\t\"6c5422fb4b14e6d98b6091fdec71f1f08640419d\": \"400000000000000000000\",\n\t\"108fe8ee2a13da487b22c6ab6d582ea71064d98c\": \"399800000000000000000\",\n\t\"0ad3e44d3c001fa290b393617030544108ac6eb9\": \"1969019000000000000000\",\n\t\"25aee68d09afb71d8817f3f184ec562f7897b734\": \"2000000000000000000000\",\n\t\"c2340a4ca94c9678b7494c3c852528ede5ee529f\": \"48669000000000000000\",\n\t\"44901e0d0e08ac3d5e95b8ec9d5e0ff5f12e0393\": \"417500000000000000000\",\n\t\"8775a610c502b9f1e6ad4cdadb8ce29bff75f6e4\": \"600000000000000000000\",\n\t\"682897bc4f8e89029120fcffb787c01a93e64184\": \"10000000000000000000000\",\n\t\"f7acff934b84da0969dc37a8fcf643b7d7fbed41\": \"1999944000000000000000\",\n\t\"f05fcd4c0d73aa167e5553c8c0d6d4f2faa39757\": \"13334000000000000000000\",\n\t\"c981d312d287d558871edd973abb76b979e5c35e\": \"1970000000000000000000\",\n\t\"9da61ccd62bf860656e0325d7157e2f160d93bb5\": \"4999980000000000000000\",\n\t\"d284a50382f83a616d39b8a9c0f396e0ebbfa95d\": \"1000070000000000000000\",\n\t\"d6cf5c1bcf9da662bcea2255905099f9d6e84dcc\": \"8349332000000000000000\",\n\t\"c71b2a3d7135d2a85fb5a571dcbe695e13fc43cd\": \"1000000000000000000000\",\n\t\"b22dadd7e1e05232a93237baed98e0df92b1869e\": \"2000000000000000000000\",\n\t\"b09fe6d4349b99bc37938054022d54fca366f7af\": \"200000000000000000000000\",\n\t\"427e4751c3babe78cff8830886febc10f9908d74\": \"1970000000000000000000\",\n\t\"60b358cb3dbefa37f47df2d7365840da8e3bc98c\": \"20000000000000000000\",\n\t\"dcd5bca2005395b675fde5035659b26bfefc49ee\": \"197000000000000000000\",\n\t\"81186931184137d1192ac88cd3e1e5d0fdb86a74\": \"2900000000000000000000\",\n\t\"de212293f8f1d231fa10e609470d512cb8ffc512\": \"2000000000000000000000\",\n\t\"1937c5c515057553ccbd46d5866455ce66290284\": \"1000000000000000000000000\",\n\t\"592777261e3bd852c48eca95b3a44c5b7f2d422c\": \"20000000000000000000000\",\n\t\"bbf84292d954acd9e4072fb860b1504106e077ae\": \"1500000000000000000000\",\n\t\"3b4100e30a73b0c734b18ffa8426d19b19312f1a\": \"55300000000000000000000\",\n\t\"a03a3dc7c533d1744295be955d61af3f52b51af5\": \"40000000000000000000\",\n\t\"4aa148c2c33401e66a2b586e6577c4b292d3f240\": \"216200000000000000000\",\n\t\"ff850e3be1eb6a4d726c08fa73aad358f39706da\": \"1940000000000000000000\",\n\t\"743651b55ef8429df50cf81938c2508de5c8870f\": \"2000000000000000000000\",\n\t\"3700e3027424d939dbde5d42fb78f6c4dbec1a8f\": \"40000000000000000000\",\n\t\"c1cbd2e2332a524cf219b10d871ccc20af1fb0fa\": \"1000000000000000000000\",\n\t\"e25b9f76b8ad023f057eb11ad94257a0862e4e8c\": \"2000000000000000000000\",\n\t\"719e891fbcc0a33e19c12dc0f02039ca05b801df\": \"6185800000000000000000\",\n\t\"39636b25811b176abfcfeeca64bc87452f1fdff4\": \"400000000000000000000\",\n\t\"631030a5b27b07288a45696f189e1114f12a81c0\": \"499970000000000000000\",\n\t\"bcc84597b91e73d5c5b4d69c80ecf146860f779a\": \"4380000000000000000000\",\n\t\"095e0174829f34c3781be1a5e38d1541ea439b7f\": \"6000000000000000000000\",\n\t\"2e7e05e29edda7e4ae25c5173543efd71f6d3d80\": \"6000000000000000000000\",\n\t\"dbb6ac484027041642bbfd8d80f9d0c1cf33c1eb\": \"2000000000000000000000\",\n\t\"153c08aa8b96a611ef63c0253e2a4334829e579d\": \"394000000000000000000\",\n\t\"10f4bff0caa5027c0a6a2dcfc952824de2940909\": \"2000000000000000000000\",\n\t\"2ef869f0350b57d53478d701e3fee529bc911c75\": \"50000000000000000000\",\n\t\"70ab34bc17b66f9c3b63f151274f2a727c539263\": \"2000000000000000000000\",\n\t\"3201259caf734ad7581c561051ba0bca7fd6946b\": \"180000000000000000000000\",\n\t\"84e9cf8166c36abfa49053b7a1ad4036202681ef\": \"2000000000000000000000\",\n\t\"4ebc5629f9a6a66b2cf3363ac4895c0348e8bf87\": \"1000090000000000000000\",\n\t\"e50b464ac9de35a5618b7cbf254674182b81b97e\": \"4100000000000000000000\",\n\t\"2abdf1a637ef6c42a7e2fe217773d677e804ebdd\": \"5000000000000000000000\",\n\t\"7a0a78a9cc393f91c3d9e39a6b8c069f075e6bf5\": \"1337000000000000000000\",\n\t\"2d9c5fecd2b44fbb6a1ec732ea059f4f1f9d2b5c\": \"1010694000000000000000\",\n\t\"7b712c7af11676006a66d2fc5c1ab4c479ce6037\": \"8000000000000000000000\",\n\t\"3466f67e39636c01f43b3a21a0e8529325c08624\": \"842864000000000000000\",\n\t\"fdd502a74e813bcfa355ceda3c176f6a6871af7f\": \"400000000000000000000\",\n\t\"26475419c06d5f147aa597248eb46cf7befa64a5\": \"1640000000000000000000\",\n\t\"9243d7762d77287b12638688b9854e88a769b271\": \"1000000000000000000000\",\n\t\"723d8baa2551d2addc43c21b45e8af4ca2bfb2c2\": \"1760000000000000000000\",\n\t\"f2fbb6d887f8b8cc3a869aba847f3d1f643c53d6\": \"3999000000000000000000\",\n\t\"2cdb3944650616e47cb182e060322fa1487978ce\": \"1820000000000000000000\",\n\t\"f0d21663d8b0176e05fde1b90ef31f8530fda95f\": \"1999944000000000000000\",\n\t\"77cc02f623a9cf98530997ea67d95c3b491859ae\": \"1354900000000000000000\",\n\t\"d1b5a454ac3405bb4179208c6c84de006bcb9be9\": \"500000000000000000000\",\n\t\"b9920fd0e2c735c256463caa240fb7ac86a93dfa\": \"1760000000000000000000\",\n\t\"ed1f1e115a0d60ce02fb25df014d289e3a0cbe7d\": \"500000000000000000000\",\n\t\"23e2c6a8be8e0acfa5c4df5e36058bb7cbac5a81\": \"2000000000000000000000\",\n\t\"f0be0faf4d7923fc444622d1980cf2d990aab307\": \"2000000000000000000000\",\n\t\"0829d0f7bb7c446cfbb0deadb2394d9db7249a87\": \"40110000000000000000\",\n\t\"2ecac504b233866eb5a4a99e7bd2901359e43b3d\": \"20000000000000000000000\",\n\t\"06d6cb308481c336a6e1a225a912f6e6355940a1\": \"1760000000000000000000\",\n\t\"d4879fd12b1f3a27f7e109761b23ca343c48e3d8\": \"666000000000000000000\",\n\t\"857f100b1a5930225efc7e9020d78327b41c02cb\": \"2000000000000000000000\",\n\t\"3aa42c21b9b31c3e27ccd17e099af679cdf56907\": \"8000000000000000000000\",\n\t\"764d5212263aff4a2a14f031f04ec749dc883e45\": \"1850000000000000000000\",\n\t\"d03a2da41e868ed3fef5745b96f5eca462ff6fda\": \"3000000000000000000000\",\n\t\"4f26690c992b7a312ab12e1385d94acd58288e7b\": \"14000000000000000000000\",\n\t\"7b122162c913e7146cad0b7ed37affc92a0bf27f\": \"1506799000000000000000\",\n\t\"c87352dba582ee2066b9c002a962e003134f78b1\": \"500000000000000000000\",\n\t\"9f4ac9c9e7e24cb2444a0454fa5b9ad9d92d3853\": \"835000000000000000000\",\n\t\"ccf62a663f1353ba2ef8e6521dc1ecb673ec8ef7\": \"152000000000000000000\",\n\t\"557f5e65e0da33998219ad4e99570545b2a9d511\": \"11024000000000000000000\",\n\t\"a5f0077b351f6c505cd515dfa6d2fa7f5c4cd287\": \"40000000000000000000000\",\n\t\"79c6002f8452ca157f1317e80a2faf24475559b7\": \"20000000000000000000\",\n\t\"3aa07a34a1afc8967d3d1383b96b62cf96d5fa90\": \"20000000000000000000000\",\n\t\"7f389c12f3c6164f6446566c77669503c2792527\": \"98500000000000000000\",\n\t\"ac4cc256ae74d624ace80db078b2207f57198f6b\": \"2001000000000000000000\",\n\t\"823ba7647238d113bce9964a43d0a098118bfe4d\": \"200000000000000000000\",\n\t\"f5a7676ad148ae9c1ef8b6f5e5a0c2c473be850b\": \"200000000000000000000\",\n\t\"7d34803569e00bd6b59fff081dfa5c0ab4197a62\": \"1712700000000000000000\",\n\t\"061ea4877cd08944eb64c2966e9db8dedcfec06b\": \"1000000000000000000000\",\n\t\"df37c22e603aedb60a627253c47d8ba866f6d972\": \"24000000000000000000000\",\n\t\"529aa002c6962a3a8545027fd8b05f22b5bf9564\": \"1670000000000000000000\",\n\t\"eb89a882670909cf377e9e78286ee97ba78d46c2\": \"802200000000000000000\",\n\t\"9ac85397792a69d78f286b86432a07aeceb60e64\": \"14300000000000000000\",\n\t\"9610592202c282ab9bd8a884518b3e0bd4758137\": \"268000000000000000000\",\n\t\"73932709a97f02c98e51b091312865122385ae8e\": \"1430000000000000000000\",\n\t\"5ef8c96186b37984cbfe04c598406e3b0ac3171f\": \"9400000000000000000000\",\n\t\"b6f78da4f4d041b3bc14bc5ba519a5ba0c32f128\": \"172326253000000000000000\",\n\t\"6f0edd23bcd85f6015f9289c28841fe04c83efeb\": \"19100000000000000000\",\n\t\"a8a43c009100616cb4ae4e033f1fc5d7e0b6f152\": \"3939015000000000000000\",\n\t\"7081fa6baad6cfb7f51b2cca16fb8970991a64ba\": \"233953000000000000000\",\n\t\"9de7386dde401ce4c67b71b6553f8aa34ea5a17d\": \"60000000000000000000\",\n\t\"54ec7300b81ac84333ed1b033cd5d7a33972e234\": \"200000000000000000000\",\n\t\"67a80e0190721f94390d6802729dd12c31a895ad\": \"1999964000000000000000\",\n\t\"3a4297da3c555e46c073669d0478fce75f2f790e\": \"1969606000000000000000\",\n\t\"c2e0584a71348cc314b73b2029b6230b92dbb116\": \"2000000000000000000000\",\n\t\"0a2ade95b2e8c66d8ae6f0ba64ca57d783be6d44\": \"4000000000000000000000\",\n\t\"544b5b351d1bc82e9297439948cf4861dac9ae11\": \"22000000000000000000000\",\n\t\"3ae62bd271a760637fad79c31c94ff62b4cd12f7\": \"2000000000000000000000\",\n\t\"0d8023929d917234ae40512b1aabb5e8a4512771\": \"148000000000000000000\",\n\t\"2858acacaf21ea81cab7598fdbd86b452e9e8e15\": \"666000000000000000000\",\n\t\"c033b1325a0af45472c25527853b1f1c21fa35de\": \"2000000000000000000000\",\n\t\"bbf85aaaa683738f073baef44ac9dc34c4c779ea\": \"2000000000000000000000\",\n\t\"6ae57f27917c562a132a4d1bf7ec0ac785832926\": \"6000000000000000000000\",\n\t\"88e6f9b247f988f6c0fc14c56f1de53ec69d43cc\": \"100000000000000000000\",\n\t\"b72c2a011c0df50fbb6e28b20ae1aad217886790\": \"4000000000000000000000\",\n\t\"161caf5a972ace8379a6d0a04ae6e163fe21df2b\": \"100000000000000000000000\",\n\t\"2a63590efe9986c3fee09b0a0a338b15bed91f21\": \"6458400000000000000000\",\n\t\"50e1c8ec98415bef442618708799437b86e6c205\": \"6000000000000000000000\",\n\t\"33f4a6471eb1bca6a9f85b3b4872e10755c82be1\": \"2000000000000000000000\",\n\t\"9c49deff47085fc09704caa2dca8c287a9a137da\": \"8000000000000000000000\",\n\t\"e1173a247d29d8238df0922f4df25a05f2af77c3\": \"40007051000000000000000\",\n\t\"51891b2ccdd2f5a44b2a8bc49a5d9bca6477251c\": \"310000000000000000000\",\n\t\"ecaf3350b7ce144d068b186010852c84dd0ce0f0\": \"2000000000000000000000\",\n\t\"72393d37b451effb9e1ff3b8552712e2a970d8c2\": \"985000000000000000000\",\n\t\"1bbc60bcc80e5cdc35c5416a1f0a40a83dae867b\": \"2000000000000000000000\",\n\t\"b8ab39805bd821184f6cbd3d2473347b12bf175c\": \"118200000000000000000\",\n\t\"c55a6b4761fd11e8c85f15174d74767cd8bd9a68\": \"133700000000000000000\",\n\t\"99d1b585965f406a42a49a1ca70f769e765a3f98\": \"16700000000000000000000\",\n\t\"9ab988b505cfee1dbe9cd18e9b5473b9a2d4f536\": \"320000000000000000000\",\n\t\"7fef8c38779fb307ec6f044bebe47f3cfae796f1\": \"168561000000000000000\",\n\t\"322d6f9a140d213f4c80cd051afe25c620bf4c7d\": \"20000000000000000000\",\n\t\"3bd9a06d1bd36c4edd27fc0d1f5b088ddae3c72a\": \"499970000000000000000\",\n\t\"5dcdb6b87a503c6d8a3c65c2cf9a9aa883479a1e\": \"9200000000000000000000\",\n\t\"6e84c2fd18d8095714a96817189ca21cca62bab1\": \"340935000000000000000\",\n\t\"a5bad86509fbe0e0e3c0e93f6d381f1af6e9d481\": \"6000000000000000000000\",\n\t\"3954bdfe0bf587c695a305d9244c3d5bdddac9bb\": \"19187461000000000000000\",\n\t\"63f0e5a752f79f67124eed633ad3fd2705a397d4\": \"3940000000000000000000\",\n\t\"33fd718f0b91b5cec88a5dc15eecf0ecefa4ef3d\": \"432500000000000000000\",\n\t\"68027d19558ed7339a08aee8de3559be063ec2ea\": \"2000000000000000000000\",\n\t\"96f0462ae6f8b96088f7e9c68c74b9d8ad34b347\": \"1790000000000000000000\",\n\t\"f1f391ca92808817b755a8b8f4e2ca08d1fd1108\": \"6000000000000000000000\",\n\t\"7fcf5ba6666f966c5448c17bf1cb0bbcd8019b06\": \"99999000000000000000\",\n\t\"e9b9a2747510e310241d2ece98f56b3301d757e0\": \"2000000000000000000000\",\n\t\"2100381d60a5b54adc09d19683a8f6d5bb4bfbcb\": \"10000000000000000000000\",\n\t\"7495ae78c0d90261e2140ef2063104731a60d1ed\": \"34250000000000000000\",\n\t\"dc911cf7dc5dd0813656670528e9338e67034786\": \"2000000000000000000000\",\n\t\"262aed4bc0f4a4b2c6fb35793e835a49189cdfec\": \"10000000000000000000000\",\n\t\"9ee93f339e6726ec65eea44f8a4bfe10da3d3282\": \"2000000000000000000000\",\n\t\"a3a57b0716132804d60aac281197ff2b3d237b01\": \"1400000000000000000000\",\n\t\"c799e34e88ff88be7de28e15e4f2a63d0b33c4cb\": \"200000000000000000000\",\n\t\"c7506c1019121ff08a2c8c1591a65eb4bdfb4a3f\": \"600000000000000000000\",\n\t\"795ebc2626fc39b0c86294e0e837dcf523553090\": \"1000000000000000000000\",\n\t\"441aca82631324acbfa2468bda325bbd78477bbf\": \"6000000000000000000000\",\n\t\"9f271d285500d73846b18f733e25dd8b4f5d4a8b\": \"722000000000000000000\",\n\t\"d77892e2273b235d7689e430e7aeed9cbce8a1f3\": \"2000000000000000000000\",\n\t\"4f8972838f70c903c9b6c6c46162e99d6216d451\": \"4610000000000000000000\",\n\t\"4c85ed362f24f6b9f04cdfccd022ae535147cbb9\": \"1500000000000000000000\",\n\t\"3807eff43aa97c76910a19752dd715ee0182d94e\": \"250190000000000000000\",\n\t\"3a9e5441d44b243be55b75027a1ceb9eacf50df2\": \"1000000000000000000000\",\n\t\"3deae43327913f62808faa1b6276a2bd6368ead9\": \"2000000000000000000000\",\n\t\"c270456885342b640b4cfc1b520e1a544ee0d571\": \"1820000000000000000000\",\n\t\"77798f201257b9c35204957057b54674aefa51df\": \"149000000000000000000\",\n\t\"225f9eb3fb6ff3e9e3c8447e14a66e8d4f3779f6\": \"2000000000000000000000\",\n\t\"78df2681d6d602e22142d54116dea15d454957aa\": \"298000000000000000000\",\n\t\"283396ce3cac398bcbe7227f323e78ff96d08767\": \"400000000000000000000\",\n\t\"747ff7943b71dc4dcdb1668078f83dd7cc4520c2\": \"60000000000000000000\",\n\t\"a4ed11b072d89fb136759fc69b428c48aa5d4ced\": \"262800000000000000000\",\n\t\"cc043c4388d345f884c6855e71142a9f41fd6935\": \"20000000000000000000\",\n\t\"ab14d221e33d544629198cd096ed63dfa28d9f47\": \"6000000000000000000000\",\n\t\"251e6838f7cec5b383c1d90146341274daf8e502\": \"147510000000000000000\",\n\t\"36a0e61e1be47fa87e30d32888ee0330901ca991\": \"20000000000000000000\",\n\t\"bcfc98e5c82b6adb180a3fcb120b9a7690c86a3f\": \"1970000000000000000000\",\n\t\"18a6d2fc52be73084023c91802f05bc24a4be09f\": \"2000000000000000000000\",\n\t\"80591a42179f34e64d9df75dcd463b28686f5574\": \"20000000000000000000000\",\n\t\"881230047c211d2d5b00d8de4c5139de5e3227c7\": \"10000000000000000000000\",\n\t\"9eb1ff71798f28d6e989fa1ea0588e27ba86cb7d\": \"140800000000000000000\",\n\t\"a01fd1906a908506dedae1e208128872b56ee792\": \"3000000000000000000000\",\n\t\"1b05ea6a6ac8af7cb6a8b911a8cce8fe1a2acfc8\": \"2000000000000000000000\",\n\t\"6add932193cd38494aa3f03aeccc4b7ab7fabca2\": \"89600000000000000000\",\n\t\"2aaa35274d742546670b7426264521032af4f4c3\": \"10000000000000000000000\",\n\t\"67b8a6e90fdf0a1cac441793301e8750a9fa7957\": \"895000000000000000000\",\n\t\"5b5be0d8c67276baabd8edb30d48ea75640b8b29\": \"824480000000000000000\",\n\t\"28d7e5866f1d85fd1ceb32bfbe1dfc36db434566\": \"7199000000000000000000\",\n\t\"98e3e90b28fccaee828779b8d40a5568c4116e21\": \"40000000000000000000\",\n\t\"2dd578f7407dfbd548d05e95ccc39c485429626a\": \"4200000000000000000000\",\n\t\"8ca6989746b06e32e2487461b1ce996a273acfd7\": \"20000000000000000000\",\n\t\"a6f93307f8bce03195fece872043e8a03f7bd11a\": \"2886000000000000000000\",\n\t\"efbd52f97da5fd3a673a46cbf330447b7e8aad5c\": \"100033000000000000000\",\n\t\"52bdd9af5978850bc24110718b3723759b437e59\": \"1730000000000000000000\",\n\t\"6e073b66d1b8c66744d88096a8dd99ec7e0228da\": \"4000000000000000000000\",\n\t\"a29d661a6376f66d0b74e2fe9d8f26c0247ec84c\": \"4117300000000000000000\",\n\t\"7d34ff59ae840a7413c6ba4c5bb2ba2c75eab018\": \"3000000000000000000000\",\n\t\"2eca6a3c5d9f449d0956bd43fa7b4d7be8435958\": \"2000020000000000000000\",\n\t\"f59f9f02bbc98efe097eabb78210979021898bfd\": \"9999800000000000000000\",\n\t\"90e300ac71451e401f887f6e7728851647a80e07\": \"400000000000000000000\",\n\t\"05ae7fd4bbcc80ca11a90a1ec7a301f7cccc83db\": \"910000000000000000000\",\n\t\"e54102534de8f23effb093b31242ad3b233facfd\": \"4000000000000000000000\",\n\t\"c127aab59065a28644a56ba3f15e2eac13da2995\": \"600000000000000000000\",\n\t\"ed60c4ab6e540206317e35947a63a9ca6b03e2cb\": \"57275000000000000000\",\n\t\"d855b03ccb029a7747b1f07303e0a664793539c8\": \"2000000000000000000000\",\n\t\"1178501ff94add1c5881fe886136f6dfdbe61a94\": \"158000000000000000000\",\n\t\"f447108b98df64b57e871033885c1ad71db1a3f9\": \"6916709000000000000000\",\n\t\"deee2689fa9006b59cf285237de53b3a7fd01438\": \"450034000000000000000\",\n\t\"7f01dc7c3747ca608f983dfc8c9b39e755a3b914\": \"206980000000000000000\",\n\t\"9edeac4c026b93054dc5b1d6610c6f3960f2ad73\": \"1200000000000000000000\",\n\t\"e3cffe239c64e7e20388e622117391301b298696\": \"500000000000000000000\",\n\t\"ebbb4f2c3da8be3eb62d1ffb1f950261cf98ecda\": \"2000000000000000000000\",\n\t\"38c10b90c859cbb7815692f99dae520ab5febf5e\": \"13169000000000000000000\",\n\t\"23f9ecf3e5dddca38815d3e59ed34b5b90b4a353\": \"204608000000000000000\",\n\t\"d7fa5ffb6048f96fb1aba09ef87b1c11dd7005e4\": \"1000000000000000000000\",\n\t\"9ca42ee7a0b898f6a5cc60b5a5d7b1bfa3c33231\": \"2000000000000000000000\",\n\t\"8b9577920053b1a00189304d888010d9ef2cb4bf\": \"500000000000000000000\",\n\t\"fcd0b4827cd208ffbf5e759dba8c3cc61d8c2c3c\": \"8000000000000000000000\",\n\t\"01ff1eb1dead50a7f2f9638fdee6eccf3a7b2ac8\": \"600000000000000000000\",\n\t\"abde147b2af789eaa586547e66c4fa2664d328a4\": \"247545000000000000000\",\n\t\"64042ba68b12d4c151651ca2813b7352bd56f08e\": \"600000000000000000000\",\n\t\"dccca42045ec3e16508b603fd936e7fd7de5f36a\": \"19700000000000000000\",\n\t\"e77a89bd45dc04eeb4e41d7b596b707e6e51e74c\": \"12000000000000000000000\",\n\t\"f77c7b845149efba19e261bc7c75157908afa990\": \"2000000000000000000000\",\n\t\"fa5201fe1342af11307b9142a041243ca92e2f09\": \"152150000000000000000000\",\n\t\"40df495ecf3f8b4cef2a6c189957248fe884bc2b\": \"12000000000000000000000\",\n\t\"3d79a853d71be0621b44e29759656ca075fdf409\": \"2000000000000000000000\",\n\t\"6de02f2dd67efdb7393402fa9eaacbcf589d2e56\": \"1182000000000000000000\",\n\t\"729aad4627744e53f5d66309aa74448b3acdf46f\": \"2000000000000000000000\",\n\t\"4e4318f5e13e824a54edfe30a7ed4f26cd3da504\": \"2000000000000000000000\",\n\t\"c6a286e065c85f3af74812ed8bd3a8ce5d25e21d\": \"18200000000000000000\",\n\t\"fd686de53fa97f99639e2568549720bc588c9efc\": \"1969606000000000000000\",\n\t\"06b0ff834073cce1cbc9ea557ea87b605963e8b4\": \"300000000000000000000\",\n\t\"72b5633fe477fe542e742facfd690c137854f216\": \"1670000000000000000000\",\n\t\"8bf373d076814cbc57e1c6d16a82c5be13c73d37\": \"200000000000000000000\",\n\t\"cf264e6925130906c4d7c18591aa41b2a67f6f58\": \"2000000000000000000000\",\n\t\"0ea2a210312b3e867ee0d1cc682ce1d666f18ed5\": \"10000000000000000000000\",\n\t\"d02afecf8e2ec2b62ac8ad204161fd1fae771d0e\": \"2000000000000000000000\",\n\t\"e6b20f980ad853ad04cbfc887ce6601c6be0b24c\": \"4000000000000000000000\",\n\t\"4280a58f8bb10b9440de94f42b4f592120820191\": \"2000000000000000000000\",\n\t\"a914cdb571bfd93d64da66a4e108ea134e50d000\": \"1430143000000000000000\",\n\t\"60864236930d04d8402b5dcbeb807f3caf611ea2\": \"4000000000000000000000\",\n\t\"f9dd239008182fb519fb30eedd2093fed1639be8\": \"500000000000000000000\",\n\t\"18e53243981aabc8767da10c73449f1391560eaa\": \"6000000000000000000000\",\n\t\"c3a9226ae275df2cab312b911040634a9c9c9ef6\": \"4000000000000000000000\",\n\t\"4fcc19ea9f4c57dcbce893193cfb166aa914edc5\": \"7001380000000000000000\",\n\t\"c1e1409ca52c25435134d006c2a6a8542dfb7273\": \"34380000000000000000\",\n\t\"981ddf0404e4d22dda556a0726f00b2d98ab9569\": \"999972000000000000000\",\n\t\"e5bcc88c3b256f6ed5fe550e4a18198b943356ad\": \"2000000000000000000000\",\n\t\"74a17f064b344e84db6365da9591ff1628257643\": \"20000000000000000000\",\n\t\"2720f9ca426ef2f2cbd2fecd39920c4f1a89e16d\": \"2000000000000000000000\",\n\t\"8d04a5ebfb5db409db0617c9fa5631c192861f4a\": \"970000000000000000000\",\n\t\"f18b14cbf6694336d0fe12ac1f25df2da0c05dbb\": \"3999800000000000000000\",\n\t\"56ac20d63bd803595cec036da7ed1dc66e0a9e07\": \"63927000000000000000\",\n\t\"92c94c2820dfcf7156e6f13088ece7958b3676fd\": \"95500000000000000000\",\n\t\"968dea60df3e09ae3c8d3505e9c080454be0e819\": \"6000000000000000000000\",\n\t\"9268d62646563611dc3b832a30aa2394c64613e3\": \"2000000000000000000000\",\n\t\"5a192b964afd80773e5f5eda6a56f14e25e0c6f3\": \"500000000000000000000\",\n\t\"df8d48b1eb07b3c217790e6c2df04dc319e7e848\": \"500000000000000000000\",\n\t\"7f61fa6cf5f898b440dac5abd8600d6d691fdef9\": \"280000000000000000000\",\n\t\"929d368eb46a2d1fbdc8ffa0607ede4ba88f59ad\": \"2000000000000000000000\",\n\t\"9982a5890ffb5406d3aca8d2bfc1dd70aaa80ae0\": \"2000000000000000000000\",\n\t\"bf2aea5a1dcf6ed3b5e8323944e983fedfd1acfb\": \"1580000000000000000000\",\n\t\"46aa501870677e7f0a504876b4e8801a0ad01c46\": \"800000000000000000000\",\n\t\"8f473d0ab876ddaa15608621d7013e6ff714b675\": \"470400000000000000000\",\n\t\"02290fb5f9a517f82845acdeca0fc846039be233\": \"2000000000000000000000\",\n\t\"8a5831282ce14a657a730dc18826f7f9b99db968\": \"4330268000000000000000\",\n\t\"0328510c09dbcd85194a98d67c33ac49f2f94d60\": \"11000000000000000000000\",\n\t\"cf883a20329667ea226a1e3c765dbb6bab32219f\": \"3038972000000000000000\",\n\t\"2615100ea7e25bba9bca746058afbbb4ffbe4244\": \"500000000000000000000\",\n\t\"b115ee3ab7641e1aa6d000e41bfc1ec7210c2f32\": \"13000000000000000000000\",\n\t\"5cfa8d568575658ca4c1a593ac4c5d0e44c60745\": \"291000000000000000000\",\n\t\"d3c24d4b3a5e0ff8a4622d518edd73f16ab28610\": \"20000000000000000000\",\n\t\"a639acd96b31ba53b0d08763229e1f06fd105e9d\": \"8000000000000000000000\",\n\t\"ffa4aff1a37f984b0a67272149273ae9bd41e3bc\": \"10000000000000000000000\",\n\t\"cf684dfb8304729355b58315e8019b1aa2ad1bac\": \"432500000000000000000\",\n\t\"5797b60fd2894ab3c2f4aede86daf2e788d745ad\": \"6000000000000000000000\",\n\t\"a6a0de421ae54f6d17281308f5646d2f39f7775d\": \"2000000000000000000000\",\n\t\"08504f05643fab5919f5eea55925d7a3ed7d807a\": \"20000000000000000000\",\n\t\"7a7068e1c3375c0e599db1fbe6b2ea23b8f407d2\": \"2000000000000000000000\",\n\t\"1078d7f61b0e56c74ee6635b2e1819ef1e3d8785\": \"1000000000000000000000\",\n\t\"6e12b51e225b4a4372e59ad7a2a1a13ea3d3a137\": \"14172200000000000000000\",\n\t\"6a2e86469a5bf37cee82e88b4c3863895d28fcaf\": \"519000000000000000000\",\n\t\"197672fd39d6f246ce66a790d13aa922d70ea109\": \"1000000000000000000000\",\n\t\"8009a7cbd192b3aed4adb983d5284552c16c7451\": \"4000000000000000000000\",\n\t\"f6c3c48a1ac0a34799f04db86ec7a975fe7768f3\": \"1970000000000000000000\",\n\t\"16be75e98a995a395222d00bd79ff4b6e638e191\": \"36000000000000000000000\",\n\t\"6c05e34e5ef2f42ed09deff1026cd66bcb6960bb\": \"2000000000000000000000\",\n\t\"5d6ae8cbd6b3393c22d16254100d0238e808147c\": \"719992000000000000000\",\n\t\"1a376e1b2d2f590769bb858d4575320d4e149970\": \"4841200000000000000000\",\n\t\"f6ead67dbf5b7eb13358e10f36189d53e643cfcf\": \"40000000000000000000000\",\n\t\"467d5988249a68614716659840ed0ae6f6f457bc\": \"387500000000000000000\",\n\t\"aa960e10c52391c54e15387cc67af827b5316dcc\": \"2000000000000000000000\",\n\t\"483ba99034e900e3aedf61499d3b2bce39beb7aa\": \"985000000000000000000\",\n\t\"86f23e9c0aafc78b9c404dcd60339a925bffa266\": \"400000000000000000000\",\n\t\"d05a447c911dbb275bfb2e5a37e5a703a56f9997\": \"200000000000000000000\",\n\t\"edb71ec41bda7dce86e766e6e8c3e9907723a69b\": \"20000000000000000000\",\n\t\"f86a3ea8071f7095c7db8a05ae507a8929dbb876\": \"336000000000000000000\",\n\t\"323b3cfe3ee62bbde2a261e53cb3ecc05810f2c6\": \"13790000000000000000000\",\n\t\"936f3813f5f6a13b8e4ffec83fe7f826186a71cd\": \"520000000000000000000\",\n\t\"6db72bfd43fef465ca5632b45aab7261404e13bf\": \"2000000000000000000000\",\n\t\"9bb76204186af2f63be79168601687fc9bad661f\": \"300000000000000000000\",\n\t\"28ab165ffb69eda0c549ae38e9826f5f7f92f853\": \"1296890000000000000000\",\n\t\"c73e2112282215dc0762f32b7e807dcd1a7aae3e\": \"6900000000000000000000\",\n\t\"f8086e42661ea929d2dda1ab6c748ce3055d111e\": \"1000000000000000000000\",\n\t\"4db21284bcd4f787a7556500d6d7d8f36623cf35\": \"1939806000000000000000\",\n\t\"c48651c1d9c16bff4c9554886c3f3f26431f6f68\": \"658000000000000000000\",\n\t\"9bdbdc9b973431d13c89a3f9757e9b3b6275bfc7\": \"499971000000000000000\",\n\t\"560da37e956d862f81a75fd580a7135c1b246352\": \"10000000000000000000000\",\n\t\"4b60a3e253bf38c8d5662010bb93a473c965c3e5\": \"1490000000000000000000\",\n\t\"64e02abb016cc23a2934f6bcddb681905021d563\": \"1000000000000000000000\",\n\t\"ac2c8e09d06493a63858437bd20be01962450365\": \"1910000000000000000000\",\n\t\"9bf9b3b2f23cf461eb591f28340bc719931c8364\": \"1000000000000000000000\",\n\t\"9b5c39f7e0ac168c8ed0ed340477117d1b682ee9\": \"98000000000000000000\",\n\t\"f75bb39c799779ebc04a336d260da63146ed98d0\": \"25000000000000000000\",\n\t\"a7966c489f4c748a7ae980aa27a574251767caf9\": \"3000000000000000000000\",\n\t\"ea53c954f4ed97fd4810111bdab69ef981ef25b9\": \"17300000000000000000000\",\n\t\"03a26cfc4c18316f70d59e9e1a79ee3e8b962f4c\": \"2000000000000000000000\",\n\t\"3e63ce3b24ca2865b4c5a687b7aea3597ef6e548\": \"2000000000000000000000\",\n\t\"500c902958f6421594d1b6ded712490d52ed6c44\": \"1970000000000000000000\",\n\t\"6f44ca09f0c6a8294cbd519cdc594ad42c67579f\": \"50000000000000000000\",\n\t\"3616fb46c81578c9c8eb4d3bf880451a88379d7d\": \"200000000000000000000\",\n\t\"57bc20e2d62b3d19663cdb4c309d5b4f2fc2db8f\": \"100000000000000000000\",\n\t\"1cebf0985d7f680aaa915c44cc62edb49eab269e\": \"1000000000000000000000\",\n\t\"c0cbf6032fa39e7c46ff778a94f7d445fe22cf30\": \"310000000000000000000\",\n\t\"c58b9cc61dedbb98c33f224d271f0e228b583433\": \"3880000000000000000000\",\n\t\"e9c6dfae97f7099fc5f4e94b784db802923a1419\": \"48800000000000000000\",\n\t\"9bacd3d40f3b82ac91a264d9d88d908eac8664b9\": \"20000000000000000000000\",\n\t\"63d80048877596e0c28489e650cd4ac180096a49\": \"280000000000000000000\",\n\t\"e6a6f6dd6f70a456f4ec15ef7ad5e5dbb68bd7dc\": \"200000000000000000000\",\n\t\"d418870bc2e4fa7b8a6121ae0872d55247b62501\": \"1580000000000000000000\",\n\t\"e2f9383d5810ea7b43182b8704b62b27f5925d39\": \"400000000000000000000\",\n\t\"bd5e473abce8f97a6932f77c2facaf9cc0a00514\": \"1117350000000000000000\",\n\t\"2ff1ca55fd9cec1b1fe9f0a9abb74c513c1e2aaa\": \"3000000000000000000000\",\n\t\"9d99b189bbd9a48fc2e16e8fcda33bb99a317bbb\": \"1126900000000000000000\",\n\t\"6e96faeda3054302c45f58f161324c99a3eebb62\": \"20000000000000000000\",\n\t\"ef93818f684db0c3675ec81332b3183ecc28a495\": \"1550000000000000000000\",\n\t\"2659facb1e83436553b5b42989adb8075f9953ed\": \"29356000000000000000\",\n\t\"c4ffadaaf2823fbea7bff702021bffc4853eb5c9\": \"42233000000000000000\",\n\t\"e9864c1afc8eaad37f3ba56fcb7477cc622009b7\": \"79000000000000000000\",\n\t\"87ef6d8b6a7cbf9b5c8c97f67ee2adc2a73b3f77\": \"200400000000000000000\",\n\t\"c043f2452dcb9602ef62bd360e033dd23971fe84\": \"2000000000000000000000\",\n\t\"0fdd65402395df9bd19fee4507ef5345f745104c\": \"5000000000000000000000\",\n\t\"939c4313d2280edf5e071bced846063f0a975d54\": \"120000000000000000000000\",\n\t\"b28245037cb192f75785cb86cbfe7c930da258b0\": \"16000000000000000000000\",\n\t\"a80cb1738bac08d4f9c08b4deff515545fa8584f\": \"500000000000000000000\",\n\t\"62971bf2634cee0be3c9890f51a56099dbb9519b\": \"656000000000000000000\",\n\t\"f2efe96560c9d97b72bd36447843885c1d90c231\": \"2000000000000000000000\",\n\t\"0e390f44053ddfcef0d608b35e4d9c2cbe9871bb\": \"1970000000000000000000\",\n\t\"61d101a033ee0e2ebb3100ede766df1ad0244954\": \"500000000000000000000\",\n\t\"6785513cf732e47e87670770b5419be10cd1fc74\": \"2000000000000000000000\",\n\t\"167699f48a78c615512515739958993312574f07\": \"39000000000000000000\",\n\t\"68ec79d5be7155716c40941c79d78d17de9ef803\": \"500600000000000000000\",\n\t\"a0e8ba661b48154cf843d4c2a5c0f792d528ee29\": \"400000000000000000000\",\n\t\"1a201b4327cea7f399046246a3c87e6e03a3cda8\": \"1000000000000000000000\",\n\t\"f60f62d73937953fef35169e11d872d2ea317eec\": \"5348000000000000000000\",\n\t\"c0c04d0106810e3ec0e54a19f2ab8597e69a573d\": \"50000000000000000000\",\n\t\"ef47cf073e36f271d522d7fa4e7120ad5007a0bc\": \"2500000000000000000000\",\n\t\"a44fe800d96fcad73b7170d0f610cb8c0682d6ce\": \"4000000000000000000000\",\n\t\"010f4a98dfa1d9799bf5c796fb550efbe7ecd877\": \"8023366000000000000000\",\n\t\"708fa11fe33d85ad1befcbae3818acb71f6a7d7e\": \"18200000000000000000\",\n\t\"b38c4e537b5df930d65a74d043831d6b485bbde4\": \"400000000000000000000\",\n\t\"250a69430776f6347703f9529783955a6197b682\": \"1940000000000000000000\",\n\t\"2d35a9df62757f7ffad1049afb06ca4afc464c51\": \"20000000000000000000\",\n\t\"6aff1466c2623675e3cb0e75e423d37a25e442eb\": \"1730000000000000000000\",\n\t\"fc15cb99a8d1030b12770add033a79ee0d0c908c\": \"350056000000000000000\",\n\t\"e784dcc873aa8c1513ec26ff36bc92eac6d4c968\": \"200000000000000000000\",\n\t\"b1c328fb98f2f19ab6646f0a7c8c566fda5a8540\": \"2500000000000000000000\",\n\t\"247a0a11c57f0383b949de540b66dee68604b0a1\": \"1069600000000000000000\",\n\t\"1af60343360e0b2d75255210375720df21db5c7d\": \"1000000000000000000000\",\n\t\"8794bf47d54540ece5c72237a1ffb511ddb74762\": \"2000000000000000000000\",\n\t\"e76d945aa89df1e457aa342b31028a5e9130b2ce\": \"1015200000000000000000\",\n\t\"a30e0acb534c9b3084e8501da090b4eb16a2c0cd\": \"2000000000000000000000\",\n\t\"7099d12f6ec656899b049a7657065d62996892c8\": \"400000000000000000000\",\n\t\"7be7f2456971883b9a8dbe4c91dec08ac34e8862\": \"3000000000000000000000\",\n\t\"42746aeea14f27beff0c0da64253f1e7971890a0\": \"1550000000000000000000\",\n\t\"736b44503dd2f6dd5469ff4c5b2db8ea4fec65d0\": \"313950000000000000000\",\n\t\"822edff636563a6106e52e9a2598f7e6d0ef2782\": \"36099000000000000000\",\n\t\"03c647a9f929b0781fe9ae01caa3e183e876777e\": \"445800000000000000000\",\n\t\"63612e7862c27b587cfb6daf9912cb051f030a9f\": \"43458000000000000000\",\n\t\"d46bae61b027e5bb422e83a3f9c93f3c8fc77d27\": \"2000000000000000000000\",\n\t\"5f23ba1f37a96c45bc490259538a54c28ba3b0d5\": \"1200000000000000000000\",\n\t\"d41d7fb49fe701baac257170426cc9b38ca3a9b2\": \"176000000000000000000\",\n\t\"1ebacb7844fdc322f805904fbf1962802db1537c\": \"10000000000000000000000\",\n\t\"9c80bc18e9f8d4968b185da8c79fa6e11ffc3e23\": \"240000000000000000000\",\n\t\"e4ca0a5238564dfc91e8bf22bade2901619a1cd4\": \"1000000000000000000000\",\n\t\"1ad72d20a76e7fcc6b764058f48d417d496fa6cd\": \"2000000000000000000000\",\n\t\"d3bc730937fa75d8452616ad1ef1fe7fffe0d0e7\": \"83363000000000000000\",\n\t\"eac1482826acb6111e19d340a45fb851576bed60\": \"32177000000000000000\",\n\t\"01e40521122530d9ac91113c06a0190b6d63850b\": \"1337000000000000000000\",\n\t\"9e20e5fd361eabcf63891f5b87b09268b8eb3793\": \"100000000000000000000\",\n\t\"69ff429074cb9b6c63bc914284bce5f0c8fbf7d0\": \"500000000000000000000\",\n\t\"0d3265d3e7bdb93d5e8e8b1ca47f210a793ecc8e\": \"200000000000000000000\",\n\t\"5b4ea16db6809b0352d4b6e81c3913f76a51bb32\": \"400000000000000000000\",\n\t\"d8fe088fffce948f5137ee23b01d959e84ac4223\": \"227942000000000000000\",\n\t\"7e4e9409704121d1d77997026ff06ea9b19a8b90\": \"2602600000000000000000\",\n\t\"96b434fe0657e42acc8212b6865139dede15979c\": \"4000000000000000000000\",\n\t\"22f004df8de9e6ebf523ccace457accb26f97281\": \"10000000000000000000000\",\n\t\"d8f9240c55cff035523c6d5bd300d370dc8f0c95\": \"285000000000000000000\",\n\t\"9d9e57fde30e5068c03e49848edce343b7028358\": \"1730000000000000000000\",\n\t\"317cf4a23cb191cdc56312c29d15e210b3b9b784\": \"144000000000000000000\",\n\t\"79f08e01ce0988e63c7f8f2908fade43c7f9f5c9\": \"18200000000000000000\",\n\t\"04e5f5bc7c923fd1e31735e72ef968fd67110c6e\": \"1611000000000000000000\",\n\t\"1ec4ec4b77bf19d091a868e6f49154180541f90e\": \"2000000000000000000000\",\n\t\"8737dae671823a8d5917e0157ace9c43468d946b\": \"1999944000000000000000\",\n\t\"f998ca3411730a6cd10e7455b0410fb0f6d3ff80\": \"2000000000000000000000\",\n\t\"6e2eab85dc89fe29dc0aa1853247dab43a523d56\": \"80000000000000000000\",\n\t\"72c083beadbdc227c5fb43881597e32e83c26056\": \"20000000000000000000000\",\n\t\"5902e44af769a87246a21e079c08bf36b06efeb3\": \"1000000000000000000000\",\n\t\"cc2d04f0a4017189b340ca77198641dcf6456b91\": \"3940000000000000000000\",\n\t\"bde4c73f969b89e9ceae66a2b51844480e038e9a\": \"1000000000000000000000\",\n\t\"adff0d1d0b97471e76d789d2e49c8a74f9bd54ff\": \"1880000000000000000000\",\n\t\"397cdb8c80c67950b18d654229610e93bfa6ee1a\": \"1172938000000000000000\",\n\t\"a3e051fb744aa3410c3b88f899f5d57f168df12d\": \"2955000000000000000000\",\n\t\"810db25675f45ea4c7f3177f37ce29e22d67999c\": \"200000000000000000000\",\n\t\"1e13ec51142cebb7a26083412c3ce35144ba56a1\": \"5000000000000000000000\",\n\t\"25bdfa3ee26f3849617b230062588a97e3cae701\": \"1000008000000000000000\",\n\t\"ae538c73c5b38d8d584d7ebdadefb15cabe48357\": \"999000000000000000000\",\n\t\"a2ecce2c49f72a0995a0bda57aacf1e9f001e22a\": \"4000000000000000000000\",\n\t\"7e24fbdad290175eb2df6d180a19b9a9f41370be\": \"1000000000000000000000\",\n\t\"e8cc43bc4f8acf39bff04ebfbf42aac06a328470\": \"400000000000000000000\",\n\t\"c2779771f0536d79a8708f6931abc44b3035e999\": \"20002000000000000000000\",\n\t\"ab27ba78c8e5e3daef31ad05aef0ff0325721e08\": \"468000000000000000000\",\n\t\"563cb8803c1d32a25b27b64114852bd04d9c20cd\": \"204400000000000000000\",\n\t\"08d4267feb15da9700f7ccc3c84a8918bf17cfde\": \"1790000000000000000000\",\n\t\"d1778c13fbd968bc083cb7d1024ffe1f49d02caa\": \"4020000000000000000000\",\n\t\"1796bcc97b8abc717f4b4a7c6b1036ea2182639f\": \"355242000000000000000\",\n\t\"beecd6af900c8b064afcc6073f2d85d59af11956\": \"2000000000000000000000\",\n\t\"045ed7f6d9ee9f252e073268db022c6326adfc5b\": \"100000000000000000000\",\n\t\"b88a37c27f78a617d5c091b7d5b73a3761e65f2a\": \"2000000000000000000000\",\n\t\"72fb49c29d23a18950c4b2dc0ddf410f532d6f53\": \"2000000000000000000000\",\n\t\"6ecaefa6fc3ee534626db02c6f85a0c395571e77\": \"600000000000000000000\",\n\t\"d1811c55976980f083901d8a0db269222dfb5cfe\": \"1550000000000000000000\",\n\t\"98855c7dfbee335344904a12c40c731795b13a54\": \"1069600000000000000000\",\n\t\"92a898d46f19719c38126a8a3c27867ae2cee596\": \"2000000000000000000000\",\n\t\"ca428863a5ca30369892d612183ef9fb1a04bcea\": \"1520000000000000000000\",\n\t\"797427e3dbf0feae7a2506f12df1dc40326e8505\": \"1000000000000000000000\",\n\t\"3d574fcf00fae1d98cc8bf9ddfa1b3953b9741bc\": \"1970000000000000000000\",\n\t\"28818e18b610001321b31df6fe7d2815cdadc9f5\": \"1000000000000000000000\",\n\t\"5f3e1e6739b0c62200e00a003691d9efb238d89f\": \"3000000000000000000000\",\n\t\"d9d370fec63576ab15b318bf9e58364dc2a3552a\": \"100000000000000000000\",\n\t\"b223bf1fbf80485ca2b5567d98db7bc3534dd669\": \"4000000000000000000000\",\n\t\"7b27d0d1f3dd3c140294d0488b783ebf4015277d\": \"400000000000000000000\",\n\t\"7930c2d9cbfa87f510f8f98777ff8a8448ca5629\": \"199955000000000000000\",\n\t\"820c19291196505b65059d9914b7090be1db87de\": \"140000000000000000000\",\n\t\"e545ee84ea48e564161e9482d59bcf406a602ca2\": \"1850000000000000000000\",\n\t\"af4cf41785161f571d0ca69c94f8021f41294eca\": \"9850000000000000000000\",\n\t\"7a4f9b850690c7c94600dbee0ca4b0a411e9c221\": \"1910000000000000000000\",\n\t\"ddab6b51a9030b40fb95cf0b748a059c2417bec7\": \"2000000000000000000000\",\n\t\"315ef2da620fd330d12ee55de5f329a696e0a968\": \"150000000000000000000\",\n\t\"4db1c43a0f834d7d0478b8960767ec1ac44c9aeb\": \"872870000000000000000\",\n\t\"2fef81478a4b2e8098db5ff387ba2153f4e22b79\": \"999000000000000000000\",\n\t\"6c6aa0d30b64721990b9504a863fa0bfb5e57da7\": \"2700000000000000000000\",\n\t\"33380c6fff5acd2651309629db9a71bf3f20c5ba\": \"16100000000000000000000\",\n\t\"4eebf1205d0cc20cee6c7f8ff3115f56d48fba26\": \"19400000000000000000\",\n\t\"03cc9d2d21f86b84ac8ceaf971dba78a90e62570\": \"1610000000000000000000\",\n\t\"728f9ab080157db3073156dbca1a169ef3179407\": \"500000000000000000000\",\n\t\"30ed11b77bc17e5e6694c8bc5b6e4798f68d9ca7\": \"143731500000000000000000\",\n\t\"f617b967b9bd485f7695d2ef51fb7792d898f500\": \"500000000000000000000\",\n\t\"c0cbad3ccdf654da22cbcf5c786597ca1955c115\": \"2000000000000000000000\",\n\t\"80522ddf944ec52e27d724ed4c93e1f7be6083d6\": \"200000000000000000000\",\n\t\"4e90ccb13258acaa9f4febc0a34292f95991e230\": \"15800000000000000000\",\n\t\"ff207308ced238a6c01ad0213ca9eb4465d42590\": \"1999944000000000000000\",\n\t\"35f2949cf78bc219bb4f01907cf3b4b3d3865482\": \"289800000000000000000\",\n\t\"68f525921dc11c329b754fbf3e529fc723c834cd\": \"1610000000000000000000\",\n\t\"81139bfdcca656c430203f72958c543b6580d40c\": \"2000000000000000000000\",\n\t\"9d511543b3d9dc60d47f09d49d01b6c498d82078\": \"11245000000000000000000\",\n\t\"084d103254759b343cb2b9c2d8ff9e1ac5f14596\": \"7600000000000000000000\",\n\t\"b323dcbf2eddc5382ee4bbbb201ca3931be8b438\": \"2000000000000000000000\",\n\t\"349d2c918fd09e2807318e66ce432909176bd50b\": \"1120000000000000000000\",\n\t\"b535f8db879fc67fec58824a5cbe6e5498aba692\": \"1910000000000000000000\",\n\t\"824074312806da4748434266ee002140e3819ac2\": \"1507000000000000000000\",\n\t\"e8ef100d7ce0895832f2678df72d4acf8c28b8e3\": \"500038000000000000000\",\n\t\"84af1b157342d54368260d17876230a534b54b0e\": \"985000000000000000000\",\n\t\"419a71a36c11d105e0f2aef5a3e598078e85c80b\": \"5000000000000000000000\",\n\t\"55af092f94ba6a79918b0cf939eab3f01b3f51c7\": \"149940000000000000000\",\n\t\"35a549e8fd6c368d6dcca6d2e7d18e4db95f5284\": \"499938000000000000000\",\n\t\"f0e2649c7e6a3f2c5dfe33bbfbd927ca3c350a58\": \"2000000000000000000000\",\n\t\"f4b759cc8a1c75f80849ebbcda878dc8f0d66de4\": \"400000000000000000000\",\n\t\"21846f2fdf5a41ed8df36e5ed8544df75988ece3\": \"1999944000000000000000\",\n\t\"229ff80bf5708009a9f739e0f8b560914016d5a6\": \"333333000000000000000\",\n\t\"da505537537ffb33c415fec64e69bae090c5f60f\": \"160000000000000000000\",\n\t\"b91d9e916cd40d193db60e79202778a0087716fc\": \"404800000000000000000\",\n\t\"bb6823a1bd819f13515538264a2de052b4442208\": \"25610000000000000000\",\n\t\"459393d63a063ef3721e16bd9fde45ee9dbd77fb\": \"1968818000000000000000\",\n\t\"95f62d0243ede61dad9a3165f53905270d54e242\": \"1610000000000000000000\",\n\t\"b0bb29a861ea1d424d45acd4bfc492fb8ed809b7\": \"80000000000000000000\",\n\t\"5e74ed80e9655788e1bb269752319667fe754e5a\": \"56000000000000000000\",\n\t\"a276b058cb98d88beedb67e543506c9a0d9470d8\": \"2668652000000000000000\",\n\t\"8ae9ef8c8a8adfa6ab798ab2cdc405082a1bbb70\": \"2000000000000000000000\",\n\t\"e5102c3b711b810344197419b1cd8a7059f13e32\": \"299999000000000000000\",\n\t\"c32038ca52aee19745be5c31fcdc54148bb2c4d0\": \"49984000000000000000\",\n\t\"13e321728c9c57628058e93fc866a032dd0bda90\": \"714580000000000000000\",\n\t\"c2bae4a233c2d85724f0dabebda0249d833e37d3\": \"5000000000000000000000\",\n\t\"10d32416722ca4e648630548ead91edd79c06aff\": \"100000000000000000000\",\n\t\"d5f07552b5c693c20067b378b809cee853b8f136\": \"505540000000000000000\",\n\t\"8668af868a1e98885f937f2615ded6751804eb2d\": \"20000000000000000000\",\n\t\"139d3531c9922ad56269f6309aa789fb2485f98c\": \"4000000000000000000000\",\n\t\"1d29c7aab42b2048d2b25225d498dba67a03fbb2\": \"200000000000000000000\",\n\t\"d35075ca61fe59d123969c36a82d1ab2d918aa38\": \"2674000000000000000000\",\n\t\"d6fc0446c6a8d40ae3551db7e701d1fa876e4a49\": \"2000000000000000000000\",\n\t\"fccd0d1ecee27addea95f6857aeec8c7a04b28ee\": \"10000000000000000000000\",\n\t\"c12cfb7b3df70fceca0ede263500e27873f8ed16\": \"1000000000000000000000\",\n\t\"d0db456178206f5c4430fe005063903c3d7a49a7\": \"706245000000000000000\",\n\t\"73cf80ae9688e1580e68e782cd0811f7aa494d2c\": \"7760000000000000000000\",\n\t\"d60651e393783423e5cc1bc5f889e44ef7ea243e\": \"398800000000000000000\",\n\t\"048a8970ea4145c64d5517b8de5b46d0595aad06\": \"20000000000000000000000\",\n\t\"dd9b485a3b1cd33a6a9c62f1e5bee92701856d25\": \"225073000000000000000\",\n\t\"5b287c7e734299e727626f93fb1187a60d5057fe\": \"101230000000000000000\",\n\t\"635c00fdf035bca15fa3610df3384e0fb79068b1\": \"9000000000000000000000\",\n\t\"630a913a9031c9492abd4c41dbb15054cfec4416\": \"5688000000000000000000\",\n\t\"af3614dcb68a36e45a4e911e62796247222d595b\": \"2259800000000000000000\",\n\t\"335e22025b7a77c3a074c78b8e3dfe071341946e\": \"10178744000000000000000\",\n\t\"f0e1dfa42adeac2f17f6fdf584c94862fd563393\": \"500000000000000000000\",\n\t\"1a9e702f385dcd105e8b9fa428eea21c57ff528a\": \"1400000000000000000000\",\n\t\"8ce4949d8a16542d423c17984e6739fa72ceb177\": \"24999975000000000000000\",\n\t\"5f29c9de765dde25852af07d33f2ce468fd20982\": \"2000000000000000000000\",\n\t\"dbf5f061a0f48e5e69618739a77d2ec19768d201\": \"152000000000000000000\",\n\t\"b247cf9c72ec482af3eaa759658f793d670a570c\": \"912000000000000000000\",\n\t\"99f4147ccc6bcb80cc842e69f6d00e30fa4133d9\": \"400000000000000000000\",\n\t\"ba6d31b9a261d640b5dea51ef2162c3109f1eba8\": \"5000000000000000000000\",\n\t\"f05ba8d7b68539d933300bc9289c3d9474d0419e\": \"126400000000000000000\",\n\t\"682e96276f518d31d7e56e30dfb009c1218201bd\": \"20000000000000000000\",\n\t\"0927220492194b2eda9fc4bbe38f25d681dfd36c\": \"6000000000000000000000\",\n\t\"a3c33afc8cb4704e23153de2049d35ae71332472\": \"799600000000000000000\",\n\t\"05c736d365aa37b5c0be9c12c8ad5cd903c32cf9\": \"6002000000000000000000\",\n\t\"d8eef4cf4beb01ee20d111748b61cb4d3f641a01\": \"2740000000000000000000\",\n\t\"16c1bf5b7dc9c83c179efacbcf2eb174e3561cb3\": \"1000000000000000000000\",\n\t\"d79db5ab43621a7a3da795e58929f3dd25af67d9\": \"1999944000000000000000\",\n\t\"28efae6356509edface89fc61a7fdcdb39eea8e5\": \"5348000000000000000000\",\n\t\"c55005a6c37e8ca7e543ce259973a3cace961a4a\": \"2000000000000000000000\",\n\t\"ab3d86bc82927e0cd421d146e07f919327cdf6f9\": \"1910000000000000000000\",\n\t\"b74ed2666001c16333cf7af59e4a3d4860363b9c\": \"193600000000000000000\",\n\t\"1899f69f653b05a5a6e81f480711d09bbf97588c\": \"1955000000000000000000\",\n\t\"27fc85a49cff90dbcfdadc9ddd40d6b9a2210a6c\": \"100000000000000000000\",\n\t\"cd1ed263fbf6f6f7b48aef8f733d329d4382c7c7\": \"18500000000000000000\",\n\t\"d97fe6f53f2a58f6d76d752adf74a8a2c18e9074\": \"309990000000000000000\",\n\t\"80da2fdda29a9e27f9e115975e69ae9cfbf3f27e\": \"200000000000000000000\",\n\t\"09146ea3885176f07782e1fe30dce3ce24c49e1f\": \"20000000000000000000\",\n\t\"393ff4255e5c658f2e7f10ecbd292572671bc2d2\": \"2000000000000000000000\",\n\t\"a390ca122b8501ee3e5e07a8ca4b419f7e4dae15\": \"100000000000000000000\",\n\t\"6d9193996b194617211106d1635eb26cc4b66c6c\": \"399640000000000000000\",\n\t\"999c49c174ca13bc836c1e0a92bff48b271543ca\": \"3280000000000000000000\",\n\t\"7421ce5be381738ddc83f02621974ff0686c79b8\": \"1632000000000000000000\",\n\t\"6be9030ee6e2fbc491aca3de4022d301772b7b7d\": \"26740000000000000000\",\n\t\"81bd75abd865e0c3f04a0b4fdbcb74d34082fbb7\": \"4000000000000000000000\",\n\t\"8bc1ff8714828bf286ff7e8a7709106548ed1b18\": \"10000000000000000000000\",\n\t\"a0aadbd9509722705f6d2358a5c79f37970f00f6\": \"200000000000000000000\",\n\t\"3d881433f04a7d0d27f84944e08a512da3555287\": \"1200000000000000000000\",\n\t\"cc1d6ead01aada3e8dc7b95dca25df26eefa639d\": \"2000000000000000000000\",\n\t\"35106ba94e8563d4b3cb3c5c692c10e604b7ced8\": \"2000000000000000000000\",\n\t\"4d8697af0fbf2ca36e8768f4af22133570685a60\": \"20000000000000000000\",\n\t\"1afcc585896cd0ede129ee2de5c19ea811540b64\": \"3231259000000000000000\",\n\t\"e5215631b14248d45a255296bed1fbfa0330ff35\": \"1310000000000000000000\",\n\t\"e3878f91ca86053fced5444686a330e09cc388fb\": \"194000000000000000000\",\n\t\"555df19390c16d01298772bae8bc3a1152199cbd\": \"200000000000000000000\",\n\t\"dc3dae59ed0fe18b58511e6fe2fb69b219689423\": \"100000000000000000000\",\n\t\"74648caac748dd135cd91ea14c28e1bd4d7ff6ae\": \"3100000000000000000000\",\n\t\"cf2e2ad635e9861ae95cb9bafcca036b5281f5ce\": \"35200000000000000000000\",\n\t\"14eec09bf03e352bd6ff1b1e876be664ceffd0cf\": \"20094000000000000000\",\n\t\"856e5ab3f64c9ab56b009393b01664fc0324050e\": \"1790000000000000000000\",\n\t\"632b9149d70178a7333634275e82d5953f27967b\": \"700000000000000000000\",\n\t\"2a39190a4fde83dfb3ddcb4c5fbb83ac6c49755c\": \"1000000000000000000000\",\n\t\"369ef761195f3a373e24ece6cd22520fe0b9e86e\": \"534933000000000000000\",\n\t\"16afa787fc9f94bdff6976b1a42f430a8bf6fb0f\": \"2000000000000000000000\",\n\t\"1b0b31afff4b6df3653a94d7c87978ae35f34aae\": \"354600000000000000000\",\n\t\"b4d82f2e69943f7de0f5f7743879406fac2e9cec\": \"40000000000000000000\",\n\t\"09d6cefd75b0c4b3f8f1d687a522c96123f1f539\": \"6000000000000000000000\",\n\t\"01577afd4e50890247c9b10d44af73229aec884f\": \"680000000000000000000\",\n\t\"a35606d51220ee7f2146d411582ee4ee4a45596e\": \"3996800000000000000000\",\n\t\"352e77c861696ef96ad54934f894aa8ea35151dd\": \"1000000000000000000000\",\n\t\"b87f5376c2de0b6cc3c179c06087aa473d6b4674\": \"1337000000000000000000\",\n\t\"5b49afcd75447838f6e7ceda8d21777d4fc1c3c0\": \"4000000000000000000000\",\n\t\"b884add88d83dc564ab8e0e02cbdb63919aea844\": \"2000000000000000000000\",\n\t\"5c312a56c784b122099b764d059c21ece95e84ca\": \"95000000000000000000\",\n\t\"4697baaf9ccb603fd30430689d435445e9c98bf5\": \"199600000000000000000\",\n\t\"c625f8c98d27a09a1bcabd5128b1c2a94856af30\": \"200000000000000000000\",\n\t\"19f5caf4c40e6908813c0745b0aea9586d9dd931\": \"664000000000000000000\",\n\t\"1e596a81b357c6f24970cc313df6dbdaabd0d09e\": \"2000000000000000000000\",\n\t\"c1631228efbf2a2e3a4092ee8900c639ed34fbc8\": \"955000000000000000000\",\n\t\"6f6cf20649a9e973177ac67dbadee4ebe5c7bdda\": \"5080000000000000000000\",\n\t\"5fa7bfe043886127d4011d8356a47e947963aca8\": \"1820000000000000000000\",\n\t\"6af8e55969682c715f48ad4fc0fbb67eb59795a3\": \"2000000000000000000000\",\n\t\"122f56122549d168a5c5e267f52662e5c5cce5c8\": \"185000000000000000000\",\n\t\"7713ab8037411c09ba687f6f9364f0d3239fac28\": \"10000000000000000000000\",\n\t\"31ccc616b3118268e75d9ab8996c8858ebd7f3c3\": \"399924000000000000000\",\n\t\"09c88f917e4d6ad473fa12e98ea3c4472a5ed6da\": \"10000000000000000000000\",\n\t\"e796fd4e839b4c95d7510fb7c5c72b83c6c3e3c7\": \"512200000000000000000\",\n\t\"a8285539869d88f8a961533755717d7eb65576ae\": \"200000000000000000000\",\n\t\"d929c65d69d5bbaea59762662ef418bc21ad924a\": \"1000000000000000000000\",\n\t\"f7418aa0e713d248228776b2e7434222ae75e3a5\": \"2000000000000000000000\",\n\t\"7f0b90a1fdd48f27b268feb38382e55ddb50ef0f\": \"940000000000000000000\",\n\t\"34a0431fff5ead927f3c69649616dc6e97945f6f\": \"400000000000000000000\",\n\t\"1b3cb81e51011b549d78bf720b0d924ac763a7c2\": \"560000000000000000000000\",\n\t\"155b3779bb6d56342e2fda817b5b2d81c7f41327\": \"50200000000000000000\",\n\t\"ecd486fc196791b92cf612d348614f9156488b7e\": \"12000000000000000000000\",\n\t\"82a8cbbfdff02b2e38ae4bbfca15f1f0e83b1aea\": \"84999000000000000000\",\n\t\"06b0c1e37f5a5ec4bbf50840548f9d3ac0288897\": \"4000098000000000000000\",\n\t\"e6d49f86c228f47367a35e886caacb271e539429\": \"412656000000000000000\",\n\t\"704a6eb41ba34f13addde7d2db7df04915c7a221\": \"1820000000000000000000\",\n\t\"745ccf2d819edbbddea8117b5c49ed3c2a066e93\": \"4000000000000000000000\",\n\t\"6d3b7836a2b9d899721a4d237b522385dce8dfcd\": \"1000070000000000000000\",\n\t\"856aa23c82d7215bec8d57f60ad75ef14fa35f44\": \"20000000000000000000000\",\n\t\"ea79057dabef5e64e7b44f7f18648e7e533718d2\": \"200000000000000000000\",\n\t\"9df057cd03a4e27e8e032f857985fd7f01adc8d7\": \"2000000000000000000000\",\n\t\"5f2f07d2d697e8c567fcfdfe020f49f360be2139\": \"2000000000000000000000\",\n\t\"5efbdfe5389999633c26605a5bfc2c1bb5959393\": \"69200000000000000000\",\n\t\"047e87c8f7d1fce3b01353a85862a948ac049f3e\": \"1490000000000000000000\",\n\t\"265383d68b52d034161bfab01ae1b047942fbc32\": \"21000600000000000000000\",\n\t\"760ff3354e0fde938d0fb5b82cef5ba15c3d2916\": \"10000000000000000000000\",\n\t\"bc46d537cf2edd403565bde733b2e34b215001bd\": \"20000000000000000000000\",\n\t\"ee58fb3db29070d0130188ce472be0a172b89055\": \"10021400000000000000000\",\n\t\"75abe5270f3a78ce007cf37f8fbc045d489b7bb1\": \"1999944000000000000000\",\n\t\"5fc6c11426b4a1eae7e51dd512ad1090c6f1a85b\": \"2730000000000000000000\",\n\t\"26cfffd052152bb3f957b478d5f98b233a7c2b92\": \"4000000000000000000000\",\n\t\"0a4a011995c681bc999fdd79754e9a324ae3b379\": \"41350300000000000000000\",\n\t\"6fa60df818a5446418b1bbd62826e0b9825e1318\": \"13200000000000000000000\",\n\t\"63d55ad99b9137fd1b20cc2b4f03d42cbaddf334\": \"400000000000000000000\",\n\t\"679b9a109930517e8999099ccf2a914c4c8dd934\": \"60000000000000000000\",\n\t\"3e83544f0082552572c782bee5d218f1ef064a9d\": \"100076000000000000000\",\n\t\"968b14648f018333687cd213fa640aec04ce6323\": \"1000000000000000000000\",\n\t\"427b462ab84e5091f48a46eb0cdc92ddcb26e078\": \"2000000000000000000000\",\n\t\"df8510793eee811c2dab1c93c6f4473f30fbef5b\": \"1000000000000000000000\",\n\t\"362fbcb10662370a068fc2652602a2577937cce6\": \"200000000000000000000\",\n\t\"5d83b21bd2712360436b67a597ee3378db3e7ae4\": \"2000000000000000000000\",\n\t\"5777441c83e03f0be8dd340bde636850847c620b\": \"10000000000000000000000\",\n\t\"c94a585203da7bbafd93e15884e660d4b1ead854\": \"7000000000000000000000\",\n\t\"35a08081799173e001cc5bd46a02406dc95d1787\": \"10000000000000000000000\",\n\t\"21d13f0c4024e967d9470791b50f22de3afecf1b\": \"4452210000000000000000\",\n\t\"fdfd6134c04a8ab7eb16f00643f8fed7daaaecb2\": \"400000000000000000000\",\n\t\"fd812bc69fb170ef57e2327e80affd14f8e4b6d2\": \"2000000000000000000000\",\n\t\"7148aef33261d8031fac3f7182ff35928daf54d9\": \"4100000000000000000000\",\n\t\"0b06390f2437b20ec4a3d3431b3279c6583e5ed7\": \"194000000000000000000\",\n\t\"4909b31998ead414b8fb0e846bd5cbde393935be\": \"4000000000000000000000\",\n\t\"b70dba9391682b4a364e77fe99256301a6c0bf1f\": \"200000000000000000000\",\n\t\"6b83bae7b565244558555bcf4ba8da2011891c17\": \"2000000000000000000000\",\n\t\"70a03549aa6168e97e88a508330a5a0bea74711a\": \"1337000000000000000000\",\n\t\"0fc9a0e34145fbfdd2c9d2a499b617d7a02969b9\": \"180000000000000000000\",\n\t\"2ddf40905769bcc426cb2c2938ffe077e1e89d98\": \"3000000000000000000000\",\n\t\"794b51c39e53d9e762b0613b829a44b472f4fff3\": \"667965000000000000000\",\n\t\"d062588171cf99bbeb58f126b870f9a3728d61ec\": \"4500000000000000000000\",\n\t\"8db185fe1b70a94a6a080e7e23a8bedc4acbf34b\": \"1400000000000000000000\",\n\t\"e73bfeada6f0fd016fbc843ebcf6e370a65be70c\": \"1970000000000000000000\",\n\t\"79ed10cf1f6db48206b50919b9b697081fbdaaf3\": \"2000000000000000000000\",\n\t\"276b0521b0e68b277df0bb32f3fd48326350bfb2\": \"50000000000000000000\",\n\t\"2e439348df8a4277b22a768457d1158e97c40904\": \"776970000000000000000\",\n\t\"6c25327f8dcbb2f45e561e86e35d8850e53ab059\": \"1103200000000000000000\",\n\t\"04d73896cf6593a691972a13a6e4871ff2c42b13\": \"2000000000000000000000\",\n\t\"b10fd2a647102f881f74c9fbc37da632949f2375\": \"40000000000000000000\",\n\t\"615f82365c5101f071e7d2cb6af14f7aad2c16c6\": \"20000000000000000000\",\n\t\"93aa8f92ebfff991fc055e906e651ac768d32bc8\": \"940000000000000000000\",\n\t\"0cbf8770f0d1082e5c20c5aead34e5fca9ae7ae2\": \"1000000000000000000000\",\n\t\"ffc9cc3094b041ad0e076f968a0de3b167255866\": \"432400000000000000000\",\n\t\"46531e8b1bde097fdf849d6d119885608a008df7\": \"200000000000000000000\",\n\t\"23cd2598a20e149ead2ad69379576ecedb60e38e\": \"2000000000000000000000\",\n\t\"85ca8bc6da2803d0725f5e1a456c89f9bc774e2f\": \"600000000000000000000\",\n\t\"c0725ec2bdc33a1d826071dea29d62d4385a8c25\": \"40740000000000000000000\",\n\t\"0e4765790352656bc656682c24fc5ef3e76a23c7\": \"46610000000000000000\",\n\t\"2ef9e465716acacfb8c8252fa8e7bc7969ebf6e4\": \"2760000000000000000000\",\n\t\"0ec5308b31282e218fc9e759d4fec5db3708cec4\": \"1001000000000000000000\",\n\t\"bf7701fc6225d5a17815438a8941d21ebc5d059d\": \"1880000000000000000000\",\n\t\"c489c83ffbb0252ac0dbe3521217630e0f491f14\": \"4000000000000000000000\",\n\t\"8eb51774af206b966b8909c45aa6722748802c0c\": \"500000000000000000000\",\n\t\"7b9226d46fe751940bc416a798b69ccf0dfab667\": \"4200000000000000000000\",\n\t\"8f660f8b2e4c7cc2b4ac9c47ed28508d5f8f8650\": \"20000000000000000000000\",\n\t\"9f19fac8a32437d80ac6837a0bb7841729f4972e\": \"650100000000000000000\",\n\t\"201864a8f784c2277b0b7c9ee734f7b377eab648\": \"4467000000000000000000\",\n\t\"a6101c961e8e1c15798ffcd0e3201d7786ec373a\": \"6000000000000000000000\",\n\t\"d4ff46203efa23064b1caf00516e28704a82a4f8\": \"1337000000000000000000\",\n\t\"aa136b47962bb8b4fb540db4ccf5fdd042ffb8cf\": \"500038000000000000000\",\n\t\"704ae21d762d6e1dde28c235d13104597236db1a\": \"2000000000000000000000\",\n\t\"f17a92e0361dbacecdc5de0d1894955af6a9b606\": \"2000000000000000000000\",\n\t\"8b48e19d39dd35b66e6e1bb6b9c657cb2cf59d04\": \"17844175000000000000000\",\n\t\"9ad47fdcf9cd942d28effd5b84115b31a658a13e\": \"3290000000000000000000\",\n\t\"df0d08617bd252a911df8bd41a39b83ddf809673\": \"10000000000000000000000\",\n\t\"4c666b86f1c5ee8ca41285f5bde4f79052081406\": \"500000000000000000000\",\n\t\"88dec5bd3f4eba2d18b8aacefa7b721548c319ba\": \"1370000000000000000000\",\n\t\"9f9fe0c95f10fee87af1af207236c8f3614ef02f\": \"6000000000000000000000\",\n\t\"f7d0d310acea18406138baaabbfe0571e80de85f\": \"1337000000000000000000\",\n\t\"9569c63a9284a805626db3a32e9d236393476151\": \"1970000000000000000000\",\n\t\"5d5c2c1099bbeefb267e74b58880b444d94449e0\": \"253574000000000000000\",\n\t\"8c6ae7a05a1de57582ae2768204276c0ff47ed03\": \"208000000000000000000000\",\n\t\"432d884bd69db1acc0d89c64ade4cb4fc3a88b7a\": \"2483000000000000000000\",\n\t\"672cbca8440a8577097b19aff593a2ad9d28a756\": \"80000000000000000000\",\n\t\"19df9445a81c1b3d804aeaeb6f6e204e4236663f\": \"37387000000000000000\",\n\t\"1cb5f33b4d488936d13e3161da33a1da7df70d1b\": \"200000000000000000000\",\n\t\"df60f18c812a11ed4e2776e7a80ecf5e5305b3d6\": \"900000000000000000000\",\n\t\"c99a9cd6c9c1be3534eecd92ecc22f5c38e9515b\": \"4821030000000000000000\",\n\t\"00c40fe2095423509b9fd9b754323158af2310f3\": \"0\",\n\t\"da4a5f557f3bab390a92f49b9b900af30c46ae80\": \"10000000000000000000000\",\n\t\"f36df02fbd89607347afce2969b9c4236a58a506\": \"2000000000000000000000\",\n\t\"c549df83c6f65eec0f1dc9a0934a5c5f3a50fd88\": \"2910000000000000000000\",\n\t\"9f662e95274121f177566e636d23964cf1fd686f\": \"2000000000000000000000\",\n\t\"5a267331facb262daaecd9dd63a9700c5f5259df\": \"100000000000000000000\",\n\t\"117d9aa3c4d13bee12c7500f09f5dd1c66c46504\": \"206000000000000000000\",\n\t\"1b4d07acd38183a61bb2783d2b7b178dd502ac8d\": \"200000000000000000000\",\n\t\"3c0c3defac9cea7acc319a96c30b8e1fedab4574\": \"1940000000000000000000\",\n\t\"e4dc22ed595bf0a337c01e03cc6be744255fc9e8\": \"191000000000000000000\",\n\t\"8f067c7c1bbd57780b7b9eeb9ec0032f90d0dcf9\": \"20000000000000000000000\",\n\t\"40e2440ae142c880366a12c6d4102f4b8434b62a\": \"1000000000000000000000\",\n\t\"f9ece022bccd2c92346911e79dd50303c01e0188\": \"1000000000000000000000\",\n\t\"f70328ef97625fe745faa49ee0f9d4aa3b0dfb69\": \"1000000000000000000000\",\n\t\"b6aacb8cb30bab2ae4a2424626e6e12b02d04605\": \"8000000000000000000000\",\n\t\"154459fa2f21318e3434449789d826cdc1570ce5\": \"2000000000000000000000\",\n\t\"684a44c069339d08e19a75668bdba303be855332\": \"70000000000000000000000\",\n\t\"9fe501aa57ead79278937cd6308c5cfa7a5629fe\": \"50003000000000000000\",\n\t\"3e45bd55db9060eced923bb9cb733cb3573fb531\": \"1640000000000000000000\",\n\t\"9c9f3b8a811b21f3ff3fe20fe970051ce66a824f\": \"1157740000000000000000\",\n\t\"e99aece90541cae224b87da673965e0aeb296afd\": \"920000000000000000000\",\n\t\"2f6dce1330c59ef921602154572d4d4bacbd048a\": \"1000000000000000000000\",\n\t\"6a6353b971589f18f2955cba28abe8acce6a5761\": \"3000000000000000000000\",\n\t\"98c10ebf2c4f97cba5a1ab3f2aafe1cac423f8cb\": \"300000000000000000000\",\n\t\"8077c3e4c445586e094ce102937fa05b737b568c\": \"100000000000000000000\",\n\t\"13371f92a56ea8381e43059a95128bdc4d43c5a6\": \"1000000000000000000000\",\n\t\"35a6885083c899dabbf530ed6c12f4dd3a204cf5\": \"200000000000000000000\",\n\t\"36b2c85e3aeeebb70d63c4a4730ce2e8e88a3624\": \"10000000000000000000000\",\n\t\"5ce44068b8f4a3fe799e6a8311dbfdeda29dee0e\": \"2000000000000000000000\",\n\t\"6fa6388d402b30afe59934c3b9e13d1186476018\": \"670000000000000000000\",\n\t\"8251358ca4e060ddb559ca58bc0bddbeb4070203\": \"2000000000000000000000\",\n\t\"17e86f3b5b30c0ba59f2b2e858425ba89f0a10b0\": \"2000000000000000000000\",\n\t\"298ec76b440d8807b3f78b5f90979bee42ed43db\": \"30000000000000000000000\",\n\t\"ce4b065dbcb23047203262fb48c1188364977470\": \"500000000000000000000\",\n\t\"c8e2adeb545e499d982c0c117363ceb489c5b11f\": \"985000000000000000000\",\n\t\"9928ff715afc3a2b60f8eb4cc4ba4ee8dab6e59d\": \"440000000000000000000\",\n\t\"c76130c73cb9210238025c9df95d0be54ac67fbe\": \"1500000000000000000000\",\n\t\"72d03d4dfab3500cf89b86866f15d4528e14a195\": \"4488000000000000000000\",\n\t\"d193e583d6070563e7b862b9614a47e99489f3e5\": \"999972000000000000000\",\n\t\"4df140ba796585dd5489315bca4bba680adbb818\": \"2674000000000000000000\",\n\t\"009eef0a0886056e3f69211853b9b7457f3782e4\": \"3000512000000000000000\",\n\t\"6e255b700ae7138a4bacf22888a9e2c00a285eec\": \"4000000000000000000000\",\n\t\"aa47a4ffc979363232c99b99fada0f2734b0aeee\": \"8121800000000000000000\",\n\t\"9d069197d1de50045a186f5ec744ac40e8af91c6\": \"2000000000000000000000\",\n\t\"b514882c979bb642a80dd38754d5b8c8296d9a07\": \"955000000000000000000\",\n\t\"17c0478657e1d3d17aaa331dd429cecf91f8ae5d\": \"999942000000000000000\",\n\t\"5f9616c47b4a67f406b95a14fe6fc268396f1721\": \"200000000000000000000\",\n\t\"f70a998a717b338d1dd99854409b1a338deea4b0\": \"2000000000000000000000\",\n\t\"d1ee905957fe7cc70ec8f2868b43fe47b13febff\": \"44000000000000000000\",\n\t\"fc018a690ad6746dbe3acf9712ddca52b6250039\": \"10000000000000000000000\",\n\t\"5118557d600d05c2fcbf3806ffbd93d02025d730\": \"11360000000000000000000\",\n\t\"1ef5c9c73650cfbbde5c885531d427c7c3fe5544\": \"6000000000000000000000\",\n\t\"d1a396dcdab2c7494130b3fd307820340dfd8c1f\": \"17952000000000000000\",\n\t\"2d8e061892a5dcce21966ae1bb0788fd3e8ba059\": \"250066000000000000000\",\n\t\"8834b2453471f324fb26be5b25166b5b5726025d\": \"573000000000000000000\",\n\t\"14f221159518783bc4a706676fc4f3c5ee405829\": \"200000000000000000000\",\n\t\"c056d4bd6bf3cbacac65f8f5a0e3980b852740ae\": \"100000000000000000000\",\n\t\"560536794a9e2b0049d10233c41adc5f418a264a\": \"1000000000000000000000\",\n\t\"bc9e0ec6788f7df4c7fc210aacd220c27e45c910\": \"500000000000000000000\",\n\t\"54bcb8e7f73cda3d73f4d38b2d0847e600ba0df8\": \"1078000000000000000000\",\n\t\"4361d4846fafb377b6c0ee49a596a78ddf3516a3\": \"3580000000000000000000\",\n\t\"41c3c2367534d13ba2b33f185cdbe6ac43c2fa31\": \"4000000000000000000000\",\n\t\"5dc6f45fef26b06e3302313f884daf48e2746fb9\": \"500000000000000000000\",\n\t\"ad414d29cb7ee973fec54e22a388491786cf5402\": \"14000000000000000000000\",\n\t\"802dc3c4ff2d7d925ee2859f4a06d7ba60f1308c\": \"98040000000000000000\",\n\t\"2aed2ce531c056b0097efc3c6de10c4762004ed9\": \"10430000000000000000000\",\n\t\"39782ffe06ac78822a3c3a8afe305e50a56188ce\": \"10000000000000000000000\",\n\t\"ec73833de4b810bb027810fc8f69f544e83c12d1\": \"1000000000000000000000\",\n\t\"8d51a4cc62011322c696fd725b9fb8f53feaaa07\": \"1000000000000000000000\",\n\t\"29298ccbdff689f87fe41aa6e98fdfb53deaf37a\": \"19800000000000000000000\",\n\t\"827531a6c5817ae35f82b00b9754fcf74c55e232\": \"3600000000000000000000\",\n\t\"9c581a60b61028d934167929b22d70b313c34fd0\": \"50000000000000000000000\",\n\t\"0a077db13ffeb09484c217709d5886b8bf9c5a8b\": \"4000000000000000000000\",\n\t\"07b7a57033f8f11330e4665e185d234e83ec140b\": \"4325683000000000000000\",\n\t\"17f523f117bc9fe978aa481eb4f5561711371bc8\": \"1999884000000000000000\",\n\t\"de42fcd24ce4239383304367595f068f0c610740\": \"45120000000000000000\",\n\t\"2a46d353777176ff8e83ffa8001f4f70f9733aa5\": \"106000000000000000000\",\n\t\"92e4392816e5f2ef5fb65837cec2c2325cc64922\": \"10000000000000000000000\",\n\t\"9a3da65023a13020d22145cfc18bab10bd19ce4e\": \"456516000000000000000\",\n\t\"1a085d43ec92414ea27b914fe767b6d46b1eef44\": \"29550000000000000000000\",\n\t\"3b2367f8494b5fe18d683c055d89999c9f3d1b34\": \"10000000000000000000000\",\n\t\"84244fc95a6957ed7c1504e49f30b8c35eca4b79\": \"2000000000000000000000\",\n\t\"5e031b0a724471d476f3bcd2eb078338bf67fbef\": \"18200000000000000000\",\n\t\"97e5cc6127c4f885be02f44b42d1c8b0ac91e493\": \"200000000000000000000\",\n\t\"eb1cea7b45d1bd4d0e2a007bd3bfb354759e2c16\": \"198000000000000000000\",\n\t\"72feaf124579523954645b7fafff0378d1c8242e\": \"1000000000000000000000\",\n\t\"8d07d42d831c2d7c838aa1872b3ad5d277176823\": \"349200000000000000000\",\n\t\"9637dc12723d9c78588542eab082664f3f038d9d\": \"1000000000000000000000\",\n\t\"e84b55b525f1039e744b918cb3332492e45eca7a\": \"200000000000000000000\",\n\t\"b1d6b01b94d854fe8b374aa65e895cf22aa2560e\": \"940000000000000000000\",\n\t\"8161d940c3760100b9080529f8a60325030f6edc\": \"300000000000000000000\",\n\t\"d30ee9a12b4d68abace6baca9ad7bf5cd1faf91c\": \"1499936000000000000000\",\n\t\"057949e1ca0570469e4ce3c690ae613a6b01c559\": \"200000000000000000000\",\n\t\"4bf8e26f4c2790da6533a2ac9abac3c69a199433\": \"200000000000000000000\",\n\t\"36fec62c2c425e219b18448ad757009d8c54026f\": \"400000000000000000000\",\n\t\"77bfe93ccda750847e41a1affee6b2da96e7214e\": \"300000000000000000000\",\n\t\"cc48414d2ac4d42a5962f29eee4497092f431352\": \"161000000000000000000\",\n\t\"ddbddd1bbd38ffade0305d30f02028d92e9f3aa8\": \"2000000000000000000000\",\n\t\"30c01142907acb1565f70438b9980ae731818738\": \"2000000000000000000000\",\n\t\"cffc49c1787eebb2b56cabe92404b636147d4558\": \"5679305000000000000000\",\n\t\"f99eeece39fa7ef5076d855061384009792cf2e0\": \"500000000000000000000\",\n\t\"e9b6a790009bc16642c8d820b7cde0e9fd16d8f5\": \"3640000000000000000000\",\n\t\"03b41b51f41df20dd279bae18c12775f77ad771c\": \"1000000000000000000000\",\n\t\"787d313fd36b053eeeaedbce74b9fb0678333289\": \"27160000000000000000000\",\n\t\"35d2970f49dcc81ea9ee707e9c8a0ab2a8bb7463\": \"1440000000000000000000\",\n\t\"4c0aca508b3caf5ee028bc707dd1e800b838f453\": \"18200000000000000000\",\n\t\"514632efbd642c04de6ca342315d40dd90a2dba6\": \"2674000000000000000000\",\n\t\"36810ff9d213a271eda2b8aa798be654fa4bbe06\": \"2000000000000000000000\",\n\t\"0c088006c64b30c4ddafbc36cb5f05469eb62834\": \"2000000000000000000000\",\n\t\"568df31856699bb5acfc1fe1d680df9960ca4359\": \"1379999000000000000000\",\n\t\"d48e3f9357e303513841b3f84bda83fc89727587\": \"1000000000000000000000\",\n\t\"953ef652e7b769f53d6e786a58952fa93ee6abe7\": \"2860000000000000000000\",\n\t\"7c60a05f7a4a5f8cf2784391362e755a8341ef59\": \"1892300000000000000000\",\n\t\"7a6b26f438d9a352449155b8876cbd17c9d99b64\": \"6000000000000000000000\",\n\t\"68f719ae342bd7fef18a05cbb02f705ad38ed5b2\": \"1050000000000000000000\",\n\t\"45ca8d956608f9e00a2f9974028640888465668f\": \"2000000000000000000000\",\n\t\"3eaf316b87615d88f7adc77c58e712ed4d77966b\": \"100141000000000000000\",\n\t\"1f0412bfedcd964e837d092c71a5fcbaf30126e2\": \"20000000000000000000\",\n\t\"7471f72eeb300624eb282eab4d03723c649b1b58\": \"8000000000000000000000\",\n\t\"9bf71f7fb537ac54f4e514947fa7ff6728f16d2f\": \"33400000000000000000\",\n\t\"1098c774c20ca1daac5ddb620365316d353f109c\": \"100000000000000000000\",\n\t\"7dd8d7a1a34fa1f8e73ccb005fc2a03a15b8229c\": \"200000000000000000000\",\n\t\"0151fa5d17a2dce2d7f1eb39ef7fe2ad213d5d89\": \"4000000000000000000000\",\n\t\"ad6628352ed3390bafa86d923e56014cfcb360f4\": \"2000000000000000000000\",\n\t\"02af2459a93d0b3f4d062636236cd4b29e3bcecf\": \"1910000000000000000000\",\n\t\"ace2abb63b0604409fbde3e716d2876d44e8e5dd\": \"152000000000000000000\",\n\t\"e710dcd09b8101f9437bd97db90a73ef993d0bf4\": \"386100000000000000000\",\n\t\"d43ee438d83de9a37562bb4e286cb1bd19f4964d\": \"1000000000000000000000\",\n\t\"ea3779d14a13f6c78566bcde403591413a6239db\": \"197000000000000000000000\",\n\t\"6704f169e0d0b36b57bbc39f3c45437b5ee3d28d\": \"394000000000000000000\",\n\t\"5584423050e3c2051f0bbd8f44bd6dbc27ecb62c\": \"3000000000000000000000\",\n\t\"2f315d9016e8ee5f536681202f9084b032544d4d\": \"1037400000000000000000\",\n\t\"e1b63201fae1f129f95c7a116bd9dde5159c6cda\": \"22837462000000000000000\",\n\t\"2bbe62eac80ca7f4d6fdee7e7d8e28b63acf770e\": \"2396000000000000000000\",\n\t\"38da1ba2de9e2c954b092dd9d81204fd016ba016\": \"10156000000000000000000\",\n\t\"8a86e4a51c013b1fb4c76bcf30667c78d52eedef\": \"2000000000000000000000\",\n\t\"8f717ec1552f4c440084fba1154a81dc003ebdc0\": \"10000000000000000000000\",\n\t\"c760971bbc181c6a7cf77441f24247d19ce9b4cf\": \"2000000000000000000000\",\n\t\"7f150afb1a77c2b45928c268c1e9bdb4641d47d8\": \"2000000000000000000000\",\n\t\"1ea334b5750807ea74aac5ab8694ec5f28aa77cf\": \"492500000000000000000\",\n\t\"2afb058c3d31032b353bf24f09ae20d54de57dbe\": \"1100000000000000000000\",\n\t\"caef027b1ab504c73f41f2a10979b474f97e309f\": \"200000000000000000000\",\n\t\"5dd112f368c0e6ceff77a9df02a5481651a02fb7\": \"169800000000000000000\",\n\t\"bd93e550403e2a06113ed4c3fba1a8913b19407e\": \"2000000000000000000000\",\n\t\"500c16352e901d48ba8d04e2c767121772790b02\": \"30239000000000000000\",\n\t\"d2a80327cbe55c4c7bd51ff9dde4ca648f9eb3f8\": \"50000000000000000000\",\n\t\"355ccfe0e77d557b971be1a558bc02df9eee0594\": \"1759120000000000000000\",\n\t\"5aed0e6cfe95f9d680c76472a81a2b680a7f93e2\": \"197000000000000000000\",\n\t\"f56442f60e21691395d0bffaa9194dcaff12e2b7\": \"260000000000000000000\",\n\t\"7db9eacc52e429dc83b461c5f4d86010e5383a28\": \"1000000000000000000000\",\n\t\"4b984ef26c576e815a2eaed2f5177f07dbb1c476\": \"1560000000000000000000\",\n\t\"9846648836a307a057184fd51f628a5f8c12427c\": \"19100000000000000000000\",\n\t\"4af0db077bb9ba5e443e21e148e59f379105c592\": \"600000000000000000000\",\n\t\"e96e2d3813efd1165f12f602f97f4a62909d3c66\": \"2300000000000000000000\",\n\t\"30e789b3d2465e946e6210fa5b35de4e8c93085f\": \"2000000000000000000000\",\n\t\"97f99b6ba31346cd98a9fe4c308f87c5a58c5151\": \"6000000000000000000000\",\n\t\"595e23d788a2d4bb85a15df7136d264a635511b3\": \"3940000000000000000000\",\n\t\"2f61efa5819d705f2b1e4ee754aeb8a819506a75\": \"1460000000000000000000\",\n\t\"3554947b7b947b0040da52ca180925c6d3b88ffe\": \"66850000000000000000\",\n\t\"8feffadb387a1547fb284da9b8147f3e7c6dc6da\": \"837200000000000000000\",\n\t\"258939bbf00c9de9af5338f5d714abf6d0c1c671\": \"1550000000000000000000\",\n\t\"5b333696e04cca1692e71986579c920d6b2916f9\": \"500000000000000000000\",\n\t\"5381448503c0c702542b1de7cc5fb5f6ab1cf6a5\": \"8000000000000000000000\",\n\t\"7e81f6449a03374191f3b7cb05d938b72e090dff\": \"100000000000000000000\",\n\t\"4ef1c214633ad9c0703b4e2374a2e33e3e429291\": \"1337000000000000000000\",\n\t\"fed8476d10d584b38bfa6737600ef19d35c41ed8\": \"1820000000000000000000\",\n\t\"1a95c9b7546b5d1786c3858fb1236446bc0ca4ce\": \"1970000000000000000000\",\n\t\"3b07db5a357f5af2484cbc9d77d73b1fd0519fc7\": \"500000000000000000000\",\n\t\"5f68a24c7eb4117667737b33393fb3c2148a53b6\": \"51800000000000000000\",\n\t\"d8f665fd8cd5c2bcc6ddc0a8ae521e4dc6aa6060\": \"1700000000000000000000\",\n\t\"d66acc0d11b689cea6d9ea5ff4014c224a5dc7c4\": \"18200000000000000000\",\n\t\"6e72b2a1186a8e2916543b1cb36a68870ea5d197\": \"186000000000000000000\",\n\t\"5102a4a42077e11c58df4773e3ac944623a66d9f\": \"2000325000000000000000\",\n\t\"72480bede81ad96423f2228b5c61be44fb523100\": \"6400000000000000000000\",\n\t\"e076db30ab486f79194ebbc45d8fab9a9242f654\": \"4840000000000000000000\",\n\t\"8ceea15eec3bdad8023f98ecf25b2b8fef27db29\": \"2000000000000000000000\",\n\t\"40652360d6716dc55cf9aab21f3482f816cc2cbd\": \"10000000000000000000000\",\n\t\"13e02fb448d6c84ae17db310ad286d056160da95\": \"2000000000000000000000\",\n\t\"d6598b1386e93c5ccb9602ff4bbbecdbd3701dc4\": \"224096000000000000000\",\n\t\"d5ea472cb9466018110af00c37495b5c2c713112\": \"4997800000000000000000\",\n\t\"bb75cb5051a0b0944b4673ca752a97037f7c8c15\": \"200000000000000000000\",\n\t\"8af626a5f327d7506589eeb7010ff9c9446020d2\": \"1400000000000000000000\",\n\t\"318c76ecfd8af68d70555352e1f601e35988042d\": \"501600000000000000000\",\n\t\"5c3d19441d196cb443662020fcad7fbb79b29e78\": \"14300000000000000000\",\n\t\"27101a0f56d39a88c5a84f9b324cdde33e5cb68c\": \"2000000000000000000000\",\n\t\"e229e746a83f2ce253b0b03eb1472411b57e5700\": \"5730000000000000000000\",\n\t\"604cdf18628dbfa8329194d478dd5201eecc4be7\": \"23000000000000000000\",\n\t\"657473774f63ac3d6279fd0743d5790c4f161503\": \"200000000000000000000\",\n\t\"1ddefefd35ab8f658b2471e54790bc17af98dea4\": \"1000000000000000000000\",\n\t\"ac3900298dd14d7cc96d4abb428da1bae213ffed\": \"24730250000000000000000\",\n\t\"944f07b96f90c5f0d7c0c580533149f3f585a078\": \"74000000000000000000\",\n\t\"232c6d03b5b6e6711efff190e49c28eef36c82b0\": \"1337000000000000000000\",\n\t\"c87c77e3c24adecdcd1038a38b56e18dead3b702\": \"8800000000000000000000\",\n\t\"c4b6e5f09cc1b90df07803ce3d4d13766a9c46f4\": \"6000000000000000000000\",\n\t\"d44334b4e23a169a0c16bd21e866bba52d970587\": \"2600000000000000000000\",\n\t\"7757a4b9cc3d0247ccaaeb9909a0e56e1dd6dcc2\": \"20000000000000000000\",\n\t\"cf694081c76d18c64ca71382be5cd63b3cb476f8\": \"1000000000000000000000\",\n\t\"133e4f15e1e39c53435930aaedf3e0fe56fde843\": \"20000000000000000000\",\n\t\"f067fb10dfb293e998abe564c055e3348f9fbf1e\": \"2000000000000000000000\",\n\t\"94449c01b32a7fa55af8104f42cdd844aa8cbc40\": \"16548000000000000000000\",\n\t\"0e2094ac1654a46ba1c4d3a40bb8c17da7f39688\": \"358000000000000000000\",\n\t\"738ca94db7ce8be1c3056cd6988eb376359f3353\": \"25500000000000000000000\",\n\t\"0cfb172335b16c87d519cd1475530d20577f5e0e\": \"100000000000000000000000\",\n\t\"3cb561ce86424b359891e364ec925ffeff277df7\": \"200000000000000000000\",\n\t\"5f981039fcf50225e2adf762752112d1cc26b6e3\": \"499954000000000000000\",\n\t\"b43657a50eecbc3077e005d8f8d94f377876bad4\": \"35460000000000000000\",\n\t\"d07e511864b1cf9969e3560602829e32fc4e71f5\": \"50000000000000000000\",\n\t\"11306c7d57588637780fc9fde8e98ecb008f0164\": \"1999944000000000000000\",\n\t\"45ca9862003b4e40a3171fb5cafa9028cac8de19\": \"13790000000000000000000\",\n\t\"231d94155dbcfe2a93a319b6171f63b20bd2b6fa\": \"3819952000000000000000\",\n\t\"e7533e270cc61fa164ac1553455c105d04887e14\": \"121550000000000000000\",\n\t\"070d5d364cb7bbf822fc2ca91a35bdd441b215d5\": \"2000000000000000000000\",\n\t\"d475477fa56390d33017518d6711027f05f28dbf\": \"1975032000000000000000\",\n\t\"cea34a4dd93dd9aefd399002a97d997a1b4b89cd\": \"1500000000000000000000\",\n\t\"560becdf52b71f3d8827d927610f1a980f33716f\": \"429413000000000000000\",\n\t\"f632adff490da4b72d1236d04b510f74d2faa3cd\": \"1400000000000000000000\",\n\t\"2fdd9b79df8df530ad63c20e62af431ae99216b8\": \"21000000000000000000\",\n\t\"535201a0a1d73422801f55ded4dfaee4fbaa6e3b\": \"39641000000000000000\",\n\t\"409d5a962edeeebea178018c0f38b9cdb213f289\": \"20000000000000000000\",\n\t\"9d911f3682f32fe0792e9fb6ff3cfc47f589fca5\": \"4000000000000000000000\",\n\t\"9f7a0392f857732e3004a375e6b1068d49d83031\": \"2000000000000000000000\",\n\t\"6a04f5d53fc0f515be942b8f12a9cb7ab0f39778\": \"3129800000000000000000\",\n\t\"be478e8e3dde6bd403bb2d1c657c4310ee192723\": \"492500000000000000000\",\n\t\"007622d84a234bb8b078230fcf84b67ae9a8acae\": \"698800000000000000000\",\n\t\"9475c510ec9a26979247744c3d8c3b0e0b5f44d3\": \"10000000000000000000000\",\n\t\"df47a8ef95f2f49f8e6f58184154145d11f72797\": \"1910000000000000000000\",\n\t\"13ce332dff65a6ab933897588aa23e000980fa82\": \"258400000000000000000\",\n\t\"9c4bbcd5f1644a6f075824ddfe85c571d6abf69c\": \"1800000000000000000000\",\n\t\"d42b20bd0311608b66f8a6d15b2a95e6de27c5bf\": \"2000000000000000000000\",\n\t\"a4dd59ab5e517d398e49fa537f899fed4c15e95d\": \"20000000000000000000000\",\n\t\"1a8a5ce414de9cd172937e37f2d59cff71ce57a0\": \"10000000000000000000000\",\n\t\"55c564664166a1edf3913e0169f1cd451fdb5d0c\": \"2399800000000000000000\",\n\t\"58ae2ddc5f4c8ada97e06c0086171767c423f5d7\": \"1610000000000000000000\",\n\t\"fb79abdb925c55b9f98efeef64cfc9eb61f51bb1\": \"1794000000000000000000\",\n\t\"e7a42f59fee074e4fb13ea9e57ecf1cc48282249\": \"20000000000000000000000\",\n\t\"07e2b4cdeed9d087b12e556d9e770c13c099615f\": \"668500000000000000000\",\n\t\"68473b7a7d965904bedba556dfbc17136cd5d434\": \"100000000000000000000\",\n\t\"6c5c3a54cda7c2f118edba434ed81e6ebb11dd7a\": \"200000000000000000000\",\n\t\"24c117d1d2b3a97ab11a4679c99a774a9eade8d1\": \"1000000000000000000000\",\n\t\"f68c5e33fa97139df5b2e63886ce34ebf3e4979c\": \"3320000000000000000000\",\n\t\"bd7419dc2a090a46e2873d7de6eaaad59e19c479\": \"6802000000000000000000\",\n\t\"1a0a1ddfb031e5c8cc1d46cf05842d50fddc7130\": \"1000000000000000000000\",\n\t\"2b3a68db6b0cae8a7c7a476bdfcfbd6205e10687\": \"2400000000000000000000\",\n\t\"426d15f407a01135b13a6b72f8f2520b3531e302\": \"20000000000000000000\",\n\t\"0394b90fadb8604f86f43fc1e35d3124b32a5989\": \"764000000000000000000\",\n\t\"7412c9bc30b4df439f023100e63924066afd53af\": \"500000000000000000000\",\n\t\"80e7b3205230a566a1f061d922819bb4d4d2a0e1\": \"14000000000000000000000\",\n\t\"ff4fc66069046c525658c337a917f2d4b832b409\": \"2000000000000000000000\",\n\t\"f5061ee2e5ee26b815503677130e1de07a52db07\": \"100000000000000000000\",\n\t\"49793463e1681083d6abd6e725d5bba745dccde8\": \"545974000000000000000\",\n\t\"23551f56975fe92b31fa469c49ea66ee6662f41e\": \"1910000000000000000000\",\n\t\"fad96ab6ac768ad5099452ac4777bd1a47edc48f\": \"100000000000000000000\",\n\t\"2a746cd44027af3ebd37c378c85ef7f754ab5f28\": \"394000000000000000000\",\n\t\"b8d389e624a3a7aebce4d3e5dbdf6cdc29932aed\": \"200000000000000000000\",\n\t\"7b761feb7fcfa7ded1f0eb058f4a600bf3a708cb\": \"4600000000000000000000\",\n\t\"5435c6c1793317d32ce13bba4c4ffeb973b78adc\": \"250070000000000000000\",\n\t\"dd04eee74e0bf30c3f8d6c2c7f52e0519210df93\": \"80000000000000000000\",\n\t\"4331ab3747d35720a9d8ca25165cd285acd4bda8\": \"2000000000000000000000\",\n\t\"b84c8b9fd33ece00af9199f3cf5fe0cce28cd14a\": \"3820000000000000000000\",\n\t\"393f783b5cdb86221bf0294fb714959c7b45899c\": \"5910000000000000000000\",\n\t\"259ec4d265f3ab536b7c70fa97aca142692c13fc\": \"20400000000000000000\",\n\t\"5d2f7f0b04ba4be161e19cb6f112ce7a5e7d7fe4\": \"35200000000000000000\",\n\t\"d54ba2d85681dc130e5b9b02c4e8c851391fd9b9\": \"3940000000000000000000\",\n\t\"5cd8af60de65f24dc3ce5730ba92653022dc5963\": \"1790000000000000000000\",\n\t\"3b42a66d979f582834747a8b60428e9b4eeccd23\": \"620400000000000000000\",\n\t\"4b19eb0c354bc1393960eb06063b83926f0d67b2\": \"29000000000000000000\",\n\t\"8cf3546fd1cda33d58845fc8fcfecabca7c5642a\": \"574027000000000000000\",\n\t\"113612bc3ba0ee4898b49dd20233905f2f458f62\": \"14000000000000000000000\",\n\t\"1f2afc0aed11bfc71e77a907657b36ea76e3fb99\": \"4000000000000000000000\",\n\t\"03714b41d2a6f751008ef8dd4d2b29aecab8f36e\": \"6000000000000000000000\",\n\t\"25721c87b0dc21377c7200e524b14a22f0af69fb\": \"4000000000000000000000\",\n\t\"335858f749f169cabcfe52b796e3c11ec47ea3c2\": \"200000000000000000000\",\n\t\"52fb46ac5d00c3518b2c3a1c177d442f8165555f\": \"1500000000000000000000\",\n\t\"7a8c89c014509d56d7b68130668ff6a3ecec7370\": \"300000000000000000000\",\n\t\"7d5d2f73949dadda0856b206989df0078d51a1e5\": \"10560000000000000000000\",\n\t\"be538246dd4e6f0c20bf5ad1373c3b463a131e86\": \"200000000000000000000\",\n\t\"62680a15f8ccb8bdc02f7360c25ad8cfb57b8ccd\": \"1000000000000000000000\",\n\t\"aa0ca3737337178a0caac3099c584b056c56301c\": \"880000000000000000000\",\n\t\"1d341fa5a3a1bd051f7db807b6db2fc7ba4f9b45\": \"18200000000000000000\",\n\t\"6463f715d594a1a4ace4bb9c3b288a74decf294d\": \"1970000000000000000000\",\n\t\"e00d153b10369143f97f54b8d4ca229eb3e8f324\": \"152000000000000000000\",\n\t\"8d0b9ea53fd263415eac11391f7ce9123c447062\": \"2000000000000000000000\",\n\t\"cacb675e0996235404efafbb2ecb8152271b55e0\": \"700000000000000000000\",\n\t\"b615e940143eb57f875893bc98a61b3d618c1e8c\": \"20000000000000000000\",\n\t\"606f177121f7855c21a5062330c8762264a97b31\": \"4000000000000000000000\",\n\t\"e3925509c8d0b2a6738c5f6a72f35314491248ce\": \"1012961000000000000000\",\n\t\"3f08d9ad894f813e8e2148c160d24b353a8e74b0\": \"60000000000000000000000\",\n\t\"40f4f4c06c732cd35b119b893b127e7d9d0771e4\": \"10000000000000000000000\",\n\t\"1406854d149e081ac09cb4ca560da463f3123059\": \"1337000000000000000000\",\n\t\"ecf05d07ea026e7ebf4941002335baf2fed0f002\": \"200000000000000000000\",\n\t\"9a990b8aeb588d7ee7ec2ed8c2e64f7382a9fee2\": \"33518000000000000000\",\n\t\"a2e0683a805de6a05edb2ffbb5e96f0570b637c3\": \"20000000000000000000\",\n\t\"fba5486d53c6e240494241abf87e43c7600d413a\": \"1987592000000000000000\",\n\t\"d81bd54ba2c44a6f6beb1561d68b80b5444e6dc6\": \"1163806000000000000000\",\n\t\"5298ab182a19359ffcecafd7d1b5fa212dede6dd\": \"20000000000000000000\",\n\t\"d1acb5adc1183973258d6b8524ffa28ffeb23de3\": \"4000000000000000000000\",\n\t\"4e7aa67e12183ef9d7468ea28ad239c2eef71b76\": \"4925000000000000000000\",\n\t\"509a20bc48e72be1cdaf9569c711e8648d957334\": \"2000000000000000000000\",\n\t\"949f84f0b1d7c4a7cf49ee7f8b2c4a134de32878\": \"685000000000000000000\",\n\t\"edbac9527b54d6df7ae2e000cca3613ba015cae3\": \"1970000000000000000000\",\n\t\"c697b70477cab42e2b8b266681f4ae7375bb2541\": \"5577200000000000000000\",\n\t\"86c934e38e53be3b33f274d0539cfca159a4d0d1\": \"970000000000000000000\",\n\t\"0877eeaeab78d5c00e83c32b2d98fa79ad51482f\": \"439420000000000000000\",\n\t\"5e11ecf69d551d7f4f84df128046b3a13240a328\": \"20000000000000000000\",\n\t\"43ff8853e98ed8406b95000ada848362d6a0392a\": \"22100000000000000000000\",\n\t\"f11cf5d363746fee6864d3ca336dd80679bb87ae\": \"40000000000000000000000\",\n\t\"fb223c1e22eac1269b32ee156a5385922ed36fb8\": \"2000000000000000000000\",\n\t\"4e6600806289454acda330a2a3556010dfacade6\": \"6000000000000000000000\",\n\t\"cfe2caaf3cec97061d0939748739bffe684ae91f\": \"10000000000000000000000\",\n\t\"adeb52b604e5f77faaac88275b8d6b49e9f9f97f\": \"2089268000000000000000\",\n\t\"d53c567f0c3ff2e08b7d59e2b5c73485437fc58d\": \"600000000000000000000\",\n\t\"fbf75933e01b75b154ef0669076be87f62dffae1\": \"78000000000000000000000\",\n\t\"7dfd2962b575bcbeee97f49142d63c30ab009f66\": \"4000000000000000000000\",\n\t\"df6485c4297ac152b289b19dde32c77ec417f47d\": \"1000000000000000000000\",\n\t\"ffb974673367f5c07be5fd270dc4b7138b074d57\": \"2470407000000000000000\",\n\t\"f7d7af204c56f31fd94398e40df1964bd8bf123c\": \"150011000000000000000\",\n\t\"4506fe19fa4b006baa3984529d8516db2b2b50ab\": \"2000000000000000000000\",\n\t\"f4dc7ba85480bbb3f535c09568aaa3af6f3721c6\": \"7214962000000000000000\",\n\t\"d171c3f2258aef35e599c7da1aa07300234da9a6\": \"2000000000000000000000\",\n\t\"33581cee233088c0860d944e0cf1ceabb8261c2e\": \"13370000000000000000\",\n\t\"1c2e3607e127caca0fbd5c5948adad7dd830b285\": \"19700000000000000000000\",\n\t\"fd7ede8f5240a06541eb699d782c2f9afb2170f6\": \"1337000000000000000000\",\n\t\"368c5414b56b8455171fbf076220c1cba4b5ca31\": \"557940000000000000000\",\n\t\"3e8745ba322f5fd6cb50124ec46688c7a69a7fae\": \"4925000000000000000000\",\n\t\"76506eb4a780c951c74a06b03d3b8362f0999d71\": \"500000000000000000000\",\n\t\"96d62dfd46087f62409d93dd606188e70e381257\": \"2000000000000000000000\",\n\t\"37eada93c475ded2f7e15e7787d400470fa52062\": \"200000000000000000000\",\n\t\"26babf42b267fdcf3861fdd4236a5e474848b358\": \"1000000000000000000000\",\n\t\"3526eece1a6bdc3ee7b400fe935b48463f31bed7\": \"82400000000000000000\",\n\t\"27b62816e1e3b8d19b79d1513d5dfa855b0c3a2a\": \"99941000000000000000\",\n\t\"b3e3c439069880156600c2892e448d4136c92d9b\": \"850000000000000000000\",\n\t\"574ad9355390e4889ef42acd138b2a27e78c00ae\": \"1557000000000000000000\",\n\t\"f0b9d683cea12ba600baace219b0b3c97e8c00e4\": \"100000000000000000000\",\n\t\"a437fe6ec103ca8d158f63b334224eccac5b3ea3\": \"8000000000000000000000\",\n\t\"7a48d877b63a8f8f9383e9d01e53e80c528e955f\": \"8000000000000000000000\",\n\t\"e965daa34039f7f0df62375a37e5ab8a72b301e7\": \"4796000000000000000000\",\n\t\"72cd048a110574482983492dfb1bd27942a696ba\": \"2000000000000000000000\",\n\t\"6611ce59a98b072ae959dc49ad511daaaaa19d6b\": \"200000000000000000000\",\n\t\"0d92582fdba05eabc3e51538c56db8813785b328\": \"191000000000000000000\",\n\t\"e87e9bbfbbb71c1a740c74c723426df55d063dd9\": \"7998000000000000000000\",\n\t\"9c99a1da91d5920bc14e0cb914fdf62b94cb8358\": \"20000000000000000000000\",\n\t\"fe8e6e3665570dff7a1bda697aa589c0b4e9024a\": \"2000000000000000000000\",\n\t\"811461a2b0ca90badac06a9ea16e787b33b196cc\": \"164000000000000000000\",\n\t\"d211b21f1b12b5096181590de07ef81a89537ead\": \"2000000000000000000000\",\n\t\"01155057002f6b0d18acb9388d3bc8129f8f7a20\": \"1340000000000000000000\",\n\t\"8ce22f9fa372449a420610b47ae0c8d565481232\": \"2000000000000000000000\",\n\t\"e02b74a47628be315b1f76b315054ad44ae9716f\": \"4000000000000000000000\",\n\t\"92a7c5a64362e9f842a23deca21035857f889800\": \"1999944000000000000000\",\n\t\"5213f459e078ad3ab95a0920239fcf1633dc04ca\": \"2599989000000000000000\",\n\t\"c9957ba94c1b29e5277ec36622704904c63dc023\": \"1923000000000000000000\",\n\t\"6ac40f532dfee5118117d2ad352da77d4f6da2c8\": \"400000000000000000000\",\n\t\"ea1efb3ce789bedec3d67c3e1b3bc0e9aa227f90\": \"734000000000000000000\",\n\t\"b01e389b28a31d8e4995bdd7d7c81beeab1e4119\": \"1000000000000000000000\",\n\t\"ee97aa8ac69edf7a987d6d70979f8ec1fbca7a94\": \"376000000000000000000\",\n\t\"0fad05507cdc8f24b2be4cb7fa5d927ddb911b88\": \"3004447000000000000000\",\n\t\"b6e8afd93dfa9af27f39b4df06076710bee3dfab\": \"25000000000000000000\",\n\t\"7d0b255efb57e10f7008aa22d40e9752dfcf0378\": \"29944000000000000000\",\n\t\"aef5b12258a18dec07d5ec2e316574919d79d6d6\": \"2000000000000000000000\",\n\t\"63666755bd41b5986997783c13043008242b3cb5\": \"500000000000000000000\",\n\t\"921f5261f4f612760706892625c75e7bce96b708\": \"2000000000000000000000\",\n\t\"10e1e3377885c42d7df218522ee7766887c05e6a\": \"300031000000000000000\",\n\t\"134163be9fbbe1c5696ee255e90b13254395c318\": \"200000000000000000000\",\n\t\"870f15e5df8b0eabd02569537a8ef93b56785c42\": \"388000000000000000000\",\n\t\"68eec1e288ac31b6eaba7e1fbd4f04ad579a6b5d\": \"2000000000000000000000\",\n\t\"1a2694ec07cf5e4d68ba40f3e7a14c53f3038c6e\": \"1000073000000000000000\",\n\t\"cd9b4cef73390c83a8fd71d7b540a7f9cf8b8c92\": \"90000000000000000000\",\n\t\"c8de7a564c7f4012a6f6d10fd08f47890fbf07d4\": \"300000000000000000000\",\n\t\"c0345b33f49ce27fe82cf7c84d141c68f590ce76\": \"1000000000000000000000\",\n\t\"fe53b94989d89964da2061539526bbe979dd2ea9\": \"1930600000000000000000\",\n\t\"14410fb310711be074a80883c635d0ef6afb2539\": \"2000000000000000000000\",\n\t\"1d344e962567cb27e44db9f2fac7b68df1c1e6f7\": \"1940000000000000000000\",\n\t\"fe016ec17ec5f10e3bb98ff4a1eda045157682ab\": \"375804000000000000000\",\n\t\"e89da96e06beaf6bd880b378f0680c43fd2e9d30\": \"601400000000000000000\",\n\t\"0fee81ac331efd8f81161c57382bb4507bb9ebec\": \"400030000000000000000\",\n\t\"40cf90ef5b768c5da585002ccbe6617650d8e837\": \"999800000000000000000\",\n\t\"256fa150cc87b5056a07d004efc84524739e62b5\": \"200000000000000000000\",\n\t\"1b9b2dc2960e4cb9408f7405827c9b59071612fd\": \"1000000000000000000000\",\n\t\"0efd1789eb1244a3dede0f5de582d8963cb1f39f\": \"1500000000000000000000\",\n\t\"049c5d4bc6f25d4e456c697b52a07811ccd19fb1\": \"300048000000000000000\",\n\t\"02b7b1d6b34ce053a40eb65cd4a4f7dddd0e9f30\": \"685000000000000000000\",\n\t\"c1827686c0169485ec15b3a7c8c01517a2874de1\": \"40000000000000000000\",\n\t\"d8e5c9675ef4deed266b86956fc4590ea7d4a27d\": \"1000000000000000000000\",\n\t\"48f883e567b436a27bb5a3124dbc84dec775a800\": \"771840000000000000000\",\n\t\"a34076f84bd917f20f8342c98ba79e6fb08ecd31\": \"4200000000000000000000\",\n\t\"21ce6d5b9018cec04ad6967944bea39e8030b6b8\": \"20000000000000000000\",\n\t\"0596a27dc3ee115fce2f94b481bc207a9e261525\": \"1000000000000000000000\",\n\t\"717cf9beab3638308ded7e195e0c86132d163fed\": \"15097428000000000000000\",\n\t\"d5ce55d1b62f59433c2126bcec09bafc9dfaa514\": \"197000000000000000000\",\n\t\"7dd46da677e161825e12e80dc446f58276e1127c\": \"820000000000000000000\",\n\t\"98c5494a03ac91a768dffc0ea1dde0acbf889019\": \"200000000000000000000000\",\n\t\"617ff2cc803e31c9082233b825d025be3f7b1056\": \"1970000000000000000000\",\n\t\"1091176be19b9964a8f72e0ece6bf8e3cfad6e9c\": \"10020000000000000000000\",\n\t\"4ea56e1112641c038d0565a9c296c463afefc17e\": \"182000000000000000000\",\n\t\"e303167f3d4960fe881b32800a2b4aeff1b088d4\": \"2000000000000000000000\",\n\t\"773141127d8cf318aebf88365add3d5527d85b6a\": \"1000076000000000000000\",\n\t\"b916b1a01cdc4e56e7657715ea37e2a0f087d106\": \"2406017000000000000000\",\n\t\"46a430a2d4a894a0d8aa3feac615361415c3f81f\": \"2000000000000000000000\",\n\t\"e6a3010f0201bc94ff67a2f699dfc206f9e76742\": \"879088000000000000000\",\n\t\"d7ad09c6d32657685355b5c6ec8e9f57b4ebb982\": \"1970000000000000000000\",\n\t\"95e80a82c20cbe3d2060242cb92d735810d034a2\": \"32511000000000000000\",\n\t\"9a390162535e398877e416787d6239e0754e937c\": \"1000000000000000000000\",\n\t\"d85fdeaf2a61f95db902f9b5a53c9b8f9266c3ac\": \"2010000000000000000000\",\n\t\"c3e20c96df8d4e38f50b265a98a906d61bc51a71\": \"2000000000000000000000\",\n\t\"2949fd1def5c76a286b3872424809a07db3966f3\": \"5236067000000000000000\",\n\t\"86cdb7e51ac44772be3690f61d0e59766e8bfc18\": \"4000000000000000000000\",\n\t\"749a4a768b5f237248938a12c623847bd4e688dc\": \"72000000000000000000\",\n\t\"3524a000234ebaaf0789a134a2a417383ce5282a\": \"5635000000000000000000\",\n\t\"7b43c7eea8d62355b0a8a81da081c6446b33e9e0\": \"4000000000000000000000\",\n\t\"0eb189ef2c2d5762a963d6b7bdf9698ea8e7b48a\": \"1337000000000000000000\",\n\t\"767fd7797d5169a05f7364321c19843a8c348e1e\": \"18800000000000000000\",\n\t\"1b2639588b55c344b023e8de5fd4087b1f040361\": \"1500000000000000000000\",\n\t\"1e33d1c2fb5e084f2f1d54bc5267727fec3f985d\": \"500000000000000000000\",\n\t\"06b106649aa8c421ddcd1b8c32cd0418cf30da1f\": \"40000000000000000000000\",\n\t\"3c5a241459c6abbf630239c98a30d20b8b3ac561\": \"157600000000000000000\",\n\t\"0f4f94b9191bb7bb556aaad7c74ddb288417a50b\": \"1400000000000000000000\",\n\t\"d6f4a7d04e8faf20e8c6eb859cf7f78dd23d7a15\": \"131784000000000000000\",\n\t\"61adf5929a5e2981684ea243baa01f7d1f5e148a\": \"110302000000000000000\",\n\t\"8f58d8348fc1dc4e0dd8343b6543c857045ee940\": \"13632400000000000000000\",\n\t\"a6e3baa38e104a1e27a4d82869afb1c0ae6eff8d\": \"19690000000000000000\",\n\t\"67350b5331926f5e28f3c1e986f96443809c8b8c\": \"352000000000000000000\",\n\t\"0b5d66b13c87b392e94d91d5f76c0d450a552843\": \"2000000000000000000000\",\n\t\"562a8dcbbeeef7b360685d27303bd69e094accf6\": \"10000000000000000000000\",\n\t\"b5d9934d7b292bcf603b2880741eb760288383a0\": \"16700000000000000000\",\n\t\"6fc53662371dca587b59850de78606e2359df383\": \"180000000000000000000\",\n\t\"e069c0173352b10bf6834719db5bed01adf97bbc\": \"18894000000000000000\",\n\t\"10a93457496f1108cd98e140a1ecdbae5e6de171\": \"399600000000000000000\",\n\t\"69ff8901b541763f817c5f2998f02dcfc1df2997\": \"40000000000000000000\",\n\t\"00c27d63fde24b92ee8a1e7ed5d26d8dc5c83b03\": \"2000000000000000000000\",\n\t\"77f81b1b26fc84d6de97ef8b9fbd72a33130cc4a\": \"1000000000000000000000\",\n\t\"6d20ef9704670a500bb269b5832e859802049f01\": \"130000000000000000000\",\n\t\"186afdc085f2a3dce4615edffbadf71a11780f50\": \"200000000000000000000\",\n\t\"7ff0c63f70241bece19b737e5341b12b109031d8\": \"346000000000000000000\",\n\t\"9d4174aa6af28476e229dadb46180808c67505c1\": \"1219430000000000000000\",\n\t\"5fec49c665e64ee89dd441ee74056e1f01e92870\": \"6320000000000000000000\",\n\t\"6cd228dc712169307fe27ceb7477b48cfc8272e5\": \"77600000000000000000\",\n\t\"fd918536a8efa6f6cefe1fa1153995fef5e33d3b\": \"500000000000000000000\",\n\t\"2fbb504a5dc527d3e3eb0085e2fc3c7dd538cb7a\": \"1249961000000000000000\",\n\t\"6ab323ae5056ed0a453072c5abe2e42fcf5d7139\": \"880000000000000000000\",\n\t\"67d682a282ef73fb8d6e9071e2614f47ab1d0f5e\": \"1000000000000000000000\",\n\t\"1858cf11aea79f5398ad2bb22267b5a3c952ea74\": \"9850000000000000000000\",\n\t\"39d6caca22bccd6a72f87ee7d6b59e0bde21d719\": \"2002000000000000000000\",\n\t\"daa63cbda45dd487a3f1cd4a746a01bb5e060b90\": \"4797800000000000000000\",\n\t\"a90476e2efdfee4f387b0f32a50678b0efb573b5\": \"10000000000000000000000\",\n\t\"ae5aa1e6c2b60f6fd3efe721bb4a719cbe3d6f5d\": \"795860000000000000000\",\n\t\"ac2e766dac3f648f637ac6713fddb068e4a4f04d\": \"197000000000000000000\",\n\t\"6191ddc9b64a8e0890b4323709d7a07c48b92a64\": \"775000000000000000000\",\n\t\"cc4f0ff2aeb67d54ce3bc8c6510b9ae83e9d328b\": \"400000000000000000000\",\n\t\"ca23f62dff0d6460036c62e840aec5577e0befd2\": \"140800000000000000000\",\n\t\"97dc26ec670a31e0221d2a75bc5dc9f90c1f6fd4\": \"50000000000000000000\",\n\t\"848c994a79003fe7b7c26cc63212e1fc2f9c19eb\": \"2000000000000000000000\",\n\t\"20c284ba10a20830fc3d699ec97d2dfa27e1b95e\": \"2000000000000000000000\",\n\t\"4fa3f32ef4086448b344d5f0a9890d1ce4d617c3\": \"1500000000000000000000\",\n\t\"255abc8d08a096a88f3d6ab55fbc7352bddcb9ce\": \"82161000000000000000\",\n\t\"7c60e51f0be228e4d56fdd2992c814da7740c6bc\": \"200000000000000000000\",\n\t\"1c356cfdb95febb714633b28d5c132dd84a9b436\": \"25000000000000000000\",\n\t\"5062e5134c612f12694dbd0e131d4ce197d1b6a4\": \"1000000000000000000000\",\n\t\"ed862616fcbfb3becb7406f73c5cbff00c940755\": \"1700000000000000000000\",\n\t\"62c9b271ffd5b770a5eee4edc9787b5cdc709714\": \"2000000000000000000000\",\n\t\"3c925619c9b33144463f0537d896358706c520b0\": \"2000000000000000000000\",\n\t\"ffe2e28c3fb74749d7e780dc8a5d422538e6e451\": \"253319000000000000000\",\n\t\"37195a635dcc62f56a718049d47e8f9f96832891\": \"1970000000000000000000\",\n\t\"90e9a9a82edaa814c284d232b6e9ba90701d4952\": \"100007000000000000000\",\n\t\"e0c4ab9072b4e6e3654a49f8a8db026a4b3386a9\": \"2000000000000000000000\",\n\t\"439dee3f7679ff1030733f9340c096686b49390b\": \"2000000000000000000000\",\n\t\"548558d08cfcb101181dac1eb6094b4e1a896fa6\": \"1999944000000000000000\",\n\t\"3090f8130ec44466afadb36ed3c926133963677b\": \"4000000000000000000000\",\n\t\"d1648503b1ccc5b8be03fa1ec4f3ee267e6adf7b\": \"5828000000000000000000\",\n\t\"65b42faecc1edfb14283ca979af545f63b30e60c\": \"18200000000000000000\",\n\t\"6420f8bcc8164a6152a99d6b99693005ccf7e053\": \"999972000000000000000\",\n\t\"84b4b74e6623ba9d1583e0cfbe49643f16384149\": \"20000000000000000000\",\n\t\"b8310a16cc6abc465007694b930f978ece1930bd\": \"740000000000000000000\",\n\t\"16019a4dafab43f4d9bf4163fae0847d848afca2\": \"25060000000000000000\",\n\t\"479298a9de147e63a1c7d6d2fce089c7e64083bd\": \"9999999000000000000000\",\n\t\"030973807b2f426914ad00181270acd27b8ff61f\": \"5348000000000000000000\",\n\t\"b07bcf1cc5d4462e5124c965ecf0d70dc27aca75\": \"1600000000000000000000\",\n\t\"a2f798e077b07d86124e1407df32890dbb4b6379\": \"200000000000000000000\",\n\t\"0cbd921dbe121563b98a6871fecb14f1cc7e88d7\": \"200000000000000000000\",\n\t\"6042276df2983fe2bc4759dc1943e18fdbc34f77\": \"1970000000000000000000\",\n\t\"be2b2280523768ea8ac35cd9e888d60a719300d4\": \"2000000000000000000000\",\n\t\"2f4da753430fc09e73acbccdcde9da647f2b5d37\": \"200000000000000000000\",\n\t\"734223d27ff23e5906caed22595701bb34830ca1\": \"2000000000000000000000\",\n\t\"5b430d779696a3653fc60e74fbcbacf6b9c2baf1\": \"14000000000000000000000\",\n\t\"84232107932b12e03186583525ce023a703ef8d9\": \"2000000000000000000000\",\n\t\"4ed14d81b60b23fb25054d8925dfa573dcae6168\": \"340000000000000000000\",\n\t\"8b338411f26ccf37658cc75521d77629099e467d\": \"2000000000000000000000\",\n\t\"a37622ac9bbdc4d82b75015d745b9f8de65a28ec\": \"2910000000000000000000\",\n\t\"1dd77441844afe9cc18f15d8c77bccfb655ee034\": \"4850000000000000000000\",\n\t\"65849be1af20100eb8a3ba5a5be4d3ae8db5a70e\": \"400000000000000000000\",\n\t\"d5586da4e59583c8d86cccf71a86197f17996749\": \"2000000000000000000000\",\n\t\"4b53ae59c784b6b5c43616b9a0809558e684e10c\": \"1200000000000000000000\",\n\t\"55d42eb495bf46a634997b5f2ea362814918e2b0\": \"106128000000000000000\",\n\t\"959ff17f1d51b473b44010052755a7fa8c75bd54\": \"1970000000000000000000\",\n\t\"5a2daab25c31a61a92a4c82c9925a1d2ef58585e\": \"225400000000000000000\",\n\t\"24c0c88b54a3544709828ab4ab06840559f6c5e2\": \"2674000000000000000000\",\n\t\"7e8649e690fc8c1bfda1b5e186581f649b50fe33\": \"98500000000000000000\",\n\t\"4acfa9d94eda6625c9dfa5f9f4f5d107c4031fdf\": \"39400000000000000000\",\n\t\"5778ffdc9b94c5a59e224eb965b6de90f222d170\": \"335320000000000000000\",\n\t\"825a7f4e10949cb6f8964268f1fa5f57e712b4c4\": \"20000000000000000000\",\n\t\"6f39cc37caaa2ddc9b610f6131e0619fae772a3c\": \"500000000000000000000\",\n\t\"5b437365ae3a9a2ff97c68e6f90a7620188c7d19\": \"2002000000000000000000\",\n\t\"6710c2c03c65992b2e774be52d3ab4a6ba217ef7\": \"11600000000000000000000\",\n\t\"896e335ca47af57962fa0f4dbf3e45e688cba584\": \"1368500000000000000000\",\n\t\"b57549bfbc9bdd18f736b22650e48a73601fa65c\": \"446000000000000000000\",\n\t\"85ca1e727e9d1a87991cc2c41840ebb9edf21d1b\": \"13370000000000000000\",\n\t\"cf4166746e1d3bc1f8d0714b01f17e8a62df1464\": \"1004700000000000000000\",\n\t\"4a75c3d4fa6fccbd5dd5a703c15379a1e783e9b7\": \"1820000000000000000000\",\n\t\"9e5811b40be1e2a1e1d28c3b0774acde0a09603d\": \"3000000000000000000000\",\n\t\"763886e333c56feff85be3951ab0b889ce262e95\": \"2000000000000000000000\",\n\t\"2b101e822cd962962a06800a2c08d3b15d82b735\": \"152000000000000000000\",\n\t\"a01e9476df84431825c836e8803a97e22fa5a0cd\": \"6000000000000000000000\",\n\t\"be4e7d983f2e2a636b1102ec7039efebc842e98d\": \"66000000000000000000\",\n\t\"9e427272516b3e67d4fcbf82f59390d04c8e28e5\": \"4000000000000000000000\",\n\t\"e0d231e144ec9107386c7c9b02f1702ceaa4f700\": \"5000057000000000000000\",\n\t\"6a0f056066c2d56628850273d7ecb7f8e6e9129e\": \"5000016000000000000000\",\n\t\"d1538e9a87e59ca9ec8e5826a5b793f99f96c4c3\": \"1000000000000000000000\",\n\t\"f85bab1cb3710fc05fa19ffac22e67521a0ba21d\": \"2003000000000000000000\",\n\t\"f7cbdba6be6cfe68dbc23c2b0ff530ee05226f84\": \"20000000000000000000\",\n\t\"4eb87ba8788eba0df87e5b9bd50a8e45368091c1\": \"20000000000000000000\",\n\t\"1479a9ec7480b74b5db8fc499be352da7f84ee9c\": \"1000000000000000000000\",\n\t\"d311bcd7aa4e9b4f383ff3d0d6b6e07e21e3705d\": \"200000000000000000000\",\n\t\"425c1816868f7777cc2ba6c6d28c9e1e796c52b3\": \"10000000000000000000000\",\n\t\"8510ee934f0cbc900e1007eb38a21e2a5101b8b2\": \"106000000000000000000\",\n\t\"01e864d354741b423e6f42851724468c74f5aa9c\": \"20000000000000000000000\",\n\t\"a543a066fb32a8668aa0736a0c9cd40d78098727\": \"1000000000000000000000\",\n\t\"f3eb1948b951e22df1617829bf3b8d8680ec6b68\": \"4000000000000000000000\",\n\t\"f6b782f4dcd745a6c0e2e030600e04a24b25e542\": \"400000000000000000000\",\n\t\"229f4f1a2a4f540774505b4707a81de44410255b\": \"2000000000000000000000\",\n\t\"cff8d06b00e3f50c191099ad56ba6ae26571cd88\": \"1000000000000000000000\",\n\t\"910b7d577a7e39aa23acf62ad7f1ef342934b968\": \"10000000000000000000000\",\n\t\"392433d2ce83d3fb4a7602cca3faca4ec140a4b0\": \"51000000000000000000\",\n\t\"8ff46045687723dc33e4d099a06904f1ebb584dc\": \"2000000000000000000000\",\n\t\"9ca0429f874f8dcee2e9c062a9020a842a587ab9\": \"2000000000000000000000\",\n\t\"160ceb6f980e04315f53c4fc988b2bf69e284d7d\": \"19100000000000000000\",\n\t\"c340f9b91c26728c31d121d5d6fc3bb56d3d8624\": \"2000000000000000000000\",\n\t\"afa1d5ad38fed44759c05b8993c1aa0dace19f40\": \"80000000000000000000\",\n\t\"3969b4f71bb8751ede43c016363a7a614f76118e\": \"2000000000000000000000\",\n\t\"2bb6f578adfbe7b2a116b3554facf9969813c319\": \"7400000000000000000000\",\n\t\"8334764b7b397a4e578f50364d60ce44899bff94\": \"92500000000000000000\",\n\t\"9dd2196624a1ddf14a9d375e5f07152baf22afa2\": \"1211747000000000000000\",\n\t\"f242da845d42d4bf779a00f295b40750fe49ea13\": \"1000000000000000000000\",\n\t\"c6234657a807384126f8968ca1708bb07baa493c\": \"20000000000000000000\",\n\t\"94c055e858357aaa30cf2041fa9059ce164a1f91\": \"19999000000000000000000\",\n\t\"74c73c90528a157336f1e7ea20620ae53fd24728\": \"8969310000000000000000\",\n\t\"19e7f3eb7bf67f3599209ebe08b62ad3327f8cde\": \"2000000000000000000000\",\n\t\"b2b516fdd19e7f3864b6d2cf1b252a4156f1b03b\": \"53720000000000000000\",\n\t\"8164e78314ae16b28926cc553d2ccb16f356270d\": \"8450000000000000000000\",\n\t\"4d828894752f6f25175daf2177094487954b6f9f\": \"1459683000000000000000\",\n\t\"ab84a0f147ad265400002b85029a41fc9ce57f85\": \"1000000000000000000000\",\n\t\"f3fe51fde34413c73318b9c85437fe7e820f561a\": \"1003200000000000000000\",\n\t\"16c7b31e8c376282ac2271728c31c95e35d952c3\": \"2000000000000000000000\",\n\t\"80d5c40c59c7f54ea3a55fcfd175471ea35099b3\": \"1000000000000000000000\",\n\t\"7abb10f5bd9bc33b8ec1a82d64b55b6b18777541\": \"20000000000000000000000\",\n\t\"095b0ea2b218d82e0aea7c2889238a39c9bf9077\": \"20000000000000000000000\",\n\t\"5d5cdbe25b2a044b7b9be383bcaa5807b06d3c6b\": \"2000000000000000000000\",\n\t\"323749a3b971959e46c8b4822dcafaf7aaf9bd6e\": \"20064000000000000000\",\n\t\"e0272213e8d2fd3e96bd6217b24b4ba01b617079\": \"20000000000000000000\",\n\t\"00acbfb2f25a5485c739ef70a44eeeeb7c65a66f\": \"100000000000000000000\",\n\t\"52f15423323c24f19ae2ab673717229d3f747d9b\": \"1026115000000000000000\",\n\t\"cb4abfc282aed76e5d57affda542c1f382fcacf4\": \"8136100000000000000000\",\n\t\"f71b4534f286e43093b1e15efea749e7597b8b57\": \"104410000000000000000000\",\n\t\"44cd77535a893fa7c4d5eb3a240e79d099a72d2d\": \"820000000000000000000\",\n\t\"eb3ce7fc381c51db7d5fbd692f8f9e058a4c703d\": \"200000000000000000000\",\n\t\"f1c8c4a941b4628c0d6c30fda56452d99c7e1b64\": \"1449000000000000000000\",\n\t\"277677aba1e52c3b53bfa2071d4e859a0af7e8e1\": \"1000000000000000000000\",\n\t\"a5f075fd401335577b6683c281e6d101432dc6e0\": \"2680000000000000000000\",\n\t\"e28dbc8efd5e416a762ec0e018864bb9aa83287b\": \"24533161000000000000000\",\n\t\"2b717cd432a323a4659039848d3b87de26fc9546\": \"500000000000000000000000\",\n\t\"b358e97c70b605b1d7d729dfb640b43c5eafd1e7\": \"20000000000000000000000\",\n\t\"293c2306df3604ae4fda0d207aba736f67de0792\": \"200000000000000000000\",\n\t\"74d366b07b2f56477d7c7077ac6fe497e0eb6559\": \"5000000000000000000000\",\n\t\"490145afa8b54522bb21f352f06da5a788fa8f1d\": \"9231182000000000000000\",\n\t\"862569211e8c6327b5415e3a67e5738b15baaf6e\": \"140000000000000000000\",\n\t\"5a74ba62e7c81a3474e27d894fed33dd24ad95fe\": \"18200000000000000000\",\n\t\"536e4d8029b73f5579dca33e70b24eba89e11d7e\": \"1970000000000000000000\",\n\t\"25c6e74ff1d928df98137af4df8430df24f07cd7\": \"390000000000000000000\",\n\t\"19b36b0c87ea664ed80318dc77b688dde87d95a5\": \"1948386000000000000000\",\n\t\"abc4caeb474d4627cb6eb456ecba0ecd08ed8ae1\": \"3940000000000000000000\",\n\t\"8ea656e71ec651bfa17c5a5759d86031cc359977\": \"100000000000000000000\",\n\t\"8d620bde17228f6cbba74df6be87264d985cc179\": \"100000000000000000000\",\n\t\"b2aa2f1f8e93e79713d92cea9ffce9a40af9c82d\": \"2000000000000000000000\",\n\t\"198ef1ec325a96cc354c7266a038be8b5c558f67\": \"608334724000000000000000\",\n\t\"6a13d5e32c1fd26d7e91ff6e053160a89b2c8aad\": \"53480000000000000000\",\n\t\"e056bf3ff41c26256fef51716612b9d39ade999c\": \"100009000000000000000\",\n\t\"2c128c95d957215101f043dd8fc582456d41016d\": \"835000000000000000000\",\n\t\"2560b09b89a4ae6849ed5a3c9958426631714466\": \"1700000000000000000000\",\n\t\"d3d6e9fb82542fd29ed9ea3609891e151396b6f7\": \"54000000000000000000000\",\n\t\"a7607b42573bb6f6b4d4f23c7e2a26b3a0f6b6f0\": \"1610000000000000000000\",\n\t\"020362c3ade878ca90d6b2d889a4cc5510eed5f3\": \"1042883000000000000000\",\n\t\"14830704e99aaad5c55e1f502b27b22c12c91933\": \"620000000000000000000\",\n\t\"8030b111c6983f0485ddaca76224c6180634789f\": \"80000000000000000000\",\n\t\"2c5b7d7b195a371bf9abddb42fe04f2f1d9a9910\": \"200000000000000000000\",\n\t\"77d43fa7b481dbf3db530cfbf5fdced0e6571831\": \"2000000000000000000000\",\n\t\"2d90b415a38e2e19cdd02ff3ad81a97af7cbf672\": \"109800000000000000000\",\n\t\"2fc82ef076932341264f617a0c80dd571e6ae939\": \"7160000000000000000000\",\n\t\"dfe549fe8430e552c6d07cc3b92ccd43b12fb50f\": \"83620000000000000000\",\n\t\"1e8e689b02917cdc29245d0c9c68b094b41a9ed6\": \"2000000000000000000000\",\n\t\"21c3a8bba267c8cca27b1a9afabad86f607af708\": \"8940000000000000000000\",\n\t\"143c639752caeecf6a997d39709fc8f19878c7e8\": \"1970000000000000000000\",\n\t\"02603d7a3bb297c67c877e5d34fbd5b913d4c63a\": \"20000000000000000000\",\n\t\"a166f911c644ac3213d29e0e1ae010f794d5ad26\": \"2000000000000000000000\",\n\t\"6eb3819617404058268f0c3cff3596bfe9148c1c\": \"1670000000000000000000\",\n\t\"7a67dd043a504fc2f2fc7194e9becf484cecb1fb\": \"250000000000000000000\",\n\t\"f824ee331e4ac3cc587693395b57ecf625a6c0c2\": \"1600930000000000000000\",\n\t\"1179c60dbd068b150b074da4be23033b20c68558\": \"680000000000000000000\",\n\t\"d2a479404347c5543aab292ae1bb4a6f158357fa\": \"4000000000000000000000\",\n\t\"b0d32bd7e4e695b7b01aa3d0416f80557dba9903\": \"16300000000000000000000\",\n\t\"f734ec03724ddee5bb5279aa1afcf61b0cb448a1\": \"4238080000000000000000\",\n\t\"c04069dfb18b096c7867f8bee77a6dc7477ad062\": \"2674000000000000000000\",\n\t\"80c53ee7e3357f94ce0d7868009c208b4a130125\": \"2000000000000000000000\",\n\t\"0f32d9cb4d0fdaa0150656bb608dcc43ed7d9301\": \"753978000000000000000\",\n\t\"6ddb6092779d5842ead378e21e8120fd4c6bc132\": \"2000000000000000000000\",\n\t\"82ea01e3bf2e83836e71704e22a2719377efd9c3\": \"3040000000000000000000\",\n\t\"44c1110b18870ec81178d93d215838c551d48e64\": \"199958000000000000000\",\n\t\"7727af101f0aaba4d23a1cafe17c6eb5dab1c6dc\": \"2000000000000000000000\",\n\t\"a11a03c4bb26d21eff677d5d555c80b25453ee7a\": \"69979000000000000000\",\n\t\"19e5dea3370a2c746aae34a37c531f41da264e83\": \"200000000000000000000\",\n\t\"c325c352801ba883b3226c5feb0df9eae2d6e653\": \"3940000000000000000000\",\n\t\"ae5055814cb8be0c117bb8b1c8d2b63b4698b728\": \"32035000000000000000\",\n\t\"deb1bc34d86d4a4dde2580d8beaf074eb0e1a244\": \"1580000000000000000000\",\n\t\"558360206883dd1b6d4a59639e5629d0f0c675d0\": \"2000000000000000000000\",\n\t\"a9d6f871ca781a759a20ac3adb972cf12829a208\": \"925000000000000000000\",\n\t\"b0ac4eff6680ee14169cdadbffdb30804f6d25f5\": \"2000000000000000000000\",\n\t\"f1b58faffa8794f50af8e88309c7a6265455d51a\": \"999800000000000000000\",\n\t\"a61a54df784a44d71b771b87317509211381f200\": \"1000000000000000000000\",\n\t\"baa4b64c2b15b79f5f204246fd70bcbd86e4a92a\": \"500000000000000000000\",\n\t\"a20d8ff60caae31d02e0b665fa435d76f77c9442\": \"489600000000000000000\",\n\t\"f3e74f470c7d3a3f0033780f76a89f3ef691e6cb\": \"3021800000000000000000\",\n\t\"d330728131fe8e3a15487a34573c93457e2afe95\": \"4000000000000000000000\",\n\t\"9af9dbe47422d177f945bdead7e6d82930356230\": \"3940000000000000000000\",\n\t\"0eb5b662a1c718608fd52f0c25f9378830178519\": \"6091400000000000000000\",\n\t\"fda6810ea5ac985d6ffbf1c511f1c142edcfddf7\": \"4000000000000000000000\",\n\t\"832c54176bdf43d2c9bcd7b808b89556b89cbf31\": \"200000000000000000000\",\n\t\"704d5de4846d39b53cd21d1c49f096db5c19ba29\": \"152000000000000000000\",\n\t\"344a8db086faed4efc37131b3a22b0782dad7095\": \"500000000000000000000\",\n\t\"8c7fa5cae82fedb69ab189d3ff27ae209293fb93\": \"400030000000000000000\",\n\t\"ad660dec825522a9f62fcec3c5b731980dc286ea\": \"3000000000000000000000\",\n\t\"13b9b10715714c09cfd610cf9c9846051cb1d513\": \"1970000000000000000000\",\n\t\"40467d80e74c35407b7db51789234615fea66818\": \"388000000000000000000\",\n\t\"30e9d5a0088f1ddb2fd380e2a049192266c51cbf\": \"196910000000000000000\",\n\t\"b2d1e99af91231858e7065dd1918330dc4c747d5\": \"16700000000000000000000\",\n\t\"9f21302ca5096bea7402b91b0fd506254f999a3d\": \"1246832000000000000000\",\n\t\"d24b6644f439c8051dfc64d381b8c86c75c17538\": \"2000000000000000000000\",\n\t\"8228ebc087480fd64547ca281f5eace3041453b9\": \"1970000000000000000000\",\n\t\"29da3e35b23bb1f72f8e2258cf7f553359d24bac\": \"20000000000000000000000\",\n\t\"c8e558a3c5697e6fb23a2594c880b7a1b68f9860\": \"10000000000000000000000\",\n\t\"6b951a43274eeafc8a0903b0af2ec92bf1efc839\": \"100000000000000000000\",\n\t\"d015f6fcb84df7bb410e8c8f04894a881dcac237\": \"1038000000000000000000\",\n\t\"6ccb03acf7f53ce87aadcc21a9932de915f89804\": \"8000000000000000000000\",\n\t\"388c85a9b9207d8146033fe38143f6d34b595c47\": \"200000000000000000000\",\n\t\"429c06b487e8546abdfc958a25a3f0fba53f6f00\": \"13503000000000000000\",\n\t\"771507aeee6a255dc2cd9df55154062d0897b297\": \"334250000000000000000\",\n\t\"5a2b1c853aeb28c45539af76a00ac2d8a8242896\": \"25000000000000000000\",\n\t\"f4d67a9044b435b66e8977ff39a28dc4bd53729a\": \"200000000000000000000\",\n\t\"063759dd1c4e362eb19398951ff9f8fad1d31068\": \"10000000000000000000000\",\n\t\"cb58990bcd90cfbf6d8f0986f6fa600276b94e2d\": \"999925000000000000000\",\n\t\"6df5c84f7b909aab3e61fe0ecb1b3bf260222ad2\": \"4000000000000000000000\",\n\t\"deb2495d6aca7b2a6a2d138b6e1a42e2dc311fdd\": \"2000000000000000000000\",\n\t\"59203cc37599b648312a7cc9e06dacb589a9ae6a\": \"148689000000000000000\",\n\t\"fc9b347464b2f9929d807e039dae48d3d98de379\": \"14000000000000000000000\",\n\t\"48d2434b7a7dbbff08223b6387b05da2e5093126\": \"18000000000000000000000\",\n\t\"c9d76446d5aadff80b68b91b08cd9bc8f5551ac1\": \"714000000000000000000\",\n\t\"3d31587b5fd5869845788725a663290a49d3678c\": \"500000000000000000000\",\n\t\"d8715ef9176f850b2e30eb8e382707f777a6fbe9\": \"2000000000000000000000\",\n\t\"2c2147947ae33fb098b489a5c16bfff9abcd4e2a\": \"200000000000000000000\",\n\t\"d6c0d0bc93a62e257174700e10f024c8b23f1f87\": \"2000000000000000000000\",\n\t\"d1978f2e34407fab1dc2183d95cfda6260b35982\": \"788000000000000000000\",\n\t\"1bf974d9904f45ce81a845e11ef4cbcf27af719e\": \"100000000000000000000\",\n\t\"6e761eaa0f345f777b5441b73a0fa5b56b85f22d\": \"2000000000000000000000\",\n\t\"ea60436912de6bf187d3a472ff8f5333a0f7ed06\": \"19700000000000000000\",\n\t\"94f8f057db7e60e675ad940f155885d1a477348e\": \"401100000000000000000\",\n\t\"8933491760c8f0b4df8caac78ed835caee21046d\": \"20000000000000000000000\",\n\t\"a7775e4af6a23afa201fb78b915e51a515b7a728\": \"120000000000000000000\",\n\t\"d8d64384249b776794063b569878d5e3b530a4b2\": \"177569000000000000000\",\n\t\"be633a3737f68439bac7c90a52142058ee8e8a6f\": \"960000000000000000000\",\n\t\"90bd62a050845261fa4a9f7cf241ea630b05efb8\": \"500000000000000000000\",\n\t\"552987f0651b915b2e1e5328c121960d4bdd6af4\": \"1790000000000000000000\",\n\t\"0baf6ecdb91acb3606a8357c0bc4f45cfd2d7e6f\": \"1000000000000000000000\",\n\t\"9e5a311d9f69898a7c6a9d6360680438e67a7b2f\": \"1490000000000000000000\",\n\t\"78859c5b548b700d9284cee4b6633c2f52e529c2\": \"2955000000000000000000\",\n\t\"d572309169b1402ec8131a17a6aac3222f89e6eb\": \"13800000000000000000000\",\n\t\"8e6d7485cbe990acc1ad0ee9e8ccf39c0c93440e\": \"955000000000000000000\",\n\t\"75c11d024d12ae486c1095b7a7b9c4af3e8edeb9\": \"20000000000000000000\",\n\t\"903413878aea3bc1086309a3fe768b65559e8cab\": \"8000000000000000000000\",\n\t\"6d0569e5558fc7df2766f2ba15dc8aeffc5beb75\": \"4001070000000000000000\",\n\t\"3815b0743f94fc8cc8654fd9d597ed7d8b77c57e\": \"738578000000000000000\",\n\t\"0f26480a150961b8e30750713a94ee6f2e47fc00\": \"1000000000000000000000\",\n\t\"ede5de7c7fb7eee0f36e64530a41440edfbefacf\": \"617200000000000000000\",\n\t\"763a7cbab70d7a64d0a7e52980f681472593490c\": \"600000000000000000000\",\n\t\"6e270ad529f1f0b8d9cb6d2427ec1b7e2dc64a74\": \"200000000000000000000\",\n\t\"eb3bdd59dcdda5a9bb2ac1641fd02180f5f36560\": \"6600000000000000000000\",\n\t\"f4ebf50bc7e54f82e9b9bd24baef29438e259ce6\": \"10000000000000000000000\",\n\t\"882c8f81872c79fed521cb5f950d8b032322ea69\": \"40000000000000000000000\",\n\t\"394132600f4155e07f4d45bc3eb8d9fb72dcd784\": \"2941000000000000000000\",\n\t\"0be2b94ad950a2a62640c35bfccd6c67dae450f6\": \"1940000000000000000000\",\n\t\"d4c6ac742e7c857d4a05a04c33d4d05c1467571d\": \"200000000000000000000\",\n\t\"1fddd85fc98be9c4045961f40f93805ecc4549e5\": \"164000000000000000000\",\n\t\"534065361cb854fac42bfb5c9fcde0604ac919da\": \"2000000000000000000000\",\n\t\"9a6ff5f6a7af7b7ae0ed9c20ecec5023d281b786\": \"2547000000000000000000\",\n\t\"4f3a4854911145ea01c644044bdb2e5a960a982f\": \"4000000000000000000000\",\n\t\"00497e92cdc0e0b963d752b2296acb87da828b24\": \"194800000000000000000\",\n\t\"4ff67fb87f6efba9279930cfbd1b7a343c79fade\": \"400000000000000000000\",\n\t\"62f2e5ccecd52cc4b95e0597df27cc079715608c\": \"143000000000000000000\",\n\t\"1eda084e796500ba14c5121c0d90846f66e4be62\": \"534800000000000000000\",\n\t\"9836b4d30473641ab56aeee19242761d72725178\": \"2000000000000000000000\",\n\t\"de55de0458f850b37e4d78a641dd2eb2dd8f38ce\": \"4000000000000000000000\",\n\t\"140ca28ff33b9f66d7f1fc0078f8c1eef69a1bc0\": \"1600000000000000000000\",\n\t\"2014261f01089f53795630ba9dd24f9a34c2d942\": \"1337000000000000000000\",\n\t\"11415fab61e0dfd4b90676141a557a869ba0bde9\": \"2048000000000000000000\",\n\t\"88344909644c7ad4930fd873ca1c0da2d434c07f\": \"131970000000000000000\",\n\t\"88b217ccb786a254cf4dc57f5d9ac3c455a30483\": \"925000000000000000000\",\n\t\"dfdbcec1014b96da2158ca513e9c8d3b9af1c3d0\": \"2000000000000000000000\",\n\t\"1ba9f7997e5387b6b2aa0135ac2452fe36b4c20d\": \"850000000000000000000\",\n\t\"d70ad2c4e9eebfa637ef56bd486ad2a1e5bce093\": \"200000000000000000000\",\n\t\"9ce27f245e02d1c312c1d500788c9def7690453b\": \"200000000000000000000\",\n\t\"8234f463d18485501f8f85ace4972c9b632dbccc\": \"2000000000000000000000\",\n\t\"994152fc95d5c1ca8b88113abbad4d710e40def6\": \"500000000000000000000\",\n\t\"e5b980d28eece2c06fca6c9473068b37d4a6d6e9\": \"695200000000000000000\",\n\t\"2d426912d059fad9740b2e390a2eeac0546ff01b\": \"1400000000000000000000\",\n\t\"6d9997509882027ea947231424bedede2965d0ba\": \"2001600000000000000000\",\n\t\"167ce7de65e84708595a525497a3eb5e5a665073\": \"575400000000000000000\",\n\t\"e430c0024fdbf73a82e21fccf8cbd09138421c21\": \"4000000000000000000000\",\n\t\"2e52912bc10ea39d54e293f7aed6b99a0f4c73be\": \"400000000000000000000\",\n\t\"12cf8b0e465213211a5b53dfb0dd271a282c12c9\": \"15200000000000000000\",\n\t\"06964e2d17e9189f88a8203936b40ac96e533c06\": \"18200000000000000000\",\n\t\"66b1a63da4dcd9f81fe54f5e3fcb4055ef7ec54f\": \"201412000000000000000\",\n\t\"0a77e7f72b437b574f00128b21f2ac265133528c\": \"2000000000000000000000\",\n\t\"78f5c74785c5668a838072048bf8b453594ddaab\": \"400000000000000000000\",\n\t\"58e554af3d87629620da61d538c7f5b4b54c4afe\": \"1297081000000000000000\",\n\t\"37a10451f36166cf643dd2de6c1cbba8a011cfa3\": \"380000000000000000000\",\n\t\"fe9ad12ef05d6d90261f96c8340a0381974df477\": \"2000000000000000000000\",\n\t\"057f7f81cd7a406fc45994408b5049912c566463\": \"1700000000000000000000\",\n\t\"55a3df57b7aaec16a162fd5316f35bec082821cf\": \"1970000000000000000000\",\n\t\"c0e0b903088e0c63f53dd069575452aff52410c3\": \"3000000000000000000000\",\n\t\"63e88e2e539ffb450386b4e46789b223f5476c45\": \"6292000000000000000000\",\n\t\"3727341f26c12001e378405ee38b2d8464ec7140\": \"2000000000000000000000\",\n\t\"c96751656c0a8ef4357b7344322134b983504aca\": \"2000000000000000000000\",\n\t\"1e060dc6c5f1cb8cc7e1452e02ee167508b56542\": \"12715500000000000000000\",\n\t\"18136c9df167aa17b6f18e22a702c88f4bc28245\": \"4000000000000000000000\",\n\t\"116108c12084612eeda7a93ddcf8d2602e279e5c\": \"2000000000000000000000\",\n\t\"bbb643d2187b364afc10a6fd368d7d55f50d1a3c\": \"1000000000000000000000\",\n\t\"ec83e798c396b7a55e2a2224abcd834b27ea459c\": \"12000000000000000000000\",\n\t\"973f4e361fe5decd989d4c8f7d7cc97990385daf\": \"388500000000000000000\",\n\t\"c0f29ed0076611b5e55e130547e68a48e26df5e4\": \"3000000000000000000000\",\n\t\"fd4b551f6fdbcda6c511b5bb372250a6b783e534\": \"20600000000000000000\",\n\t\"144b19f1f66cbe318347e48d84b14039466c5909\": \"2000000000000000000000\",\n\t\"bf183641edb886ce60b8190261e14f42d93cce01\": \"25019000000000000000\",\n\t\"94db807873860aac3d5aea1e885e52bff2869954\": \"3220000000000000000000\",\n\t\"7a74cee4fa0f6370a7894f116cd00c1147b83e59\": \"800000000000000000000\",\n\t\"cd32a4a8a27f1cc63954aa634f7857057334c7a3\": \"1085000000000000000000\",\n\t\"7cbeb99932e97e6e02058cfc62d0b26bc7cca52b\": \"2000000000000000000000\",\n\t\"8cde8b732e6023878eb23ed16229124b5f7afbec\": \"133700000000000000000\",\n\t\"45c4ecb4ee891ea984a7c5cefd8dfb00310b2850\": \"1980000000000000000000\",\n\t\"8b393fb0813ee101db1e14ecc7d322c72b8c0473\": \"455578000000000000000\",\n\t\"7b66126879844dfa34fe65c9f288117fefb449ad\": \"6000000000000000000000\",\n\t\"162ba503276214b509f97586bd842110d103d517\": \"9002000000000000000000\",\n\t\"7dece6998ae1900dd3770cf4b93812bad84f0322\": \"100000000000000000000\",\n\t\"ec0927bac7dc36669c28354ab1be83d7eec30934\": \"2000000000000000000000\",\n\t\"8d7f3e61299c2db9b9c0487cf627519ed00a9123\": \"1742400000000000000000\",\n\t\"4fc46c396e674869ad9481638f0013630c87caac\": \"1000000000000000000000\",\n\t\"bf68d28aaf1eeefef646b65e8cc8d190f6c6da9c\": \"2000000000000000000000\",\n\t\"00969747f7a5b30645fe00e44901435ace24cc37\": \"1700000000000000000000\",\n\t\"494dec4d5ee88a2771a815f1ee7264942fb58b28\": \"2000000000000000000000\",\n\t\"ffeac0305ede3a915295ec8e61c7f881006f4474\": \"98500000000000000000\",\n\t\"b39139576194a0866195151f33f2140ad1cc86cf\": \"100000000000000000000000\",\n\t\"fead1803e5e737a68e18472d9ac715f0994cc2be\": \"500000000000000000000\",\n\t\"698ab9a2f33381e07c0c47433d0d21d6f336b127\": \"20000000000000000000\",\n\t\"e5edc73e626f5d3441a45539b5f7a398c593edf6\": \"865000000000000000000\",\n\t\"dd4f5fa2111db68f6bde3589b63029395b69a92d\": \"158400000000000000000\",\n\t\"8c93c3c6db9d37717de165c3a1b4fe51952c08de\": \"400000000000000000000\",\n\t\"f87bb07b289df7301e54c0efda6a2cf291e89200\": \"1400000000000000000000\",\n\t\"e7a4560c84b20e0fb54c49670c2903b0a96c42a4\": \"598000000000000000000\",\n\t\"00a5797f52c9d58f189f36b1d45d1bf6041f2f6b\": \"5456900000000000000000\",\n\t\"9da3302240af0511c6fd1857e6ddb7394f77ab6b\": \"3100000000000000000000\",\n\t\"2c2d15ff39561c1b72eda1cc027ffef23743a144\": \"3920000000000000000000\",\n\t\"9b4c2715780ca4e99e60ebf219f1590c8cad500a\": \"1600000000000000000000\",\n\t\"ff5e7ee7d5114821e159dca5e81f18f1bfffbff9\": \"2000000000000000000000\",\n\t\"0169c1c210eae845e56840412e1f65993ea90fb4\": \"2000000000000000000000\",\n\t\"abc45f84db7382dde54c5f7d8938c42f4f3a3bc4\": \"200000000000000000000\",\n\t\"d9383d4b6d17b3f9cd426e10fb944015c0d44bfb\": \"800000000000000000000\",\n\t\"c090fe23dcd86b358c32e48d2af91024259f6566\": \"200000000000000000000\",\n\t\"9ffedcc36b7cc312ad2a9ede431a514fccb49ba3\": \"669800000000000000000\",\n\t\"2ffe93ec1a5636e9ee34af70dff52682e6ff7079\": \"2000000000000000000000\",\n\t\"6e01e4ad569c95d007ada30d5e2db12888492294\": \"4000000000000000000000\",\n\t\"d4d92c62b280e00f626d8657f1b86166cb1f740f\": \"200028000000000000000\",\n\t\"1d36683063b7e9eb99462dabd569bddce71686f2\": \"1000000000000000000000\",\n\t\"3a48e0a7098b06a905802b87545731118e89f439\": \"2000000000000000000000\",\n\t\"bd9e56e902f4be1fc8768d8038bac63e2acbbf8e\": \"999972000000000000000\",\n\t\"4d67f2ab8599fef5fc413999aa01fd7fce70b43d\": \"10000000000000000000000\",\n\t\"8e74e0d1b77ebc823aca03f119854cb12027f6d7\": \"107200000000000000000000\",\n\t\"7e5b19ae1be94ff4dee635492a1b012d14db0213\": \"100000000000000000000\",\n\t\"5de9e7d5d1b667d095dd34099c85b0421a0bc681\": \"20000000000000000000\",\n\t\"316eb4e47df71b42e16d6fe46825b7327baf3124\": \"4000000000000000000000\",\n\t\"772c297f0ad194482ee8c3f036bdeb01c201d5cc\": \"200000000000000000000\",\n\t\"d7052519756af42590f15391b723a03fa564a951\": \"4615591000000000000000\",\n\t\"2c6846a1aa999a2246a287056000ba4dcba8e63d\": \"10020000000000000000000\",\n\t\"de5b005fe8daae8d1f05de3eda042066c6c4691c\": \"1100000000000000000000\",\n\t\"254c1ecc630c2877de8095f0a8dba1e8bf1f550c\": \"1700000000000000000000\",\n\t\"f8f226142a428434ab17a1864a2597f64aab2f06\": \"172473000000000000000\",\n\t\"a6c910ce4d494a919ccdaaa1fc3b82aa74ba06cf\": \"8000000000000000000000\",\n\t\"e587b16abc8a74081e3613e14342c03375bf0847\": \"2000000000000000000000\",\n\t\"6f176065e88e3c6fe626267d18a088aaa4db80bc\": \"3520000000000000000000\",\n\t\"50dcbc27bcad984093a212a9b4178eabe9017561\": \"145512000000000000000\",\n\t\"e1953c6e975814c571311c34c0f6a99cdf48ab82\": \"50000000000000000000\",\n\t\"be0a2f385f09dbfce96732e12bb40ac349871ba8\": \"1610348000000000000000\",\n\t\"4712540265cbeec3847022c59f1b318d43400a9e\": \"3500000000000000000000\",\n\t\"29bdc4f28de0180f433c2694eb74f5504ce94337\": \"2000000000000000000000\",\n\t\"2f66bfbf2262efcc8d2bd0444fc5b0696298ff1e\": \"9940000000000000000000\",\n\t\"506411fd79003480f6f2b6aac26b7ba792f094b2\": \"500000000000000000000\",\n\t\"23ea669e3564819a83b0c26c00a16d9e826f6c46\": \"1430590000000000000000\",\n\t\"e3ffb02cb7d9ea5243701689afd5d417d7ed2ece\": \"78000000000000000000\",\n\t\"38e7dba8fd4f1f850dbc2649d8e84f0952e3eb3c\": \"50000000000000000000\",\n\t\"8644cc281be332ccced36da483fb2a0746d9ba2e\": \"400000000000000000000\",\n\t\"e8a91da6cf1b9d65c74a02ec1f96eecb6dd241f3\": \"1940000000000000000000\",\n\t\"0631dc40d74e5095e3729eddf49544ecd4396f67\": \"160000000000000000000\",\n\t\"83c897a84b695eebe46679f7da19d776621c2694\": \"500000000000000000000\",\n\t\"db73460b59d8e85045d5e752e62559875e42502e\": \"999800000000000000000\",\n\t\"0dd4e674bbadb1b0dc824498713dce3b5156da29\": \"170000000000000000000\",\n\t\"e3933d61b77dcdc716407f8250bc91e4ffaeb09d\": \"86600000000000000000000\",\n\t\"58c90754d2f20a1cb1dd330625e04b45fa619d5c\": \"2000000000000000000000\",\n\t\"895ec5545644e0b78330fffab8ddeac9e833156c\": \"600000000000000000000\",\n\t\"7e1e29721d6cb91057f6c4042d8a0bbc644afe73\": \"159800000000000000000\",\n\t\"72b90a4dc097239492c5b9777dcd1e52ba2be2c2\": \"6000000000000000000000\",\n\t\"64241a7844290e0ab855f1d4aa75b55345032224\": \"1600000000000000000000\",\n\t\"6fd4e0f3f32bee6d3767fdbc9d353a6d3aab7899\": \"695240000000000000000\",\n\t\"3a035594c747476d42d1ee966c36224cdd224993\": \"355890000000000000000\",\n\t\"de97f4330700b48c496d437c91ca1de9c4b01ba4\": \"2910840000000000000000\",\n\t\"716ad3c33a9b9a0a18967357969b94ee7d2abc10\": \"482000000000000000000\",\n\t\"bfbe05e88c9cbbcc0e92a405fac1d85de248ee24\": \"100000000000000000000\",\n\t\"cfc4e6f7f8b011414bfba42f23adfaa78d4ecc5e\": \"1850000000000000000000\",\n\t\"d931ac2668ba6a84481ab139735aec14b7bfbabf\": \"2000000000000000000000\",\n\t\"e3263ce8af6db3e467584502ed7109125eae22a5\": \"2000000000000000000000\",\n\t\"f78258c12481bcdddbb72a8ca0c043097261c6c5\": \"20000000000000000000\",\n\t\"4493123c021ece3b33b1a452c9268de14007f9d3\": \"6685000000000000000000\",\n\t\"431f2c19e316b044a4b3e61a0c6ff8c104a1a12f\": \"1000000000000000000000\",\n\t\"e63e787414b9048478a50733359ecdd7e3647aa6\": \"1580000000000000000000\",\n\t\"e4715956f52f15306ee9506bf82bccc406b3895e\": \"274944000000000000000\",\n\t\"f7f91e7acb5b8129a306877ce3168e6f438b66a1\": \"176000000000000000000\",\n\t\"dcdbbd4e2604e40e1710cc6730289dccfad3892d\": \"4600000000000000000000\",\n\t\"2b5f4b3f1e11707a227aa5e69fa49dded33fb321\": \"6000000000000000000000\",\n\t\"01488ad3da603c4cdd6cb0b7a1e30d2a30c8fc38\": \"200000000000000000000\",\n\t\"841145b44840c946e21dbc190264b8e0d5029369\": \"300000000000000000000000\",\n\t\"bf05070c2c34219311c4548b2614a438810ded6d\": \"2000000000000000000000\",\n\t\"38f387e1a4ed4a73106ef2b462e474e2e3143ad0\": \"6000000000000000000000\",\n\t\"f116b0b4680f53ab72c968ba802e10aa1be11dc8\": \"20000000000000000000\",\n\t\"bea0afc93aae2108a3fac059623bf86fa582a75e\": \"1700000000000000000000\",\n\t\"4c997992036c5b433ac33d25a8ea1dc3d4e4e6d8\": \"29200000000000000000\",\n\t\"ab7e0b83ed9a424c6d1e6a6f87a4dbf06409c7d6\": \"2400000000000000000000\",\n\t\"d71fb130f0150c565269e00efb43902b52a455a6\": \"200000000000000000000\",\n\t\"99b018932bcad355b6792b255db6702dec8ce5dd\": \"4000086000000000000000\",\n\t\"4b904e934bd0cc8b20705f879e905b93ea0ccc30\": \"2000000000000000000000\",\n\t\"672ec42faa8cd69aaa71b32cc7b404881d52ff91\": \"10000000000000000000000\",\n\t\"acbc2d19e06c3babbb5b6f052b6bf7fc37e07229\": \"200000000000000000000\",\n\t\"cea8743341533cb2f0b9c6efb8fda80d77162825\": \"100000000000000000000\",\n\t\"9568b7de755628af359a84543de23504e15e41e6\": \"40000000000000000000000\",\n\t\"6ec96d13bdb24dc7a557293f029e02dd74b97a55\": \"4000000000000000000000\",\n\t\"d95c90ffbe5484864780b867494a83c89256d6e4\": \"1640000000000000000000\",\n\t\"ade6f8163bf7c7bb4abe8e9893bd0cc112fe8872\": \"327600000000000000000\",\n\t\"250eb7c66f869ddf49da85f3393e980c029aa434\": \"4000000000000000000000\",\n\t\"a35c19132cac1935576abfed6c0495fb07881ba0\": \"2000000000000000000000\",\n\t\"d5550caaf743b037c56fd2558a1c8ed235130750\": \"5347598000000000000000\",\n\t\"03097923ba155e16d82f3ad3f6b815540884b92c\": \"1820000000000000000000\",\n\t\"d6d9e30f0842012a7176a917d9d2048ca0738759\": \"4000000000000000000000\",\n\t\"ab9ad36e5c74ce2e96399f57839431d0e79f96ab\": \"164000000000000000000\",\n\t\"75be8ff65e5788aec6b2a52d5fa7b1e7a03ba675\": \"67720000000000000000\",\n\t\"4f6d4737d7a940382487264886697cf7637f8015\": \"1670000000000000000000\",\n\t\"5f7b3bbac16dab831a4a0fc53b0c549dc36c31ca\": \"1940000000000000000000\",\n\t\"d843ee0863ce933e22f89c802d31287b9671e81c\": \"13370000000000000000\",\n\t\"361f3ba9ed956b770f257d3672fe1ff9f7b0240c\": \"600000000000000000000\",\n\t\"6c0ae9f043c834d44271f13406593dfe094f389f\": \"1517545000000000000000\",\n\t\"db34745ede8576b499db01beb7c1ecda85cf4abe\": \"80000000000000000000\",\n\t\"7be8ccb4f11b66ca6e1d57c0b5396221a31ba53a\": \"20000000000000000000\",\n\t\"128b908fe743a434203de294c441c7e20a86ea67\": \"713304000000000000000\",\n\t\"df236bf6abf4f3293795bf0c28718f93e3b1b36b\": \"1337000000000000000000\",\n\t\"14254ea126b52d0142da0a7e188ce255d8c47178\": \"775000000000000000000\",\n\t\"ceed47ca5b899fd1623f21e9bd4db65a10e5b09d\": \"133196000000000000000\",\n\t\"30acd858875fa24eef0d572fc7d62aad0ebddc35\": \"400000000000000000000\",\n\t\"47a281dff64167197855bf6e705eb9f2cef632ea\": \"1000072000000000000000\",\n\t\"297d5dbe222f2fb52531acbd0b013dc446ac7368\": \"20000000000000000000000\",\n\t\"adf85203c8376a5fde9815384a350c3879c4cb93\": \"1147300000000000000000\",\n\t\"c3e0471c64ff35fa5232cc3121d1d38d1a0fb7de\": \"2000000000000000000000\",\n\t\"fdecc82ddfc56192e26f563c3d68cb544a96bfed\": \"440000000000000000000\",\n\t\"2614f42d5da844377578e6b448dc24305bef2b03\": \"2000000000000000000000\",\n\t\"1d96bcd58457bbf1d3c2a46ffaf16dbf7d836859\": \"171313000000000000000\",\n\t\"bd66ffedb530ea0b2e856dd12ac2296c31fe29e0\": \"200000000000000000000\",\n\t\"6e84876dbb95c40b6656e42ba9aea08a993b54dc\": \"1101932000000000000000\",\n\t\"a1c4f45a82e1c478d845082eb18875c4ea6539ab\": \"200000000000000000000000\",\n\t\"2c964849b1f69cc7cea4442538ed87fdf16cfc8f\": \"2000000000000000000000\",\n\t\"45b47105fe42c4712dce6e2a21c05bffd5ea47a9\": \"2000000000000000000000\",\n\t\"31e9c00f0c206a4e4e7e0522170dc81e88f3eb70\": \"2685000000000000000000\",\n\t\"5fe77703808f823e6c399352108bdb2c527cb87c\": \"1960000000000000000000\",\n\t\"2272186ef27dcbe2f5fc373050fdae7f2ace2316\": \"16100000000000000000000\",\n\t\"b7576e9d314df41ec5506494293afb1bd5d3f65d\": \"20000000000000000000\",\n\t\"ac9fff68c61b011efbecf038ed72db97bb9e7281\": \"9550000000000000000000\",\n\t\"cd9529492b5c29e475acb941402b3d3ba50686b0\": \"1970000000000000000000\",\n\t\"f19b39389d47b11b8a2c3f1da9124decffbefaf7\": \"2000000000000000000000\",\n\t\"9e951f6dc5e352afb8d04299d2478a451259bf56\": \"72004000000000000000\",\n\t\"8eb1fbe4e5d3019cd7d30dae9c0d5b4c76fb6331\": \"2000000000000000000000\",\n\t\"29cc804d922be91f5909f348b0aaa5d21b607830\": \"4000000000000000000000\",\n\t\"5c7b9ec7a2438d1e3c7698b545b9c3fd77b7cd55\": \"1000000000000000000000\",\n\t\"a16160851d2b9c349b92e46f829abfb210943595\": \"1790000000000000000000\",\n\t\"eac6b98842542ea10bb74f26d7c7488f698b6452\": \"20000000000000000000000\",\n\t\"57825aeb09076caa477887fbc9ae37e8b27cc962\": \"100000000000000000000\",\n\t\"b35e8a1c0dac7e0e66dbac736a592abd44012561\": \"14974000000000000000\",\n\t\"756b84eb85fcc1f4fcdcc2b08db6a86e135fbc25\": \"3220000000000000000000\",\n\t\"e13b3d2bbfdcbc8772a23315724c1425167c5688\": \"1032115000000000000000\",\n\t\"0a2dcb7a671701dbb8f495728088265873356c8e\": \"152120000000000000000\",\n\t\"03cb4c4f4516c4ff79a1b6244fbf572e1c7fea79\": \"2740000000000000000000\",\n\t\"98ba4e9ca72fddc20c69b4396f76f8183f7a2a4e\": \"12800000000000000000000\",\n\t\"f8087786b42da04ed6d1e0fe26f6c0eefe1e9f5a\": \"10000000000000000000000\",\n\t\"02f7f67209b16a17550c694c72583819c80b54ad\": \"98400000000000000000\",\n\t\"32bb2e9693e4e085344d2f0dbd46a283e3a087fd\": \"400000000000000000000\",\n\t\"9c78963fbc263c09bd72e4f8def74a9475f7055c\": \"13790000000000000000000\",\n\t\"27144ca9a7771a836ad50f803f64d869b2ae2b20\": \"4000000000000000000000\",\n\t\"cc758d071d25a6320af68c5dc9c4f6955ba94520\": \"6000000000000000000000\",\n\t\"cb42b44eb5fd60b5837e4f9eb47267523d1a229c\": \"865000000000000000000\",\n\t\"aaf5b207b88b0de4ac40d747cee06e172df6e745\": \"31428000000000000000000\",\n\t\"52d380511df19d5ec2807bbcb676581b67fd37a3\": \"13400000000000000000\",\n\t\"aa1b3768c16d821f580e76c8e4c8e86d7dc78853\": \"400000000000000000000\",\n\t\"41098a81452317c19e3eef0bd123bbe178e9e9ca\": \"2800000000000000000000\",\n\t\"267148fd72c54f620a592fb92799319cc4532b5c\": \"410000000000000000000\",\n\t\"d7cdbd41fff20df727c70b6255c1ba7606055468\": \"200000000000000000000\",\n\t\"0e33fcbbc003510be35785b52a9c5d216bc005f4\": \"1880000000000000000000\",\n\t\"6727daf5b9d68efcab489fedec96d7f7325dd423\": \"2000000000000000000000\",\n\t\"cd0a161bc367ae0927a92aac9cf6e5086714efca\": \"2000000000000000000000\",\n\t\"612667f172135b950b2cd1de10afdece6857b873\": \"1000000000000000000000\",\n\t\"900194c4b1074305d19de405b0ac78280ecaf967\": \"1000000000000000000000\",\n\t\"51f55ef47e6456a418ab32b9221ed27dba6608ee\": \"4200000000000000000000\",\n\t\"0da532c910e3ac0dfb14db61cd739a93353fd05f\": \"1336866000000000000000\",\n\t\"21df2dcdaf74b2bf803404dd4de6a35eabec1bbd\": \"6920000000000000000000\",\n\t\"f0e7fb9e420a5340d536f40408344feaefc06aef\": \"1000000000000000000000\",\n\t\"6742a2cfce8d79a2c4a51b77747498912245cd6a\": \"258064000000000000000\",\n\t\"8663a241a0a89e70e182c845e2105c8ad7264bcf\": \"14825507000000000000000\",\n\t\"18e113d8177c691a61be785852fa5bb47aeebdaf\": \"1337000000000000000000\",\n\t\"1bec4d02ce85fc48feb62489841d85b170586a9b\": \"2400000000000000000000\",\n\t\"287cf9d0902ef819a7a5f149445bf1775ee8c47c\": \"16000000000000000000000\",\n\t\"28967280214e218a120c5dda37041b111ea36d74\": \"200000000000000000000\",\n\t\"a0b771951ce1deee363ae2b771b73e07c4b5e800\": \"1400000000000000000000\",\n\t\"29f8fba4c30772b057edbbe62ae7420c390572e1\": \"1000000000000000000000\",\n\t\"ee34c7e7995db9f187cff156918cfb6f13f6e003\": \"1960000000000000000000\",\n\t\"916bf7e3c545921d3206d900c24f14127cbd5e70\": \"18020000000000000000000\",\n\t\"93235f340d2863e18d2f4c52996516138d220267\": \"73800000000000000000\",\n\t\"7efec0c6253caf397f71287c1c07f6c9582b5b86\": \"482839000000000000000\",\n\t\"8d2e31b08803b2c5f13d398ecad88528209f6057\": \"9993000000000000000000\",\n\t\"964eab4b276b4cd8983e15ca72b106900fe41fce\": \"500000000000000000000\",\n\t\"eea1e97988de75d821cd28ad6822b22cce988b31\": \"520000000000000000000\",\n\t\"278c0bde630ec393b1e7267fc9d7d97019e4145b\": \"2000000000000000000000\",\n\t\"82e4461eb9d849f0041c1404219e4272c4900ab4\": \"2000000000000000000000\",\n\t\"4a73389298031b8816cca946421c199e18b343d6\": \"631254000000000000000\",\n\t\"9a5af31c7e06339ac8b4628d7c4db0ce0f45c8a4\": \"500000000000000000000\",\n\t\"cb9b5103e4ce89af4f64916150bff9eecb9faa5c\": \"500000000000000000000\",\n\t\"740f641614779dcfa88ed1d425d60db42a060ca6\": \"998630000000000000000\",\n\t\"a4e623451e7e94e7e89ba5ed95c8a83a62ffc4ea\": \"20000000000000000000\",\n\t\"25a500eeec7a662a841552b5168b707b0de21e9e\": \"10020000000000000000000\",\n\t\"185a7fc4ace368d233e620b2a45935661292bdf2\": \"20000000000000000000000\",\n\t\"9b68f67416a63bf4451a31164c92f672a68759e9\": \"60000000000000000000000\",\n\t\"a38b5bd81a9db9d2b21d5ec7c60552cd02ed561b\": \"6000000000000000000000\",\n\t\"61c830f1654718f075ccaba316faacb85b7d120b\": \"400000000000000000000\",\n\t\"8392e53776713578015bff4940cf43849d7dcba1\": \"153190000000000000000\",\n\t\"dc57477dafa42f705c7fe40eae9c81756e0225f1\": \"500044000000000000000\",\n\t\"febc3173bc9072136354002b7b4fb3bfc53f22f1\": \"370000000000000000000\",\n\t\"d78f84e38944a0e0255faece48ba4950d4bd39d2\": \"5000000000000000000000\",\n\t\"a7a3bb6139b0ada00c1f7f1f9f56d994ba4d1fa8\": \"2000000000000000000000\",\n\t\"aa3f29601a1331745e05c42830a15e71938a6237\": \"1700000000000000000000\",\n\t\"bec6640f4909b58cbf1e806342961d607595096c\": \"1999944000000000000000\",\n\t\"9be3c329b62a28b8b0886cbd8b99f8bc930ce3e6\": \"74500000000000000000\",\n\t\"e3eb2c0a132a524f72ccc0d60fee8b41685d39e2\": \"1970000000000000000000\",\n\t\"90b1f370f9c1eb0be0fb8e2b8ad96a416371dd8a\": \"900000000000000000000\",\n\t\"f2742e6859c569d5f2108351e0bf4dca352a48a8\": \"10000000000000000000000\",\n\t\"b134c004391ab4992878337a51ec242f42285742\": \"2000000000000000000000\",\n\t\"ab7416ff32254951cbbc624ec7fb45fc7ecaa872\": \"340000000000000000000\",\n\t\"9795f64319fc17dd0f8261f9d206fb66b64cd0c9\": \"200000000000000000000\",\n\t\"64e03ef070a54703b7184e48276c5c0077ef4b34\": \"320000000000000000000\",\n\t\"3430a16381f869f6ea5423915855e800883525a9\": \"17900000000000000000000\",\n\t\"f4a367b166d2991a2bfda9f56463a09f252c1b1d\": \"1970000000000000000000\",\n\t\"77c4a697e603d42b12056cbba761e7f51d0443f5\": \"680000000000000000000\",\n\t\"153ef58a1e2e7a3eb6b459a80ab2a547c94182a2\": \"96000000000000000000000\",\n\t\"6dbe8abfa1742806263981371bf3d35590806b6e\": \"20000000000000000000000\",\n\t\"4c99dae96481e807c1f99f8b7fbde29b7547c5bf\": \"150000000000000000000\",\n\t\"d5b9d277d8aad20697a51f76e20978996bffe055\": \"143250000000000000000\",\n\t\"0f24105abbdaa03fa6309ef6c188e51f714a6e59\": \"200000000000000000000\",\n\t\"1cb6b2d7cfc559b7f41e6f56ab95c7c958cd0e4c\": \"1337000000000000000000\",\n\t\"f37b426547a1642d8033324814f0ede3114fc212\": \"401100000000000000000\",\n\t\"318f1f8bd220b0558b95fb33100ffdbb640d7ca6\": \"4000000000000000000000\",\n\t\"206d55d5792a514ec108e090599f2a065e501185\": \"200550000000000000000\",\n\t\"11d2247a221e70c2d66d17ee138d38c55ffb8640\": \"10000000000000000000000\",\n\t\"e8de725eca5def805ff7941d31ac1c2e342dfe95\": \"2462500000000000000000\",\n\t\"d561cbbc05515de73ab8cf9eae1357341e7dfdf4\": \"6000000000000000000000\",\n\t\"0455dcec8a7fc4461bfd7f37456fce3f4c3caac7\": \"400000000000000000000\",\n\t\"5161fd49e847f67455f1c8bb7abb36e985260d03\": \"1200000000000000000000\",\n\t\"8e073bad25e42218615f4a0e6b2ea8f8de2230c0\": \"2402500000000000000000\",\n\t\"6c08a6dc0173c7342955d1d3f2c065d62f83aec7\": \"20000000000000000000\",\n\t\"95cb6d8a6379f94aba8b885669562c4d448e56a7\": \"2000000000000000000000\",\n\t\"2805415e1d7fdec6dedfb89e521d10592d743c10\": \"100000000000000000000\",\n\t\"daacdaf42226d15cb1cf98fa15048c7f4ceefe69\": \"300000000000000000000\",\n\t\"e33df4ce80ccb62a76b12bcdfcecc46289973aa9\": \"6000000000000000000000\",\n\t\"8f8cd26e82e7c6defd02dfad07979021cbf7150c\": \"3000000000000000000000\",\n\t\"77a17122fa31b98f1711d32a99f03ec326f33d08\": \"1700000000000000000000\",\n\t\"6f791d359bc3536a315d6382b88311af8ed6da47\": \"92000000000000000000\",\n\t\"de30e49e5ab313214d2f01dcabce8940b81b1c76\": \"197000000000000000000\",\n\t\"cf9be9b9ab86c66b59968e67b8d4dcff46b1814a\": \"660000000000000000000\",\n\t\"7fdfc88d78bf1b285ac64f1adb35dc11fcb03951\": \"2287900000000000000000\",\n\t\"c5134cfbb1df7a20b0ed7057622eeed280947dad\": \"3800000000000000000000\",\n\t\"fa9ec8efe08686fa58c181335872ba698560ecab\": \"1999944000000000000000\",\n\t\"f6a8635757c5e8c134d20d028cf778cf8609e46a\": \"1459416000000000000000\",\n\t\"6265b2e7730f36b776b52d0c9d02ada55d8e3cb6\": \"1000000000000000000000\",\n\t\"6a8cea2de84a8df997fd3f84e3083d93de57cda9\": \"100007000000000000000\",\n\t\"1b7ed974b6e234ce81247498429a5bd4a0a2d139\": \"2000000000000000000000\",\n\t\"9ba53dc8c95e9a472feba2c4e32c1dc4dd7bab46\": \"1337000000000000000000\",\n\t\"d7b740dff8c457668fdf74f6a266bfc1dcb723f9\": \"20000000000000000000\",\n\t\"07bc2cc8eedc01970700efc9c4fb36735e98cd71\": \"4000000000000000000000\",\n\t\"3e1c962063e0d5295941f210dca3ab531eec8809\": \"3000000000000000000000\",\n\t\"b447571dacbb3ecbb6d1cf0b0c8f3838e52324e2\": \"30199000000000000000\",\n\t\"87764e3677eef604cbc59aed24abdc566b09fc25\": \"3000000000000000000000\",\n\t\"03aa622881236dd0f4940c24c324ff8b7b7e2186\": \"3200000000000000000000\",\n\t\"a4a7d306f510cd58359428c0d2f7c3609d5674d7\": \"3349000000000000000000\",\n\t\"3c83c1701db0388b68210d00f5717cd9bd322c6a\": \"30000000000000000000000\",\n\t\"047d5a26d7ad8f8e70600f70a398ddaa1c2db26f\": \"6000000000000000000000\",\n\t\"43767bf7fd2af95b72e9312da9443cb1688e4343\": \"300000000000000000000\",\n\t\"34a85d6d243fb1dfb7d1d2d44f536e947a4cee9e\": \"20000000000000000000000\",\n\t\"65a9dad42e1632ba3e4e49623fab62a17e4d3611\": \"93120000000000000000\",\n\t\"48e0cbd67f18acdb7a6291e1254db32e0972737f\": \"100007000000000000000\",\n\t\"a5de5e434fdcdd688f1c31b6fb512cb196724701\": \"800000000000000000000\",\n\t\"6d63d38ee8b90e0e6ed8f192eda051b2d6a58bfd\": \"30000000000000000000\",\n\t\"b079bb4d9866143a6da72ae7ac0022062981315c\": \"760000000000000000000\",\n\t\"c0413f5a7c2d9a4b8108289ef6ecd271781524f4\": \"50000000000000000000000\",\n\t\"a91a5a7b341f99c535144e20be9c6b3bb4c28e4d\": \"5431790000000000000000\",\n\t\"993f146178605e66d517be782ef0b3c61a4e1925\": \"7011998000000000000000\",\n\t\"966c04781cb5e67dde3235d7f8620e1ab663a9a5\": \"75800000000000000000000\",\n\t\"b3f82a87e59a39d0d2808f0751eb72c2329cdcc5\": \"5000000000000000000000\",\n\t\"9b77ebced7e215f0920e8c2b870024f6ecb2ff31\": \"1000000000000000000000\",\n\t\"fe697ff22ca547bfc95e33d960da605c6763f35b\": \"1325000000000000000000\",\n\t\"480af52076009ca73781b70e43b95916a62203ab\": \"924171000000000000000\",\n\t\"a9dc0424c6969d798358b393b1933a1f51bee00a\": \"20000000000000000000000\",\n\t\"7aba56f63a48bc0817d6b97039039a7ad62fae2e\": \"600000000000000000000\",\n\t\"59d139e2e40c7b97239d23dfaca33858f602d22b\": \"2000000000000000000000\",\n\t\"8d6170ff66978e773bb621bf72b1ba7be3a7f87e\": \"200000000000000000000\",\n\t\"d668523a90f0293d65c538d2dd6c57673710196e\": \"39500000000000000000\",\n\t\"bbb5a0f4802c8648009e8a6998af352cde87544f\": \"95500000000000000000\",\n\t\"fc43829ac787ff88aaf183ba352aadbf5a15b193\": \"3960000000000000000000\",\n\t\"fe22a0b388668d1ae2643e771dacf38a434223cc\": \"4000304000000000000000\",\n\t\"092acb624b08c05510189bbbe21e6524d644ccad\": \"18200000000000000000\",\n\t\"8f0538ed71da1155e0f3bde5667ceb84318a1a87\": \"1940000000000000000000\",\n\t\"06994cd83aa2640a97b2600b41339d1e0d3ede6c\": \"250000000000000000000\",\n\t\"9d460c1b379ddb19a8c85b4c6747050ddf17a875\": \"3340000000000000000000\",\n\t\"77a769fafdecf4a638762d5ba3969df63120a41d\": \"2000000000000000000000\",\n\t\"5f375b86600c40cca8b2676b7a1a1d1644c5f52c\": \"78838000000000000000\",\n\t\"15ee0fc63ebf1b1fc49d7bb38f8863823a2e17d2\": \"1910000000000000000000\",\n\t\"6651736fb59b91fee9c93aa0bd6ea2f7b2506180\": \"500000000000000000000\",\n\t\"361d9ed80b5bd27cf9f1226f26753258ee5f9b3f\": \"3530900000000000000000\",\n\t\"c9b6b686111691ee6aa197c7231a88dc60bd295d\": \"500000000000000000000\",\n\t\"e9b4a4853577a9dbcc2e795be0310d1bed28641a\": \"1000000000000000000000\",\n\t\"36758e049cd98bcea12277a676f9297362890023\": \"4000000000000000000000\",\n\t\"6bb50813146a9add42ee22038c9f1f7469d47f47\": \"200200000000000000000\",\n\t\"6de4b581385cf7fc9fe8c77d131fe2ee7724c76a\": \"2308840000000000000000\",\n\t\"d2a5a024230a57ccc666760b89b0e26cafd189c7\": \"49997115000000000000000\",\n\t\"65af9087e05167715497c9a5a749189489004def\": \"835000000000000000000\",\n\t\"ead21c1deccfbf1c5cd96688a2476b69ba07ce4a\": \"72800000000000000000\",\n\t\"e308435204793764f5fcbe65eb510f5a744a655a\": \"200000000000000000000\",\n\t\"9376dce2af2ec8dcda741b7e7345664681d93668\": \"1000000000000000000000\",\n\t\"a1b47c4d0ed6018842e6cfc8630ac3a3142e5e6b\": \"20000000000000000000\",\n\t\"e2198c8ca1b399f7521561fd5384a7132fba486b\": \"1015200000000000000000\",\n\t\"92c13fe0d6ce87fd50e03def9fa6400509bd7073\": \"40000000000000000000\",\n\t\"7517f16c28d132bb40e3ba36c6aef131c462da17\": \"18200000000000000000\",\n\t\"6a023af57d584d845e698736f130db9db40dfa9a\": \"98800000000000000000\",\n\t\"1518627b88351fede796d3f3083364fbd4887b0c\": \"16000000000000000000000\",\n\t\"f5b6e9061a4eb096160777e26762cf48bdd8b55d\": \"254030000000000000000\",\n\t\"28073efc17d05cab3195c2db332b61984777a612\": \"1000000000000000000000\",\n\t\"f06a854a3c5dc36d1c49f4c87d6db333b57e4add\": \"10000000000000000000000\",\n\t\"9225983860a1cb4623c72480ac16272b0c95e5f5\": \"2000000000000000000000\",\n\t\"5260dc51ee07bddaababb9ee744b393c7f4793a6\": \"34040000000000000000\",\n\t\"0f127bbf8e311caea2ba502a33feced3f730ba42\": \"188000000000000000000\",\n\t\"17d521a8d9779023f7164d233c3b6420ffd223ed\": \"20000000000000000000\",\n\t\"8c2b7d8b608d28b77f5caa9cd645242a823e4cd9\": \"1820000000000000000000\",\n\t\"6e866d032d405abdd65cf651411d803796c22311\": \"2000000000000000000000\",\n\t\"dc51b2dc9d247a1d0e5bc36ca3156f7af21ff9f6\": \"1000000000000000000000\",\n\t\"c84d9bea0a7b9f140220fd8b9097cfbfd5edf564\": \"123047000000000000000\",\n\t\"ff86e5e8e15b53909600e41308dab75f0e24e46b\": \"902400000000000000000\",\n\t\"d7164aa261c09ad9b2b5068d453ed8eb6aa13083\": \"3000000000000000000000\",\n\t\"76aaf8c1ac012f8752d4c09bb46607b6651d5ca8\": \"20000000000000000000\",\n\t\"41786a10d447f484d33244ccb7facd8b427b5b8c\": \"1000000000000000000000\",\n\t\"2e0c57b47150f95aa6a7e16ab9b1cbf54328979a\": \"100000000000000000000\",\n\t\"3f747237806fed3f828a6852eb0867f79027af89\": \"1500000000000000000000\",\n\t\"a568db4d57e4d67462d733c69a9e0fe26e218327\": \"1096140000000000000000\",\n\t\"1f88f8a1338fc7c10976abcd3fb8d38554b5ec9c\": \"13400000000000000000\",\n\t\"d1ea4d72a67b5b3e0f315559f52bd0614d713069\": \"2000000000000000000000\",\n\t\"bfaeb91067617dcf8b44172b02af615674835dba\": \"160661000000000000000\",\n\t\"b71a13ba8e95167b80331b52d69e37054fe7a826\": \"200000000000000000000\",\n\t\"b67a80f170197d96cdcc4ab6cba627b4afa6e12c\": \"2400000000000000000000\",\n\t\"35af040a0cc2337a76af288154c7561e1a233349\": \"1000000000000000000000\",\n\t\"c86190904b8d079ec010e462cbffc90834ffaa5c\": \"10100000000000000000000\",\n\t\"383304dd7a5720b29c1a10f60342219f48032f80\": \"5600000000000000000000\",\n\t\"191313525238a21c767457a91374f02200c55448\": \"116400000000000000000\",\n\t\"cc4a2f2cf86cf3e43375f360a4734691195f1490\": \"1348127000000000000000\",\n\t\"4e020779b5ddd3df228a00cb48c2fc979da6ae38\": \"2000000000000000000000\",\n\t\"e206fb7324e9deb79e19903496d6961b9be56603\": \"100000000000000000000\",\n\t\"3ae160e3cd60ae31b9d6742d68e14e76bd96c517\": \"30000000000000000000\",\n\t\"1f7d8e86d6eeb02545aad90e91327bd369d7d2f3\": \"20000000000000000000\",\n\t\"68c7d1711b011a33f16f1f55b5c902cce970bdd7\": \"152000000000000000000\",\n\t\"637be71b3aa815ff453d5642f73074450b64c82a\": \"2000000000000000000000\",\n\t\"1584a2c066b7a455dbd6ae2807a7334e83c35fa5\": \"130000000000000000000\",\n\t\"9c05e9d0f0758e795303717e31da213ca157e686\": \"1000000000000000000000\",\n\t\"4f1a2da54a4c6da19d142412e56e815741db2325\": \"100000000000000000000\",\n\t\"9a4ca8b82117894e43db72b9fa78f0b9b93ace09\": \"50000000000000000000\",\n\t\"26c99f8849c9802b83c861217fd07a9e84cdb79d\": \"300000000000000000000\",\n\t\"45c0d19f0b8e054f9e893836d5ecae7901af2812\": \"5000000000000000000000\",\n\t\"00dc01cbf44978a42e8de8e436edf94205cfb6ec\": \"1458440000000000000000\",\n\t\"de7dee220f0457a7187d56c1c41f2eb00ac56021\": \"629924000000000000000\",\n\t\"1c128bd6cda5fca27575e4b43b3253c8c4172afe\": \"2000000000000000000000\",\n\t\"666746fb93d1935c5a3c684e725010c4fad0b1d8\": \"20000000000000000000\",\n\t\"51d78b178d707e396e8710965c4f41b1a1d9179d\": \"110600000000000000000\",\n\t\"68f7573cd457e14c03fea43e302d30347c10705c\": \"5000000000000000000000\",\n\t\"9d30cb237bc096f17036fc80dd21ca68992ca2d9\": \"30380000000000000000000\",\n\t\"fbcfcc4a7b0f26cf26e9f3332132e2fc6a230766\": \"8000000000000000000000\",\n\t\"b166e37d2e501ae73c84142b5ffb5aa655dd5a99\": \"1999000000000000000000\",\n\t\"6df24f6685a62f791ba337bf3ff67e91f3d4bc3a\": \"2166000000000000000000\",\n\t\"92e435340e9d253c00256389f52b067d55974e76\": \"268000000000000000000\",\n\t\"ea53d26564859d9e90bb0e53b7abf560e0162c38\": \"400000000000000000000\",\n\t\"e26657f0ed201ea2392c9222b80a7003608ddf30\": \"40000000000000000000\",\n\t\"f4177a0d85d48b0e264211ce2aa2efd3f1b47f08\": \"3593425000000000000000\",\n\t\"9d47ba5b4c8505ad8da42934280b61a0e1e8b971\": \"100000000000000000000\",\n\t\"63c2a3d235e5eeabd0d4a6afdb89d94627396495\": \"1241620000000000000000\",\n\t\"446a8039cecf9dce4879cbcaf3493bf545a88610\": \"7000000000000000000000\",\n\t\"7fa37ed67887751a471f0eb306be44e0dbcd6089\": \"1060000000000000000000\",\n\t\"26d4a16891f52922789217fcd886f7fce296d400\": \"2000000000000000000000\",\n\t\"487e108502b0b189ef9c8c6da4d0db6261eec6c0\": \"1910000000000000000000\",\n\t\"7484d26becc1eea8c6315ec3ee0a450117dc86a0\": \"12000000000000000000000\",\n\t\"ad9e97a0482f353a05c0f792b977b6c7e811fa5f\": \"200000000000000000000\",\n\t\"2273bad7bc4e487622d175ef7a66988b6a93c4ee\": \"20000000000000000000\",\n\t\"3b93b16136f11eaf10996c95990d3b2739ccea5f\": \"10000000000000000000000\",\n\t\"f3f1fa3918ca34e2cf7e84670b1f4d8eca160db3\": \"680000000000000000000\",\n\t\"88a2154430c0e41147d3c1fee3b3b006f851edbd\": \"999972000000000000000\",\n\t\"25185f325acf2d64500698f65c769ddf68301602\": \"5000000000000000000000\",\n\t\"e9cafe41a5e8bbd90ba02d9e06585b4eb546c57f\": \"2000000000000000000000\",\n\t\"95681cdae69b2049ce101e325c759892cac3f811\": \"2857600000000000000000\",\n\t\"475066f9ad26655196d5535327bbeb9b7929cb04\": \"3040000000000000000000\",\n\t\"6685fd2e2544702c360b8bb9ee78f130dad16da5\": \"2000000000000000000000\",\n\t\"45e68db94c7d0ab7ac41857a71d67147870f4e71\": \"400000000000000000000000\",\n\t\"4ad95d188d6464709add2555fb4d97fe1ebf311f\": \"346000000000000000000\",\n\t\"73bedd6fda7ba3272185087b6351fc133d484e37\": \"5057200000000000000000\",\n\t\"1ea4715504c6af107b0194f4f7b1cb6fcccd6f4b\": \"590598000000000000000\",\n\t\"77306ffe2e4a8f3ca826c1a249f7212da43aeffd\": \"20000000000000000000000\",\n\t\"eb453f5a3adddd8ab56750fadb0fe7f94d9c89e7\": \"20000000000000000000\",\n\t\"7201d1c06920cd397ae8ad869bcda6e47ffb1b5a\": \"20000000000000000000\",\n\t\"821cb5cd05c7ef909fe1be60733d8963d760dc41\": \"4000000000000000000000\",\n\t\"496e319592b341eaccd778dda7c8196d54cac775\": \"9250000000000000000000\",\n\t\"88609e0a465b6e99fce907166d57e9da0814f5c8\": \"20000000000000000000000\",\n\t\"c7ec62b804b1f69b1e3070b5d362c62fb309b070\": \"13068074000000000000000\",\n\t\"3eb9ef06d0c259040319947e8c7a6812aa0253d8\": \"167000000000000000000\",\n\t\"cbf37ff854a2f1ce53934494777892d3ec655782\": \"10000000000000000000000\",\n\t\"02b1af72339b2a2256389fd64607de24f0de600a\": \"2000000000000000000000\",\n\t\"a8beb91c2b99c8964aa95b6b4a184b1269fc3483\": \"400000000000000000000\",\n\t\"922a20c79a1d3a26dd3829677bf1d45c8f672bb6\": \"4000000000000000000000\",\n\t\"c5843399d150066bf7979c34ba294620368ad7c0\": \"200000000000000000000\",\n\t\"8cd0cd22e620eda79c0461e896c93c44837e2968\": \"2000000000000000000000\",\n\t\"6170dd0687bd55ca88b87adef51cfdc55c4dd458\": \"2005160000000000000000\",\n\t\"eed384ef2d41d9d203974e57c12328ea760e08ea\": \"1000000000000000000000\",\n\t\"b129a5cb7105fe810bd895dc7206a991a4545488\": \"30000000000000000000\",\n\t\"3872f48dc5e3f817bc6b2ad2d030fc5e0471193d\": \"4000000000000000000000\",\n\t\"514b7512c9ae5ea63cbf11715b63f21e18d296c1\": \"1999944000000000000000\",\n\t\"7ab256b204800af20137fabcc916a23258752501\": \"20000000000000000000000\",\n\t\"fc66faba277f4b5de64ad45eb19c31e00ced3ed5\": \"5640000000000000000000\",\n\t\"39824f8bced176fd3ea22ec6a493d0ccc33fc147\": \"4000000000000000000000\",\n\t\"e338e859fe2e8c15554848b75caecda877a0e832\": \"1801800000000000000000\",\n\t\"e53c68796212033e4e6f9cff56e19c461eb454f9\": \"1000000000000000000000\",\n\t\"8461ecc4a6a45eb1a5b947fb86b88069b91fcd6f\": \"2000000000000000000000\",\n\t\"6b4b99cb3fa9f7b74ce3a48317b1cd13090a1a7a\": \"57300000000000000000\",\n\t\"97de21e421c37fe4b8025f9a51b7b390b5df7804\": \"80000000000000000000000\",\n\t\"d25aecd7eb8bd6345b063b5dbd271c77d3514494\": \"1820000000000000000000\",\n\t\"57b23d6a1adc06c652a779c6a7fb6b95b9fead66\": \"200000000000000000000\",\n\t\"0d658014a199061cf6b39433140303c20ffd4e5a\": \"8200000000000000000000\",\n\t\"30eac740e4f02cb56eef0526e5d300322600d03e\": \"1970000000000000000000\",\n\t\"4eead40aad8c73ef08fc84bc0a92c9092f6a36bf\": \"26740000000000000000\",\n\t\"30f7d025d16f7bee105580486f9f561c7bae3fef\": \"500000000000000000000\",\n\t\"0977bfba038a44fb49b03970d8d8cf2cb61f8b25\": \"420000000000000000000\",\n\t\"b14bbeff70720975dc6191b2a44ff49f2672873c\": \"143000000000000000000\",\n\t\"d588c3a5df228185d98ee7e60748255cdea68b01\": \"4000000000000000000000\",\n\t\"225d35faedb391c7bc2db7fa9071160405996d00\": \"167774000000000000000\",\n\t\"c0e457bd56ec36a1246bfa3230fff38e5926ef22\": \"1940000000000000000000\",\n\t\"2a9c57fe7b6b138a920d676f3c76b6c2a0eef699\": \"9400000000000000000000\",\n\t\"36df8f883c1273ec8a171f7a33cfd649b1fe6075\": \"227290000000000000000\",\n\t\"234f46bab73fe45d31bf87f0a1e0466199f2ebac\": \"485000000000000000000\",\n\t\"a2e1b8aa900e9c139b3fa122354f6156d92a18b1\": \"500000000000000000000\",\n\t\"517cd7608e5d0d83a26b717f3603dac2277dc3a4\": \"2000000000000000000000\",\n\t\"75f7539d309e9039989efe2e8b2dbd865a0df088\": \"2460000000000000000000\",\n\t\"4b792e29683eb586e394bb33526c6001b397999e\": \"600000000000000000000\",\n\t\"a34f9d568bf7afd94c2a5b8a5ff55c66c4087999\": \"2444000000000000000000\",\n\t\"4b31bf41abc75c9ae2cd8f7f35163b6e2b745054\": \"382000000000000000000\",\n\t\"e35453eef2cc3c7a044d0ac134ba615908fa82ee\": \"147510000000000000000\",\n\t\"7aa79ac04316cc8d08f20065baa6d4142897d54e\": \"1400000000000000000000\",\n\t\"f1dc8ac81042c67a9c3c6792b230c46ac016ca10\": \"200000000000000000000\",\n\t\"2bb366b9edcb0da680f0e10b3b6e28748190d6c3\": \"5799400000000000000000\",\n\t\"a567770b6ae320bdde50f904d663e746a61dace6\": \"2000000000000000000000\",\n\t\"d9d42fd13ebd4bf69cac5e9c7e82483ab46dd7e9\": \"5348000000000000000000\",\n\t\"27830c5f6023afaaf79745676c204a0faccda0ba\": \"240000000000000000000\",\n\t\"3cb179cb4801a99b95c3b0c324a2bdc101a65360\": \"26000000000000000000\",\n\t\"976e3ceaf3f1af51f8c29aff5d7fa21f0386d8ee\": \"240000000000000000000\",\n\t\"752a5ee232612cd3005fb26e5b597de19f776be6\": \"5460000000000000000000\",\n\t\"7d5aa33fc14b51841a06906edb2bb49c2a117269\": \"300048000000000000000\",\n\t\"55ca6abe79ea2497f46fdbb830346010fe469cbe\": \"5730000000000000000000\",\n\t\"6bec311ad05008b4af353c958c40bd06739a3ff3\": \"16380000000000000000000\",\n\t\"30e9698cf1e08a9d048bd8d8048f28be7ed9409f\": \"6685000000000000000000\",\n\t\"9afa536b4c66bc38d875c4b30099d9261fdb38eb\": \"205981000000000000000\",\n\t\"6b63a2dfb2bcd0caec0022b88be30c1451ea56aa\": \"809021000000000000000\",\n\t\"d07be0f90997caf903c8ac1d53cde904fb190741\": \"1000200000000000000000\",\n\t\"893cdddf5377f3c751bf2e541120045a47cba101\": \"100000000000000000000\",\n\t\"c1cdc601f89c0428b31302d187e0dc08ad7d1c57\": \"6000000000000000000000\",\n\t\"8f8acb107607388479f64baaabea8ff007ada97d\": \"27281800000000000000000\",\n\t\"88bc43012edb0ea9f062ac437843250a39b78fbb\": \"20000000000000000000000\",\n\t\"fcfc3a5004d678613f0b36a642269a7f371c3f6a\": \"1000000000000000000000\",\n\t\"f509557e90183fbf0f0651a786487bcc428ba175\": \"194000000000000000000\",\n\t\"e3d915eda3b825d6ee4af9328d32ac18ada35497\": \"500000000000000000000\",\n\t\"f237ef05261c34d79cc22b860de0f17f793c3860\": \"200000000000000000000\",\n\t\"a3a2e319e7d3a1448b5aa2468953160c2dbcba71\": \"2000000000000000000000\",\n\t\"3a368efe4ad786e26395ec9fc6ad698cae29fe01\": \"632200000000000000000\",\n\t\"8e3240b0810e1cf407a500804740cf8d616432a4\": \"40309000000000000000\",\n\t\"5691dd2f6745f20e22d2e1d1b955aa2903d65656\": \"1969606000000000000000\",\n\t\"5f93ff832774db5114c55bb4bf44ccf3b58f903f\": \"192026650000000000000000\",\n\t\"2c1cc6e18c152488ba11c2cc1bcefa2df306abd1\": \"1670000000000000000000\",\n\t\"bde9786a84e75b48f18e726dd78d70e4af3ed802\": \"5730000000000000000000\",\n\t\"79551cede376f747e3716c8d79400d766d2e0195\": \"46250000000000000000000\",\n\t\"49f028395b5a86c9e07f7778630e4c2e3d373a77\": \"122735000000000000000\",\n\t\"6a3694424c7cc6b8bcd9bccaba540cc1f5df18d7\": \"2000000000000000000000\",\n\t\"068e29b3f191c812a6393918f71ab933ae6847f2\": \"1999944000000000000000\",\n\t\"6e64e6129f224e378c0e6e736a7e7a06c211e9ec\": \"1000000000000000000000\",\n\t\"c4c15318d370c73318cc18bdd466dbaa4c6603bf\": \"19700000000000000000\",\n\t\"8035bcffaefdeeea35830c497d14289d362023de\": \"300000000000000000000\",\n\t\"a997dfc7986a27050848fa1c64d7a7d6e07acca2\": \"143000000000000000000\",\n\t\"2fe13a8d0785de8758a5e41876c36e916cf75074\": \"4000000000000000000000\",\n\t\"6f24c9af2b763480515d1b0951bb77a540f1e3f9\": \"1970000000000000000000\",\n\t\"4c23b370fc992bb67cec06e26715b62f0b3a4ac3\": \"10000000000000000000000\",\n\t\"4ac07673e42f64c1a25ec2fa2d86e5aa2b34e039\": \"2000000000000000000000\",\n\t\"117db836377fe15455e02c2ebda40b1ceb551b19\": \"6000000000000000000000\",\n\t\"ef1c0477f1184d60accab374d374557a0a3e10f3\": \"152000000000000000000\",\n\t\"99fe0d201228a753145655d428eb9fd94985d36d\": \"1939268000000000000000\",\n\t\"b3731b046c8ac695a127fd79d0a5d5fa6ae6d12e\": \"1998000000000000000000\",\n\t\"dce30c31f3ca66721ecb213c809aab561d9b52e4\": \"2000000000000000000000\",\n\t\"ddd69c5b9bf5eb5a39cee7c3341a120d973fdb34\": \"1987730000000000000000\",\n\t\"216e41864ef98f060da08ecae19ad1166a17d036\": \"5730000000000000000000\",\n\t\"6a53d41ae4a752b21abed5374649953a513de5e5\": \"2000000000000000000000\",\n\t\"20dd8fcbb46ea46fe381a68b8ca0ea5be21fe9a5\": \"2000000000000000000000\",\n\t\"19732bf973055dbd91a4533adaa2149a91d38380\": \"2000000000000000000000\",\n\t\"51ea1c0934e3d04022ed9c95a087a150ef705e81\": \"6280000000000000000000\",\n\t\"a0de5c601e696635c698b7ae9ca4539fc7b941ec\": \"346150000000000000000\",\n\t\"94e1f5cb9b8abace03a1a6428256553b690c2355\": \"20000000000000000000\",\n\t\"a539b4a401b584dfe0f344b1b422c65543167e2e\": \"200000000000000000000\",\n\t\"50584d9206a46ce15c301117ee28f15c30e60e75\": \"13400000000000000000\",\n\t\"856eb204241a87830fb229031343dc30854f581a\": \"1000000000000000000000\",\n\t\"9dd46b1c6d3f05e29e9c6f037eed9a595af4a9aa\": \"500000000000000000000\",\n\t\"8925da4549e15155e57a628522cea9dddf627d81\": \"1000070000000000000000\",\n\t\"a89df34859edd7c820db887740d8ff9e15157c7b\": \"2000000000000000000000\",\n\t\"ad9f4c890a3b511cee51dfe6cfd7f1093b76412c\": \"506600000000000000000\",\n\t\"f8c7f34a38b31801da43063477b12b27d0f203ff\": \"494800000000000000000\",\n\t\"a642501004c90ea9c9ed1998ba140a4cd62c6f5f\": \"250543000000000000000\",\n\t\"508cf19119db70aa86454253da764a2cb1b2be1a\": \"1000000000000000000000\",\n\t\"2979741174a8c1ea0b7f9edf658177859417f512\": \"461283000000000000000\",\n\t\"654f524847b3a6acc0d3d5f1f362b603edf65f96\": \"8000000000000000000000\",\n\t\"5cf18fa7c8a7c0a2b3d5efd1990f64ddc569242c\": \"1000000000000000000000\",\n\t\"17e82e7078dc4fd9e879fb8a50667f53a5c54591\": \"200000000000000000000\",\n\t\"8b07d050754dc9ba230db01c310afdb5395aa1b3\": \"118080000000000000000\",\n\t\"5f77a107ab1226b3f95f10ee83aefc6c5dff3edc\": \"500000000000000000000\",\n\t\"475a6193572d4a4e59d7be09cb960ddd8c530e2f\": \"667323000000000000000\",\n\t\"6470a4f92ec6b0fccd01234fa59023e9ff1f3aac\": \"3000000000000000000000\",\n\t\"2fbcef3384d420e4bf61a0669990bc7054f1a5af\": \"2000000000000000000000\",\n\t\"bbabf6643beb4bd01c120bd0598a0987d82967d1\": \"3342500000000000000000\",\n\t\"41a2f2e6ecb86394ec0e338c0fc97e9c5583ded2\": \"2009400000000000000000\",\n\t\"fb9473cf7712350a1fa0395273fc80560752e4fb\": \"123300000000000000000\",\n\t\"38b2197106123387a0d4de368431a8bacdda30e2\": \"20000000000000000000\",\n\t\"5ed56115bd6505a88273df5c56839470d24a2db7\": \"65601000000000000000\",\n\t\"523f6d64690fdacd942853591bb0ff20d3656d95\": \"1820000000000000000000\",\n\t\"55caff4bba04d220c9a5d2018672ec85e31ef83e\": \"2000000000000000000000\",\n\t\"65af8d8b5b1d1eedfa77bcbc96c1b133f83306df\": \"98000000000000000000\",\n\t\"7456c5b2c5436e3e571008933f1805ccfe34e9ec\": \"1000000000000000000000\",\n\t\"a6eebbe464d39187bf80ca9c13d72027ec5ba8be\": \"3000000000000000000000\",\n\t\"dd35cfdbcb993395537aecc9f59085a8d5ddb6f5\": \"1000000000000000000000\",\n\t\"98e2b6d606fd2d6991c9d6d4077fdf3fdd4585da\": \"901520000000000000000\",\n\t\"860f5ffc10de767ded807f71e861d647dfd219b1\": \"10000000000000000000000\",\n\t\"1a644a50cbc2aee823bd2bf243e825be4d47df02\": \"100007000000000000000\",\n\t\"a8455b411765d6901e311e726403091e42c56683\": \"3380000000000000000000\",\n\t\"3a86ee94862b743dd34f410969d94e2c5652d4ad\": \"201610000000000000000\",\n\t\"a57360f002e0d64d2d74457d8ca4857ee00bcddf\": \"335780000000000000000\",\n\t\"e59b3bd300893f97233ef947c46f7217e392f7e9\": \"1000000000000000000000\",\n\t\"9f3a74fd5e7edcc1162993171381cbb632b7cff0\": \"10000000000000000000000\",\n\t\"675d5caa609bf70a18aca580465d8fb7310d1bbb\": \"20000000000000000000000\",\n\t\"77f609ca8720a023262c55c46f2d26fb3930ac69\": \"17300000000000000000\",\n\t\"f8ac4a39b53c11307820973b441365cffe596f66\": \"2000000000000000000000\",\n\t\"112634b4ec30ff786e024159f796a57939ea144e\": \"1999944000000000000000\",\n\t\"49d2c28ee9bc545eaaf7fd14c27c4073b4bb5f1a\": \"1474134000000000000000\",\n\t\"91cc46aa379f856a6640dccd5a648a7902f849d9\": \"200000000000000000000\",\n\t\"b46440c797a556e04c7d9104660491f96bb076bf\": \"14900000000000000000\",\n\t\"e5968797468ef767101b761d431fce14abffdbb4\": \"8040000000000000000000\",\n\t\"c0895efd056d9a3a81c3da578ada311bfb9356cf\": \"200000000000000000000\",\n\t\"76846f0de03b5a76971ead298cdd08843a4bc6c6\": \"15500000000000000000\",\n\t\"5f708eaf39d823946c51b3a3e9b7b3c003e26341\": \"1820000000000000000000\",\n\t\"24f7450ddbf18b020feb1a2032d9d54b633edf37\": \"50000000000000000000\",\n\t\"cae3a253bcb2cf4e13ba80c298ab0402da7c2aa0\": \"5400000000000000000000\",\n\t\"91e8810652e8e6161525d63bb7751dc20f676076\": \"725000000000000000000\",\n\t\"543629c95cdef428ad37d453ca9538a9f90900ac\": \"43250000000000000000000\",\n\t\"6e79edd4845b076e4cd88d188b6e432dd93f35aa\": \"955000000000000000000\",\n\t\"bd325d4029e0d8729f6d399c478224ae9e7ae41e\": \"3880000000000000000000\",\n\t\"42cecfd2921079c2d7df3f08b07aa3beee5e219a\": \"1000000000000000000000\",\n\t\"3690246ba3c80679e22eac4412a1aefce6d7cd82\": \"20000000000000000000000\",\n\t\"577aeee8d4bc08fc97ab156ed57fb970925366be\": \"333046000000000000000\",\n\t\"fe00bf439911a553982db638039245bcf032dbdc\": \"394000000000000000000\",\n\t\"91f624b24a1fa5a056fe571229e7379db14b9a1e\": \"11999974000000000000000\",\n\t\"f206d328e471d0117b246d2a4619827709e96df3\": \"3001000000000000000000\",\n\t\"073f1ed1c9c3e9c52a9b0249a5c1caa0571fdf05\": \"70400000000000000000\",\n\t\"f56048dd2181d4a36f64fcecc6215481e42abc15\": \"200000000000000000000\",\n\t\"ef76a4cd8febcbc9b818f17828f8d93473f3f3cb\": \"4000000000000000000000\",\n\t\"1031e0ecb54985ae21af1793950dc811888fde7c\": \"20000000000000000000\",\n\t\"8e0fee38685a94aabcd7ce857b6b1409824f75b8\": \"500000000000000000000\",\n\t\"f0cbef84e169630098d4e301b20208ef05846ac9\": \"259084000000000000000\",\n\t\"bbca65b3266ea2fb73a03f921635f912c7bede00\": \"1970000000000000000000\",\n\t\"0aec2e426ed6cc0cf3c249c1897eac47a7faa9bd\": \"200000000000000000000\",\n\t\"b8f30758faa808dbc919aa7b425ec922b93b8129\": \"1000076000000000000000\",\n\t\"936dcf000194e3bff50ac5b4243a3ba014d661d8\": \"10000000000000000000000\",\n\t\"b14ddb0386fb606398b8cc47565afae00ff1d66a\": \"2973024000000000000000\",\n\t\"2ec95822eb887bc113b4712a4dfd7f13b097b5e7\": \"1000000000000000000000\",\n\t\"0136a5af6c3299c6b5f005fdaddb148c070b299b\": \"20368000000000000000\",\n\t\"37cb868d2c3f95b257611eb34a4188d58b749802\": \"2000000000000000000000\",\n\t\"cd7f09d7ed66d0c38bc5ad4e32b7f2b08dc1b30d\": \"1148000000000000000000\",\n\t\"b5fa8184e43ed3e0b8ab91216461b3528d84fd09\": \"2680000000000000000000\",\n\t\"3dbf0dbfd77890800533f09dea8301b9f025d2a6\": \"1000000000000000000000\",\n\t\"b553d25d6b5421e81c2ad05e0b8ba751f8f010e3\": \"2000000000000000000000\",\n\t\"dbf8b13967f55125272de0562536c450ba5655a0\": \"2046830000000000000000\",\n\t\"0f6e840a3f2a24647d8e43e09d45c7c335df4248\": \"2500000000000000000000\",\n\t\"fa2fd29d03fee9a07893df3a269f56b72f2e1e64\": \"10000000000000000000000\",\n\t\"8b57b2bc83cc8d4de331204e893f2f3b1db1079a\": \"40000000000000000000\",\n\t\"7f541491d2ac00d2612f94aa7f0bcb014651fbd4\": \"376000000000000000000\",\n\t\"4f4a9be10cd5d3fb5de48c17be296f895690645b\": \"40000000000000000000000\",\n\t\"45d1c9eedf7cab41a779057b79395f5428d80528\": \"2000000000000000000000\",\n\t\"662334814724935b7931ddca6100e00d467727cd\": \"637000000000000000000\",\n\t\"2c52c984102ee0cd3e31821b84d408930efa1ac7\": \"2000000000000000000000\",\n\t\"000d836201318ec6899a67540690382780743280\": \"200000000000000000000\",\n\t\"81498ca07b0f2f17e8bbc7e61a7f4ae7be66b78b\": \"101600000000000000000\",\n\t\"7860a3de38df382ae4a4dce18c0c07b98bce3dfa\": \"1000000000000000000000\",\n\t\"5e8e4df18cf0af770978a8df8dac90931510a679\": \"2000000000000000000000\",\n\t\"05d68dad61d3bbdfb3f779265c49474aff3fcd30\": \"39399000000000000000\",\n\t\"96eafbf2fb6f4db9a436a74c45b5654452e23819\": \"20000000000000000000\",\n\t\"d7d7f2caa462a41b3b30a34aeb3ba61010e2626f\": \"2000000000000000000000\",\n\t\"0b71f554122469ef978e2f1fefd7cbb410982772\": \"3880000000000000000000\",\n\t\"504666ce8931175e11a5ed11c1dcaa06e57f4e66\": \"11792000000000000000000\",\n\t\"d00f067286c0fbd082f9f4a61083ec76deb3cee6\": \"1000000000000000000000\",\n\t\"02e4cb22be46258a40e16d4338d802fffd00c151\": \"379786000000000000000\",\n\t\"1c13d38637b9a47ce79d37a86f50fb409c060728\": \"1337000000000000000000\",\n\t\"e30212b2011bb56bdbf1bc35690f3a4e0fd905ea\": \"8022000000000000000000\",\n\t\"1df6911672679bb0ef3509038c0c27e394fdfe30\": \"540000000000000000000\",\n\t\"2b8fe4166e23d11963c0932b8ade8e0145ea0770\": \"43250000000000000000000\",\n\t\"6509eeb1347e842ffb413e37155e2cbc738273fd\": \"2000000000000000000000\",\n\t\"8b7e9f6f05f7e36476a16e3e7100c9031cf404af\": \"1000000000000000000000\",\n\t\"bec8caf7ee49468fee552eff3ac5234eb9b17d42\": \"2000000000000000000000\",\n\t\"38898bbb4553e00bbfd0cf268b2fc464d154add5\": \"320000000000000000000\",\n\t\"cbb3189e4bd7f45f178b1c30c76e26314d4a4b0a\": \"295007000000000000000\",\n\t\"be1cd7f4c472070968f3bde268366b21eeea8321\": \"4300000000000000000000\",\n\t\"976a18536af41874426308871bcd1512a775c9f8\": \"10000000000000000000000\",\n\t\"e9c758f8da41e3346e4350e5ac3976345c6c1082\": \"1930050000000000000000\",\n\t\"64ec8a5b743f3479e707dae9ee20ddaa4f40f1d9\": \"200000000000000000000\",\n\t\"9e01765aff08bc220550aca5ea2e1ce8e5b09923\": \"1000000000000000000000\",\n\t\"ba0f39023bdb29eb1862a9f9059cab5d306e662f\": \"2000000000000000000000\",\n\t\"2baf8d6e221174124820ee492b9459ec4fadafbb\": \"2000000000000000000000\",\n\t\"655d5cd7489629e2413c2105b5a172d933c27af8\": \"4040060000000000000000\",\n\t\"badc2aef9f5951a8d78a6b35c3d0b3a4e6e2e739\": \"6000000000000000000000\",\n\t\"e64f6e1d6401b56c076b64a1b0867d0b2f310d4e\": \"51570000000000000000\",\n\t\"7a8563867901206f3f2bf0fa3e1c8109cabccd85\": \"137000000000000000000\",\n\t\"d17fbe22d90462ed37280670a2ea0b3086a0d6d6\": \"199955000000000000000\",\n\t\"e96d7d4cdd15553a4e4d316d6d6480ca3cea1e38\": \"12200000000000000000000\",\n\t\"f04d2c91efb6e9c45ffbe74b434c8c5f2b028f1f\": \"1000000000000000000000\",\n\t\"81164deb10814ae08391f32c08667b6248c27d7a\": \"394000000000000000000\",\n\t\"7f5ae05ae0f8cbe5dfe721f044d7a7bef4c27997\": \"60000000000000000000\",\n\t\"c982586d63b0d74c201b1af8418372e30c7616be\": \"100000000000000000000\",\n\t\"64cf0935bf19d2cebbecd8780d27d2e2b2c34166\": \"1970000000000000000000\",\n\t\"cd566ad7b883f01fd3998a9a58a9dee4724ddca5\": \"58848000000000000000\",\n\t\"9da609fa3a7e6cf2cc0e70cdabe78dc4e382e11e\": \"1200000000000000000000\",\n\t\"0d69100c395ce6c5eaadf95d05d872837ededd21\": \"400000000000000000000\",\n\t\"fe91eccf2bd566afa11696c5049fa84c69630a52\": \"1940000000000000000000\",\n\t\"005d0ee8155ec0a6ff6808552ca5f16bb5be323a\": \"197000000000000000000\",\n\t\"3e5cb8928c417825c03a3bfcc52183e5c91e42d7\": \"4264790000000000000000\",\n\t\"9c1b771f09af882af0643083de2aa79dc097c40e\": \"2480000000000000000000\",\n\t\"eba388b0da27c87b1cc0eac6c57b2c5a0b459c1a\": \"6800000000000000000000\",\n\t\"7529f3797bb6a20f7ea6492419c84c867641d81c\": \"2000000000000000000000\",\n\t\"532a7da0a5ad7407468d3be8e07e69c7dd64e861\": \"500000000000000000000\",\n\t\"de82cc8d4a1bb1d9434392965b3e80bad3c03d4f\": \"1477500000000000000000\",\n\t\"4a82694fa29d9e213202a1a209285df6e745c209\": \"4000000000000000000000\",\n\t\"3e53ff2107a8debe3328493a92a586a7e1f49758\": \"23143470000000000000000\",\n\t\"b2ddb786d3794e270187d0451ad6c8b79e0e8745\": \"400000000000000000000\",\n\t\"6ebcf9957f5fc5e985add475223b04b8c14a7aed\": \"1730000000000000000000\",\n\t\"c5c7590b5621ecf8358588de9b6890f2626143f1\": \"3000000000000000000000\",\n\t\"ae4f122e35c0b1d1e4069291457c83c07f965fa3\": \"1000000000000000000000\",\n\t\"47885ababedf4d928e1c3c71d7ca40d563ed595f\": \"1820000000000000000000\",\n\t\"78ce3e3d474a8a047b92c41542242d0a08c70f99\": \"10000000000000000000000\",\n\t\"6134d942f037f2cc3d424a230c603d67abd3edf7\": \"2000000000000000000000\",\n\t\"1360e87df24c69ee6d51c76e73767ffe19a2131c\": \"92000000000000000000\",\n\t\"5fd1c3e31778276cb42ea740f5eae9c641dbc701\": \"194000000000000000000\",\n\t\"98397342ec5f3d4cb877e54ef5d6f1d366731bd4\": \"5910000000000000000000\",\n\t\"6d4b5c05d06a20957e1748ab6df206f343f92f01\": \"10020475000000000000000\",\n\t\"e6115b13f9795f7e956502d5074567dab945ce6b\": \"100000000000000000000000\",\n\t\"23730c357a91026e44b1d0e2fc2a51d071d8d77b\": \"4000000000000000000000\",\n\t\"fae881937047895a660cf229760f27e66828d643\": \"182000000000000000000\",\n\t\"ff3ef6ba151c21b59986ae64f6e8228bc9a2c733\": \"2000000000000000000000\",\n\t\"dfbd4232c17c407a980db87ffbcda03630e5c459\": \"553150000000000000000\",\n\t\"4429a29fee198450672c0c1d073162250bec6474\": \"999200000000000000000\",\n\t\"7e8f96cc29f57b0975120cb593b7dd833d606b53\": \"197000000000000000000\",\n\t\"5ed3f1ebe2ae6756b5d8dc19cad02c419aa5778b\": \"0\",\n\t\"daa776a6754469d7b9267a89b86725e740da0fa0\": \"1970000000000000000000\",\n\t\"139e479764b499d666208c4a8a047a97043163dd\": \"598880000000000000000\",\n\t\"5ad5e420755613886f35aa56ac403eebdfe4b0d0\": \"80000000000000000000000\",\n\t\"3fe801e61335c5140dc7eda2ef5204460a501230\": \"2000000000000000000000\",\n\t\"ce8a6b6d5033b1498b1ffeb41a41550405fa03a2\": \"4000000000000000000000\",\n\t\"26c2ffc30efdc5273e76183a16c2698d6e531286\": \"776000000000000000000\",\n\t\"71ec3aec3f8f9221f9149fede06903a0f9a232f2\": \"200000000000000000000\",\n\t\"ef35f6d4b1075e6aa139151c974b2f4658f70538\": \"1111111000000000000000\",\n\t\"26a68eab905a8b3dce00e317308225dab1b9f6b8\": \"1980000000000000000000\",\n\t\"63f5b53d79bf2e411489526530223845fac6f601\": \"30000000000000000000000\",\n\t\"481115296ab7db52492ff7b647d63329fb5cbc6b\": \"16100000000000000000000\",\n\t\"f19f193508393e4d2a127b20b2031f39c82581c6\": \"3500088000000000000000\",\n\t\"500e34cde5bd9e2b71bb92d7cf55eee188d5fa0c\": \"5348000000000000000000\",\n\t\"65ea67ad3fb56ad5fb94387dd38eb383001d7c68\": \"100000000000000000000\",\n\t\"7f9f9b56e4289dfb58e70fd5f12a97b56d35c6a5\": \"1970000000000000000000\",\n\t\"60be6f953f2a4d25b6256ffd2423ac1438252e4e\": \"150000000000000000000\",\n\t\"ac1dfc984b71a19929a81d81f04a7cbb14073703\": \"600000000000000000000\",\n\t\"a3c14ace28b192cbb062145fcbbd5869c67271f6\": \"8000000000000000000000\",\n\t\"2da76b7c39b420e388ba2c1020b0856b0270648a\": \"2000000000000000000000\",\n\t\"622be4b45495fcd93143efc412d699d6cdc23dc5\": \"17300000000000000000\",\n\t\"d3f873bd9956135789ab00ebc195b922e94b259d\": \"2000000000000000000000\",\n\t\"975f3764e97bbccf767cbd3b795ba86d8ba9840e\": \"346000000000000000000\",\n\t\"fc39be41094b1997d2169e8264c2c3baa6c99bc4\": \"2000000000000000000000\",\n\t\"12ffc1128605cb0c13709a7290506f2690977193\": \"3340000000000000000000\",\n\t\"9b1168de8ab64b47552f3389800a9cc08b4666cf\": \"1730000000000000000000\",\n\t\"9f1aa8fcfc89a1a5328cbd6344b71f278a2ca4a0\": \"500000000000000000000\",\n\t\"505a33a18634dd4800693c67f48a1d693d4833f8\": \"7252000000000000000000\",\n\t\"d08fc09a0030fd0928cd321198580182a76aae9f\": \"1000000000000000000000\",\n\t\"6acddca3cd2b4990e25cd65c24149d0912099e79\": \"3000037000000000000000\",\n\t\"397a6ef8763a18f00fac217e055c0d3094101011\": \"2000000000000000000000\",\n\t\"4e0bd32473c4c51bf25654def69f797c6b29a232\": \"1600930000000000000000\",\n\t\"28d8c35fb7eea622582135e3ad47a227c9a663bd\": \"18200000000000000000\",\n\t\"f96488698590dc3b2c555642b871348dfa067ad5\": \"500000000000000000000\",\n\t\"4eebe80cb6f3ae5904f6f4b28d907f907189fcab\": \"1999944000000000000000\",\n\t\"8d1abd897dacd4312e18080c88fb9647eab44052\": \"216000000000000000000\",\n\t\"457029c469c4548d168cec3e65872e4428d42b67\": \"2000000000000000000000\",\n\t\"1296acded1e063af39fe8ba0b4b63df789f70517\": \"100014000000000000000\",\n\t\"71762c63678c18d1c6378ce068e666381315147e\": \"2000000000000000000000\",\n\t\"6cc1c878fa6cde8a9a0b8311247e741e4642fe6d\": \"985000000000000000000\",\n\t\"8d9ed7f4553058c26f7836a3802d3064eb1b363d\": \"90000000000000000000\",\n\t\"5032e4bcf7932b49fdba377b6f1499636513cfc3\": \"100000000000000000000\",\n\t\"462b678b51b584f3ed7ada070b5cd99c0bf7b87f\": \"100000000000000000000\",\n\t\"c8aa49e3809f0899f28ab57e6743709d58419033\": \"880000000000000000000\",\n\t\"01b1cae91a3b9559afb33cdc6d689442fdbfe037\": \"200000000000000000000\",\n\t\"b1043004ec1941a8cf4f2b00b15700ddac6ff17e\": \"1000000000000000000000\",\n\t\"5ba2c6c35dfaec296826591904d544464aeabd5e\": \"20000000000000000000\",\n\t\"b32400fd13c5500917cb037b29fe22e7d5228f2d\": \"40000000000000000000000\",\n\t\"d59d92d2c8701980cc073c375d720af064743c0c\": \"19000000000000000000000\",\n\t\"11dd6185d9a8d73ddfdaa71e9b7774431c4dfec2\": \"1000000000000000000000\",\n\t\"d4cb21e590c5a0e06801366aff342c7d7db16424\": \"494000000000000000000\",\n\t\"5b6d55f6712967405c659129f4b1de09acf2cb7b\": \"267400000000000000000\",\n\t\"6179979907fe7f037e4c38029d60bcbab832b3d6\": \"1610000000000000000000\",\n\t\"33c407133b84b3ca4c3ded1f4658900c38101624\": \"2800000000000000000000\",\n\t\"cd2a36d753e9e0ed012a584d716807587b41d56a\": \"261400000000000000000\",\n\t\"8155fa6c51eb31d808412d748aa086105018122f\": \"1880000000000000000000\",\n\t\"3ecc8e1668dde995dc570fe414f44211c534a615\": \"2000000000000000000000\",\n\t\"d6395db5a4bb66e60f4cfbcdf0057bb4d97862e2\": \"910000000000000000000\",\n\t\"b6fb39786250081426a342c70d47ee521e5bc563\": \"15000000000000000000000\",\n\t\"510eda5601499a0d5e1a006bfffd833672f2e267\": \"2000000000000000000000\",\n\t\"98c19dba810ba611e68f2f83ee16f6e7744f0c1f\": \"200000000000000000000\",\n\t\"34ff26eb60a8d1a95a489fae136ee91d4e58084c\": \"600000000000000000000\",\n\t\"6ad90be252d9cd464d998125fab693060ba8e429\": \"4000000000000000000000\",\n\t\"038323b184cff7a82ae2e1bda7793fe4319ca0bf\": \"20000000000000000000000\",\n\t\"dc5305b4020a06b49d657c7ca34c35c91c5f2c56\": \"7045990000000000000000\",\n\t\"c9c80dc12e7bab86e949d01e4c3ed35f2b9bba5f\": \"2000000000000000000000\",\n\t\"7beb81fb2f5e91526b2ac9795e76c69bcff04bc0\": \"69400000000000000000000\",\n\t\"b8bc9bca7f71b4ed12e620438d620f53c114342f\": \"500000000000000000000\",\n\t\"d288e7cb7ba9f620ab0f7452e508633d1c5aa276\": \"4000000000000000000000\",\n\t\"a2e460a989cb15565f9ecca7d121a18e4eb405b6\": \"2000000000000000000000\",\n\t\"7489cc8abe75cda4ef0d01cef2605e47eda67ab1\": \"133700000000000000000\",\n\t\"38b403fb1fb7c14559a2d6f6564a5552bca39aff\": \"2000000000000000000000\",\n\t\"e55c80520a1b0f755b9a2cd3ce214f7625653e8a\": \"2000000000000000000000\",\n\t\"451b7070259bdba27100e36e23428a53dfe304e9\": \"13370000000000000000\",\n\t\"8b5c914b128bf1695c088923fa467e7911f351fa\": \"98500000000000000000\",\n\t\"17df49518d73b129f0da36b1c9b40cb66420fdc7\": \"10000000000000000000000\",\n\t\"c1950543554d8a713003f662bb612c10ad4cdf21\": \"18200000000000000000\",\n\t\"fa7606435b356cee257bd2fcd3d9eacb3cd1c4e1\": \"100000000000000000000\",\n\t\"e0bad98eee9698dbf6d76085b7923de5754e906d\": \"167000000000000000000\",\n\t\"ce53c8cdd74296aca987b2bc19c2b875a48749d0\": \"3000000000000000000000\",\n\t\"d0c55abf976fdc3db2afe9be99d499484d576c02\": \"1000000000000000000000\",\n\t\"238a6b7635252f5244486c0af0a73a207385e039\": \"1370000000000000000000\",\n\t\"ceb389381d48a8ae4ffc483ad0bb5e204cfdb1ec\": \"740745000000000000000\",\n\t\"3847667038f33b01c1cc795d8daf5475eff5a0d4\": \"728330000000000000000\",\n\t\"a08d215b5b6aac4861a281ac7e400b78fef04cbf\": \"20000000000000000000\",\n\t\"2d0dec51a6e87330a6a8fa2a0f65d88d4abcdf73\": \"185000000000000000000\",\n\t\"9e8f64ddcde9b8b451bafaa235a9bf511a25ac91\": \"2674000000000000000000\",\n\t\"ddac6bf4bbdd7d597d9c686d0695593bedccc7fa\": \"865000000000000000000\",\n\t\"22e15158b5ee3e86eb0332e3e6a9ac6cd9b55ecd\": \"160000000000000000000\",\n\t\"3aea4e82d2400248f99871a41ca257060d3a221b\": \"1000000000000000000000\",\n\t\"fb126f0ec769f49dcefca2f200286451583084b8\": \"5013750000000000000000\",\n\t\"1b8bd6d2eca20185a78e7d98e8e185678dac4830\": \"16700000000000000000000\",\n\t\"664cd67dccc9ac8228b45c55db8d76550b659cdc\": \"394000000000000000000\",\n\t\"553f37d92466550e9fd775ae74362df030179132\": \"2000000000000000000000\",\n\t\"730d8763c6a4fd824ab8b859161ef7e3a96a1200\": \"20000000000000000000000\",\n\t\"04c2c64bb54c3eccd05585e10ec6f99a0cdb01a3\": \"100000000000000000000\",\n\t\"f1624d980b65336feac5a6d54125005cfcf2aacb\": \"2000000000000000000000\",\n\t\"0b7fc9ddf70576f6330669eaaa71b6a831e99528\": \"140000000000000000000\",\n\t\"fa2bbca15d3fe39f8a328e91f90da14f7ac6253d\": \"200000000000000000000\",\n\t\"07feef54c136850829badc4b49c3f2a73c89fb9e\": \"118200000000000000000\",\n\t\"3703350c4d6fe337342cddc65bf1e2386bf3f9b2\": \"2020000000000000000000\",\n\t\"6d7d1c949511f88303808c60c5ea0640fcc02683\": \"10000000000000000000000\",\n\t\"34fa7792bad8bbd7ff64056214a33eb6600c1ea8\": \"50000000000000000000\",\n\t\"994cc2b5227ec3cf048512467c41b7b7b748909f\": \"2000000000000000000000\",\n\t\"08da3a7a0f452161cfbcec311bb68ebfdee17e88\": \"2000000000000000000000\",\n\t\"bbb4ee1d82f2e156442cc93338a2fc286fa28864\": \"1370000000000000000000\",\n\t\"7a2dfc770e24368131b7847795f203f3d50d5b56\": \"11400000000000000000000\",\n\t\"7cef4d43aa417f9ef8b787f8b99d53f1fea1ee88\": \"1910000000000000000000\",\n\t\"c6a30ef5bb3320f40dc5e981230d52ae3ac19322\": \"182000000000000000000\",\n\t\"6a74844d8e9cb5581c45079a2e94462a6cee8821\": \"1082970000000000000000\",\n\t\"c3110be01dc9734cfc6e1ce07f87d77d1345b7e1\": \"4999998000000000000000\",\n\t\"aeb916ebf49d0f86c13f7331cef19e129937512d\": \"599908000000000000000\",\n\t\"3e5abd09ce5af7ba8487c359e0f2a93a986b0b18\": \"10000000000000000000000\",\n\t\"cdd60d73efaad873c9bbfb178ca1b7105a81a681\": \"32000000000000000000\",\n\t\"31eb123c95c82bf685ace7a75a1881a289efca10\": \"920034000000000000000\",\n\t\"86e8670e27598ea09c3899ab7711d3b9fe901c17\": \"200000000000000000000\",\n\t\"a144f6b60f72d64a21e330dadb62d8990ade2b09\": \"1000000000000000000000\",\n\t\"68883e152e5660fee59626e7e3b4f05110e6222f\": \"54683300000000000000000\",\n\t\"fe4249127950e2f896ec0e7e2e3d055aab10550f\": \"668500000000000000000\",\n\t\"403d53cf620f0922b417848dee96c190b5bc8271\": \"9850000000000000000000\",\n\t\"bec2e6de39c07c2bae556acfbee2c4728b9982e3\": \"573000000000000000000\",\n\t\"f3c4716d1ee5279a86d0163a14618181e16136c7\": \"1000000000000000000000\",\n\t\"e38ef28a5ed984a7db24a1ae782dfb87f397dfc6\": \"143000000000000000000\",\n\t\"30fbe5885f9fcce9ea5edb82ed4a1196dd259aed\": \"5200000000000000000000\",\n\t\"48bf14d7b1fc84ebf3c96be12f7bce01aa69b03e\": \"120000000000000000000\",\n\t\"b8d5c324a8209d7c8049d0d4aede02ba80ab578b\": \"16889329000000000000000\",\n\t\"43d5a71ce8b8f8ae02b2eaf8eaf2ca2840b93fb6\": \"6000000000000000000000\",\n\t\"f9a59c3cc5ffacbcb67be0fc7256f64c9b127cb4\": \"2000000000000000000000\",\n\t\"0e21af1b8dbf27fcf63f37e047b87a825cbe7c27\": \"3000000000000000000000\",\n\t\"1c35aab688a0cd8ef82e76541ba7ac39527f743b\": \"500000000000000000000\",\n\t\"91ac5cfe67c54aa7ebfba448666c461a3b1fe2e1\": \"401880000000000000000\",\n\t\"4ba53ab549e2016dfa223c9ed5a38fad91288d07\": \"1400000000000000000000\",\n\t\"99a4de19ded79008cfdcd45d014d2e584b8914a8\": \"1500000000000000000000\",\n\t\"4adbf4aae0e3ef44f7dd4d8985cfaf096ec48e98\": \"150000000000000000000\",\n\t\"9a633fcd112cceeb765fe0418170732a9705e79c\": \"18200000000000000000\",\n\t\"292f228b0a94748c8eec612d246f989363e08f08\": \"185000000000000000000\",\n\t\"9f3497f5ef5fe63095836c004eb9ce02e9013b4b\": \"633424000000000000000\",\n\t\"0e6dfd553b2e873d2aec15bd5fbb3f8472d8d394\": \"12000000000000000000000\",\n\t\"74ebf4425646e6cf81b109ce7bf4a2a63d84815f\": \"40000000000000000000\",\n\t\"8ce5e3b5f591d5eca38abf228f2e3c35134bdac0\": \"2319920000000000000000\",\n\t\"90c41eba008e20cbe927f346603fc88698125969\": \"42000000000000000000\",\n\t\"382ba76db41b75606dd48a48f0137e9174e031b6\": \"20000000000000000000\",\n\t\"5d24bdbc1c47f0eb83d128cae48ac33c4817e91f\": \"1000000000000000000000\",\n\t\"a64e5ffb704c2c9139d77ef61d8cdfa31d7a88e9\": \"143000000000000000000\",\n\t\"a18360e985f2062e8f8efe02ad2cbc91ad9a5aad\": \"3000000000000000000000\",\n\t\"d251f903ae18727259eee841a189a1f569a5fd76\": \"10000000000000000000000\",\n\t\"efa6b1f0db603537826891b8b4bc163984bb40cd\": \"985000000000000000000\",\n\t\"47fff42c678551d141eb75a6ee398117df3e4a8d\": \"100010000000000000000\",\n\t\"f2294adbb6f0dcc76e632ebef48ab49f124dbba4\": \"1443690000000000000000\",\n\t\"53700d53254d430f22781a4a76a463933b5d6b08\": \"1970000000000000000000\",\n\t\"b14a7aaa8f49f2fb9a8102d6bbe4c48ae7c06fb2\": \"8000000000000000000000\",\n\t\"9ed4e63f526542d44fddd34d59cd25388ffd6bda\": \"3885000000000000000000\",\n\t\"4cac91fb83a147d2f76c3267984b910a79933348\": \"2167000000000000000000\",\n\t\"9b32cf4f5115f4b34a00a64c617de06387354323\": \"105501000000000000000\",\n\t\"b8bedd576a4b4c2027da735a5bc3f533252a1808\": \"2000000000000000000000\",\n\t\"c5a3b98e4593fea0b38c4f455a5065f051a2f815\": \"20309030000000000000000\",\n\t\"eaf52388546ec35aca6f6c6393d8d609de3a4bf3\": \"20000000000000000000\",\n\t\"4c423c76930d07f93c47a5cc4f615745c45a9d72\": \"100000000000000000000\",\n\t\"9052f2e4a3e3c12dd1c71bf78a4ec3043dc88b7e\": \"267400000000000000000\",\n\t\"2bade91d154517620fd4b439ac97157a4102a9f7\": \"4000000000000000000000\",\n\t\"da698d64c65c7f2b2c7253059cd3d181d899b6b7\": \"295500000000000000000\",\n\t\"c6d8954e8f3fc533d2d230ff025cb4dce14f3426\": \"400000000000000000000\",\n\t\"349a816b17ab3d27bbc0ae0051f6a070be1ff29d\": \"10000000000000000000000\",\n\t\"ff4d9c8484c43c42ff2c5ab759996498d323994d\": \"4000000000000000000000\",\n\t\"22944fbca9b57963084eb84df7c85fb9bcdfb856\": \"4649845000000000000000\",\n\t\"bfd93c90c29c07bc5fb5fc49aeea55a40e134f35\": \"28000000000000000000000\",\n\t\"3caedb5319fe806543c56e5021d372f71be9062e\": \"40000000000000000000000\",\n\t\"9a079c92a629ca15c8cafa2eb28d5bc17af82811\": \"500000000000000000000\",\n\t\"7d2a52a7cf0c8436a8e007976b6c26b7229d1e15\": \"438040000000000000000\",\n\t\"cf89f7460ba3dfe83c5a1d3a019ee1250f242f0f\": \"985177000000000000000\",\n\t\"577bfe64e3a1e3800e94db1c6c184d8dc8aafc66\": \"1498000000000000000000\",\n\t\"7ffd02ed370c7060b2ae53c078c8012190dfbb75\": \"10000000000000000000000\",\n\t\"90b62f131a5f29b45571513ee7a74a8f0b232202\": \"158000000000000000000\",\n\t\"6e8212b722afd408a7a73ed3e2395ee6454a0330\": \"159000000000000000000\",\n\t\"515f30bc90cdf4577ee47d65d785fbe2e837c6bc\": \"10166128000000000000000\",\n\t\"c27376f45d21e15ede3b26f2655fcee02ccc0f2a\": \"20000000000000000000\",\n\t\"3da39ce3ef4a7a3966b32ee7ea4ebc2335a8f11f\": \"2000000000000000000000\",\n\t\"25259d975a21d83ae30e33f800f53f37dfa01938\": \"20000000000000000000\",\n\t\"8ed143701f2f72280fd04a7b4164281979ea87c9\": \"14000000000000000000\",\n\t\"5ac99ad7816ae9020ff8adf79fa9869b7cea6601\": \"21000000000000000000000\",\n\t\"f51fded80acb502890e87369741f3722514cefff\": \"20000042000000000000000\",\n\t\"f657fcbe682eb4e8db152ecf892456000b513d15\": \"1940000000000000000000\",\n\t\"62c37c52b97f4b040b1aa391d6dec152893c4707\": \"1000000000000000000000\",\n\t\"89fc8e4d386b0d0bb4a707edf3bd560df1ad8f4e\": \"2955000000000000000000\",\n\t\"53c0bb7fc88ea422d2ef7e540e2d8f28b1bb8183\": \"20000000000000000000\",\n\t\"56f493a3d108aaa2d18d98922f8efe1662cfb73d\": \"2020000000000000000000\",\n\t\"e9458f68bb272cb5673a04f781b403556fd3a387\": \"61000000000000000000\",\n\t\"be525a33ea916177f17283fca29e8b350b7f530b\": \"2638000000000000000000\",\n\t\"4feb846be43041fd6b34202897943e3f21cb7f04\": \"83226000000000000000\",\n\t\"15aa530dc36958b4edb38eee6dd9e3c77d4c9145\": \"2000000000000000000000\",\n\t\"2458d6555ff98a129cce4037953d00206eff4287\": \"197000000000000000000\",\n\t\"8035fe4e6b6af27ae492a578515e9d39fa6fa65b\": \"4000000000000000000000\",\n\t\"296b71c0015819c242a7861e6ff7eded8a5f71e3\": \"1999800000000000000000\",\n\t\"8f1952eed1c548d9ee9b97d0169a07933be69f63\": \"1000000000000000000000\",\n\t\"a421dbb89b3a07419084ad10c3c15dfe9b32d0c2\": \"20000000000000000000000\",\n\t\"554336ee4ea155f9f24f87bca9ca72e253e12cd2\": \"100000000000000000000\",\n\t\"ffc5fc4b7e8a0293ff39a3a0f7d60d2646d37a74\": \"2000000000000000000000\",\n\t\"ea2c197d26e98b0da83e1b72c787618c979d3db0\": \"19700000000000000000\",\n\t\"96aa573fed2f233410dbae5180145b23c31a02f0\": \"1730000000000000000000\",\n\t\"c23b2f921ce4a37a259ee4ad8b2158d15d664f59\": \"25403000000000000000\",\n\t\"d874b9dfae456a929ba3b1a27e572c9b2cecdfb3\": \"170000000000000000000\",\n\t\"bf8b8005d636a49664f74275ef42438acd65ac91\": \"200000000000000000000\",\n\t\"441a52001661fac718b2d7b351b7c6fb521a7afd\": \"400000000000000000000\",\n\t\"812a55c43caedc597218379000ce510d548836fd\": \"18200000000000000000\",\n\t\"5e90c85877198756b0366c0e17b28e52b446505a\": \"374288000000000000000\",\n\t\"da3017c150dd0dce7fcf881b0a48d0d1c756c4c7\": \"100014000000000000000\",\n\t\"6baf7a2a02ae78801e8904ad7ac05108fc56cff6\": \"1000000000000000000000\",\n\t\"177dae78bc0113d8d39c4402f2a641ae2a105ab8\": \"1818320000000000000000\",\n\t\"01b5b5bc5a117fa08b34ed1db9440608597ac548\": \"200000000000000000000\",\n\t\"aae732eda65988c3a00c7f472f351c463b1c968e\": \"2000000000000000000000\",\n\t\"d95342953c8a21e8b635eefac7819bea30f17047\": \"94160000000000000000000\",\n\t\"8d616b1eee77eef6f176e0698db3c0c141b2fc8f\": \"500000000000000000000\",\n\t\"12d20790b7d3dbd88c81a279b812039e8a603bd0\": \"1604400000000000000000\",\n\t\"3734cb187491ede713ae5b3b2d12284af46b8101\": \"3000000000000000000000\",\n\t\"dd967c4c5f8ae47e266fb416aad1964ee3e7e8c3\": \"7750000000000000000000\",\n\t\"3dcef19c868b15d34eda426ec7e04b18b6017002\": \"1999800000000000000000\",\n\t\"ce9d21c692cd3c01f2011f505f870036fa8f6cd2\": \"400000000000000000000\",\n\t\"d44f6ac3923b5fd731a4c45944ec4f7ec52a6ae4\": \"10000000000000000000000\",\n\t\"b424d68d9d0d00cec1938c854e15ffb880ba0170\": \"200000000000000000000\",\n\t\"1f2186ded23e0cf9521694e4e164593e690a9685\": \"300000000000000000000\",\n\t\"7f4b5e278578c046cceaf65730a0e068329ed5b6\": \"1880000000000000000000\",\n\t\"8c50aa2a9212bcde56418ae261f0b35e7a9dbb82\": \"400000000000000000000\",\n\t\"1953313e2ad746239cb2270f48af34d8bb9c4465\": \"2000000000000000000000\",\n\t\"a15025f595acdbf3110f77c5bf24477e6548f9e8\": \"2000000000000000000000\",\n\t\"53af32c22fef99803f178cf90b802fb571c61cb9\": \"3880000000000000000000\",\n\t\"d0a8abd80a199b54b08b65f01d209c27fef0115b\": \"6525979000000000000000\",\n\t\"2b68306ba7f8daaf73f4c644ef7d2743c0f26856\": \"864800000000000000000\",\n\t\"96924191b7df655b3319dc6d6137f481a73a0ff3\": \"4020000000000000000000\",\n\t\"6fa72015fa78696efd9a86174f7f1f21019286b1\": \"1337000000000000000000\",\n\t\"0b119df99c6b8de58a1e2c3f297a6744bf552277\": \"2000000000000000000000\",\n\t\"61733947fab820dbd351efd67855ea0e881373a0\": \"20000000000000000000\",\n\t\"8ae6f80b70e1f23c91fbd5a966b0e499d95df832\": \"197000000000000000000\",\n\t\"01a7d9fa7d0eb1185c67e54da83c2e75db69e39f\": \"7623900000000000000000\",\n\t\"9932ef1c85b75a9b2a80057d508734c51085becc\": \"50170000000000000000\",\n\t\"aefcfe88c826ccf131d54eb4ea9eb80e61e1ee25\": \"340000000000000000000\",\n\t\"c21fa6643a1f14c02996ad7144b75926e87ecb4b\": \"20000000000000000000000\",\n\t\"97d9e46a7604d7b5a4ea4ee61a42b3d2350fc3ed\": \"2000000000000000000000\",\n\t\"3cafaf5e62505615068af8eb22a13ad8a9e55070\": \"1999600000000000000000\",\n\t\"22f2dcff5ad78c3eb6850b5cb951127b659522e6\": \"13700000000000000000\",\n\t\"aaad1baade5af04e2b17439e935987bf8c2bb4b9\": \"2000000000000000000000\",\n\t\"298887bab57c5ba4f0615229d7525fa113b7ea89\": \"40000000000000000000\",\n\t\"7539333046deb1ef3c4daf50619993f444e1de68\": \"1182000000000000000000\",\n\t\"9752d14f5e1093f071711c1adbc4e3eb1e5c57f3\": \"2000000000000000000000\",\n\t\"ed641e06368fb0efaa1703e01fe48f4a685309eb\": \"200000000000000000000\",\n\t\"d0ee4d02cf24382c3090d3e99560de3678735cdf\": \"2400000000000000000000\",\n\t\"47e25df8822538a8596b28c637896b4d143c351d\": \"80500000000000000000000\",\n\t\"559706c332d20779c45f8a6d046a699159b74921\": \"380123000000000000000\",\n\t\"3a4da78dce05aeb87de9aead9185726da1926798\": \"200000000000000000000\",\n\t\"3041445a33ba158741160d9c344eb88e5c306f94\": \"60000000000000000000\",\n\t\"08d4311c9c1bbaf87fabe1a1d01463828d5d98ce\": \"90000000000000000000000\",\n\t\"6bd3e59f239fafe4776bb9bddd6bee83ba5d9d9f\": \"1000000000000000000000\",\n\t\"29eaae82761762f4d2db53a9c68b0f6b0b6d4e66\": \"2000000000000000000000\",\n\t\"0b7d339371e5be6727e6e331b5821fa24bdb9d5a\": \"857738000000000000000\",\n\t\"4714cfa4f46bd6bd70737d75878197e08f88e631\": \"11792000000000000000000\",\n\t\"ad92ca066edb7c711dfc5b166192d1edf8e77185\": \"36000000000000000000000\",\n\t\"f97b56ebd5b77abc9fbacbabd494b9d2c221cd03\": \"1970000000000000000000\",\n\t\"591bef3171d1c5957717a4e98d17eb142c214e56\": \"20000000000000000000000\",\n\t\"899b3c249f0c4b81df75d212004d3d6d952fd223\": \"2000000000000000000000\",\n\t\"a819d2ece122e028c8e8a04a064d02b9029b08b9\": \"1000000000000000000000\",\n\t\"e341642d40d2afce2e9107c67079ac7a2660086c\": \"400000000000000000000\",\n\t\"0329188f080657ab3a2afa522467178279832085\": \"216700000000000000000\",\n\t\"03317826d1f70aa4bddfa09be0c4105552d2358b\": \"38800000000000000000\",\n\t\"3ac9dc7a436ae98fd01c7a9621aa8e9d0b8b531d\": \"1790000000000000000000\",\n\t\"93c88e2d88621e30f58a9586bed4098999eb67dd\": \"31200000000000000000000\",\n\t\"cd1e66ed539dd92fc40bbaa1fa16de8c02c14d45\": \"230000000000000000000\",\n\t\"e6c81ffcecb47ecdc55c0b71e4855f3e5e97fc1e\": \"334250000000000000000\",\n\t\"50f8fa4bb9e2677c990a4ee8ce70dd1523251e4f\": \"26030000000000000000\",\n\t\"4f64a85e8e9a40498c0c75fceb0337fb49083e5e\": \"1000000000000000000000\",\n\t\"4b29437c97b4a844be71cca3b648d4ca0fdd9ba4\": \"150200000000000000000\",\n\t\"1eee6cbee4fe96ad615a9cf5857a647940df8c78\": \"19400000000000000000\",\n\t\"29f0edc60338e7112085a1d114da8c42ce8f55d6\": \"2958000000000000000000\",\n\t\"23b1c4917fbd93ee3d48389306957384a5496cbf\": \"4000086000000000000000\",\n\t\"1767525c5f5a22ed80e9d4d7710f0362d29efa33\": \"400000000000000000000\",\n\t\"3064899a963c4779cbf613cd6980846af1e6ec65\": \"6999908000000000000000\",\n\t\"68531f4dda808f5320767a03113428ca0ce2f389\": \"19400000000000000000\",\n\t\"1db9ac9a9eaeec0a523757050c71f47278c72d50\": \"1337000000000000000000\",\n\t\"7592c69d067b51b6cc639d1164d5578c60d2d244\": \"20000000000000000000\",\n\t\"cf3fbfa1fd32d7a6e0e6f8ef4eab57be34025c4c\": \"1063120000000000000000\",\n\t\"8efec058cc546157766a632775404a334aaada87\": \"1999000000000000000000\",\n\t\"faf5f0b7b6d558f5090d9ea1fb2d42259c586078\": \"6401000000000000000000\",\n\t\"19ecf2abf40c9e857b252fe1dbfd3d4c5d8f816e\": \"2000000000000000000000\",\n\t\"6e8a26689f7a2fdefd009cbaaa5310253450daba\": \"2049982000000000000000\",\n\t\"e2f40d358f5e3fe7463ec70480bd2ed398a7063b\": \"20000000000000000000\",\n\t\"fa19d6f7a50f4f079893d167bf14e21d0073d196\": \"530000000000000000000\",\n\t\"3e2ca0d234baf607ad466a1b85f4a6488ef00ae7\": \"89505000000000000000\",\n\t\"f8a49ca2390c1f6d5c0e62513b079571743f7cc6\": \"3000000000000000000000\",\n\t\"5d3f3b1f7130b0bb21a0fd32396239179a25657f\": \"62474000000000000000000\",\n\t\"f332c0f3e05a27d9126fd0b641a8c2d4060608fd\": \"5001041000000000000000\",\n\t\"e304a32f05a83762744a9542976ff9b723fa31ea\": \"1576256000000000000000\",\n\t\"f768f321fd6433d96b4f354d3cc1652c1732f57f\": \"10000000000000000000000\",\n\t\"147af46ae9ccd18bb35ca01b353b51990e49dce1\": \"4000000000000000000000\",\n\t\"21eae6feffa9fbf4cd874f4739ace530ccbe5937\": \"5000000000000000000000\",\n\t\"6994fb3231d7e41d491a9d68d1fa4cae2cc15960\": \"4000000000000000000000\",\n\t\"51126446ab3d8032557e8eba65597d75fadc815c\": \"322000000000000000000\",\n\t\"24daaaddf7b06bbcea9b80590085a88567682b4e\": \"319008000000000000000\",\n\t\"cd020f8edfcf524798a9b73a640334bbf72f80a5\": \"133700000000000000000\",\n\t\"56febf9e1003af15b1bd4907ec089a4a1b91d268\": \"200000000000000000000\",\n\t\"3c79c863c3d372b3ff0c6f452734a7f97042d706\": \"176000000000000000000\",\n\t\"e1203eb3a723e99c2220117ca6afeb66fa424f61\": \"9461996000000000000000\",\n\t\"18fb09188f27f1038e654031924f628a2106703d\": \"2000000000000000000000\",\n\t\"2eba0c6ee5a1145c1c573984963a605d880a7a20\": \"500000000000000000000\",\n\t\"4cefbe2398e47d52e78db4334c8b697675f193ae\": \"4011000000000000000000\",\n\t\"c02471e3fc2ea0532615a7571d493289c13c36ef\": \"20000000000000000000\",\n\t\"ba469aa5c386b19295d4a1b5473b540353390c85\": \"2000000000000000000000\",\n\t\"7b11673cc019626b290cbdce26046f7e6d141e21\": \"500000000000000000000\",\n\t\"26784ade91c8a83a8e39658c8d8277413ccc9954\": \"6000000000000000000000\",\n\t\"57d3df804f2beee6ef53ab94cb3ee9cf524a18d3\": \"393606000000000000000\",\n\t\"ccae0d3d852a7da3860f0636154c0a6ca31628d4\": \"106560000000000000000\",\n\t\"bfe3a1fc6e24c8f7b3250560991f93cba2cf8047\": \"80000000000000000000000\",\n\t\"724ce858857ec5481c86bd906e83a04882e5821d\": \"3000000000000000000000\",\n\t\"fb37cf6b4f81a9e222fba22e9bd24b5098b733cf\": \"38800000000000000000\",\n\t\"9b22a80d5c7b3374a05b446081f97d0a34079e7f\": \"3000000000000000000000\",\n\t\"0a29a8a4d5fd950075ffb34d77afeb2d823bd689\": \"200000000000000000000\",\n\t\"d01af9134faf5257174e8b79186f42ee354e642d\": \"1000000000000000000000\",\n\t\"7f1619988f3715e94ff1d253262dc5581db3de1c\": \"900000000000000000000\",\n\t\"6f137a71a6f197df2cbbf010dcbd3c444ef5c925\": \"2000000000000000000000\",\n\t\"11efb8a20451161b644a8ccebbc1d343a3bbcb52\": \"3200000000000000000000\",\n\t\"46504e6a215ac83bccf956befc82ab5a679371c8\": \"518898000000000000000\",\n\t\"b523fff9749871b35388438837f7e6e0dea9cb6b\": \"2000000000000000000000\",\n\t\"c5c6a4998a33feb764437a8be929a73ba34a0764\": \"50000000000000000000000\",\n\t\"3cd7f7c7c2353780cde081eeec45822b25f2860c\": \"200000000000000000000\",\n\t\"b3050beff9de33c80e1fa15225e28f2c413ae313\": \"700000000000000000000\",\n\t\"59268171b833e0aa13c54b52ccc0422e4fa03aeb\": \"3000000000000000000000\",\n\t\"7169724ee72271c534cad6420fb04ee644cb86fe\": \"410164000000000000000\",\n\t\"6e6d5bbbb9053b89d744a27316c2a7b8c09b547d\": \"909831000000000000000\",\n\t\"3f3f46b75cabe37bfacc8760281f4341ca7f463d\": \"602709000000000000000\",\n\t\"7a33834e8583733e2d52aead589bd1affb1dd256\": \"1000000000000000000000\",\n\t\"e94ded99dcb572b9bb1dcba32f6dee91e057984e\": \"394000000000000000000\",\n\t\"19336a236ded755872411f2e0491d83e3e00159e\": \"940000000000000000000\",\n\t\"63ac545c991243fa18aec41d4f6f598e555015dc\": \"600000000000000000000\",\n\t\"cfee05c69d1f29e7714684c88de5a16098e91399\": \"1970000000000000000000\",\n\t\"77be6b64d7c733a436adec5e14bf9ad7402b1b46\": \"1000000000000000000000\",\n\t\"233bdddd5da94852f4ade8d212885682d9076bc6\": \"4000000000000000000000\",\n\t\"952c57d2fb195107d4cd5ca300774119dfad2f78\": \"2000000000000000000000\",\n\t\"e237baa4dbc9926e32a3d85d1264402d54db012f\": \"2000000000000000000000\",\n\t\"aa91237e740d25a92f7fa146faa18ce56dc6e1f3\": \"925000000000000000000\",\n\t\"2339e9492870afea2537f389ac2f838302a33c06\": \"2000000000000000000000\",\n\t\"1d45586eb803ca2190650bf748a2b174312bb507\": \"1400000000000000000000\",\n\t\"c61446b754c24e3b1642d9e51765b4d3e46b34b6\": \"2000000000000000000000\",\n\t\"ac28b5edea05b76f8c5f97084541277c96696a4c\": \"1000000000000000000000\",\n\t\"1a1c9a26e0e02418a5cf687da75a275c622c9440\": \"5000000000000000000000\",\n\t\"299368609042a858d1ecdf1fc0ada5eaceca29cf\": \"2000000000000000000000\",\n\t\"095f5a51d06f6340d80b6d29ea2e88118ad730fe\": \"2000200000000000000000\",\n\t\"751a2ca34e7187c163d28e3618db28b13c196d26\": \"500000000000000000000\",\n\t\"75b0e9c942a4f0f6f86d3f95ff998022fa67963b\": \"1490000000000000000000\",\n\t\"d1b37f03cb107424e9c4dd575ccd4f4cee57e6cd\": \"2000000000000000000000\",\n\t\"7f993ddb7e02c282b898f6155f680ef5b9aff907\": \"20000000000000000000000\",\n\t\"a3d583a7b65b23f60b7905f3e4aa62aac87f4227\": \"1046779000000000000000\",\n\t\"526bb533b76e20c8ee1ebf123f1e9ff4148e40be\": \"197000000000000000000\",\n\t\"2160b4c02cac0a81de9108de434590a8bfe68735\": \"1970000000000000000000\",\n\t\"010007394b8b7565a1658af88ce463499135d6b7\": \"100000000000000000000\",\n\t\"64457fa33b0832506c4f7d1180dce48f46f3e0ff\": \"2000000000000000000000\",\n\t\"b51e558eb5512fbcfa81f8d0bd938c79ebb5242b\": \"715000000000000000000\",\n\t\"94f13f9f0836a3ee2437a84922d2984dc0f7d53b\": \"2999916000000000000000\",\n\t\"6bd457ade051795df3f2465c3839aed3c5dee978\": \"999925000000000000000\",\n\t\"f3dbcf135acb9dee1a489c593c024f03c2bbaece\": \"2000000000000000000000\",\n\t\"61b902c5a673885826820d1fe14549e4865fbdc2\": \"334703000000000000000\",\n\t\"2acc9c1a32240b4d5b2f777a2ea052b42fc1271c\": \"41764000000000000000000\",\n\t\"6ddfef639155daab0a5cb4953aa8c5afaa880453\": \"1820000000000000000000\",\n\t\"96ff6f509968f36cb42cba48db32f21f5676abf8\": \"1970000000000000000000\",\n\t\"b4c8170f7b2ab536d1d9a25bdd203ae1288dc3d5\": \"200000000000000000000\",\n\t\"78d4f8c71c1e68a69a98f52fcb45da8af56ea1a0\": \"2000000000000000000000\",\n\t\"dec99e972fca7177508c8e1a47ac22d768acab7c\": \"2000000000000000000000\",\n\t\"a07aa16d74aee8a9a3288d52db1551d593883297\": \"600000000000000000000\",\n\t\"cf1169041c1745e45b172435a2fc99b49ace2b00\": \"31960000000000000000\",\n\t\"526cb09ce3ada3672eec1deb46205be89a4b563e\": \"2468000000000000000000\",\n\t\"ee6959de2b67967b71948c891ab00d8c8f38c7dc\": \"118200000000000000000\",\n\t\"ca7ba3ff536c7e5f0e153800bd383db8312998e0\": \"169600000000000000000\",\n\t\"1ed06ee51662a86c634588fb62dc43c8f27e7c17\": \"200000000000000000000\",\n\t\"730447f97ce9b25f22ba1afb36df27f9586beb9b\": \"820000000000000000000\",\n\t\"ae5c9bdad3c5c8a1220444aea5c229c1839f1d64\": \"477500000000000000000\",\n\t\"a38306cb70baa8e49186bd68aa70a83d242f2907\": \"2000000000000000000000\",\n\t\"71213fca313404204ecba87197741aa9dfe96338\": \"60000000000000000000\",\n\t\"10e390ad2ba33d82b37388d09c4544c6b0225de5\": \"200000000000000000000\",\n\t\"3b6e814f770748a7c3997806347605480a3fd509\": \"2000000000000000000000\",\n\t\"fd452c3969ece3801c542020f1cdcaa1c71ed23d\": \"100000000000000000000000\",\n\t\"e742b1e6069a8ffc3c4767235defb0d49cbed222\": \"800000000000000000000\",\n\t\"d7225738dcf3578438f8e7c8b3837e42e04a262f\": \"445860000000000000000\",\n\t\"cd0b0257e783a3d2c2e3ba9d6e79b75ef98024d4\": \"2945500000000000000000\",\n\t\"e80e7fef18a5db15b01473f3ad6b78b2a2f8acd9\": \"500000000000000000000\",\n\t\"261575e9cf59c8226fa7aaf91de86fb70f5ac3ae\": \"300022000000000000000\",\n\t\"7e71171f2949fa0c3ac254254b1f0440e5e6a038\": \"40000000000000000000\",\n\t\"96ea6ac89a2bac95347b51dba63d8bd5ebdedce1\": \"2000000000000000000000\",\n\t\"e6ec5cf0c49b9c317e1e706315ef9eb7c0bf11a7\": \"17200000000000000000000\",\n\t\"2b99b42e4f42619ee36baa7e4af2d65eacfcba35\": \"40000000000000000000000\",\n\t\"c6e4cc0c7283fc1c85bc4813effaaf72b49823c0\": \"276926000000000000000\",\n\t\"dbc1ce0e49b1a705d22e2037aec878ee0d75c703\": \"250000000000000000000\",\n\t\"806f44bdeb688037015e84ff218049e382332a33\": \"1999000000000000000000\",\n\t\"1a3a330e4fcb69dbef5e6901783bf50fd1c15342\": \"4200000000000000000000\",\n\t\"d2a84f75675c62d80c88756c428eee2bcb185421\": \"1200000000000000000000\",\n\t\"c593b546b7698710a205ad468b2c13152219a342\": \"1550000000000000000000\",\n\t\"3f627a769e6a950eb87017a7cd9ca20871136831\": \"13790000000000000000000\",\n\t\"f2d5763ce073127e2cedde6faba786c73ca94141\": \"7900000000000000000000\",\n\t\"162110f29eac5f7d02b543d8dcd5bb59a5e33b73\": \"2000000000000000000000\",\n\t\"59473cd300fffae240f5785626c65dfec792b9af\": \"20000000000000000000\",\n\t\"4dcd11815818ae29b85d01367349a8a7fb12d06b\": \"7900000000000000000000\",\n\t\"9329ffdc268babde8874b366406c81445b9b2d35\": \"422415000000000000000\",\n\t\"0ab4281ebb318590abb89a81df07fa3af904258a\": \"500000000000000000000\",\n\t\"875061ee12e820041a01942cb0e65bb427b00060\": \"2800000000000000000000\",\n\t\"c9b698e898d20d4d4f408e4e4d061922aa856307\": \"40000000000000000000\",\n\t\"ca49a5f58adbefae23ee59eea241cf0482622eaa\": \"1430000000000000000000\",\n\t\"196e85df7e732b4a8f0ed03623f4db9db0b8fa31\": \"21165000000000000000\",\n\t\"4c760cd9e195ee4f2d6bce2500ff96da7c43ee91\": \"60000000000000000000000\",\n\t\"024a098ae702bef5406c9c22b78bd4eb2cc7a293\": \"4000000000000000000000\",\n\t\"9d81aea69aed6ad07089d61445348c17f34bfc5b\": \"300000000000000000000\",\n\t\"76ab87dd5a05ad839a4e2fc8c85aa6ba05641730\": \"2000000000000000000000\",\n\t\"c6e2f5af979a03fd723a1b6efa728318cf9c1800\": \"668500000000000000000\",\n\t\"5db69fe93e6fb6fbd450966b97238b110ad8279a\": \"40000000000000000000000\",\n\t\"a4259f8345f7e3a8b72b0fec2cf75e321fda4dc2\": \"1910000000000000000000\",\n\t\"095030e4b82692dcf8b8d0912494b9b378ec9328\": \"1340000000000000000000\",\n\t\"4b470f7ba030bc7cfcf338d4bf0432a91e2ea5ff\": \"2000000000000000000000\",\n\t\"99c9f93e45fe3c1418c353e4c5ac3894eef8121e\": \"101870000000000000000\",\n\t\"ffac3db879a6c7158e8dec603b407463ba0d31cf\": \"1970000000000000000000\",\n\t\"ac8e87ddda5e78fcbcb9fa7fc3ce038f9f7d2e34\": \"2000000000000000000000\",\n\t\"7a0589b143a8e5e107c9ac66a9f9f8597ab3e7ab\": \"1510990000000000000000\",\n\t\"b7d581fe0af1ec383f3b3c416783f385146a7612\": \"20000000000000000000000\",\n\t\"bb3fc0a29c034d710812dcc775c8cab9d28d6975\": \"1066806000000000000000\",\n\t\"2c603ff0fe93616c43573ef279bfea40888d6ae7\": \"4740000000000000000000\",\n\t\"15f2b7b16432ee50a5f55b41232f6334ed58bdc0\": \"400000000000000000000\",\n\t\"7f3d7203c8a447f7bf36d88ae9b6062a5eee78ae\": \"6000000000000000000000\",\n\t\"f067e1f1d683556a4cc4fd0c0313239f32c4cfd8\": \"1000000000000000000000\",\n\t\"52738c90d860e04cb12f498d96fdb5bf36fc340e\": \"30000000000000000000\",\n\t\"45781bbe7714a1c8f73b1c747921df4f84278b70\": \"2000000000000000000000\",\n\t\"4a97e8fcf4635ea7fc5e96ee51752ec388716b60\": \"546000000000000000000\",\n\t\"54939ff08921b467cf2946751d856378296c63ed\": \"1000000000000000000000\",\n\t\"6485470e61db110aebdbafd536769e3c599cc908\": \"600000000000000000000\",\n\t\"e20d1bcb71286dc7128a9fc7c6ed7f733892eef5\": \"1003400000000000000000\",\n\t\"d6eea898d4ae2b718027a19ce9a5eb7300abe3ca\": \"27475000000000000000\",\n\t\"014974a1f46bf204944a853111e52f1602617def\": \"2000000000000000000000\",\n\t\"6aa5732f3b86fb8c81efbe6b5b47b563730b06c8\": \"1000000000000000000000\",\n\t\"6107d71dd6d0eefb11d4c916404cb98c753e117d\": \"2000000000000000000000\",\n\t\"dd7bcda65924aaa49b80984ae173750258b92847\": \"10000000000000000000000\",\n\t\"4e7b54474d01fefd388dfcd53b9f662624418a05\": \"8000000000000000000000\",\n\t\"24fc73d20793098e09ddab5798506224fa1e1850\": \"200000000000000000000\",\n\t\"2b8488bd2d3c197a3d26151815b5a798d27168dc\": \"6680000000000000000000\",\n\t\"949131f28943925cfc97d41e0cea0b262973a730\": \"2800000000000000000000\",\n\t\"60b8d6b73b79534fb08bb8cbcefac7f393c57bfe\": \"1760000000000000000000\",\n\t\"d6acc220ba2e51dfcf21d443361eea765cbd35d8\": \"20000000000000000000\",\n\t\"c4c6cb723dd7afa7eb535615e53f3cef14f18118\": \"1999999000000000000000\",\n\t\"4c9a862ad115d6c8274ed0b944bdd6a5500510a7\": \"100000000000000000000\",\n\t\"85732c065cbd64119941aed430ac59670b6c51c4\": \"731345000000000000000\",\n\t\"0126e12ebc17035f35c0e9d11dd148393c405d7a\": \"1999600000000000000000\",\n\t\"472048cc609aeb242165eaaa8705850cf3125de0\": \"1000000000000000000000\",\n\t\"d2edd1ddd6d86dc005baeb541d22b640d5c7cae5\": \"20000000000000000000\",\n\t\"4549b15979255f7e65e99b0d5604db98dfcac8bf\": \"4000000000000000000000\",\n\t\"c6c7c191379897dd9c9d9a33839c4a5f62c0890d\": \"4000085000000000000000\",\n\t\"d367009ab658263b62c2333a1c9e4140498e1389\": \"2000000000000000000000\",\n\t\"143f5f1658d9e578f4f3d95f80c0b1bd3933cbda\": \"1490000000000000000000\",\n\t\"1a09fdc2c7a20e23574b97c69e93deba67d37220\": \"1998000000000000000000\",\n\t\"ac8b509aefea1dbfaf2bb33500d6570b6fd96d51\": \"1820000000000000000000\",\n\t\"16ffac84032940f0121a09668b858a7e79ffa3bb\": \"3879210000000000000000\",\n\t\"f338459f32a159b23db30ac335769ab2351aa63c\": \"30000000000000000000000\",\n\t\"d82251456dc1380f8f5692f962828640ab9f2a03\": \"4879980000000000000000\",\n\t\"47f4696bd462b20da09fb83ed2039818d77625b3\": \"149000000000000000000\",\n\t\"3dde8b15b3ccbaa5780112c3d674f313bba68026\": \"1773000000000000000000\",\n\t\"f70d637a845c06db6cdc91e6371ce7c4388a628e\": \"20000000000000000000\",\n\t\"68295e8ea5afd9093fc0a465d157922b5d2ae234\": \"19982000000000000000\",\n\t\"614e8bef3dd2c59b59a4145674401018351884ea\": \"20000000000000000000\",\n\t\"4737d042dc6ae73ec73ae2517acea2fdd96487c5\": \"1000000000000000000000\",\n\t\"cec6fc65853f9cce5f8e844676362e1579015f02\": \"2000000000000000000000\",\n\t\"ae47e2609cfafe369d66d415d939de05081a9872\": \"27060000000000000000000\",\n\t\"09a928d528ec1b3e25ffc83e218c1e0afe8928c7\": \"18200000000000000000\",\n\t\"9b444fd337e5d75293adcfff70e1ea01db023222\": \"100000000000000000000\",\n\t\"168bdec818eafc6d2992e5ef54aa0e1601e3c561\": \"1000110000000000000000\",\n\t\"353dbec42f92b50f975129b93c4c997375f09073\": \"1999000000000000000000\",\n\t\"6fcc2c732bdd934af6ccd16846fb26ef89b2aa9b\": \"10001242000000000000000\",\n\t\"6f2576da4de283bbe8e3ee69ddd66e5e711db3f5\": \"1260800000000000000000\",\n\t\"3a3dd104cd7eb04f21932fd433ea7affd39369f5\": \"357500000000000000000\",\n\t\"d44f4ac5fad76bdc1537a3b3af6472319b410d9d\": \"1600000000000000000000\",\n\t\"3d9d6be57ff83e065985664f12564483f2e600b2\": \"2041600000000000000000\",\n\t\"88f1045f19f2d3191816b1df18bb6e1435ad1b38\": \"240000000000000000000\",\n\t\"ddab75fb2ff9fecb88f89476688e2b00e367ebf9\": \"19400000000000000000000\",\n\t\"092e815558402d67f90d6bfe6da0b2fffa91455a\": \"60000000000000000000\",\n\t\"a7024cfd742c1ec13c01fea18d3042e65f1d5dee\": \"11272229000000000000000\",\n\t\"7f46bb25460dd7dae4211ca7f15ad312fc7dc75c\": \"6685000000000000000000\",\n\t\"93f18cd2526040761488c513174d1e7963768b2c\": \"2416500000000000000000\",\n\t\"352f25babf4a690673e35195efa8f79d05848aad\": \"66800000000000000000000\",\n\t\"f7b151cc5e571c17c76539dbe9964cbb6fe5de79\": \"2148000000000000000000\",\n\t\"ff3eee57c34d6dae970d8b311117c53586cd3502\": \"1700000000000000000000\",\n\t\"ae6f0c73fdd77c489727512174d9b50296611c4c\": \"6000000000000000000000\",\n\t\"7819b0458e314e2b53bfe00c38495fd4b9fdf8d6\": \"20000000000000000000\",\n\t\"7fdba031c78f9c096d62d05a369eeab0bccc55e5\": \"2800000000000000000000\",\n\t\"735e328666ed5637142b3306b77ccc5460e72c3d\": \"1968682000000000000000\",\n\t\"0bfbb6925dc75e52cf2684224bbe0550fea685d3\": \"1970000000000000000000\",\n\t\"6be16313643ebc91ff9bb1a2e116b854ea933a45\": \"500000000000000000000\",\n\t\"d6acffd0bfd99c382e7bd56ff0e6144a9e52b08e\": \"160000000000000000000\",\n\t\"276a006e3028ecd44cdb62ba0a77ce94ebd9f10f\": \"1800000000000000000000\",\n\t\"10711c3dda32317885f0a2fd8ae92e82069b0d0b\": \"4000000000000000000000\",\n\t\"43cb9652818c6f4d6796b0e89409306c79db6349\": \"2000000000000000000000\",\n\t\"7109dd011d15f3122d9d3a27588c10d77744508b\": \"2000000000000000000000\",\n\t\"3497dd66fd118071a78c2cb36e40b6651cc82598\": \"109600000000000000000\",\n\t\"9bf672d979b36652fc5282547a6a6bc212ae4368\": \"656000000000000000000\",\n\t\"eaed16eaf5daab5bf0295e5e077f59fb8255900b\": \"4000000000000000000000\",\n\t\"7ac58f6ffc4f8107ae6e30378e4e9f99c57fbb24\": \"40000000000000000000\",\n\t\"45a570dcc2090c86a6b3ea29a60863dde41f13b5\": \"232500000000000000000\",\n\t\"433a3b68e56b0df1862b90586bbd39c840ff1936\": \"2000000000000000000000\",\n\t\"e8eaf12944092dc3599b3953fa7cb1c9761cc246\": \"1800000000000000000000\",\n\t\"ec11362cec810985d0ebbd7b73451444985b369f\": \"30000047000000000000000\",\n\t\"78e83f80b3678c7a0a4e3e8c84dccde064426277\": \"1790000000000000000000\",\n\t\"0cc67f8273e1bae0867fd42e8b8193d72679dbf8\": \"500000000000000000000\",\n\t\"c70d856d621ec145303c0a6400cd17bbd6f5eaf7\": \"20000000000000000000\",\n\t\"f468906e7edf664ab0d8be3d83eb7ab3f7ffdc78\": \"1700000000000000000000\",\n\t\"3c286cfb30146e5fd790c2c8541552578de334d8\": \"10203000000000000000000\",\n\t\"c401c427cccff10decb864202f36f5808322a0a8\": \"3329300000000000000000\",\n\t\"afd019ff36a09155346b69974815a1c912c90aa4\": \"2000000000000000000000\",\n\t\"96fe59c3dbb3aa7cc8cb62480c65e56e6204a7e2\": \"20000000000000000000000\",\n\t\"a47779d8bc1c7bce0f011ccb39ef68b854f8de8f\": \"2000000000000000000000\",\n\t\"58c650ced40bb65641b8e8a924a039def46854df\": \"18500000000000000000\",\n\t\"86f4f40ad984fbb80933ae626e0e42f9333fdd41\": \"1000000000000000000000\",\n\t\"b22d5055d9623135961e6abd273c90deea16a3e7\": \"1400000000000000000000\",\n\t\"ee3564f5f1ba0f94ec7bac164bddbf31c6888b55\": \"100000000000000000000\",\n\t\"cf26b47bd034bc508e6c4bcfd6c7d30034925761\": \"1800000000000000000000\",\n\t\"e87dbac636a37721df54b08a32ef4959b5e4ff82\": \"2000000000000000000000\",\n\t\"3bf86ed8a3153ec933786a02ac090301855e576b\": \"450000000000000000000000\",\n\t\"cfd2728dfb8bdbf3bf73598a6e13eaf43052ea2b\": \"170000000000000000000\",\n\t\"85b16f0b8b34dff3804f69e2168a4f7b24d1042b\": \"317000000000000000000\",\n\t\"84db1459bb00812ea67ecb3dc189b72187d9c501\": \"148851000000000000000\",\n\t\"8c3a9ee71f729f236cba3867b4d79d8ceee25dbc\": \"100000000000000000000\",\n\t\"e677c31fd9cb720075dca49f1abccd59ec33f734\": \"7800000000000000000000\",\n\t\"8889448316ccf14ed86df8e2f478dc63c4338340\": \"15200000000000000000\",\n\t\"b279c7d355c2880392aad1aa21ee867c3b3507df\": \"1261000000000000000000\",\n\t\"12b5e28945bb2969f9c64c63cc05b6f1f8d6f4d5\": \"7722162000000000000000\",\n\t\"8d2303341e1e1eb5e8189bde03f73a60a2a54861\": \"100000000000000000000\",\n\t\"94d81074db5ae197d2bb1373ab80a87d121c4bd3\": \"9400000000000000000000\",\n\t\"752c9febf42f66c4787bfa7eb17cf5333bba5070\": \"1966448000000000000000\",\n\t\"16816aac0ede0d2d3cd442da79e063880f0f1d67\": \"2000000000000000000000\",\n\t\"daac91c1e859d5e57ed3084b50200f9766e2c52b\": \"400000000000000000000\",\n\t\"32c2fde2b6aabb80e5aea2b949a217f3cb092283\": \"5614827000000000000000\",\n\t\"cdab46a5902080646fbf954204204ae88404822b\": \"544942000000000000000\",\n\t\"fdf42343019b0b0c6bf260b173afab7e45b9d621\": \"1999944000000000000000\",\n\t\"791f6040b4e3e50dcf3553f182cd97a90630b75d\": \"4000000000000000000000\",\n\t\"4b762166dd1118e84369f804c75f9cd657bf730c\": \"500000000000000000000\",\n\t\"a76d3f156251b72c0ccf4b47a3393cbd6f49a9c5\": \"1337000000000000000000\",\n\t\"c5eb42295e9cadeaf2af12dede8a8d53c579c469\": \"3820000000000000000000\",\n\t\"db9371b30c4c844e59e03e924be606a938d1d310\": \"2000000000000000000000\",\n\t\"2cd39334ac7eac797257abe3736195f5b4b5ce0f\": \"99964000000000000000\",\n\t\"ad44357e017e244f476931c7b8189efee80a5d0a\": \"300000000000000000000\",\n\t\"4ca7b717d9bc8793b04e051a8d23e1640f5ba5e3\": \"1248980000000000000000\",\n\t\"73e4a2b60cf48e8baf2b777e175a5b1e4d0c2d8f\": \"100000000000000000000\",\n\t\"5a1d2d2d1d520304b6208849570437eb3091bb9f\": \"1970000000000000000000\",\n\t\"53047dc8ac9083d90672e8b3473c100ccd278323\": \"40000000000000000000\",\n\t\"26fe174cbf526650e0cd009bd6126502ce8e684d\": \"11640000000000000000000\",\n\t\"e2df23f6ea04becf4ab701748dc0963184555cdb\": \"2000000000000000000000\",\n\t\"c1170dbaadb3dee6198ea544baec93251860fda5\": \"1200000000000000000000\",\n\t\"8bbeacfc29cfe93402db3c41d99ab759662e73ec\": \"2000000000000000000000\",\n\t\"165305b787322e25dc6ad0cefe6c6f334678d569\": \"2000000000000000000000\",\n\t\"095457f8ef8e2bdc362196b9a9125da09c67e3ab\": \"200000000000000000000\",\n\t\"702802f36d00250fab53adbcd696f0176f638a49\": \"2000000000000000000000\",\n\t\"489334c2b695c8ee0794bd864217fb9fd8f8b135\": \"18200000000000000000\",\n\t\"fa8cf4e627698c5d5788abb7880417e750231399\": \"4244640000000000000000\",\n\t\"3329eb3baf4345d600ced40e6e9975656f113742\": \"4999711000000000000000\",\n\t\"b4dd5499daeb2507fb2de12297731d4c72b16bb0\": \"20000000000000000000\",\n\t\"88c2516a7cdb09a6276d7297d30f5a4db1e84b86\": \"4000000000000000000000\",\n\t\"612ced8dc0dc9e899ee46f7962333315f3f55e44\": \"338830000000000000000\",\n\t\"d71e43a45177ad51cbe0f72184a5cb503917285a\": \"200000000000000000000\",\n\t\"2fb566c94bbba4e3cb67cdda7d5fad7131539102\": \"2000000000000000000000\",\n\t\"03be5b4629aefbbcab9de26d39576cb7f691d764\": \"200550000000000000000\",\n\t\"025367960304beee34591118e9ac2d1358d8021a\": \"2000000000000000000000\",\n\t\"a5d5b8b62d002def92413710d13b6ff8d4fc7dd3\": \"400000000000000000000\",\n\t\"df3b72c5bd71d4814e88a62321a93d4011e3578b\": \"4000000000000000000000\",\n\t\"3588895ac9fbafec012092dc05c0c302d90740fa\": \"3000000000000000000000\",\n\t\"6021e85a8814fce1e82a41abd1d3b2dad2faefe0\": \"2000000000000000000000\",\n\t\"17ee9f54d4ddc84d670eff11e54a659fd72f4455\": \"16000000000000000000000\",\n\t\"873c6f70efb6b1d0f2bbc57eebcd70617c6ce662\": \"1013478000000000000000\",\n\t\"1fcc7ce6a8485895a3199e16481f72e1f762defe\": \"1000000000000000000000\",\n\t\"d0a7209b80cf60db62f57d0a5d7d521a69606655\": \"160000000000000000000\",\n\t\"a514d00edd7108a6be839a638db2415418174196\": \"30000000000000000000000\",\n\t\"046377f864b0143f282174a892a73d3ec8ec6132\": \"191000000000000000000\",\n\t\"c126573d87b0175a5295f1dd07c575cf8cfa15f2\": \"10000000000000000000000\",\n\t\"0e123d7da6d1e6fac2dcadd27029240bb39052fe\": \"1000000000000000000000\",\n\t\"ad5a8d3c6478b69f657db3837a2575ef8e1df931\": \"36990000000000000000\",\n\t\"db882eacedd0eff263511b312adbbc59c6b8b25b\": \"9100000000000000000000\",\n\t\"0b43bd2391025581d8956ce42a072579cbbfcb14\": \"18800000000000000000\",\n\t\"affea0473722cb7f0e0e86b9e11883bf428d8d54\": \"1940000000000000000000\",\n\t\"e32b1c4725a1875449e98f970eb3e54062d15800\": \"200000000000000000000\",\n\t\"98f4af3af0aede5fafdc42a081ecc1f89e3ccf20\": \"9400000000000000000000\",\n\t\"3b4768fd71e2db2cbe7fa050483c27b4eb931df3\": \"2000000000000000000000\",\n\t\"d5f7c41e07729dfa6dfc64c4423160a22c609fd3\": \"1790000000000000000000\",\n\t\"d944c8a69ff2ca1249690c1229c7192f36251062\": \"1970000000000000000000\",\n\t\"5ae64e853ba0a51282cb8db52e41615e7c9f733f\": \"2000000000000000000000\",\n\t\"b13f93af30e8d7667381b2b95bc1a699d5e3e129\": \"420000000000000000000\",\n\t\"8a20e5b5cee7cd1f5515bace3bf4f77ffde5cc07\": \"80000000000000000000\",\n\t\"2448596f91c09baa30bc96106a2d37b5705e5d28\": \"2000000000000000000000\",\n\t\"ccca24d8c56d6e2c07db086ec07e585be267ac8d\": \"200000000000000000000\",\n\t\"f67bb8e2118bbcd59027666eedf6943ec9f880a5\": \"4000000000000000000000\",\n\t\"7ae659eb3bc46852fa86fac4e21c768d50388945\": \"286000000000000000000\",\n\t\"467e0ed54f3b76ae0636176e07420815a021736e\": \"2000000000000000000000\",\n\t\"a46cd237b63eea438c8e3b6585f679e4860832ac\": \"1000000000000000000000\",\n\t\"6b760d4877e6a627c1c967bee451a8507ddddbab\": \"910000000000000000000\",\n\t\"593044670faeff00a55b5ae051eb7be870b11694\": \"133700000000000000000\",\n\t\"533c06928f19d0a956cc28866bf6c8d8f4191a94\": \"292320000000000000000\",\n\t\"262dc1364ccf6df85c43268ee182554dae692e29\": \"4927600000000000000000\",\n\t\"e4368bc1420b35efda95fafbc73090521916aa34\": \"4000000000000000000000\",\n\t\"feb92d30bf01ff9a1901666c5573532bfa07eeec\": \"1000000000000000000000\",\n\t\"ee25b9a7032679b113588ed52c137d1a053a1e94\": \"199820000000000000000\",\n\t\"20134cbff88bfadc466b52eceaa79857891d831e\": \"1000000000000000000000\",\n\t\"07b1a306cb4312df66482c2cae72d1e061400fcd\": \"20000000000000000000000\",\n\t\"e791d585b89936b25d298f9d35f9f9edc25a2932\": \"2000000000000000000000\",\n\t\"2e6933543d4f2cc00b5350bd8068ba9243d6beb0\": \"2000000000000000000000\",\n\t\"dae0d33eaa341569fa9ff5982684854a4a328a6e\": \"1000000000000000000000\",\n\t\"125cc5e4d56b2bcc2ee1c709fb9e68fb177440bd\": \"2000000000000000000000\",\n\t\"ec99e95dece46ffffb175eb6400fbebb08ee9b95\": \"100000000000000000000\",\n\t\"c538a0ff282aaa5f4b75cfb62c70037ee67d4fb5\": \"2000000000000000000000\",\n\t\"60676d1fa21fca052297e24bf96389c5b12a70d7\": \"241500000000000000000\",\n\t\"4b3dfbdb454be5279a3b8addfd0ed1cd37a9420d\": \"2000000000000000000000\",\n\t\"cdb597299030183f6e2d238533f4642aa58754b6\": \"400000000000000000000\",\n\t\"1ef2dcbfe0a500411d956eb8c8939c3d6cfe669d\": \"776000000000000000000\",\n\t\"a7247c53d059eb7c9310f628d7fc6c6a0a773f08\": \"500000000000000000000\",\n\t\"9799ca21dbcf69bfa1b3f72bac51b9e3ca587cf9\": \"1700000000000000000000\",\n\t\"ddf95c1e99ce2f9f5698057c19d5c94027ee4a6e\": \"6000000000000000000000\",\n\t\"83563bc364ed81a0c6da3b56ff49bbf267827a9c\": \"17332000000000000000000\",\n\t\"a192698007cc11aa603d221d5feea076bcf7c30d\": \"2000000000000000000000\",\n\t\"0134ff38155fabae94fd35c4ffe1d79de7ef9c59\": \"985000000000000000000\",\n\t\"80977316944e5942e79b0e3abad38da746086519\": \"38800000000000000000\",\n\t\"193d37ed347d1c2f4e35350d9a444bc57ca4db43\": \"60000000000000000000\",\n\t\"009a6d7db326679b77c90391a7476d238f3ba33e\": \"200200000000000000000\",\n\t\"337b3bdf86d713dbd07b5dbfcc022b7a7b1946ae\": \"3980000000000000000000\",\n\t\"7de7fe419cc61f91f408d234cc80d5ca3d054d99\": \"20000000000000000000\",\n\t\"f47bb134da30a812d003af8dccb888f44bbf5724\": \"5190000000000000000000\",\n\t\"fd920f722682afb5af451b0544d4f41b3b9d5742\": \"2330200000000000000000\",\n\t\"0a917f3b5cb0b883047fd9b6593dbcd557f453b9\": \"1000000000000000000000\",\n\t\"ce9786d3712fa200e9f68537eeaa1a06a6f45a4b\": \"1790000000000000000000\",\n\t\"9ab98d6dbb1eaae16d45a04568541ad3d8fe06cc\": \"272451000000000000000\",\n\t\"0b7bb342f01bc9888e6a9af4a887cbf4c2dd2caf\": \"16000000000000000000000\",\n\t\"4c0b1515dfced7a13e13ee12c0f523ae504f032b\": \"50000000000000000000000\",\n\t\"ac2889b5966f0c7f9edb42895cb69d1c04f923a2\": \"5000000000000000000000\",\n\t\"d008513b27604a89ba1763b6f84ce688b346945b\": \"1000000000000000000000\",\n\t\"a4b09de6e713dc69546e76ef0acf40b94f0241e6\": \"322656000000000000000\",\n\t\"b153f828dd076d4a7c1c2574bb2dee1a44a318a8\": \"400000000000000000000\",\n\t\"02ade5db22f8b758ee1443626c64ec2f32aa0a15\": \"20000000000000000000000\",\n\t\"0a0650861f785ed8e4bf1005c450bbd06eb48fb6\": \"3066860000000000000000\",\n\t\"b75149e185f6e3927057739073a1822ae1cf0df2\": \"4000086000000000000000\",\n\t\"84cb7da0502df45cf561817bbd2362f451be02da\": \"1337000000000000000000\",\n\t\"c91bb562e42bd46130e2d3ae4652b6a4eb86bc0f\": \"540000000000000000000\",\n\t\"b234035f7544463ce1e22bc553064684c513cd51\": \"249750000000000000000\",\n\t\"e5e33800a1b2e96bde1031630a959aa007f26e51\": \"1337000000000000000000\",\n\t\"ae5ce3355a7ba9b332760c0950c2bc45a85fa9a0\": \"400000000000000000000\",\n\t\"e6f5eb649afb99599c414b27a9c9c855357fa878\": \"2674000000000000000000\",\n\t\"7010be2df57bd0ab9ae8196cd50ab0c521aba9f9\": \"1970000000000000000000\",\n\t\"ca4288014eddc5632f5facb5e38517a8f8bc5d98\": \"340000000000000000000\",\n\t\"2784903f1d7c1b5cd901f8875d14a79b3cbe2a56\": \"22388000000000000000000\",\n\t\"f8dce867f0a39c5bef9eeba609229efa02678b6c\": \"2000000000000000000000\",\n\t\"e020e86362b487752836a6de0bc02cd8d89a8b6a\": \"6000000000000000000000\",\n\t\"c4088c025f3e85013f5439fb3440a17301e544fe\": \"2325000000000000000000\",\n\t\"befb448c0c5f683fb67ee570baf0db5686599751\": \"1970000000000000000000\",\n\t\"2f187d5a704d5a338c5b2876a090dce964284e29\": \"4000000000000000000000\",\n\t\"ec0e18a01dc4dc5daae567c3fa4c7f8f9b590205\": \"315900000000000000000\",\n\t\"637f5869d6e4695f0eb9e27311c4878aff333380\": \"1969212000000000000000\",\n\t\"d1100dd00fe2ddf18163ad964d0b69f1f2e9658a\": \"5959598000000000000000\",\n\t\"17ef4acc1bf147e326749d10e677dcffd76f9e06\": \"39980000000000000000000\",\n\t\"200dfc0b71e359b2b465440a36a6cdc352773007\": \"1500000000000000000000\",\n\t\"efe0675da98a5dda70cd96196b87f4e726b43348\": \"1164000000000000000000\",\n\t\"d5bd5e8455c130169357c471e3e681b7996a7276\": \"841500000000000000000\",\n\t\"9c7b6dc5190fe2912963fcd579683ec7395116b0\": \"776000000000000000000\",\n\t\"b105dd3d987cffd813e9c8500a80a1ad257d56c6\": \"1999944000000000000000\",\n\t\"145250b06e4fa7cb2749422eb817bdda8b54de5f\": \"219000000000000000000\",\n\t\"d96db33b7b5a950c3efa2dc31b10ba10a532ef87\": \"2000000000000000000000\",\n\t\"af529bdb459cc185bee5a1c58bf7e8cce25c150d\": \"197000000000000000000\",\n\t\"185546e8768d506873818ac9751c1f12116a3bef\": \"200000000000000000000\",\n\t\"51d24bc3736f88dd63b7222026886630b6eb878d\": \"2000000000000000000000\",\n\t\"69af28b0746cac0da17084b9398c5e36bb3a0df2\": \"1004700000000000000000\",\n\t\"76f83ac3da30f7092628c7339f208bfc142cb1ee\": \"2842600000000000000000\",\n\t\"00f463e137dcf625fbf3bca39eca98d2b968cf7f\": \"5910000000000000000000\",\n\t\"2084fce505d97bebf1ad8c5ff6826fc645371fb2\": \"30000000000000000000\",\n\t\"53a714f99fa00fef758e23a2e746326dad247ca7\": \"1490000000000000000000\",\n\t\"0bf064428f83626722a7b5b26a9ab20421a7723e\": \"133700000000000000000\",\n\t\"ac6f68e837cf1961cb14ab47446da168a16dde89\": \"1337000000000000000000\",\n\t\"4b3c7388cc76da3d62d40067dabccd7ef0433d23\": \"100076000000000000000\",\n\t\"deb9a49a43873020f0759185e20bbb4cf381bb8f\": \"211628000000000000000\",\n\t\"5bf9f2226e5aeacf1d80ae0a59c6e38038bc8db5\": \"6000000000000000000000\",\n\t\"9d0e7d92fb305853d798263bf15e97c72bf9d7e0\": \"1000000000000000000000\",\n\t\"2b5c60e84535eeb4d580de127a12eb2677ccb392\": \"20000000000000000000000\",\n\t\"d8d65420c18c2327cc5af97425f857e4a9fd51b3\": \"1760000000000000000000\",\n\t\"30ec9392244a2108c987bc5cdde0ed9f837a817b\": \"1560562000000000000000\",\n\t\"56a1d60d40f57f308eebf087dee3b37f1e7c2cba\": \"1159600000000000000000\",\n\t\"a9a1cdc33bfd376f1c0d76fb6c84b6b4ac274d68\": \"5000000000000000000000\",\n\t\"a67f38819565423aa85f3e3ab61bc763cbab89dd\": \"2130000000000000000000\",\n\t\"62d5cc7117e18500ac2f9e3c26c86b0a94b0de15\": \"105000000000000000000\",\n\t\"4970d3acf72b5b1f32a7003cf102c64ee0547941\": \"140000000000000000000000\",\n\t\"76628150e2995b5b279fc83e0dd5f102a671dd1c\": \"40000000000000000000000\",\n\t\"3d8f39881b9edfe91227c33fa4cdd91e678544b0\": \"86111000000000000000\",\n\t\"ff0b7cb71da9d4c1ea6ecc28ebda504c63f82fd1\": \"1043000000000000000000\",\n\t\"8d795c5f4a5689ad62da961671f028065286d554\": \"2048000000000000000000\",\n\t\"be2346a27ff9b702044f500deff2e7ffe6824541\": \"20000000000000000000\",\n\t\"0dbd417c372b8b0d01bcd944706bd32e60ae28d1\": \"340000000000000000000\",\n\t\"467fbf41441600757fe15830c8cd5f4ffbbbd560\": \"10000000000000000000000\",\n\t\"090cd67b60e81d54e7b5f6078f3e021ba65b9a1e\": \"1000000000000000000000\",\n\t\"55a4cac0cb8b582d9fef38c5c9fff9bd53093d1f\": \"1970000000000000000000\",\n\t\"3b7b4f53c45655f3dc5f017edc23b16f9bc536fa\": \"100000000000000000000\",\n\t\"d508d39c70916f6abc4cc7f999f011f077105802\": \"100470000000000000000\",\n\t\"037dd056e7fdbd641db5b6bea2a8780a83fae180\": \"140000000000000000000\",\n\t\"660557bb43f4be3a1b8b85e7df7b3c5bcd548057\": \"6000000000000000000000\",\n\t\"02089361a3fe7451fb1f87f01a2d866653dc0b07\": \"39976000000000000000\",\n\t\"c4bec96308a20f90cab18399c493fd3d065abf45\": \"14000000000000000000000\",\n\t\"cca07bb794571d4acf041dad87f0d1ef3185b319\": \"2000000000000000000000\",\n\t\"f2d0e986d814ea13c8f466a0538c53dc922651f0\": \"1380000000000000000000\",\n\t\"662cfa038fab37a01745a364e1b98127c503746d\": \"3940000000000000000000\",\n\t\"3336c3ef6e8b50ee90e037b164b7a8ea5faac65d\": \"272712000000000000000\",\n\t\"30e33358fc21c85006e40f32357dc8895940aaf0\": \"1910000000000000000000\",\n\t\"41a9a404fc9f5bfee48ec265b12523338e29a8bf\": \"388000000000000000000\",\n\t\"6af235d2bbe050e6291615b71ca5829658810142\": \"3000000000000000000000\",\n\t\"fd5a63157f914fd398eab19c137dd9550bb7715c\": \"100000000000000000000\",\n\t\"8a4314fb61cd938fc33e15e816b113f2ac89a7fb\": \"432800000000000000000\",\n\t\"b216dc59e27c3d7279f5cd5bb2becfb2606e14d9\": \"400000000000000000000\",\n\t\"f5a5459fcdd5e5b273830df88eea4cb77ddadfb9\": \"74500000000000000000\",\n\t\"df31025f5649d2c6eea41ed3bdd3471a790f759a\": \"20000000000000000000\",\n\t\"721f9d17e5a0e74205947aeb9bc6a7938961038f\": \"51900000000000000000\",\n\t\"08d0864dc32f9acb36bf4ea447e8dd6726906a15\": \"2000200000000000000000\",\n\t\"54575c3114751e3c631971da6a2a02fd3ffbfcc8\": \"1940000000000000000000\",\n\t\"8f60895fbebbb5017fcbff3cdda397292bf25ba6\": \"429177000000000000000\",\n\t\"91fe8a4c6164df8fa606995d6ba7adcaf1c893ce\": \"17000000000000000000000\",\n\t\"889087f66ff284f8b5efbd29493b706733ab1447\": \"9850000000000000000000\",\n\t\"051633080d07a557adde319261b074997f14692d\": \"5800000000000000000000\",\n\t\"59a12df2e3ef857aceff9306b309f6a500f70134\": \"1000000000000000000000\",\n\t\"9f64a8e8dacf4ade30d10f4d59b0a3d5abfdbf74\": \"1000060000000000000000\",\n\t\"8846928d683289a2d11df8db7a9474988ef01348\": \"10000000000000000000000\",\n\t\"dff1b220de3d8e9ca4c1b5be34a799bcded4f61c\": \"385428000000000000000\",\n\t\"7e7c1e9a61a08a83984835c70ec31d34d3eaa87f\": \"191000000000000000000\",\n\t\"fe210b8f04dc6d4f76216acfcbd59ba83be9b630\": \"20000000000000000000\",\n\t\"dc8c2912f084a6d184aa73638513ccbc326e0102\": \"1295000000000000000000\",\n\t\"dddd7b9e6eab409b92263ac272da801b664f8a57\": \"500000000000000000000000\",\n\t\"86a5f8259ed5b09e188ce346ee92d34aa5dd93fa\": \"200000000000000000000\",\n\t\"dc1f1979615f082140b8bb78c67b27a1942713b1\": \"60000000000000000000\",\n\t\"ea66e7b84dcdbf36eea3e75b85382a75f1a15d96\": \"1729135000000000000000\",\n\t\"039e7a4ebc284e2ccd42b1bdd60bd6511c0f7706\": \"17300000000000000000\",\n\t\"36bfe1fa3b7b70c172eb042f6819a8972595413e\": \"1000000000000000000000\",\n\t\"039ef1ce52fe7963f166d5a275c4b1069fe3a832\": \"400008000000000000000\",\n\t\"f1df55dcc34a051012b575cb968bc9c458ea09c9\": \"4000000000000000000000\",\n\t\"168b5019b818691644835fe69bf229e17112d52c\": \"28000000000000000000000\",\n\t\"f60bd735543e6bfd2ea6f11bff627340bc035a23\": \"2000000000000000000000\",\n\t\"2cbb0c73df91b91740b6693b774a7d05177e8e58\": \"1850000000000000000000\",\n\t\"9ffcf5ef46d933a519d1d16c6ba3189b27496224\": \"1000000000000000000000\",\n\t\"0e11d77a8977fac30d268445e531149b31541a24\": \"2000000000000000000000\",\n\t\"dfb1626ef48a1d7d7552a5e0298f1fc23a3b482d\": \"1713860000000000000000\",\n\t\"cc943be1222cd1400a2399dd1b459445cf6d54a9\": \"12530000000000000000000\",\n\t\"b37c2b9f50637bece0ca959208aefee6463ba720\": \"400000000000000000000\",\n\t\"96b906ea729f4655afe3e57d35277c967dfa1577\": \"1000000000000000000000\",\n\t\"7995bd8ce2e0c67bf1c7a531d477bca1b2b97561\": \"5945100000000000000000\",\n\t\"96f820500b70f4a3e3239d619cff8f222075b135\": \"200000000000000000000\",\n\t\"ad3565d52b688added08168b2d3872d17d0a26ae\": \"100000000000000000000\",\n\t\"9e7c2050a227bbfd60937e268cea3e68fea8d1fe\": \"100000000000000000000\",\n\t\"7e59dc60be8b2fc19abd0a5782c52c28400bce97\": \"1000000000000000000000\",\n\t\"01ed5fba8d2eab673aec042d30e4e8a611d8c55a\": \"2000000000000000000000\",\n\t\"59a087b9351ca42f58f36e021927a22988284f38\": \"18500000000000000000\",\n\t\"2fe0023f5722650f3a8ac01009125e74e3f82e9b\": \"3000000000000000000000\",\n\t\"bd1803370bddb129d239fd16ea8526a6188ae58e\": \"500000000000000000000\",\n\t\"c70527d444c490e9fc3f5cc44e66eb4f306b380f\": \"4000000000000000000000\",\n\t\"0f206e1a1da7207ea518b112418baa8b06260328\": \"600000000000000000000\",\n\t\"6e1a046caf5b4a57f4fd4bc173622126b4e2fd86\": \"1790000000000000000000\",\n\t\"84008a72f8036f3feba542e35078c057f32a8825\": \"100000000000000000000\",\n\t\"246291165b59332df5f18ce5c98856fae95897d6\": \"1700000000000000000000\",\n\t\"7e99dfbe989d3ba529d19751b7f4317f8953a3e2\": \"400000000000000000000\",\n\t\"748c285ef1233fe4d31c8fb1378333721c12e27a\": \"2000000000000000000000\",\n\t\"3dd12e556a603736feba4a6fa8bd4ac45d662a04\": \"167450000000000000000000\",\n\t\"d0ae735d915e946866e1fea77e5ea466b5cadd16\": \"2000000000000000000000\",\n\t\"4f767bc8794aef9a0a38fea5c81f14694ff21a13\": \"512200000000000000000\",\n\t\"0e2f8e28a681f77c583bd0ecde16634bdd7e00cd\": \"95060000000000000000\",\n\t\"d74a6e8d6aab34ce85976814c1327bd6ea0784d2\": \"100000000000000000000000\",\n\t\"629be7ab126a5398edd6da9f18447e78c692a4fd\": \"2000000000000000000000\",\n\t\"2e46fcee6a3bb145b594a243a3913fce5dad6fba\": \"10000000000000000000000\",\n\t\"e39b11a8ab1ff5e22e5ae6517214f73c5b9b55dc\": \"2000000000000000000000\",\n\t\"119aa64d5b7d181dae9d3cb449955c89c1f963fa\": \"700000000000000000000\",\n\t\"ce079f51887774d8021cb3b575f58f18e9acf984\": \"180000000000000000000\",\n\t\"550c306f81ef5d9580c06cb1ab201b95c748a691\": \"665800000000000000000\",\n\t\"06dc7f18cee7edab5b795337b1df6a9e8bd8ae59\": \"400000000000000000000\",\n\t\"e21c778ef2a0d7f751ea8c074d1f812243863e4e\": \"5308559000000000000000\",\n\t\"45d4b54d37a8cf599821235f062fa9d170ede8a4\": \"324000000000000000000\",\n\t\"893a6c2eb8b40ab096b4f67e74a897b840746e86\": \"1730000000000000000000\",\n\t\"d44d81e18f46e2cfb5c1fcf5041bc8569767d100\": \"36381800000000000000000\",\n\t\"c5de1203d3cc2cea31c82ee2de5916880799eafd\": \"5000000000000000000000\",\n\t\"7f0f04fcf37a53a4e24ede6e93104e78be1d3c9e\": \"2000000000000000000000\",\n\t\"3ce1dc97fcd7b7c4d3a18a49d6f2a5c1b1a906d7\": \"200000000000000000000\",\n\t\"ac4ee9d502e7d2d2e99e59d8ca7d5f00c94b4dd6\": \"1000000000000000000000\",\n\t\"7640a37f8052981515bce078da93afa4789b5734\": \"2000000000000000000000\",\n\t\"76cac488111a4fd595f568ae3a858770fc915d5f\": \"200000000000000000000\",\n\t\"ff4a408f50e9e72146a28ce4fc8d90271f116e84\": \"1970000000000000000000\",\n\t\"249db29dbc19d1235da7298a04081c315742e9ac\": \"1801800000000000000000\",\n\t\"3a04572847d31e81f7765ca5bfc9d557159f3683\": \"133031000000000000000\",\n\t\"b6771b0bf3427f9ae7a93e7c2e61ee63941fdb08\": \"18800000000000000000000\",\n\t\"30c26a8e971baa1855d633ba703f028cc7873140\": \"10000000000000000000000\",\n\t\"167e3e3ae2003348459392f7dfce44af7c21ad59\": \"500000000000000000000\",\n\t\"43f16f1e75c3c06a9478e8c597a40a3cb0bf04cc\": \"2914000000000000000000\",\n\t\"056b1546894f9a85e203fb336db569b16c25e04f\": \"169397000000000000000\",\n\t\"70616e2892fa269705b2046b8fe3e72fa55816d3\": \"20000000000000000000000\",\n\t\"8f4d1d41693e462cf982fd81d0aa701d3a5374c9\": \"4000000000000000000000\",\n\t\"c518799a5925576213e21896e0539abb85b05ae3\": \"1000000000000000000000\",\n\t\"0e3a28c1dfafb0505bdce19fe025f506a6d01ceb\": \"2000000000000000000000\",\n\t\"e4a47e3933246c3fd62979a1ea19ffdf8c72ef37\": \"148273000000000000000\",\n\t\"d231929735132102471ba59007b6644cc0c1de3e\": \"1000090000000000000000\",\n\t\"555d8d3ce1798aca902754f164b8be2a02329c6c\": \"10000000000000000000000\",\n\t\"5ab1a5615348001c7c775dc75748669b8be4de14\": \"690200000000000000000\",\n\t\"2fee36a49ee50ecf716f1047915646779f8ba03f\": \"1056230000000000000000\",\n\t\"54db5e06b4815d31cb56a8719ba33af2d73e7252\": \"670000000000000000000\",\n\t\"7c8bb65a6fbb49bd413396a9d7e31053bbb37aa9\": \"6000000000000000000000\",\n\t\"c1384c6e717ebe4b23014e51f31c9df7e4e25b31\": \"500000000000000000000\",\n\t\"474158a1a9dc693c133f65e47b5c3ae2f773a86f\": \"200200000000000000000\",\n\t\"2934c0df7bbc172b6c186b0b72547ace8bf75454\": \"60000000000000000000\",\n\t\"6966063aa5de1db5c671f3dd699d5abe213ee902\": \"8000000000000000000000\",\n\t\"9225d46a5a80943924a39e5b84b96da0ac450581\": \"40000000000000000000000\",\n\t\"671bbca099ff899bab07ea1cf86965c3054c8960\": \"50000000000000000000\",\n\t\"f1f766b0e46d73fcd4d52e7a72e1b9190cc632b3\": \"8000000000000000000000\",\n\t\"ef0dc7dd7a53d612728bcbd2b27c19dd4d7d666f\": \"705668000000000000000\",\n\t\"38d2e9154964b41c8d50a7487d391e7ee2c3d3c2\": \"3500000000000000000000\",\n\t\"352a785f4a921632504ce5d015f83c49aa838d6d\": \"4314800000000000000000\",\n\t\"743de50026ca67c94df54f066260e1d14acc11ac\": \"2000000000000000000000\",\n\t\"b188078444027e386798a8ae68698919d5cc230d\": \"267400000000000000000\",\n\t\"53608105ce4b9e11f86bf497ffca3b78967b5f96\": \"20000000000000000000000\",\n\t\"3b159099075207c6807663b1f0f7eda54ac8cce3\": \"1969543000000000000000\",\n\t\"141a5e39ee2f680a600fbf6fa297de90f3225cdd\": \"10000000000000000000000\",\n\t\"44fff37be01a3888d3b8b8e18880a7ddefeeead3\": \"259145000000000000000\",\n\t\"c5a629a3962552cb8eded889636aafbd0c18ce65\": \"10000000000000000000000\",\n\t\"fdba5359f7ec3bc770ac49975d844ec9716256f1\": \"1000000000000000000000\",\n\t\"7c1df24a4f7fb2c7b472e0bb006cb27dcd164156\": \"1000000000000000000000\",\n\t\"ab7d54c7c6570efca5b4b8ce70f52a5773e5d53b\": \"279600000000000000000\",\n\t\"3f173aa6edf469d185e59bd26ae4236b92b4d8e1\": \"320000000000000000000\",\n\t\"a3f4ad14e0bb44e2ce2c14359c75b8e732d37054\": \"200000000000000000000\",\n\t\"ac5f627231480d0d95302e6d89fc32cb1d4fe7e3\": \"200000000000000000000\",\n\t\"d0775dba2af4c30a3a78365939cd71c2f9de95d2\": \"1940000000000000000000\",\n\t\"ad94235fc3b3f47a2413af31e884914908ef0c45\": \"500008000000000000000\",\n\t\"eaedcc6b8b6962d5d9288c156c579d47c0a9fcff\": \"85000000000000000000\",\n\t\"7ac48d40c664cc9a6d89f1c5f5c80a1c70e744e6\": \"3008000000000000000000\",\n\t\"ec73114c5e406fdbbe09b4fa621bd70ed54ea1ef\": \"24500000000000000000000\",\n\t\"a690f1a4b20ab7ba34628620de9ca040c43c1963\": \"4000000000000000000000\",\n\t\"cad14f9ebba76680eb836b079c7f7baaf481ed6d\": \"238600000000000000000\",\n\t\"6c714a58fff6e97d14b8a5e305eb244065688bbd\": \"4000000000000000000000\",\n\t\"3e618350fa01657ab0ef3ebac8e37012f8fc2b6f\": \"2804400000000000000000\",\n\t\"c946d5acc1346eba0a7279a0ac1d465c996d827e\": \"16385128000000000000000\",\n\t\"1164caaa8cc5977afe1fad8a7d6028ce2d57299b\": \"400000000000000000000\",\n\t\"7917e5bd82a9790fd650d043cdd930f7799633db\": \"3999800000000000000000\",\n\t\"d52aecc6493938a28ca1c367b701c21598b6a02e\": \"1100000000000000000000\",\n\t\"98bed3a72eccfbafb923489293e429e703c7e25b\": \"2000000000000000000000\",\n\t\"42db0b902559e04087dd5c441bc7611934184b89\": \"2014420000000000000000\",\n\t\"43bc2d4ddcd6583be2c7bc094b28fb72e62ba83b\": \"2000000000000000000000\",\n\t\"85f0e7c1e3aff805a627a2aaf2cff6b4c0dbe9cb\": \"20000000000000000000\",\n\t\"581b9fd6eae372f3501f42eb9619eec820b78a84\": \"19699015000000000000000\",\n\t\"541db20a80cf3b17f1621f1b3ff79b882f50def3\": \"1000000000000000000000\",\n\t\"4e8a6d63489ccc10a57f885f96eb04ecbb546024\": \"18500000000000000000000\",\n\t\"28349f7ef974ea55fe36a1583b34cec3c45065f0\": \"234490000000000000000\",\n\t\"a3241d890a92baf52908dc4aa049726be426ebd3\": \"19999560000000000000000\",\n\t\"b4b11d109f608fa8edd3fea9f8c315649aeb3d11\": \"5000000000000000000000\",\n\t\"5f321b3daaa296cadf29439f9dab062a4bffedd6\": \"81868000000000000000\",\n\t\"c5ae86b0c6c7e3900f1368105c56537faf8d743e\": \"188000000000000000000\",\n\t\"9a8eca4189ff4aa8ff7ed4b6b7039f0902219b15\": \"20000000000000000000\",\n\t\"a3facc50195c0b4933c85897fecc5bbd995c34b8\": \"20000000000000000000\",\n\t\"f07bd0e5c2ce69c7c4a724bd26bbfa9d2a17ca03\": \"5910000000000000000000\",\n\t\"640aba6de984d94517377803705eaea7095f4a11\": \"10000000000000000000000\",\n\t\"204ac98867a7c9c7ed711cb82f28a878caf69b48\": \"6000000000000000000000\",\n\t\"9d34dac25bd15828faefaaf28f710753b39e89dc\": \"1090400000000000000000\",\n\t\"fe418b421a9c6d373602790475d2303e11a75930\": \"1015200000000000000000\",\n\t\"3f472963197883bbda5a9b7dfcb22db11440ad31\": \"481445000000000000000\",\n\t\"1578bdbc371b4d243845330556fff2d5ef4dff67\": \"100000000000000000000\",\n\t\"dba4796d0ceb4d3a836b84c96f910afc103f5ba0\": \"166666000000000000000\",\n\t\"466fda6b9b58c5532750306a10a2a8c768103b07\": \"199955000000000000000\",\n\t\"2770f14efb165ddeba79c10bb0af31c31e59334c\": \"3000000000000000000000\",\n\t\"7c382c0296612e4e97e440e02d3871273b55f53b\": \"197600000000000000000\",\n\t\"1fb7bd310d95f2a6d9baaf8a8a430a9a04453a8b\": \"3000000000000000000000\",\n\t\"a9acf600081bb55bb6bfbab1815ffc4e17e85a95\": \"200000000000000000000\",\n\t\"f93d5bcb0644b0cce5fcdda343f5168ffab2877d\": \"209978000000000000000\",\n\t\"db0cc78f74d9827bdc8a6473276eb84fdc976212\": \"2000000000000000000000\",\n\t\"b66411e3a02dedb726fa79107dc90bc1cae64d48\": \"2000000000000000000000\",\n\t\"4d6e8fe109ccd2158e4db114132fe75fecc8be5b\": \"25019000000000000000\",\n\t\"6fd947d5a73b175008ae6ee8228163da289b167d\": \"30000000000000000000000\",\n\t\"32d950d5e93ea1d5b48db4714f867b0320b31c0f\": \"1015200000000000000000\",\n\t\"9c99b62606281b5cefabf36156c8fe62839ef5f3\": \"4000000000000000000000\",\n\t\"86c8d0d982b539f48f9830f9891f9d607a942659\": \"13260000000000000000000\",\n\t\"f2127d54188fedef0f338a5f38c7ff73ad9f6f42\": \"20000000000000000000000\",\n\t\"e864fec07ed1214a65311e11e329de040d04f0fd\": \"1656353000000000000000\",\n\t\"1d09ad2412691cc581c1ab36b6f9434cd4f08b54\": \"7000000000000000000000\",\n\t\"4ea70f04313fae65c3ff224a055c3d2dab28dddf\": \"19999800000000000000000\",\n\t\"e0668fa82c14d6e8d93a53113ef2862fa81581bc\": \"870400000000000000000\",\n\t\"f0d858105e1b648101ac3f85a0f8222bf4f81d6a\": \"600000000000000000000\",\n\t\"0f3a1023cac04dbf44f5a5fa6a9cf8508cd4fddf\": \"1820000000000000000000\",\n\t\"5793abe6f1533311fd51536891783b3f9625ef1c\": \"827268000000000000000\",\n\t\"8d667637e29eca05b6bfbef1f96d460eefbf9984\": \"4000000000000000000000\",\n\t\"d76dbaebc30d4ef67b03e6e6ecc6d84e004d502d\": \"2019250000000000000000\",\n\t\"42d1a6399b3016a8597f8b640927b8afbce4b215\": \"2980000000000000000000\",\n\t\"21fd47c5256012198fa5abf131c06d6aa1965f75\": \"7880000000000000000000\",\n\t\"2f2bba1b1796821a766fce64b84f28ec68f15aea\": \"20000000000000000000\",\n\t\"d24bf12d2ddf457decb17874efde2052b65cbb49\": \"14000000000000000000000\",\n\t\"88de13b09931877c910d593165c364c8a1641bd3\": \"3000000000000000000000\",\n\t\"555ca9f05cc134ab54ae9bea1c3ff87aa85198ca\": \"100000000000000000000\",\n\t\"ae9ecd6bdd952ef497c0050ae0ab8a82a91898ce\": \"30000000000000000000\",\n\t\"ad8bfef8c68a4816b3916f35cb7bfcd7d3040976\": \"40000000000000000000000\",\n\t\"dad136b88178b4837a6c780feba226b98569a94c\": \"200000000000000000000\",\n\t\"800e7d631c6e573a90332f17f71f5fd19b528cb9\": \"152000000000000000000\",\n\t\"94a9a71691317c2064271b51c9353fbded3501a8\": \"3340000000000000000000\",\n\t\"80a0f6cc186cf6201400736e065a391f52a9df4a\": \"10000000000000000000000\",\n\t\"712ff7370a13ed360973fedc9ff5d2c93a505e9e\": \"3940000000000000000000\",\n\t\"42399659aca6a5a863ea2245c933fe9a35b7880e\": \"2044000000000000000000\",\n\t\"ae239acffd4ebe2e1ba5b4170572dc79cc6533ec\": \"12000000000000000000000\",\n\t\"007b9fc31905b4994b04c9e2cfdc5e2770503f42\": \"1999000000000000000000\",\n\t\"7480de62254f2ba82b578219c07ba5be430dc3cb\": \"7040000000000000000000\",\n\t\"917b8f9f3a8d09e9202c52c29e724196b897d35e\": \"161000000000000000000\",\n\t\"708ea707bae4357f1ebea959c3a250acd6aa21b3\": \"500000000000000000000\",\n\t\"6dc7053a718616cfc78bee6382ee51add0c70330\": \"2000000000000000000000\",\n\t\"c4dac5a8a0264fbc1055391c509cc3ee21a6e04c\": \"6501000000000000000000\",\n\t\"c1b2a0fb9cad45cd699192cd27540b88d3384279\": \"500000000000000000000\",\n\t\"b07cb9c12405b711807543c4934465f87f98bd2d\": \"2000000000000000000000\",\n\t\"c7f72bb758016b374714d4899bce22b4aec70a31\": \"1072706000000000000000\",\n\t\"0c480de9f7461002908b49f60fc61e2b62d3140b\": \"10000000000000000000000\",\n\t\"83d532d38d6dee3f60adc68b936133c7a2a1b0dd\": \"500000000000000000000\",\n\t\"12afbcba1427a6a39e7ba4849f7ab1c4358ac31b\": \"20000000000000000000000\",\n\t\"f8f6645e0dee644b3dad81d571ef9baf840021ad\": \"2000000000000000000000\",\n\t\"40cf890591eae4a18f812a2954cb295f633327e6\": \"48132000000000000000\",\n\t\"735b97f2fc1bd24b12076efaf3d1288073d20c8c\": \"20000000000000000000\",\n\t\"47c7e5efb48b3aed4b7c6e824b435f357df4c723\": \"18200000000000000000\",\n\t\"d34d708d7398024533a5a2b2309b19d3c55171bb\": \"400000000000000000000\",\n\t\"64370e87202645125a35b207af1231fb6072f9a7\": \"200000000000000000000\",\n\t\"b055af4cadfcfdb425cf65ba6431078f07ecd5ab\": \"100000000000000000000\",\n\t\"c7de5e8eafb5f62b1a0af2195cf793c7894c9268\": \"1000000000000000000000\",\n\t\"c63cd7882118b8a91e074d4c8f4ba91851303b9a\": \"260000000000000000000\",\n\t\"164d7aac3eecbaeca1ad5191b753f173fe12ec33\": \"744090000000000000000\",\n\t\"e4fb26d1ca1eecba3d8298d9d148119ac2bbf580\": \"400000000000000000000\",\n\t\"613ac53be565d46536b820715b9b8d3ae68a4b95\": \"3760000000000000000000\",\n\t\"7f616c6f008adfa082f34da7d0650460368075fb\": \"1000000000000000000000\",\n\t\"9af100cc3dae83a33402051ce4496b16615483f6\": \"2000000000000000000000\",\n\t\"b45cca0d36826662683cf7d0b2fdac687f02d0c4\": \"1000000000000000000000\",\n\t\"93a6b3ab423010f981a7489d4aad25e2625c5741\": \"20190033000000000000000\",\n\t\"ee049af005974dd1c7b3a9ca8d9aa77175ba53aa\": \"333333000000000000000\",\n\t\"687927e3048bb5162ae7c15cf76bd124f9497b9e\": \"2000000000000000000000\",\n\t\"1aa40270d21e5cde86b6316d1ac3c533494b79ed\": \"20000000000000000000\",\n\t\"426259b0a756701a8b663528522156c0288f0f24\": \"9900000000000000000000\",\n\t\"91c75e3cb4aa89f34619a164e2a47898f5674d9c\": \"2000000000000000000000\",\n\t\"437983388ab59a4ffc215f8e8269461029c3f1c1\": \"20000000000000000000000\",\n\t\"272a131a5a656a7a3aca35c8bd202222a7592258\": \"2674000000000000000000\",\n\t\"bc0ca4f217e052753614d6b019948824d0d8688b\": \"400000000000000000000\",\n\t\"cc6c03bd603e09de54e9c4d5ac6d41cbce715724\": \"98500000000000000000\",\n\t\"d79aff13ba2da75d46240cac0a2467c656949823\": \"1730000000000000000000\",\n\t\"477b24eee8839e4fd19d1250bd0b6645794a61ca\": \"8000000000000000000000\",\n\t\"79fd6d48315066c204f9651869c1096c14fc9781\": \"2000000000000000000000\",\n\t\"1463a873555bc0397e575c2471cf77fa9db146e0\": \"10000000000000000000000\",\n\t\"89ab13ee266d779c35e8bb04cd8a90cc2103a95b\": \"60000000000000000000000\",\n\t\"90acced7e48c08c6b934646dfa0adf29dc94074f\": \"56154000000000000000\",\n\t\"31ea6eab19d00764e9a95e183f2b1b22fc7dc40f\": \"20000000000000000000\",\n\t\"87a53ea39f59a35bada8352521645594a1a714cb\": \"1910000000000000000000\",\n\t\"1e1aed85b86c6562cb8fa1eb6f8f3bc9dcae6e79\": \"4516200000000000000000\",\n\t\"e36a8ea87f1e99e8a2dc1b2608d166667c9dfa01\": \"100000000000000000000\",\n\t\"ec2cb8b9378dff31aec3c22e0e6dadff314ab5dd\": \"2000000000000000000000\",\n\t\"3cadeb3d3eed3f62311d52553e70df4afce56f23\": \"4000000000000000000000\",\n\t\"3ceca96bb1cdc214029cbc5e181d398ab94d3d41\": \"80000000000000000000000\",\n\t\"3283eb7f9137dd39bed55ffe6b8dc845f3e1a079\": \"66224000000000000000\",\n\t\"0954a8cb5d321fc3351a7523a617d0f58da676a7\": \"2506000000000000000000\",\n\t\"de33d708a3b89e909eaf653b30fdc3a5d5ccb4b3\": \"177300000000000000000\",\n\t\"1c6702b3b05a5114bdbcaeca25531aeeb34835f4\": \"26071500000000000000000\",\n\t\"e5b96fc9ac03d448c1613ac91d15978145dbdfd1\": \"200000000000000000000\",\n\t\"fbf204c813f836d83962c7870c7808ca347fd33e\": \"20000000000000000000\",\n\t\"3b13631a1b89cb566548899a1d60915cdcc4205b\": \"2000000000000000000000\",\n\t\"a87f7abd6fa31194289678efb63cf584ee5e2a61\": \"4000000000000000000000\",\n\t\"c0a39308a80e9e84aaaf16ac01e3b01d74bd6b2d\": \"136499000000000000000\",\n\t\"ffd6da958eecbc016bab91058440d39b41c7be83\": \"20000000000000000000000\",\n\t\"0e3dd7d4e429fe3930a6414035f52bdc599d784d\": \"40110000000000000000\",\n\t\"e0663e8cd66792a641f56e5003660147880f018e\": \"2000000000000000000000\",\n\t\"5b78eca27fbdea6f26befba8972b295e7814364b\": \"2000000000000000000000\",\n\t\"ec9851bd917270610267d60518b54d3ca2b35b17\": \"40000000000000000000000\",\n\t\"bc9c95dfab97a574cea2aa803b5caa197cef0cff\": \"420000000000000000000\",\n\t\"100b4d0977fcbad4debd5e64a0497aeae5168fab\": \"314500000000000000000\",\n\t\"1b6610fb68bad6ed1cfaa0bbe33a24eb2e96fafb\": \"152000000000000000000\",\n\t\"b4524c95a7860e21840296a616244019421c4aba\": \"8000000000000000000000\",\n\t\"88975a5f1ef2528c300b83c0c607b8e87dd69315\": \"83500000000000000000\",\n\t\"853e6abaf44469c72f151d4e223819aced4e3728\": \"2000000000000000000000\",\n\t\"d604abce4330842e3d396ca73ddb5519ed3ec03f\": \"163940000000000000000\",\n\t\"d209482bb549abc4777bea6d7f650062c9c57a1c\": \"320880000000000000000\",\n\t\"590acbda37290c0d3ec84fc2000d7697f9a4b15d\": \"500000000000000000000\",\n\t\"571950ea2c90c1427d939d61b4f2de4cf1cfbfb0\": \"20000000000000000000\",\n\t\"cb94e76febe208116733e76e805d48d112ec9fca\": \"1000000000000000000000\",\n\t\"fa8e3b1f13433900737daaf1f6299c4887f85b5f\": \"715000000000000000000\",\n\t\"162d76c2e6514a3afb6fe3d3cb93a35c5ae783f1\": \"2000000000000000000000\",\n\t\"4bea288eea42c4955eb9faad2a9faf4783cbddac\": \"28790618000000000000000\",\n\t\"c8ab1a3cf46cb8b064df2e222d39607394203277\": \"2000000000000000000000\",\n\t\"318b2ea5f0aaa879c4d5e548ac9d92a0c67487b7\": \"200000000000000000000\",\n\t\"53c5fe0119e1e848640cee30adea96940f2a5d8b\": \"21746000000000000000000\",\n\t\"0701f9f147ec486856f5e1b71de9f117e99e2105\": \"173360000000000000000\",\n\t\"337cfe1157a5c6912010dd561533791769c2b6a6\": \"1000000000000000000000\",\n\t\"fd60d2b5af3d35f7aaf0c393052e79c4d823d985\": \"56400000000000000000\",\n\t\"0f049a8bdfd761de8ec02cee2829c4005b23c06b\": \"252000000000000000000\",\n\t\"924bce7a853c970bb5ec7bb759baeb9c7410857b\": \"13700000000000000000\",\n\t\"16abb8b021a710bdc78ea53494b20614ff4eafe8\": \"158000000000000000000\",\n\t\"9e7f65a90e8508867bccc914256a1ea574cf07e3\": \"1240000000000000000000\",\n\t\"01d03815c61f416b71a2610a2daba59ff6a6de5b\": \"9553100000000000000000\",\n\t\"3df762049eda8ac6927d904c7af42f94e5519601\": \"2000000000000000000000\",\n\t\"5593c9d4b664730fd93ca60151c25c2eaed93c3b\": \"200000000000000000000\",\n\t\"e023f09b2887612c7c9cf1988e3a3a602b3394c9\": \"2000000000000000000000\",\n\t\"4c13980c32dcf3920b78a4a7903312907c1b123f\": \"60024000000000000000\",\n\t\"a282e969cac9f7a0e1c0cd90f5d0c438ac570da3\": \"627760000000000000000\",\n\t\"3b22da2a0271c8efe102532773636a69b1c17e09\": \"502000000000000000000\",\n\t\"1aa1021f550af158c747668dd13b463160f95a40\": \"1470000000000000000000\",\n\t\"f15178ffc43aa8070ece327e930f809ab1a54f9d\": \"197600000000000000000\",\n\t\"db1293a506e90cad2a59e1b8561f5e66961a6788\": \"2000000000000000000000\",\n\t\"88c361640d6b69373b081ce0c433bd590287d5ec\": \"50000000000000000000000\",\n\t\"3737216ee91f177732fb58fa4097267207e2cf55\": \"1520000000000000000000\",\n\t\"a16d9e3d63986159a800b46837f45e8bb980ee0b\": \"2030400000000000000000\",\n\t\"ec76f12e57a65504033f2c0bce6fc03bd7fa0ac4\": \"3580000000000000000000\",\n\t\"d9f1b26408f0ec67ad1d0d6fe22e8515e1740624\": \"24000000000000000000\",\n\t\"716ba01ead2a91270635f95f25bfaf2dd610ca23\": \"44750000000000000000000\",\n\t\"42a98bf16027ce589c4ed2c95831e2724205064e\": \"10000000000000000000000\",\n\t\"0f88aac9346cb0e7347fba70905475ba8b3e5ece\": \"10000000000000000000000\",\n\t\"2d8c52329f38d2a2fa9cbaf5c583daf1490bb11c\": \"20000000000000000000\",\n\t\"3cea302a472a940379dd398a24eafdbadf88ad79\": \"3000000000000000000000\",\n\t\"a29d5bda74e003474872bd5894b88533ff64c2b5\": \"10000000000000000000000\",\n\t\"2d23766b6f6b05737dad80a419c40eda4d77103e\": \"3820000000000000000000\",\n\t\"b07249e055044a9155359a402937bbd954fe48b6\": \"100000000000000000000\",\n\t\"f1e980c559a1a8e5e50a47f8fffdc773b7e06a54\": \"30104784000000000000000\",\n\t\"8275cd684c3679d5887d03664e338345dc3cdde1\": \"15800000000000000000\",\n\t\"b27c1a24204c1e118d75149dd109311e07c073ab\": \"3100000000000000000000\",\n\t\"451b3699475bed5d7905f8905aa3456f1ed788fc\": \"2560000000000000000000\",\n\t\"31ad4d9946ef09d8e988d946b1227f9141901736\": \"22880000000000000000000\",\n\t\"52b8a9592634f7300b7c5c59a3345b835f01b95c\": \"2000000000000000000000\",\n\t\"b161725fdcedd17952d57b23ef285b7e4b1169e8\": \"50071000000000000000\",\n\t\"74fc5a99c0c5460503a13b0509459da19ce7cd90\": \"200000000000000000000\",\n\t\"d99df7421b9382e42c89b006c7f087702a0757c0\": \"480000000000000000000\",\n\t\"8a4f4a7f52a355ba105fca2072d3065fc8f7944b\": \"500000000000000000000\",\n\t\"12316fc7f178eac22eb2b25aedeadf3d75d00177\": \"19999999000000000000000\",\n\t\"f598db2e09a8a5ee7d720d2b5c43bb126d11ecc2\": \"200000000000000000000\",\n\t\"37b8beac7b1ca38829d61ab552c766f48a10c32f\": \"400000000000000000000\",\n\t\"851dc38adb4593729a76f33a8616dab6f5f59a77\": \"100000000000000000000\",\n\t\"bf4096bc547dbfc4e74809a31c039e7b389d5e17\": \"3940000000000000000000\",\n\t\"98d3731992d1d40e1211c7f735f2189afa0702e0\": \"8000000000000000000000\",\n\t\"0f4073c1b99df60a1549d69789c7318d9403a814\": \"20000000000000000000000\",\n\t\"a430995ddb185b9865dbe62539ad90d22e4b73c2\": \"10000000000000000000000\",\n\t\"898c72dd736558ef9e4be9fdc34fef54d7fc7e08\": \"1000000000000000000000\",\n\t\"f9b617f752edecae3e909fbb911d2f8192f84209\": \"2674000000000000000000\",\n\t\"e1ae029b17e373cde3de5a9152201a14cac4e119\": \"99968000000000000000\",\n\t\"d8e8474292e7a051604ca164c0707783bb2885e8\": \"13370000000000000000000\",\n\t\"f476f2cb7208a32e051fd94ea8662992638287a2\": \"100000000000000000000\",\n\t\"3a84e950ed410e51b7e8801049ab2634b285fea1\": \"18690000000000000000000\",\n\t\"5b7784caea01799ca30227827667ce207c5cbc76\": \"2000000000000000000000\",\n\t\"3af65b3e28895a4a001153391d1e69c31fb9db39\": \"3940000000000000000000\",\n\t\"95fb5afb14c1ef9ab7d179c5c300503fd66a5ee2\": \"34225000000000000000\",\n\t\"a8446c4781a737ac4328b1e15b8a0b3fbb0fd668\": \"21390500000000000000000\",\n\t\"4888fb25cd50dbb9e048f41ca47d78b78a27c7d9\": \"17300000000000000000000\",\n\t\"566c10d638e8b88b47d6e6a414497afdd00600d4\": \"99960000000000000000\",\n\t\"bd47f5f76e3b930fd9485209efa0d4763da07568\": \"1000000000000000000000\",\n\t\"1e1c6351776ac31091397ecf16002d979a1b2d51\": \"1400000000000000000000\",\n\t\"edf603890228d7d5de9309942b5cad4219ef9ad7\": \"5000000000000000000000\",\n\t\"1923cfc68b13ea7e2055803645c1e320156bd88d\": \"1337000000000000000000\",\n\t\"8f8f37d0ad8f335d2a7101b41156b688a81a9cbe\": \"70000000000000000000\",\n\t\"63334fcf1745840e4b094a3bb40bb76f9604c04c\": \"3978000000000000000000\",\n\t\"001762430ea9c3a26e5749afdb70da5f78ddbb8c\": \"200000000000000000000\",\n\t\"512116817ba9aaf843d1507c65a5ea640a7b9eec\": \"50000000000000000000\",\n\t\"2961fb391c61957cb5c9e407dda29338d3b92c80\": \"999942000000000000000\",\n\t\"fc2952b4c49fedd0bc0528a308495e6d6a1c71d6\": \"2000000000000000000000\",\n\t\"13ec812284026e409bc066dfebf9d5a4a2bf801e\": \"1610000000000000000000\",\n\t\"ef463c2679fb279164e20c3d2691358773a0ad95\": \"2000000000000000000000\",\n\t\"3aadf98b61e5c896e7d100a3391d3250225d61df\": \"234000000000000000000\",\n\t\"e8137fc1b2ec7cc7103af921899b4a39e1d959a1\": \"1490000000000000000000\",\n\t\"b1a2b43a7433dd150bb82227ed519cd6b142d382\": \"2738000000000000000000\",\n\t\"c1f39bd35dd9cec337b96f47c677818160df37b7\": \"20000000000000000000\",\n\t\"b587b44a2ca79e4bc1dd8bfdd43a207150f2e7e0\": \"630400000000000000000\",\n\t\"41485612d03446ec4c05e5244e563f1cbae0f197\": \"970000000000000000000\",\n\t\"a12623e629df93096704b16084be2cd89d562da4\": \"8500000000000000000000\",\n\t\"3f2f381491797cc5c0d48296c14fd0cd00cdfa2d\": \"804000000000000000000\",\n\t\"9470cc36594586821821c5c996b6edc83b6d5a32\": \"24000000000000000000\",\n\t\"3605372d93a9010988018f9f315d032ed1880fa1\": \"500066000000000000000\",\n\t\"12632388b2765ee4452b50161d1fffd91ab81f4a\": \"740000000000000000000\",\n\t\"274a3d771a3d709796fbc4d5f48fce2fe38c79d6\": \"20000000000000000000\",\n\t\"d60a52580728520df7546bc1e283291788dbae0c\": \"999910000000000000000\",\n\t\"1ab53a11bcc63ddfaa40a02b9e186496cdbb8aff\": \"1996800000000000000000\",\n\t\"c282e6993fbe7a912ea047153ffd9274270e285b\": \"139939000000000000000\",\n\t\"a291e9c7990d552dd1ae16cebc3fca342cbaf1d1\": \"20000000000000000000000\",\n\t\"5547fdb4ae11953e01292b7807fa9223d0e4606a\": \"98940000000000000000\",\n\t\"bded11612fb5c6da99d1e30e320bc0995466141e\": \"400000000000000000000\",\n\t\"b73b4ff99eb88fd89b0b6d57a9bc338e886fa06a\": \"32000000000000000000\",\n\t\"b1c751786939bba0d671a677a158c6abe7265e46\": \"10000000000000000000000\",\n\t\"e881bbbe69722d81efecaa48d1952a10a2bfac8f\": \"16000000000000000000000\",\n\t\"fe96c4cd381562401aa32a86e65b9d52fa8aee27\": \"2640000000000000000000\",\n\t\"683dba36f7e94f40ea6aea0d79b8f521de55076e\": \"140000000000000000000\",\n\t\"5ac2908b0f398c0df5bac2cb13ca7314fba8fa3d\": \"199800000000000000000\",\n\t\"8914a680a5aec5226d4baaec2e5552b44dd7c874\": \"100076000000000000000\",\n\t\"041170f581de80e58b2a045c8f7c1493b001b7cb\": \"889800000000000000000\",\n\t\"4665e47396c7db97eb2a03d90863d5d4ba319a94\": \"600000000000000000000\",\n\t\"ed4be04a052d7accb3dcce90319dba4020ab2c68\": \"37547947000000000000000\",\n\t\"4b0619d9d8aa313a9531ac7dbe04ca0d6a5ad1b6\": \"2000000000000000000000\",\n\t\"a21442ab05340ade68c915f3c3399b9955f3f7eb\": \"775000000000000000000\",\n\t\"655934da8e744eaa3de34dbbc0894c4eda0b61f2\": \"200000000000000000000\",\n\t\"6038740ae28d66ba93b0be08482b3205a0f7a07b\": \"316000000000000000000\",\n\t\"99924a9816bb7ddf3fec1844828e9ad7d06bf4e6\": \"1760000000000000000000\",\n\t\"6847825bdee8240e28042c83cad642f286a3bddc\": \"1500000000000000000000\",\n\t\"a718aaad59bf395cba2b23e09b02fe0c89816247\": \"999600000000000000000\",\n\t\"2c89f5fdca3d155409b638b98a742e55eb4652b7\": \"98500000000000000000000\",\n\t\"1a7044e2383f8708305b495bd1176b92e7ef043a\": \"200000000000000000000\",\n\t\"282e80a554875a56799fa0a97f5510e795974c4e\": \"1000000000000000000000\",\n\t\"ffb3bcc3196a8c3cb834cec94c34fed35b3e1054\": \"1340000000000000000000\",\n\t\"d135794b149a18e147d16e621a6931f0a40a969a\": \"20000000000000000000000\",\n\t\"6b94615db750656ac38c7e1cf29a9d13677f4e15\": \"12000000000000000000000\",\n\t\"ecbe425e670d39094e20fb5643a9d818eed236de\": \"5000000000000000000000\",\n\t\"511e0efb04ac4e3ff2e6550e498295bfcd56ffd5\": \"668500000000000000000\",\n\t\"ff65511cada259260c1ddc41974ecaecd32d6357\": \"1760000000000000000000\",\n\t\"9ffc5fe06f33f5a480b75aa94eb8556d997a16c0\": \"20000000000000000000\",\n\t\"57df23bebdc65eb75feb9cb2fad1c073692b2baf\": \"4000000000000000000000\",\n\t\"207ef80b5d60b6fbffc51f3a64b8c72036a5abbd\": \"6685000000000000000000\",\n\t\"c573e841fa08174a208b060ccb7b4c0d7697127f\": \"668500000000000000000\",\n\t\"411610b178d5617dfab934d293f512a93e5c10e1\": \"170000000000000000000\",\n\t\"9991614c5baa47dd6c96874645f97add2c3d8380\": \"1970000000000000000000\",\n\t\"2d3480bf0865074a72c7759ee5137b4d70c51ce9\": \"200000000000000000000\",\n\t\"9d40e012f60425a340d82d03a1c757bfabc706fb\": \"169799000000000000000\",\n\t\"47648bed01f3cd3249084e635d14daa9e7ec3c8a\": \"194000000000000000000\",\n\t\"a5ff62222d80c013cec1a0e8850ed4d354dac16d\": \"207600000000000000000\",\n\t\"f80d3619702fa5838c48391859a839fb9ce7160f\": \"1992800000000000000000\",\n\t\"7c0f5e072043c9ee740242197e78cc4b98cdf960\": \"200000000000000000000\",\n\t\"a40aa2bbce0c72b4d0dfffcc42715b2b54b01bfa\": \"1000000000000000000000\",\n\t\"2eeed50471a1a2bf53ee30b1232e6e9d80ef866d\": \"20000000000000000000\",\n\t\"0c2808b951ed9e872d7b32790fcc5994ae41ffdc\": \"102000000000000000000000\",\n\t\"7f06c89d59807fa60bc60136fcf814cbaf2543bd\": \"10000000000000000000000\",\n\t\"8d4b603c5dd4570c34669515fdcc665890840c77\": \"18200000000000000000\",\n\t\"d5e5c135d0c4c3303934711993d0d16ff9e7baa0\": \"2000000000000000000000\",\n\t\"241361559feef80ef137302153bd9ed2f25db3ef\": \"20000000000000000000000\",\n\t\"db63122de7037da4971531fae9af85867886c692\": \"277000000000000000000\",\n\t\"417e4e2688b1fd66d821529e46ed4f42f8b3db3d\": \"2000000000000000000000\",\n\t\"127db1cadf1b771cbd7475e1b272690f558c8565\": \"14000000000000000000000\",\n\t\"48659d8f8c9a2fd44f68daa55d23a608fbe500dc\": \"2000000000000000000000\",\n\t\"b3a64b1176724f5409e1414a3523661baee74b4a\": \"25610000000000000000\",\n\t\"aa14422d6f0ae5a758194ed15780c838d67f1ee1\": \"28503824000000000000000\",\n\t\"a0a0e65204541fca9b2fb282cd95138fae16f809\": \"10000000000000000000000\",\n\t\"d2107b353726c3a2b46566eaa7d9f80b5d21dbe3\": \"20000000000000000000\",\n\t\"e4cafb727fb5c6b70bb27533b8a9ccc9ef6888e1\": \"300443000000000000000\",\n\t\"09f3f601f605441140586ce0656fa24aa5b1d9ae\": \"1539400000000000000000\",\n\t\"87fcbe7c4193ffcb08143779c9bec83fe7fda9fc\": \"100275000000000000000\",\n\t\"03ebc63fda6660a465045e235fbe6e5cf195735f\": \"141840000000000000000\",\n\t\"bdbaf6434d40d6355b1e80e40cc4ab9c68d96116\": \"100000000000000000000\",\n\t\"4e2225a1bb59bc88a2316674d333b9b0afca6655\": \"155000000000000000000\",\n\t\"4dc3da13b2b4afd44f5d0d3189f444d4ddf91b1b\": \"2000000000000000000000\",\n\t\"4ba8e0117fc0b6a3e56b24a3a58fe6cef442ff98\": \"5640000000000000000000\",\n\t\"27146913563aa745e2588430d9348e86ea7c3510\": \"400000000000000000000\",\n\t\"4c5afe40f18ffc48d3a1aec41fc29de179f4d297\": \"2000000000000000000000\",\n\t\"8a810114b2025db9fbb50099a6e0cb9e2efa6bdc\": \"1910000000000000000000\",\n\t\"2dee90a28f192d676a8773232b56f18f239e2fad\": \"18587970000000000000000\",\n\t\"60676e92d18b000509c61de540e6c5ddb676d509\": \"1200000000000000000000\",\n\t\"9bfc659c9c601ea42a6b21b8f17084ec87d70212\": \"10000000000000000000000\",\n\t\"5d5d6e821c6eef96810c83c491468560ef70bfb5\": \"2000000000000000000000\",\n\t\"d5787668c2c5175b01a8ee1ac3ecc9c8b2aba95a\": \"1999944000000000000000\",\n\t\"33b336f5ba5edb7b1ccc7eb1a0d984c1231d0edc\": \"2000000000000000000000\",\n\t\"3abb8adfc604f48d5984811d7f1d52fef6758270\": \"4475000000000000000000\",\n\t\"980a84b686fc31bdc83c221058546a71b11f838a\": \"779471000000000000000\",\n\t\"0b507cf553568daaf65504ae4eaa17a8ea3cdbf5\": \"2000000000000000000000\",\n\t\"896009526a2c7b0c09a6f63a80bdf29d9c87de9c\": \"3462830000000000000000\",\n\t\"9696052138338c722f1140815cf7749d0d3b3a74\": \"500000000000000000000\",\n\t\"3831757eae7557cb8a37a4b10644b63e4d3b3c75\": \"200000000000000000000\",\n\t\"62dc72729024375fc37cbb9c7c2393d10233330f\": \"2000000000000000000000\",\n\t\"44098866a69b68c0b6bc168229b9603587058967\": \"188000000000000000000\",\n\t\"25adb8f96f39492c9bb47c5edc88624e46075697\": \"26740000000000000000000\",\n\t\"fd4de8e3748a289cf7d060517d9d38388db01fb8\": \"250000000000000000000\",\n\t\"6be7595ea0f068489a2701ec4649158ddc43e178\": \"2000000000000000000000\",\n\t\"d402b4f6a099ebe716cb14df4f79c0cd01c6071b\": \"2000000000000000000000\",\n\t\"a07682000b1bcf3002f85c80c0fa2949bd1e82fd\": \"4000000000000000000000\",\n\t\"eb4f00e28336ea09942588eeac921811c522143c\": \"2000000000000000000000\",\n\t\"8f31c7005197ec997a87e69bec48649ab94bb2a5\": \"4000000000000000000000\",\n\t\"e7fd8fd959aed2767ea7fa960ce1db53af802573\": \"1000000000000000000000\",\n\t\"a8ef9ad274436042903e413c3b0c62f5f52ed584\": \"10000000000000000000000\",\n\t\"d83ad260e9a6f432fb6ea28743299b4a09ad658c\": \"2000000000000000000000\",\n\t\"b5c816a8283ca4df68a1a73d63bd80260488df08\": \"200000000000000000000\",\n\t\"d7d3c75920590438b82c3e9515be2eb6ed7a8b1a\": \"60000000000000000000000\",\n\t\"af3cb5965933e7dad883693b9c3e15beb68a4873\": \"2000000000000000000000\",\n\t\"6e899e59a9b41ab7ea41df7517860f2acb59f4fd\": \"20000000000000000000000\",\n\t\"527a8ca1268633a6c939c5de1b929aee92aeac8d\": \"900000000000000000000\",\n\t\"1680cec5021ee93050f8ae127251839e74c1f1fd\": \"13098657000000000000000\",\n\t\"ff7843c7010aa7e61519b762dfe49124a76b0e4e\": \"933580000000000000000000\",\n\t\"140fba58dbc04803d84c2130f01978f9e0c73129\": \"400000000000000000000\",\n\t\"0261ad3a172abf1315f0ffec3270986a8409cb25\": \"203500000000000000000\",\n\t\"ab5a79016176320973e8cd38f6375530022531c0\": \"1000000000000000000000\",\n\t\"fca73eff8771c0103ba3cc1a9c259448c72abf0b\": \"1000000000000000000000\",\n\t\"07d41217badca5e0e60327d845a3464f0f27f84a\": \"4000000000000000000000\",\n\t\"2c1c19114e3d6de27851484b8d2715e50f8a1065\": \"100000000000000000000\",\n\t\"abd21eff954fc6a7de26912a7cbb303a6607804e\": \"1517000000000000000000\",\n\t\"f303d5a816affd97e83d9e4dac2f79072bb0098f\": \"960000000000000000000\",\n\t\"114cfefe50170dd97ae08f0a44544978c599548d\": \"863000000000000000000\",\n\t\"647b85044df2cf0b4ed4882e88819fe22ae5f793\": \"1000032000000000000000\",\n\t\"1b130d6fa51d5c48ec8d1d52dc8a227be8735c8a\": \"2000000000000000000000\",\n\t\"0d9d3f9bc4a4c6efbd59679b69826bc1f63d9916\": \"600000000000000000000\",\n\t\"c765e00476810947816af142d46d2ee7bca8cc4f\": \"500000000000000000000\",\n\t\"b57b04fa23d1203fae061eac4542cb60f3a57637\": \"191000000000000000000\",\n\t\"e192489b85a982c1883246d915b229cb13207f38\": \"5000000000000000000000\",\n\t\"5f483ffb8f680aedf2a38f7833afdcde59b61e4b\": \"2000000000000000000000\",\n\t\"b46d1182e5aacaff0d26b2fcf72f3c9ffbcdd97d\": \"3139000000000000000000\",\n\t\"59c7f785c93160e5807ed34e5e534bc6188647a7\": \"640000000000000000000\",\n\t\"18e4ce47483b53040adbab35172c01ef64506e0c\": \"9000000000000000000000\",\n\t\"296d66b521571a4e4103a7f562c511e6aa732d81\": \"668500000000000000000\",\n\t\"bcd99edc2160f210a05e3a1fa0b0434ced00439b\": \"2000000000000000000000\",\n\t\"f14f0eb86db0eb68753f16918e5d4b807437bd3e\": \"200000000000000000000\",\n\t\"60d5667140d12614b21c8e5e8a33082e32dfcf23\": \"20000000000000000000000\",\n\t\"8ccabf25077f3aa41545344d53be1b2b9c339000\": \"1695400000000000000000\",\n\t\"8cc0d7c016fa7aa950114aa1db094882eda274ea\": \"159800000000000000000\",\n\t\"c71145e529c7a714e67903ee6206e4c3042b6727\": \"1430000000000000000000\",\n\t\"c5e9939334f1252ed2ba26814487dfd2982b3128\": \"70000000000000000000\",\n\t\"f09b3e87f913ddfd57ae8049c731dba9b636dfc3\": \"608000000000000000000\",\n\t\"4349225a62f70aea480a029915a01e5379e64fa5\": \"2598000000000000000000\",\n\t\"666b4f37d55d63b7d056b615bb74c96b3b01991a\": \"4000000000000000000000\",\n\t\"8bd6b1c6d74d010d1008dba6ef835d4430b35c32\": \"50000000000000000000\",\n\t\"7363cd90fbab5bb8c49ac20fc62c398fe6fb744c\": \"2000000000000000000000\",\n\t\"b7479dab5022c4d5dbaaf8de171b4e951dd1a457\": \"80000000000000000000\",\n\t\"5a5468fa5ca226c7532ecf06e1bc1c45225d7ec9\": \"1910000000000000000000\",\n\t\"32a20d028e2c6218b9d95b445c771524636a22ef\": \"9500000000000000000000\",\n\t\"1bd28cd5c78aee51357c95c1ef9235e7c18bc854\": \"2000000000000000000000\",\n\t\"693492a5c51396a482881669ccf6d8d779f00951\": \"345827000000000000000\",\n\t\"bd723b289a7367b6ece2455ed61edb49670ab9c4\": \"4999995000000000000000\",\n\t\"1be3542c3613687465f15a70aeeb81662b65cca8\": \"2000000000000000000000\",\n\t\"5803e68b34da121aef08b602badbafb4d12481ca\": \"18000000000000000000000\",\n\t\"9ac907ee85e6f3e223459992e256a43fa08fa8b2\": \"10000000000000000000000\",\n\t\"833b6a8ec8da408186ac8a7d2a6dd61523e7ce84\": \"16000000000000000000000\",\n\t\"64628c6fb8ec743adbd87ce5e018d531d9210437\": \"26740000000000000000\",\n\t\"566c28e34c3808d9766fe8421ebf4f2b1c4f7d77\": \"1970000000000000000000\",\n\t\"171ad9a04bedc8b861e8ed4bddf5717813b1bb48\": \"400000000000000000000\",\n\t\"4f85bc1fc5cbc9c001e8f1372e07505370d8c71f\": \"940000000000000000000\",\n\t\"6d2f976734b9d0070d1883cf7acab8b3e4920fc1\": \"10000000000000000000000\",\n\t\"357a02c0a9dfe287de447fb67a70ec5b62366647\": \"26740000000000000000\",\n\t\"44a01fb04ac0db2cce5dbe281e1c46e28b39d878\": \"1999944000000000000000\",\n\t\"3630c5e565ceaa8a0f0ffe32875eae2a6ce63c19\": \"170016000000000000000\",\n\t\"334340ee4b9cdc81f850a75116d50ee9b69825bf\": \"2000000000000000000000\",\n\t\"c0afb7d8b79370cfd663c68cc6b9702a37cd9eff\": \"1000000000000000000000\",\n\t\"2016895df32c8ed5478269468423aea7b7fbce50\": \"20000000000000000000\",\n\t\"1e2fe4e4a77d141ff49a0c7fbc95b0a2b283eeeb\": \"2000000000000000000000\",\n\t\"260df8943a8c9a5dba7945327fd7e0837c11ad07\": \"200000000000000000000\",\n\t\"32fbeed6f626fcdfd51acafb730b9eeff612f564\": \"2000000000000000000000\",\n\t\"9bd88068e13075f3a8cac464a5f949d6d818c0f6\": \"6000000000000000000000\",\n\t\"ab4572fbb1d72b575d69ec6ad17333873e8552fc\": \"1999942000000000000000\",\n\t\"e44ea51063405154aae736be2bf1ee3b9be639ae\": \"4000000000000000000000\",\n\t\"617f20894fa70e94a86a49cd74e03238f64d3cd9\": \"5000057000000000000000\",\n\t\"3e914e3018ac00449341c49da71d04dfeeed6221\": \"4000000000000000000000\",\n\t\"590181d445007bd0875aaf061c8d51153900836a\": \"2000000000000000000000\",\n\t\"27987110221a880826adb2e7ab5eca78c6e31aec\": \"4000000000000000000000\",\n\t\"06618e9d5762df62028601a81d4487d6a0ecb80e\": \"1337000000000000000000\",\n\t\"8cc652dd13e7fe14dabbb36d5d320db9ffee8a54\": \"1790000000000000000000\",\n\t\"8973aefd5efaee96095d9e288f6a046c97374b43\": \"141000000000000000000\",\n\t\"dbd51cdf2c3bfacdff106221de2e19ad6d420414\": \"1760000000000000000000\",\n\t\"25697ef20cccaa70d32d376f8272d9c1070c3d78\": \"200000000000000000000\",\n\t\"0726c42e00f45404836eb1e280d073e7059687f5\": \"1623331000000000000000\",\n\t\"5e0785532c7723e4c0af9357d5274b73bdddddde\": \"25000088000000000000000\",\n\t\"38430e931d93be01b4c3ef0dc535f1e0a9610063\": \"10000000000000000000000\",\n\t\"143d536b8b1cb84f56a39e0bc81fd5442bcacce1\": \"100000000000000000000\",\n\t\"5c6d041da7af4487b9dc48e8e1f60766d0a56dbc\": \"1457800000000000000000\",\n\t\"f9bfb59d538afc4874d4f5941b08c9730e38e24b\": \"40000000000000000000\",\n\t\"83dbfd8eda01d0de8e158b16d0935fc2380a5dc7\": \"600000000000000000000\",\n\t\"0e6cd664ad9c1ed64bf98749f40644b626e3792c\": \"60000000000000000000000\",\n\t\"ce2e0da8934699bb1a553e55a0b85c169435bea3\": \"4999962000000000000000\",\n\t\"a39bfee4aec9bd75bd22c6b672898ca9a1e95d32\": \"10000000000000000000000\",\n\t\"1bc44c8761231ba1f11f5faa40fa669a013e12ce\": \"203586000000000000000\",\n\t\"68809af5d532a11c1a4d6e32aac75c4c52b08ead\": \"10000000000000000000000\",\n\t\"80cc21bd99f39005c58fe4a448909220218f66cb\": \"1000072000000000000000\",\n\t\"1080c1d8358a15bc84dac8253c6883319020df2c\": \"2674000000000000000000\",\n\t\"9eaf6a328a4076024efa6b67b48b21eedcc0f0b8\": \"158000000000000000000\",\n\t\"1e7b5e4d1f572becf2c00fc90cb4767b4a6e33d4\": \"112970000000000000000\",\n\t\"acbd185589f7a68a67aa4b1bd65077f8c64e4e21\": \"200000000000000000000\",\n\t\"ff78541756ab2b706e0d70b18adb700fc4f1643d\": \"43250000000000000000000\",\n\t\"7f0ec3db804692d4d1ea3245365aab0590075bc4\": \"4000000000000000000000\",\n\t\"4a918032439159bb315b6725b6830dc83697739f\": \"343800000000000000000\",\n\t\"bc1b021a78fde42d9b5226d6ec26e06aa3670090\": \"80000000000000000000\",\n\t\"2f2523cc834f0086052402626296675186a8e582\": \"16000000000000000000000\",\n\t\"9db2e15ca681f4c66048f6f9b7941ed08b1ff506\": \"4000000000000000000000\",\n\t\"20b9a9e6bd8880d9994ae00dd0b9282a0beab816\": \"500000000000000000000\",\n\t\"3bddbc8134f77d55597fc97c26d26698090604eb\": \"13700000000000000000\",\n\t\"80c3a9f695b16db1597286d1b3a8b7696c39fa27\": \"100000000000000000000\",\n\t\"53194d8afa3e883502767edbc30586af33b114d3\": \"2000000000000000000000\",\n\t\"e2efd0a9bc407ece03d67e8ec8e9d283f48d2a49\": \"12280000000000000000000\",\n\t\"1cb450920078aab2317c7db3b38af7dd298b2d41\": \"340000000000000000000\",\n\t\"ca8276c477b4a07b80107b843594189607b53bec\": \"6000000000000000000000\",\n\t\"147f4210ab5804940a0b7db8c14c28396b62a6bf\": \"2000000000000000000000\",\n\t\"d3df3b53cb3b4755de54e180451cc44c9e8ae0aa\": \"659801000000000000000\",\n\t\"f7c708015071d4fb0a3a2a09a45d156396e3349e\": \"3000000000000000000000\",\n\t\"a8cafac32280d021020bf6f2a9782883d7aabe12\": \"100000000000000000000\",\n\t\"399aa6f5d078cb0970882bc9992006f8fbdf3471\": \"1000000000000000000000\",\n\t\"15669180dee29598869b08a721c7d24c4c0ee63f\": \"1000000000000000000000\",\n\t\"bba8ab22d2fedbcfc63f684c08afdf1c175090b5\": \"99091000000000000000\",\n\t\"5e5a441974a83d74c687ebdc633fb1a49e7b1ad7\": \"3000000000000000000000\",\n\t\"98b769cc305cecfb629a00c907069d7ef9bc3a12\": \"26000000000000000000\",\n\t\"c820c711f07705273807aaaa6de44d0e4b48be2e\": \"155000000000000000000\",\n\t\"12aa7d86ddfbad301692feac8a08f841cb215c37\": \"137000000000000000000\",\n\t\"6ff5d361b52ad0b68b1588607ec304ae5665fc98\": \"1940000000000000000000\",\n\t\"2382a9d48ec83ea3652890fd0ee79c907b5b2dc1\": \"133700000000000000000\",\n\t\"b2a144b1ea67b9510f2267f9da39d3f93de26642\": \"2000000000000000000000\",\n\t\"b3e20eb4de18bd060221689894bee5aeb25351ee\": \"73535000000000000000\",\n\t\"101a0a64f9afcc448a8a130d4dfcbee89537d854\": \"15200000000000000000000\",\n\t\"1b826fb3c012b0d159e294ba5b8a499ff3c0e03c\": \"2000000000000000000000\",\n\t\"aafb7b013aa1f8541c7e327bf650adbd194c208f\": \"1358000000000000000000\",\n\t\"96eb523e832f500a017de13ec27f5d366c560eff\": \"307600000000000000000\",\n\t\"c7bf17c4c11f98941f507e77084fffbd2dbd3db5\": \"1000000000000000000000\",\n\t\"840ec83ea93621f034e7bb3762bb8e29ded4c479\": \"2500000000000000000000\",\n\t\"0e9c511864a177f49be78202773f60489fe04e52\": \"6000000000000000000000\",\n\t\"f6f1a44309051c6b25e47dff909b179bb9ab591c\": \"1940000000000000000000\",\n\t\"63fe6bcc4b8a9850abbe75803730c932251f145b\": \"18200000000000000000\",\n\t\"f88b58db37420b464c0be88b45ee2b95290f8cfa\": \"40000000000000000000\",\n\t\"9d4d321177256ebd9afbda304135d517c3dc5693\": \"616000000000000000000\",\n\t\"8c1fbe5f0aea359c5aa1fa08c8895412ca8e05a6\": \"1000000000000000000000\",\n\t\"cb0dd7cf4e5d8661f6028943a4b9b75c914436a7\": \"120000000000000000000000\",\n\t\"a3979a92760a135adf69d72f75e167755f1cb8c3\": \"100000000000000000000\",\n\t\"ca22cda3606da5cad013b8074706d7e9e721a50c\": \"6816200000000000000000\",\n\t\"157559adc55764cc6df79323092534e3d6645a66\": \"6000000000000000000000\",\n\t\"4f52ad6170d25b2a2e850eadbb52413ff2303e7f\": \"3040000000000000000000\",\n\t\"eed28c3f068e094a304b853c950a6809ebcb03e0\": \"17300000000000000000000\",\n\t\"2e47f287f498233713850d3126823cc67dcee255\": \"14600000000000000000\",\n\t\"6c359e58a13d4578a9338e335c67e7639f5fb4d7\": \"218000000000000000000\",\n\t\"4968a2cedb457555a139295aea28776e54003c87\": \"10092310000000000000000\",\n\t\"4041374b0feef4792e4b33691fb86897a4ff560c\": \"365000000000000000000\",\n\t\"83e48055327c28b5936fd9f4447e73bdb2dd3376\": \"2674000000000000000000\",\n\t\"32b7feebc5c59bf65e861c4c0be42a7611a5541a\": \"2212000000000000000000\",\n\t\"21a6db6527467bc6dad54bc16e9fe2953b6794ed\": \"14000000000000000000000\",\n\t\"e8ead1bb90ccc3aea2b0dcc5b58056554655d1d5\": \"7760000000000000000000\",\n\t\"7a94b19992ceb8ce63bc92ee4b5aded10c4d9725\": \"16770000000000000000000\",\n\t\"90e93e4dc17121487952333614002be42356498e\": \"1910000000000000000000\",\n\t\"aab00abf5828d7ebf26b47ceaccdb8ba03325166\": \"10000000000000000000000\",\n\t\"0a9ab2638b1cfd654d25dab018a0aebddf85fd55\": \"21801000000000000000\",\n\t\"b12ed07b8a38ad5506363fc07a0b6d799936bdaf\": \"10000000000000000000000\",\n\t\"f4a9d00cefa97b7a58ef9417fc6267a5069039ee\": \"21800000000000000000\",\n\t\"04a1cada1cc751082ff8da928e3cfa000820a9e9\": \"40000000000000000000\",\n\t\"9018cc1f48d2308e252ab6089fb99a7c1d569410\": \"200000000000000000000\",\n\t\"895d694e880b13ccd0848a86c5ce411f88476bbf\": \"199955000000000000000\",\n\t\"40a7f72867a7dc86770b162b7557a434ed50cce9\": \"1000000000000000000000\",\n\t\"467ea10445827ef1e502daf76b928a209e0d4032\": \"2000000000000000000000\",\n\t\"7553aa23b68aa5f57e135fe39fdc235eaca8c98c\": \"1000000000000000000000\",\n\t\"31b43b015d0081643c6cda46a7073a6dfdbca825\": \"50019600000000000000000\",\n\t\"d82fd9fdf6996bedad2843159c06f37e0924337d\": \"1688800000000000000000\",\n\t\"24a4eb36a7e498c36f99975c1a8d729fd6b305d7\": \"258000000000000000000\",\n\t\"91d66ea6288faa4b3d606c2aa45c7b6b8a252739\": \"2000000000000000000000\",\n\t\"83a402438e0519773d5448326bfb61f8b20cf52d\": \"1520000000000000000000\",\n\t\"c2fafdd30acb6d6706e9293cb02641f9edbe07b5\": \"1494224000000000000000\",\n\t\"79dba256472db4e058f2e4cdc3ea4e8a42773833\": \"1460000000000000000000\",\n\t\"498abdeb14c26b7b7234d70fceaef361a76dff72\": \"3000000000000000000000\",\n\t\"7b73242d75ca9ad558d650290df17692d54cd8b8\": \"2000200000000000000000\",\n\t\"6ec3659571b11f889dd439bcd4d67510a25be57e\": \"123000000000000000000\",\n\t\"ab098633eeee0ccefdf632f9575456f6dd80fc86\": \"200000000000000000000000\",\n\t\"f4a51fce4a1d5b94b0718389ba4e7814139ca738\": \"300000000000000000000\",\n\t\"8f561b41b209f248c8a99f858788376250609cf3\": \"1700000000000000000000\",\n\t\"05d0f4d728ebe82e84bf597515ad41b60bf28b39\": \"4200000000000000000000\",\n\t\"dfdf43393c649caebe1bb18059decb39f09fb4e8\": \"400000000000000000000\",\n\t\"0089508679abf8c71bf6781687120e3e6a84584d\": \"1800000000000000000000\",\n\t\"80907f593148b57c46c177e23d25abc4aae18361\": \"100000000000000000000\",\n\t\"94fcceadfe5c109c5eaeaf462d43873142c88e22\": \"4800000000000000000000\",\n\t\"e89249738b7eced7cb666a663c49cbf6de8343ea\": \"2000000000000000000000\",\n\t\"23c99ba087448e19c9701df66e0cab52368331fa\": \"2000000000000000000000\",\n\t\"a68e0c30cba3bc5a883e540320f999c7cd558e5c\": \"1799869000000000000000\",\n\t\"88888a57bd9687cbf950aeeacf9740dcc4d1ef59\": \"1820000000000000000000\",\n\t\"e9b36fe9b51412ddca1a521d6e94bc901213dda8\": \"10000000000000000000000\",\n\t\"a9145046fa3628cf5fd4c613927be531e6db1fdd\": \"112000000000000000000\",\n\t\"e82c58c579431b673546b53a86459acaf1de9b93\": \"1000000000000000000000\",\n\t\"bd6a474d66345bcdd707594adb63b30c7822af54\": \"4000000000000000000000\",\n\t\"6a6159074ab573e0ee581f0f3df2d6a594629b74\": \"310000000000000000000\",\n\t\"2e7f465520ec35cc23d68e75651bb6689544a196\": \"1050049000000000000000\",\n\t\"ac6d02e9a46b379fac4ac9b1d7b5d47bc850ce16\": \"1760000000000000000000\",\n\t\"bd59094e074f8d79142ab1489f148e32151f2089\": \"20000000000000000000\",\n\t\"0ba6e46af25a13f57169255a34a4dac7ce12be04\": \"500000000000000000000\",\n\t\"35145f620397c69cb8e00962961f0f4886643989\": \"6000000000000000000000\",\n\t\"d84b922f7841fc5774f00e14604ae0df42c8551e\": \"4011000000000000000000\",\n\t\"44232ff66ddad1fd841266380036afd7cf7d7f42\": \"200000000000000000000\",\n\t\"516954025fca2608f47da81c215eedfd844a09ff\": \"382000000000000000000\",\n\t\"e5aa0b833bb916dc19a8dd683f0ede241d988eba\": \"3000000000000000000000\",\n\t\"80ea1acc136eca4b68c842a95adf6b7fee7eb8a2\": \"4000000000000000000000\",\n\t\"98a0e54c6d9dc8be96276cebf4fec460f6235d85\": \"1969803000000000000000\",\n\t\"91620f3eb304e813d28b0297556d65dc4e5de5aa\": \"3820000000000000000000\",\n\t\"7bb984c6dbb9e279966afafda59c01d02627c804\": \"8050000000000000000000\",\n\t\"41f489a1ec747bc29c3e5f9d8db97877d4d1b4e9\": \"133700000000000000000\",\n\t\"8dbc3e6cb433e194f40f82b40faadb1f8b856116\": \"1910000000000000000000\",\n\t\"889da40fb1b60f9ea9bd7a453e584cf7b1b4d9f7\": \"40000000000000000000\",\n\t\"debbdd831e0f20ae6e378252decdf92f7cf0c658\": \"2000000000000000000000\",\n\t\"a22ade0ddb5c6ef8d0cd8de94d82b11082cb2e91\": \"1020000000000000000000\",\n\t\"823219a25976bb2aa4af8bad41ac3526b493361f\": \"2000000000000000000000\",\n\t\"6d39a9e98f81f769d73aad2cead276ac1387babe\": \"394000000000000000000\",\n\t\"751abcb6cc033059911815c96fd191360ab0442d\": \"8000000000000000000000\",\n\t\"64d80c3b8ba68282290b75e65d8978a15a87782c\": \"1970000000000000000000\",\n\t\"6ba8f7e25fc2d871618e24e40184199137f9f6aa\": \"400020000000000000000\",\n\t\"25a74c2ac75dc8baa8b31a9c7cb4b7829b2456da\": \"2000000000000000000000\",\n\t\"0f7b61c59b016322e8226cafaee9d9e76d50a1b3\": \"4000000000000000000000\",\n\t\"7526e482529f0a14eec98871dddd0e721b0cd9a2\": \"20000000000000000000\",\n\t\"071dd90d14d41f4ff7c413c24238d3359cd61a07\": \"36400000000000000000000\",\n\t\"a986762f7a4f294f2e0b173279ad2c81a2223458\": \"20000000000000000000\",\n\t\"e667f652f957c28c0e66d0b63417c80c8c9db878\": \"601650000000000000000\",\n\t\"7b98e23cb96beee80a168069ebba8f20edd55ccf\": \"214500000000000000000\",\n\t\"2d8e5bb8d3521695c77e7c834e0291bfacee7408\": \"1970000000000000000000\",\n\t\"f23d01589eb12d439f7448ff54307529f191858d\": \"2000000000000000000000\",\n\t\"abd9605b3e91acfd777830d16463478ae0fc7720\": \"133700000000000000000\",\n\t\"eabb90d37989aab31feae547e0e6f3999ce6a35d\": \"2000000000000000000000\",\n\t\"0abfb39b11486d79572866195ba26c630b6784db\": \"121500000000000000000000\",\n\t\"d56a144d7af0ae8df649abae535a15983aa04d02\": \"5000000000000000000000\",\n\t\"998c1f93bcdb6ff23c10d0dc924728b73be2ff9f\": \"1002750000000000000000\",\n\t\"bc62b3096a91e7dc11a1592a293dd2542150d751\": \"1000000000000000000000\",\n\t\"0c8f66c6017bce5b20347204b602b743bad78d60\": \"2000000000000000000000\",\n\t\"4c5b3dc0e2b9360f91289b1fe13ce12c0fbda3e1\": \"2000000000000000000000\",\n\t\"b44605552471a6eee4daab71ff3bb41326d473e0\": \"839200000000000000000\",\n\t\"fc3d226bb36a58f526568857b0bb12d109ec9301\": \"2000000000000000000000\",\n\t\"adc8228ef928e18b2a807d00fb3c6c79cd1d9e96\": \"22800000000000000000\",\n\t\"9df32a501c0b781c0281022f42a1293ffd7b892a\": \"9000000000000000000000\",\n\t\"e7da609d40cde80f00ce5b4ffb6aa9d0b03494fc\": \"1000000000000000000000\",\n\t\"9b64d3cd8d2b73f66841b5c46bb695b88a9ab75d\": \"20769000000000000000\",\n\t\"8e9c08f738661f9676236eff82ba6261dd3f4822\": \"100000000000000000000\",\n\t\"deb97254474c0d2f5a7970dcdb2f52fb1098b896\": \"1000000000000000000000\",\n\t\"b4256273962bf631d014555cc1da0dcc31616b49\": \"2000000000000000000000\",\n\t\"23abd9e93e7957e5b636be6579051c15e5ce0b0e\": \"17188400000000000000000\",\n\t\"382591e7217b435e8e884cdbf415fe377a6fe29e\": \"8022000000000000000000\",\n\t\"f17adb740f45cbbde3094e7e13716f8103f563bd\": \"2000000000000000000000\",\n\t\"61ed5596c697207f3d55b2a51aa7d50f07fa09e8\": \"2000000000000000000000\",\n\t\"788e809741a3b14a22a4b1d937c82cfea489eebe\": \"7000000000000000000000\",\n\t\"992646ac1acaabf5ddaba8f9429aa6a94e7496a7\": \"1000110000000000000000\",\n\t\"51296f5044270d17707646129c86aad1645eadc1\": \"1337133000000000000000\",\n\t\"6ee8aad7e0a065d8852d7c3b9a6e5fdc4bf50c00\": \"20000000000000000000\",\n\t\"30db6b9b107e62102f434a9dd0960c2021f5ce4c\": \"599742000000000000000\",\n\t\"63fc93001305adfbc9b85d29d9291a05f8f1410b\": \"1000000000000000000000\",\n\t\"df6ed6006a6abe886ed33d95a4de28fc12183927\": \"910000000000000000000\",\n\t\"4745ab181a36aa8cbf2289d0c45165bc7ebe2381\": \"39400000000000000000\",\n\t\"7bb0fdf5a663b5fba28d9c902af0c811e252f298\": \"200000000000000000000\",\n\t\"e0ff0bd9154439c4a5b7233e291d7d868af53f33\": \"396110000000000000000\",\n\t\"09261f9acb451c3788844f0c1451a35bad5098e3\": \"8664000000000000000000\",\n\t\"2813d263fc5ff2479e970595d6b6b560f8d6d6d1\": \"2000000000000000000000\",\n\t\"2cd19694d1926a0fa9189edebafc671cf1b2caa5\": \"1000000000000000000000\",\n\t\"05336e9a722728d963e7a1cf2759fd0274530fca\": \"915583000000000000000\",\n\t\"e5b7af146986c0ff8f85d22e6cc334077d84e824\": \"2000000000000000000000\",\n\t\"3e4fbd661015f6461ed6735cefef01f31445de3a\": \"16200000000000000000000\",\n\t\"4f5df5b94357de948604c51b7893cddf6076baad\": \"3760000000000000000000\",\n\t\"9567a0de811de6ff095b7ee64e7f1b83c2615b80\": \"267400000000000000000\",\n\t\"955db3b74360b9a268677e73cea821668af6face\": \"30000000000000000000000\",\n\t\"3e040d40cb80ba0125f3b15fdefcc83f3005da1b\": \"1038000000000000000000\",\n\t\"43f470ed659e2991c375957e5ddec5bd1d382231\": \"100000000000000000000\",\n\t\"047f9bf1529daf87d407175e6f171b5e59e9ff3e\": \"650000000000000000000\",\n\t\"15e3b584056b62c973cf5eb096f1733e54c15c91\": \"936702000000000000000\",\n\t\"c03de42a109b657a64e92224c08dc1275e80d9b2\": \"20000000000000000000\",\n\t\"e4fc13cfcbac1b17ce7783acd423a845943f6b3a\": \"20000000000000000000\",\n\t\"65ff874fafce4da318d6c93d57e2c38a0d73e820\": \"1000160000000000000000\",\n\t\"8b997dbc078ad02961355da0a159f2927ed43d64\": \"197000000000000000000\",\n\t\"2f5080b83f7e2dc0a1dd11b092ad042bff788f4c\": \"3338355000000000000000\",\n\t\"1b3920d001c43e72b24e7ca46f0fd6e0c20a5ff2\": \"2000000000000000000000\",\n\t\"5ade77fd81c25c0af713b10702768c1eb2f975e7\": \"20000000000000000000\",\n\t\"acaaddcbf286cb0e215dda55598f7ff0f4ada5c6\": \"1000000000000000000000\",\n\t\"64e0217a5b38aa40583625967fa9883690388b6f\": \"200000000000000000000\",\n\t\"ae648155a658370f929be384f7e001047e49dd46\": \"13561000000000000000000\",\n\t\"f7c1b443968b117b5dd9b755572fcd39ca5ec04b\": \"456082000000000000000\",\n\t\"de027efbb38503226ed871099cb30bdb02af1335\": \"1000000000000000000000\",\n\t\"49cf1e54be363106b920729d2d0ba46f0867989a\": \"268000000000000000000\",\n\t\"e7f4d7fe6f561f7fa1da3005fd365451ad89df89\": \"200000000000000000000\",\n\t\"b036916bdacf94b69e5a8a65602975eb026104dd\": \"20000000000000000000\",\n\t\"e923c06177b3427ea448c0a6ff019b54cc548d95\": \"36281000000000000000\",\n\t\"ad927e03d1599a78ca2bf0cad2a183dceb71eac0\": \"1970000000000000000000\",\n\t\"ef39ca9173df15531d73e6b72a684b51ba0f2bb4\": \"1598000000000000000000\",\n\t\"6443b8ae639de91cf73c5ae763eeeed3ddbb9253\": \"2000000000000000000000\",\n\t\"8026435aac728d497b19b3e7e57c28c563954f2b\": \"1730000000000000000000\",\n\t\"ed327a14d5cfadd98103fc0999718d7ed70528ea\": \"1440000000000000000000\",\n\t\"38a3dccf2fcfe0c91a2624bd0cbf88ee4a076c33\": \"2000000000000000000000\",\n\t\"f0b1f9e27832c6de6914d70afc238c749995ace4\": \"2000000000000000000000\",\n\t\"770d98d31b4353fceee8560c4ccf803e88c0c4e0\": \"600000000000000000000\",\n\t\"ba1f0e03cb9aa021f4dcebfa94e5c889c9c7bc9e\": \"32200000000000000000000\",\n\t\"233842b1d0692fd11140cf5acda4bf9630bae5f8\": \"2000000000000000000000\",\n\t\"b5dd50a15da34968890a53b4f13fe1af081baaaa\": \"4000000000000000000000\",\n\t\"72072a0ef1cff3d567cdd260e708ddc11cbc9a31\": \"100000000000000000000\",\n\t\"81a88196fac5f23c3e12a69dec4b880eb7d97310\": \"2000000000000000000000\",\n\t\"6c63f84556d290bfcd99e434ee9997bfd779577a\": \"2000000000000000000000\",\n\t\"5f167aa242bc4c189adecb3ac4a7c452cf192fcf\": \"1999980000000000000000\",\n\t\"445cb8de5e3df520b499efc980f52bff40f55c76\": \"2000000000000000000000\",\n\t\"aec27ce2133e82d052520afb5c576d9f7eb93ed2\": \"65232380000000000000000\",\n\t\"07dc2bf83bc6af19a842ffea661af5b41b67fda1\": \"1500000000000000000000\",\n\t\"febd48d0ffdbd5656cd5e686363a61145228f279\": \"2800000000000000000000\",\n\t\"a86db07d9f812f4796622d40e03d135874a88a74\": \"20000000000000000000\",\n\t\"5413c97ffa4a6e2a7bba8961dc9fce8530a787d7\": \"1000000000000000000000\",\n\t\"e2ff9ee4b6ecc14141cc74ca52a9e7a2ee14d908\": \"1400000000000000000000\",\n\t\"2e8eb30a716e5fe15c74233e039bfb1106e81d12\": \"100000000000000000000\",\n\t\"fd88d114220f081cb3d5e15be8152ab07366576a\": \"300000000000000000000\",\n\t\"e408fceaa1b98f3c640f48fcba39f056066d6308\": \"10000000000000000000000\",\n\t\"057dd29f2d19aa3da42327ea50bce86ff5c911d9\": \"4000000000000000000000\",\n\t\"ed1065dbcf9d73c04ffc7908870d881468c1e132\": \"2000000000000000000000\",\n\t\"bbc9d8112e5beb02dd29a2257b1fe69b3536a945\": \"2000000000000000000000\",\n\t\"79c1be19711f73bee4e6316ae7549459aacea2e0\": \"400000000000000000000\",\n\t\"1bcf3441a866bdbe963009ce33c81cbb0261b02c\": \"182000000000000000000\",\n\t\"e2e26e4e1dcf30d048cc6ecf9d51ec1205a4e926\": \"4000000000000000000000\",\n\t\"77701e2c493da47c1b58f421b5495dee45bea39b\": \"6068279000000000000000\",\n\t\"37a05aceb9395c8635a39a7c5d266ae610d10bf2\": \"30000000000000000000000\",\n\t\"c6355ec4768c70a49af69513cd83a5bca7e3b9cd\": \"6000000000000000000000\",\n\t\"e3c0c128327a9ad80148139e269773428e638cb0\": \"2000000000000000000000\",\n\t\"f7f4898c4c526d955f21f055cb6e47b915e51964\": \"2288000000000000000000\",\n\t\"29824e94cc4348bc963279dcdf47391715324cd3\": \"1940000000000000000000\",\n\t\"eaa45cea02d87d2cc8fda9434e2d985bd4031584\": \"1920750000000000000000\",\n\t\"e08b9aba6bd9d28bc2056779d2fbf0f2855a3d9d\": \"2000000000000000000000\",\n\t\"87c498170934b8233d1ad1e769317d5c475f2f40\": \"1015200000000000000000\",\n\t\"352d29a26e8a41818181746467f582e6e84012e0\": \"6000000000000000000000\",\n\t\"403220600a36f73f24e190d1edb2d61be3f41354\": \"304000000000000000000\",\n\t\"0a48296f7631708c95d2b74975bc4ab88ac1392a\": \"5000000000000000000000\",\n\t\"ffe0e997f1977a615f5a315af413fd4869343ba0\": \"100076000000000000000\",\n\t\"ca66b2280fa282c5b67631ce552b62ee55ad8474\": \"1969488000000000000000\",\n\t\"2b6ed29a95753c3ad948348e3e7b1a251080ffb9\": \"250000000000000000000000\",\n\t\"492e70f04d18408cb41e25603730506b35a2876b\": \"39400000000000000000\",\n\t\"0e6baaa3deb989f289620076668618e9ac332865\": \"200000000000000000000\",\n\t\"b753a75f9ed10b21643a0a3dc0517ac96b1a4068\": \"401800000000000000000\",\n\t\"3ad915d550b723415620f5a9b5b88a85f382f035\": \"1000000000000000000000\",\n\t\"c992be59c6721caf4e028f9e8f05c25c55515bd4\": \"20000000000000000000\",\n\t\"02b643d6fabd437a851accbe79abb7fde126dccf\": \"7200000000000000000000\",\n\t\"88797e58675ed5cc4c19980783dbd0c956085153\": \"2000000000000000000000\",\n\t\"ac142eda1157b9a9a64390df7e6ae694fac98905\": \"200000000000000000000\",\n\t\"656579daedd29370d9b737ee3f5cd9d84bc2b342\": \"1430000000000000000000\",\n\t\"9bb9b02a26bfe1ccc3f0c6219e261c397fc5ca78\": \"1337000000000000000000\",\n\t\"bee8d0b008421954f92d000d390fb8f8e658eaee\": \"1000000000000000000000\",\n\t\"7989d09f3826c3e5af8c752a8115723a84d80970\": \"415554000000000000000\",\n\t\"7cd5d81eab37e11e6276a3a1091251607e0d7e38\": \"62856000000000000000\",\n\t\"6ce1b0f6adc47051e8ab38b39edb4186b03babcc\": \"1207800000000000000000\",\n\t\"abfcf5f25091ce57875fc674dcf104e2a73dd2f2\": \"19700000000000000000\",\n\t\"1c3ef05dae9dcbd489f3024408669de244c52a02\": \"20000000000000000000000\",\n\t\"cfa8b37127149bdbfee25c34d878510951ea10eb\": \"2000000000000000000000\",\n\t\"74863acec75d03d53e860e64002f2c165e538377\": \"1000000000000000000000\",\n\t\"59b9e733cba4be00429b4bd9dfa64732053a7d55\": \"20000000000000000000\",\n\t\"aeadfcd0978edad74a32bd01a0a51d37f246e661\": \"260000000000000000000\",\n\t\"08090876baadfee65c3d363ba55312748cfa873d\": \"1700170000000000000000\",\n\t\"e589fa76984db5ec4004b46ee8a59492c30744ce\": \"2800000000000000000000\",\n\t\"3485361ee6bf06ef6508ccd23d94641f814d3e2f\": \"2000000000000000000000\",\n\t\"5cb731160d2e8965670bde925d9de5510935347d\": \"40000000000000000000\",\n\t\"8ef4d8a2c23c5279187b64e96f741404085385f3\": \"299598000000000000000\",\n\t\"e246683cc99db7c4a52bcbacaab0b32f6bfc93d7\": \"2000000000000000000000\",\n\t\"7d273e637ef1eac481119413b91c989dc5eac122\": \"500000000000000000000\",\n\t\"6efba8fb2ac5b6730729a972ec224426a287c3ad\": \"283152000000000000000\",\n\t\"0773eeacc050f74720b4a1bd57895b1cceeb495d\": \"10000000000000000000000\",\n\t\"88a122a2382c523931fb51a0ccad3beb5b7259c3\": \"2000000000000000000000\",\n\t\"b0b779b94bfa3c2e1f587bcc9c7e21789222378f\": \"1550000000000000000000\",\n\t\"86f95c5b11a293940e35c0b898d8b75f08aab06d\": \"29605000000000000000000\",\n\t\"cf2288ef4ebf88e86db13d8a0e0bf52a056582c3\": \"2533000000000000000000\",\n\t\"71ea5b11ad8d29b1a4cb67bf58ca6c9f9c338c16\": \"1600000000000000000000\",\n\t\"9917d68d4af341d651e7f0075c6de6d7144e7409\": \"5660000000000000000000\",\n\t\"1e5800227d4dcf75e30f5595c5bed3f72e341e3b\": \"248300000000000000000\",\n\t\"123759f333e13e3069e2034b4f05398918119d36\": \"20000000000000000000000\",\n\t\"f798d16da4e460c460cd485fae0fa0599708eb82\": \"1000000000000000000000\",\n\t\"864bec5069f855a4fd5892a6c4491db07c88ff7c\": \"1000000000000000000000\",\n\t\"fa283299603d8758e8cab082125d2c8f7d445429\": \"6415633000000000000000\",\n\t\"c811c2e9aa1ac3462eba5e88fcb5120e9f6e2ca2\": \"1400140000000000000000\",\n\t\"61547d376e5369bcf978fc162c3c56ae453547e8\": \"200000000000000000000\",\n\t\"0d747ee5969bf79d57381d6fe3a2406cd0d8ce27\": \"100000000000000000000000\",\n\t\"f8962b75db5d24c7e8b7cef1068c3e67cebb30a5\": \"280000000000000000000\",\n\t\"35bf6688522f35467a7f75302314c02ba176800e\": \"17400000000000000000000\",\n\t\"05cb6c3b0072d3116761b532b218443b53e8f6c5\": \"141722000000000000000000\",\n\t\"91c80caa081b38351d2a0e0e00f80a34e56474c1\": \"1000000000000000000000\",\n\t\"d75a502a5b677287470f65c5aa51b87c10150572\": \"907400000000000000000\",\n\t\"3e194b4ecef8bb711ea2ff24fec4e87bd032f7d1\": \"2575465000000000000000\",\n\t\"736bf1402c83800f893e583192582a134eb532e9\": \"9999996000000000000000\",\n\t\"c2cb1ada5da9a0423873814793f16144ef36b2f3\": \"1334326000000000000000\",\n\t\"efcce06bd6089d0e458ef561f5a689480afe7000\": \"600000000000000000000\",\n\t\"bfe6bcb0f0c07852643324aa5df5fd6225abc3ca\": \"74500000000000000000\",\n\t\"9d799e943e306ba2e5b99c8a6858cbb52c0cf735\": \"300000000000000000000\",\n\t\"f45b1dcb2e41dc27ffa024daadf619c11175c087\": \"19700000000000000000\",\n\t\"08e38ee0ce48c9ca645c1019f73b5355581c56e6\": \"1600000000000000000000\",\n\t\"2cb4c3c16bb1c55e7c6b7a19b127a1ac9390cc09\": \"3397053000000000000000\",\n\t\"bdc02cd4330c93d6fbda4f6db2a85df22f43c233\": \"2000000000000000000000\",\n\t\"acec91ef6941cf630ba9a3e787a012f4a2d91dd4\": \"80000000000000000000000\",\n\t\"27ac073be79ce657a93aa693ee43bf0fa41fef04\": \"50000000000000000000000\",\n\t\"22fe884d9037291b4d52e6285ae68dea0be9ffb5\": \"2000000000000000000000\",\n\t\"c3107a9af3322d5238df0132419131629539577d\": \"492650000000000000000\",\n\t\"b5cac5ed03477d390bb267d4ebd46101fbc2c3da\": \"197000000000000000000\",\n\t\"58fb947364e7695765361ebb1e801ffb8b95e6d0\": \"200000000000000000000\",\n\t\"32860997d730b2d83b73241a25d3667d51c908ef\": \"499938000000000000000\",\n\t\"c79d5062c796dd7761f1f13e558d73a59f82f38b\": \"8000000000000000000000\",\n\t\"fa142fe47eda97e6503b386b18a2bedd73ccb5b1\": \"850080000000000000000\",\n\t\"6ca5de00817de0cedce5fd000128dede12648b3c\": \"20000000000000000000\",\n\t\"214b743955a512de6e0d886a8cbd0282bee6d2a2\": \"2000000000000000000000\",\n\t\"ede79ae1ff4f1606d59270216fa46ab2ddd4ecaa\": \"146000000000000000000\",\n\t\"528101ce46b720a2214dcdae6618a53177ffa377\": \"508876000000000000000\",\n\t\"b5870ce342d43343333673038b4764a46e925f3e\": \"1000000000000000000000\",\n\t\"843bd3502f45f8bc4da370b323bdac3fcf5f19a6\": \"1476000000000000000000\",\n\t\"5067f4549afbfe884c59cbc12b96934923d45db0\": \"1000000000000000000000\",\n\t\"6f2a42e6e033d01061131929f7a6ee1538021e52\": \"2000000000000000000000\",\n\t\"e9e1f7cb00a110edd0ebf8b377ef8a7bb856117f\": \"200000000000000000000\",\n\t\"a387ecde0ee4c8079499fd8e03473bd88ad7522a\": \"1970000000000000000000\",\n\t\"6dff90e6dc359d2590882b1483edbcf887c0e423\": \"1000000000000000000000\",\n\t\"22e512149a18d369b73c71efa43e86c9edabaf1d\": \"1455000000000000000000\",\n\t\"a3203095edb7028e6871ce0a84f548459f83300a\": \"4000000000000000000000\",\n\t\"93b4bf3fdff6de3f4e56ba6d7799dc4b93a6548f\": \"19100000000000000000\",\n\t\"8c75956e8fed50f5a7dd7cfd27da200f6746aea6\": \"1000000000000000000000\",\n\t\"afc8ebe8988bd4105acc4c018e546a1e8f9c7888\": \"500000000000000000000\",\n\t\"bf9acd4445d9c9554689cabbbab18800ff1741c2\": \"1000000000000000000000\",\n\t\"603f2fab7afb6e017b94766069a4b43b38964923\": \"1656954000000000000000\",\n\t\"a1f765c44fe45f790677944844be4f2d42165fbd\": \"3687750000000000000000\",\n\t\"4dc9d5bb4b19cecd94f19ec25d200ea72f25d7ed\": \"2000000000000000000000\",\n\t\"48f60a35484fe7792bcc8a7b6393d0dda1f6b717\": \"3600000000000000000000\",\n\t\"588ed990a2aff44a94105d58c305257735c868ac\": \"16100000000000000000000\",\n\t\"710be8fd5e2918468be2aabea80d828435d79612\": \"17600000000000000000\",\n\t\"03ea6d26d080e57aee3926b18e8ed73a4e5b2826\": \"200000000000000000000\",\n\t\"20824ba1dbebbef9846ef3d0f6c1b017e6912ec4\": \"7170194000000000000000\",\n\t\"f7500c166f8bea2f82347606e5024be9e4f4ce99\": \"20000000000000000000\",\n\t\"9d369165fb70b81a3a765f188fd60cbe5e7b0968\": \"2000000000000000000000\",\n\t\"6fddbd9bca66e28765c2162c8433548c1052ed11\": \"82720000000000000000000\",\n\t\"8b81156e698639943c01a75272ad3d35851ab282\": \"344946000000000000000\",\n\t\"75804aac64b4199083982902994d9c5ed8828f11\": \"557800000000000000000\",\n\t\"d6e8e97ae9839b9ee507eedb28edfb7477031439\": \"2000000000000000000000\",\n\t\"6c808cabb8ff5fbb6312d9c8e84af8cf12ef0875\": \"4000086000000000000000\",\n\t\"afa539586e4719174a3b46b9b3e663a7d1b5b987\": \"5000000000000000000000\",\n\t\"f8a065f287d91d77cd626af38ffa220d9b552a2b\": \"1910000000000000000000\",\n\t\"30e60900cacc7203f314dc604347255167fc2a0f\": \"2000000000000000000000\",\n\t\"796f87ba617a2930b1670be92ed1281fb0b346e1\": \"128400000000000000000\",\n\t\"f114ff0d0f24eff896edde5471dea484824a99b3\": \"13700000000000000000\",\n\t\"0b80fc70282cbdd5fde35bf78984db3bdb120188\": \"1000160000000000000000\",\n\t\"da7ad025ebde25d22243cb830ea1d3f64a566323\": \"500000000000000000000\",\n\t\"65a52141f56bef98991724c6e7053381da8b5925\": \"60140000000000000000\",\n\t\"bbc8eaff637e94fcc58d913c7770c88f9b479277\": \"200000000000000000000\",\n\t\"0469e8c440450b0e512626fe817e6754a8152830\": \"2000000000000000000000\",\n\t\"0727be0a2a00212048b5520fbefb953ebc9d54a0\": \"10000000000000000000000\",\n\t\"7d858493f07415e0912d05793c972113eae8ae88\": \"1818000000000000000000\",\n\t\"7091303116d5f2389b23238b4d656a8596d984d3\": \"1094014000000000000000\",\n\t\"3702e704cc21617439ad4ea27a5714f2fda1e932\": \"1000000000000000000000\",\n\t\"b87de1bcd29269d521b8761cc39cfb4319d2ead5\": \"1000000000000000000000\",\n\t\"f639ac31da9f67271bd10402b7654e5ce763bd47\": \"399996000000000000000\",\n\t\"e7735ec76518fc6aa92da8715a9ee3f625788f13\": \"1997803000000000000000\",\n\t\"51277fe7c81eebd252a03df69a6b9f326e272207\": \"59965000000000000000\",\n\t\"3b8098533f7d9bdcd307dbb23e1777ca18418936\": \"2000000000000000000000\",\n\t\"2cba6d5d0dc204ea8a25ada2e26f5675bd5f2fdc\": \"1330755000000000000000\",\n\t\"5c3c1c645b917543113b3e6c1c054da1fe742b9a\": \"800000000000000000000\",\n\t\"5ecdbaeab9106ffe5d7b519696609a05baeb85ad\": \"20000000000000000000\",\n\t\"45a820a0672f17dc74a08112bc643fd1167736c3\": \"199943000000000000000\",\n\t\"beef94213879e02622142bea61290978939a60d7\": \"5728109000000000000000\",\n\t\"6cd212aee04e013f3d2abad2a023606bfb5c6ac7\": \"1999944000000000000000\",\n\t\"92698e345378c62d8eda184d94366a144b0c105b\": \"1400000000000000000000\",\n\t\"2d5b42fc59ebda0dfd66ae914bc28c1b0a6ef83a\": \"206764195000000000000000\",\n\t\"b7a6791c16eb4e2162f14b6537a02b3d63bfc602\": \"780700000000000000000\",\n\t\"fa105f1a11b6e4b1f56012a27922e2ac2da4812f\": \"9550000000000000000000\",\n\t\"2306df931a940d58c01665fa4d0800802c02edfe\": \"1000000000000000000000\",\n\t\"f37bf78c5875154711cb640d37ea6d28cfcb1259\": \"200000000000000000000\",\n\t\"66201bd227ae6dc6bdfed5fbde811fecfe5e9dd9\": \"594808000000000000000\",\n\t\"2bafbf9e9ed2c219f7f2791374e7d05cb06777e7\": \"220000000000000000000\",\n\t\"8e9b35ad4a0a86f758446fffde34269d940ceacd\": \"4000000000000000000000\",\n\t\"1b43232ccd4880d6f46fa751a96cd82473315841\": \"80000000000000000000\",\n\t\"6eefdc850e87b715c72791773c0316c3559b58a4\": \"4000000000000000000000\",\n\t\"f2c03e2a38998c21648760f1e5ae7ea3077d8522\": \"2642456000000000000000\",\n\t\"0625d06056968b002206ff91980140242bfaa499\": \"1000000000000000000000\",\n\t\"6158e107c5eb54cb7604e0cd8dc1e07500d91c3c\": \"50000000000000000000\",\n\t\"02477212ffdd75e5155651b76506b1646671a1eb\": \"1760000000000000000000\",\n\t\"fa44a855e404c86d0ca8ef3324251dfb349c539e\": \"1552000000000000000000\",\n\t\"49897fe932bbb3154c95d3bce6d93b6d732904dd\": \"4000000000000000000000\",\n\t\"9b6641b13e172fc072ca4b8327a3bc28a15b66a9\": \"120000000000000000000\",\n\t\"a46b4387fb4dcce011e76e4d73547d4481e09be5\": \"1337000000000000000000\",\n\t\"72bb27cb99f3e2c2cf90a98f707d30e4a201a071\": \"1640000000000000000000\",\n\t\"b6bfe1c3ef94e1846fb9e3acfe9b50c3e9069233\": \"1999944000000000000000\",\n\t\"e6cb3f3124c9c9cc3834b1274bc3336456a38bac\": \"427382000000000000000\",\n\t\"fcbc5c71ace79741450b012cf6b8d3f17db68a70\": \"9550000000000000000000\",\n\t\"15dbb48c98309764f99ced3692dcca35ee306bac\": \"150000000000000000000000\",\n\t\"2e10910ba6e0bc17e055556614cb87090f4d7e5b\": \"200000000000000000000\",\n\t\"e5fbe34984b637196f331c679d0c0c47d83410e1\": \"2000050000000000000000\",\n\t\"6d120f0caae44fd94bcafe55e2e279ef96ba5c7a\": \"4000000000000000000000\",\n\t\"aa5afcfd8309c2df9d15be5e6a504e7d706624c5\": \"5846763000000000000000\",\n\t\"37959c20b7e9931d72f5a8ae869dafddad3b6d5c\": \"200000000000000000000\",\n\t\"b041310fe9eed6864cedd4bee58df88eb4ed3cac\": \"10000000000000000000000\",\n\t\"986df47e76e4d7a789cdee913cc9831650936c9d\": \"5000000000000000000000\",\n\t\"35aaa0465d1c260c420fa30e2629869fb6559207\": \"704976000000000000000\",\n\t\"7f655c6789eddf455cb4b88099720639389eebac\": \"6000000000000000000000\",\n\t\"9e3eb509278fe0dcd8e0bbe78a194e06b6803943\": \"940000000000000000000\",\n\t\"3e9410d3b9a87ed5e451a6b91bb8923fe90fb2b5\": \"200000000000000000000\",\n\t\"9e960dcd03d5ba99cb115d17ff4c09248ad4d0be\": \"200000000000000000000\",\n\t\"f057aa66ca767ede124a1c5b9cc5fc94ef0b0137\": \"2077730000000000000000\",\n\t\"f38a6ca80168537e974d14e1c3d13990a44c2c1b\": \"6000000000000000000000\",\n\t\"229e430de2b74f442651ddcdb70176bc054cad54\": \"13545000000000000000\",\n\t\"27bf9f44ba7d05c33540c3a53bb02cbbffe7c3c6\": \"2000000000000000000000\",\n\t\"10389858b800e8c0ec32f51ed61a355946cc409b\": \"200000000000000000000\",\n\t\"fd2929271e9d2095a264767e7b0df52ea0d1d400\": \"3000040000000000000000\",\n\t\"44250d476e062484e9080a3967bf3a4a732ad73f\": \"20000000000000000000\",\n\t\"0c67033dd8ee7f0c8ae534d42a51f7d9d4f7978f\": \"200000000000000000000\",\n\t\"e083d34863e0e17f926b7928edff317e998e9c4b\": \"400000000000000000000\",\n\t\"7f7192c0df1c7db6d9ed65d71184d8e4155a17ba\": \"79800000000000000000\",\n\t\"51e7b55c2f9820eed73884361b5066a59b6f45c6\": \"2000000000000000000000\",\n\t\"4fa983bb5e3073a8edb557effeb4f9fb1d60ef86\": \"1599800000000000000000\",\n\t\"5a5ee8e9bb0e8ab2fecb4b33d29478be50bbd44b\": \"776000000000000000000\",\n\t\"1f3959fc291110e88232c36b7667fc78a379613f\": \"18200000000000000000\",\n\t\"2d7d5c40ddafc450b04a74a4dabc2bb5d665002e\": \"2000000000000000000000\",\n\t\"5215183b8f80a9bc03d26ce91207832a0d39e620\": \"1000000000000000000000\",\n\t\"5607590059a9fec1881149a44b36949aef85d560\": \"2000000000000000000000\",\n\t\"f7c50f922ad16b61c6d1baa045ed816815bac48f\": \"12566370000000000000000\",\n\t\"da10978a39a46ff0bb848cf65dd9c77509a6d70e\": \"2000000000000000000000\",\n\t\"a7dcbba9b9bf6762c145416c506a71e3b497209c\": \"1999944000000000000000\",\n\t\"54e01283cc8b384538dd646770b357c960d6cacd\": \"5000000000000000000000\",\n\t\"78cf8336b328db3d87813a472b9e89b75e0cf3bc\": \"1000000000000000000000\",\n\t\"ba24fc436753a739db2c8d40e6d4d04c528e86fa\": \"13000000000000000000000\",\n\t\"dfe929a61c1b38eddbe82c25c2d6753cb1e12d68\": \"402500000000000000000\",\n\t\"2b49fba29830360fcdb6da23bbfea5c0bbac5281\": \"20000000000000000000\",\n\t\"76becae4a31d36f3cb577f2a43594fb1abc1bb96\": \"24860000000000000000000\",\n\t\"e0cf698a053327ebd16b7d7700092fe2e8542446\": \"95275000000000000000\",\n\t\"a3802d8a659e89a2c47e905430b2a827978950a7\": \"1000000000000000000000\",\n\t\"75636cdb109050e43d5d6ec47e359e218e857eca\": \"22886800000000000000000\",\n\t\"3d813ff2b6ed57b937dabf2b381d148a411fa085\": \"100000000000000000000\",\n\t\"a9252551a624ae513719dabe5207fbefb2fd7749\": \"40000000000000000000\",\n\t\"c749668042e71123a648975e08ed6382f83e05e2\": \"14000000000000000000000\",\n\t\"04eca501630abce35218b174956b891ba25efb23\": \"1000060000000000000000\",\n\t\"790f91bd5d1c5cc4739ae91300db89e1c1303c93\": \"2000000000000000000000\",\n\t\"009560a3de627868f91fa8bfe1c1b7afaf08186b\": \"524000000000000000000\",\n\t\"1329dd19cd4baa9fc64310efeceab22117251f12\": \"200000000000000000000\",\n\t\"7005a772282b1f62afda63f89b5dc6ab64c84cb9\": \"18000000000000000000000\",\n\t\"abfe936425dcc7b74b955082bbaaf2a11d78bc05\": \"1400000000000000000000\",\n\t\"97d0d9725e3b70e675843173938ed371b62c7fac\": \"170000000000000000000\",\n\t\"41ed2d8e7081482c919fc23d8f0091b3c82c4685\": \"1295460000000000000000\",\n\t\"992365d764c5ce354039ddfc912e023a75b8e168\": \"18200000000000000000\",\n\t\"e1c607c0a8a060da8f02a8eb38a013ea8cda5b8c\": \"805000000000000000000\",\n\t\"3b2c45990e21474451cf4f59f01955b331c7d7c9\": \"2000000000000000000000\",\n\t\"29ac2b458454a36c7e96c73a8667222a12242c71\": \"4000000000000000000000\",\n\t\"b8555010776e3c5cb311a5adeefe9e92bb9a64b9\": \"4000000000000000000000\",\n\t\"30380087786965149e81423b15e313ba32c5c783\": \"18200000000000000000\",\n\t\"a2f86bc061884e9eef05640edd51a2f7c0596c69\": \"2000050000000000000000\",\n\t\"9f98eb34d46979b0a6de8b05aa533a89b825dcf1\": \"86500000000000000000\",\n\t\"c81fb7d20fd2800192f0aac198d6d6a37d3fcb7d\": \"259500000000000000000\",\n\t\"a4035ab1e5180821f0f380f1131b7387c8d981cd\": \"20000000000000000000\",\n\t\"782f52f0a676c77716d574c81ec4684f9a020a97\": \"850055000000000000000\",\n\t\"261e0fa64c51137465eecf5b90f197f7937fdb05\": \"18000000000000000000000\",\n\t\"276fd7d24f8f883f5a7a28295bf17151c7a84b03\": \"2000000000000000000000\",\n\t\"a1f5b840140d5a9acef402ac3cc3886a68cad248\": \"2000000000000000000000\",\n\t\"d2bf67a7f3c6ce56b7be41675dbbadfe7ea93a33\": \"400000000000000000000\",\n\t\"8ee584337ddbc80f9e3498df55f0a21eacb57fb1\": \"20000000000000000000\",\n\t\"34393c5d91b9de597203e75bac4309b5fa3d28c3\": \"194000000000000000000\",\n\t\"114cbbbf6fb52ac414be7ec61f7bb71495ce1dfa\": \"3000000000000000000000\",\n\t\"ab7c42c5e52d641a07ad75099c62928b7f86622f\": \"335940000000000000000\",\n\t\"80bf995ed8ba92701d10fec49f9e7d014dbee026\": \"572153000000000000000\",\n\t\"4a192035e2619b24b0709d56590e9183ccf2c1d9\": \"10000000000000000000000\",\n\t\"376cd7577383e902951b60a2017ba7ea29e33576\": \"2000000000000000000000\",\n\t\"f5437e158090b2a2d68f82b54a5864b95dd6dbea\": \"4010732000000000000000\",\n\t\"13a5eecb38305df94971ef2d9e179ae6cebab337\": \"330000000000000000000\",\n\t\"efc8cf1963c9a95267b228c086239889f4dfd467\": \"10000000000000000000000\",\n\t\"db77b88dcb712fd17ee91a5b94748d720c90a994\": \"2000000000000000000000\",\n\t\"9aaafa0067647ed999066b7a4ca5b4b3f3feaa6f\": \"1000000000000000000000\",\n\t\"ae36f7452121913e800e0fcd1a65a5471c23846f\": \"164000000000000000000\",\n\t\"b124bcb6ffa430fcae2e86b45f27e3f21e81ee08\": \"2000000000000000000000\",\n\t\"f2813a64c5265d020235cb9c319b6c96f906c41e\": \"350000000000000000000\",\n\t\"e848ca7ebff5c24f9b9c316797a43bf7c356292d\": \"114000000000000000000\",\n\t\"21a6feb6ab11c766fdd977f8df4121155f47a1c0\": \"57200000000000000000\",\n\t\"e95e92bbc6de07bf3a660ebf5feb1c8a3527e1c5\": \"18200000000000000000\",\n\t\"0b369e002e1b4c7913fcf00f2d5e19c58165478f\": \"64520000000000000000\",\n\t\"0909648c18a3ce5bae7a047ec2f868d24cdda81d\": \"3820000000000000000000\",\n\t\"d32b45564614516c91b07fa9f72dcf787cce4e1c\": \"291000000000000000000\",\n\t\"cf1bdb799b2ea63ce134668bdc198b54840f180b\": \"18200000000000000000\",\n\t\"ae062c448618643075de7a0030342dced63dbad7\": \"825982000000000000000\",\n\t\"99dfd0504c06c743e46534fd7b55f1f9c7ec3329\": \"2000000000000000000000\",\n\t\"87fc4635263944ce14a46c75fa4a821f39ce7f72\": \"20000000000000000000\",\n\t\"27c2d7ca504daa3d9066dc09137dc42f3aaab452\": \"600000000000000000000\",\n\t\"cc60f836acdef3548a1fefcca13ec6a937db44a0\": \"86500000000000000000\",\n\t\"c910a970556c9716ea53af66ddef93143124913d\": \"1580000000000000000000\",\n\t\"8173c835646a672e0152be10ffe84162dd256e4c\": \"492000000000000000000\",\n\t\"e989733ca1d58d9e7b5029ba5d444858bec03172\": \"581595000000000000000\",\n\t\"86806474c358047d9406e6a07f40945bc8328e67\": \"6884000000000000000000\",\n\t\"5395a4455d95d178b4532aa4725b193ffe512961\": \"1000000000000000000000\",\n\t\"56397638bb3cebf1f62062794b5eb942f916171d\": \"2000000000000000000000\",\n\t\"6958f83bb2fdfb27ce0409cd03f9c5edbf4cbedd\": \"20000000000000000000000\",\n\t\"26ff0a51e7cece8400276978dbd6236ef162c0e6\": \"100020000000000000000000\",\n\t\"4ca783b556e5bf53aa13c8116613d65782c9b642\": \"25200000000000000000000\",\n\t\"15a0aec37ff9ff3d5409f2a4f0c1212aaccb0296\": \"1000000000000000000000\",\n\t\"50378af7ef54043f892ab7ce97d647793511b108\": \"19700000000000000000\",\n\t\"e7c6b5fc05fc748e5b4381726449a1c0ad0fb0f1\": \"2000000000000000000000\",\n\t\"5317ecb023052ca7f5652be2fa854cfe4563df4d\": \"499986000000000000000\",\n\t\"c94f7c35c027d47df8ef4f9df85a9248a17dd23b\": \"29944000000000000000\",\n\t\"6a63fc89abc7f36e282d80787b7b04afd6553e71\": \"160000000000000000000\",\n\t\"5fd3d6777ec2620ae83a05528ed425072d3ca8fd\": \"2000000000000000000000\",\n\t\"29adcf83b6b20ac6a434abb1993cbd05c60ea2e4\": \"10000000000000000000000\",\n\t\"8c6f9f4e5b7ae276bf58497bd7bf2a7d25245f64\": \"2730000000000000000000\",\n\t\"d94a57882a52739bbe2a0647c80c24f58a2b4f1c\": \"1341230000000000000000\",\n\t\"7286e89cd9de8f7a8a00c86ffdb53992dd9251d1\": \"1940000000000000000000\",\n\t\"5773b6026721a1dd04b7828cd62b591bfb34534c\": \"27000000000000000000000\",\n\t\"11fefb5dc1a4598aa712640c517775dfa1d91f8c\": \"10000000000000000000000\",\n\t\"c6e324beeb5b36765ecd464260f7f26006c5c62e\": \"2000000000000000000000\",\n\t\"118fbd753b9792395aef7a4d78d263cdcaabd4f7\": \"999800000000000000000\",\n\t\"f8298591523e50b103f0b701d623cbf0f74556f6\": \"200000000000000000000\",\n\t\"ab0ced762e1661fae1a92afb1408889413794825\": \"1910000000000000000000\",\n\t\"fa67b67b4f37a0150915110ede073b05b853bda2\": \"647490000000000000000\",\n\t\"ca122cf0f2948896b74843f49afed0ba1618eed7\": \"560000000000000000000\",\n\t\"186b95f8e5effddcc94f1a315bf0295d3b1ea588\": \"1999944000000000000000\",\n\t\"2915624bcb679137b8dae9ab57d11b4905eaee4b\": \"20000000000000000000\",\n\t\"0c6845bf41d5ee273c3ee6b5b0d69f6fd5eabbf7\": \"3000026000000000000000\",\n\t\"cb7479109b43b26657f4465f4d18c6f974be5f42\": \"1820000000000000000000\",\n\t\"8dd6a9bae57f518549ada677466fea8ab04fd9b4\": \"4000000000000000000000\",\n\t\"34958a46d30e30b273ecc6e5d358a212e5307e8c\": \"2000000000000000000000\",\n\t\"2003717907a72560f4307f1beecc5436f43d21e7\": \"500000000000000000000\",\n\t\"55ab99b0e0e55d7bb874b7cfe834de631c97ec23\": \"1031400000000000000000\",\n\t\"79b48d2d6137c3854d611c01ea42427a0f597bb7\": \"191000000000000000000\",\n\t\"d609ec0be70d0ad26f6e67c9d4762b52ee51122c\": \"1000000000000000000000\",\n\t\"e8c3f045bb7d38c9d2f395b0ba8492b253230901\": \"9000000000000000000000\",\n\t\"aaca60d9d700e78596bbbbb1f1e2f70f4627f9d8\": \"999996000000000000000\",\n\t\"89d75b8e0831e46f80bc174188184e006fde0eae\": \"1000000000000000000000\",\n\t\"b3667894b7863c068ad344873fcff4b5671e0689\": \"20000000000000000000000\",\n\t\"bc1609d685b76b48ec909aa099219022f89b2ccd\": \"1182000000000000000000\",\n\t\"88ee7f0efc8f778c6b687ec32be9e7d6f020b674\": \"2000000000000000000000\",\n\t\"470ac5d1f3efe28f3802af925b571e63868b397d\": \"2000000000000000000000\",\n\t\"abf8ffe0708a99b528cc1ed4e9ce4b0d0630be8c\": \"2263600000000000000000\",\n\t\"8cee38d6595788a56e3fb94634b3ffe1fbdb26d6\": \"20000000000000000000000\",\n\t\"19798cbda715ea9a9b9d6aab942c55121e98bf91\": \"1200000000000000000000\",\n\t\"e25a167b031e84616d0f013f31bda95dcc6350b9\": \"10560000000000000000000\",\n\t\"6196c3d3c0908d254366b7bca55745222d9d4db1\": \"4000000000000000000000\",\n\t\"e8e9850586e94f5299ab494bb821a5f40c00bd04\": \"3820000000000000000000\",\n\t\"1059cbc63e36c43e88f30008aca7ce058eeaa096\": \"100000000000000000000000\",\n\t\"c4f2913b265c430fa1ab8adf26c333fc1d9b66f2\": \"20000000000000000000\",\n\t\"26e9e2ad729702626417ef25de0dc800f7a779b3\": \"1000000000000000000000\",\n\t\"0dfbd4817050d91d9d625c02053cf61a3ee28572\": \"340000000000000000000\",\n\t\"709fe9d2c1f1ce42207c9585044a60899f35942f\": \"2000000000000000000000\",\n\t\"7ad82caea1a8b4ed05319b9c9870173c814e06ee\": \"616000000000000000000\",\n\t\"2a595f16eee4cb0c17d9a2d939b3c10f6c677243\": \"1100000000000000000000\",\n\t\"a8f89dd5cc6e64d7b1eeace00702022cd7d2f03d\": \"700000000000000000000\",\n\t\"c0a6cbad77692a3d88d141ef769a99bb9e3c9951\": \"100000000000000000000\",\n\t\"868c23be873466d4c74c220a19b245d1787e807f\": \"1366481000000000000000\",\n\t\"2905b192e83ce659aa355b9d0c204e3e95f9bb9a\": \"2160817000000000000000\",\n\t\"50b9fef0a1329b02d16506255f5a2db71ec92d1f\": \"1325464000000000000000\",\n\t\"fc10b7a67b3268d5331bfb6a14def5ea4a162ca3\": \"200000000000000000000\",\n\t\"85eb256b51c819d60ea61a82d12c9358d59c1cae\": \"460000000000000000000\",\n\t\"75de7e9352e90b13a59a5878ffecc7831cac4d82\": \"2740000000000000000000\",\n\t\"d32b2c79c36478c5431901f6d700b04dbe9b8810\": \"396000000000000000000\",\n\t\"2d0326b23f0409c0c0e9236863a133075a94ba18\": \"210380000000000000000\",\n\t\"d2e21ed56868fab28e0947927adaf29f23ebad6c\": \"1994000000000000000000\",\n\t\"2ad6c9d10c261819a1a0ca2c48d8c7b2a71728df\": \"1000000000000000000000\",\n\t\"7d445267c59ab8d2a2d9e709990e09682580c49f\": \"1000000000000000000000\",\n\t\"b6047cdf932db3e4045f4976122341537ed5961e\": \"20000000000000000000\",\n\t\"2b3cf97311ff30f460945a9d8099f4a88e26d456\": \"2000000000000000000000\",\n\t\"7f4f593b618c330ba2c3d5f41eceeb92e27e426c\": \"2775000000000000000000\",\n\t\"72a2fc8675feb972fa41b50dffdbbae7fa2adfb7\": \"2853840000000000000000\",\n\t\"076561a856455d7ef86e63f87c73dbb628a55f45\": \"900000000000000000000\",\n\t\"03d1724fd00e54aabcd2de2a91e8462b1049dd3a\": \"2640000000000000000000\",\n\t\"7ea0f96ee0a573a330b56897761f3d4c0130a8e3\": \"1337000000000000000000\",\n\t\"fe65c4188d7922576909642044fdc52395560165\": \"4000000000000000000000\",\n\t\"57883010b4ac857fedac03eab2551723a8447ffb\": \"1000000000000000000000\",\n\t\"0729a8a4a5ba23f579d0025b1ad0f8a0d35cdfd2\": \"9700000000000000000000\",\n\t\"e75c1fb177089f3e58b1067935a6596ef1737fb5\": \"99910000000000000000\",\n\t\"e0e978753d982f7f9d1d238a18bd4889aefe451b\": \"9700000000000000000000\",\n\t\"5620f46d1451c2353d6243a5d4b427130be2d407\": \"60000000000000000000\",\n\t\"f3d688f06bbdbf50f9932c4145cbe48ecdf68904\": \"20000000000000000000\",\n\t\"3aa948ea02397755effb2f9dc9392df1058f7e33\": \"850000000000000000000\",\n\t\"20d1417f99c569e3beb095856530fe12d0fceaaa\": \"1182175000000000000000\",\n\t\"ac77bdf00fd5985b5db12bbef800380abc2a0677\": \"1000000000000000000000\",\n\t\"267a7e6e82e1b91d51deddb644f0e96dbb1f7f7e\": \"20000000000000000000\",\n\t\"4bbcbf38b3c90163a84b1cd2a93b58b2a3348d87\": \"8000000000000000000000\",\n\t\"4c6b93a3bec16349540cbfcae96c9621d6645010\": \"2000000000000000000000\",\n\t\"c9308879056dfe138ef8208f79a915c6bc7e70a8\": \"10000000000000000000000\",\n\t\"c48b693cacefdbd6cb5d7895a42e3196327e261c\": \"1000000000000000000000\",\n\t\"a0951970dfd0832fb83bda12c23545e79041756c\": \"600000000000000000000\",\n\t\"7cdf74213945953db39ad0e8a9781add792e4d1d\": \"2000000000000000000000\",\n\t\"75621865b6591365606ed378308c2d1def4f222c\": \"3100000000000000000000\",\n\t\"67d6a8aa1bf8d6eaf7384e993dfdf10f0af68a61\": \"198067000000000000000\",\n\t\"8f0af37566d152802f1ae8f928b25af9b139b448\": \"200000000000000000000\",\n\t\"2c6afcd4037c1ed14fa74ff6758e0945a185a8e8\": \"17600000000000000000\",\n\t\"c1b2aa8cb2bf62cdc13a47ecc4657facaa995f98\": \"1000129000000000000000\",\n\t\"9e8144e08e89647811fe6b72d445d6a5f80ad244\": \"10000000000000000000000\",\n\t\"e04ff5e5a7e2af995d8857ce0290b53a2b0eda5d\": \"1000000000000000000000\",\n\t\"03dedfcd0b3c2e17c705da248790ef98a6bd5751\": \"1337000000000000000000\",\n\t\"698a8a6f01f9ab682f637c7969be885f6c5302bf\": \"19400000000000000000\",\n\t\"d82c6fedbdac98af2eed10b00f32b00056ca5a6d\": \"200000000000000000000\",\n\t\"2697b339813b0c2d964b2471eb1c606f4ecb9616\": \"1154000000000000000000\",\n\t\"987c9bcd6e3f3990a52be3eda4710c27518f4f72\": \"400000000000000000000\",\n\t\"c5d48ca2db2f85d8c555cb0e9cfe826936783f9e\": \"200000000000000000000\",\n\t\"da214c023e2326ff696c00393168ce46ffac39ec\": \"1000000000000000000000\",\n\t\"86570ab259c9b1c32c9729202f77f590c07dd612\": \"200000000000000000000\",\n\t\"a646a95c6d6f59f104c6541d7760757ab392b08c\": \"4200000000000000000000\",\n\t\"1933e334c40f3acbad0c0b851158206924beca3a\": \"7551541000000000000000\",\n\t\"3552a496eba67f12be6eedab360cd13661dc7480\": \"300000000000000000000\",\n\t\"2a9c96c19151ffcbe29a4616d0c52b3933b4659f\": \"69263000000000000000\",\n\t\"3b7b8e27de33d3ce7961b98d19a52fe79f6c25be\": \"100000000000000000000000\",\n\t\"a1911405cf6e999ed011f0ddcd2a4ff7c28f2526\": \"40000000000000000000\",\n\t\"0cae108e6db99b9e637876b064c6303eda8a65c8\": \"3000000000000000000000\",\n\t\"3883becc08b9be68ad3b0836aac3b620dc0017ef\": \"2000000000000000000000\",\n\t\"d0abcc70c0420e0e172f97d43b87d5e80c336ea9\": \"10000000000000000000000\",\n\t\"cbf16a0fe2745258cd52db2bf21954c975fc6a15\": \"300000000000000000000\",\n\t\"1b23cb8663554871fbbe0d9e60397efb6faedc3e\": \"200000000000000000000\",\n\t\"fbede32c349f3300ef4cd33b4de7dc18e443d326\": \"3160000000000000000000\",\n\t\"5e806e845730f8073e6cc9018ee90f5c05f909a3\": \"9480000000000000000000\",\n\t\"425c338a1325e3a1578efa299e57d986eb474f81\": \"2000000000000000000000\",\n\t\"8bf297f8f453523ed66a1acb7676856337b93bf0\": \"4000000000000000000000\",\n\t\"38e8a31af2d265e31a9fff2d8f46286d1245a467\": \"20000000000000000000\",\n\t\"7edafba8984baf631a820b6b92bbc2c53655f6bd\": \"2000000000000000000000\",\n\t\"aa0200f1d17e9c54da0647bb96395d57a78538d8\": \"1056000000000000000000\",\n\t\"433eb94a339086ed12d9bde9cd1d458603c97dd6\": \"100000000000000000000000\",\n\t\"cd7e47909464d871b9a6dc76a8e9195db3485e7a\": \"9850000000000000000000\",\n\t\"5975d78d974ee5bb9e4d4ca2ae77c84b9c3b4b82\": \"1370000000000000000000\",\n\t\"cea2896623f4910287a2bdc5be83aea3f2e6de08\": \"9359000000000000000000\",\n\t\"cb4ad0c723da46ab56d526da0c1d25c73daff10a\": \"510000000000000000000\",\n\t\"e2cf360aa2329eb79d2bf7ca04a27a17c532e4d8\": \"102000000000000000000\",\n\t\"ea60549ec7553f511d2149f2d4666cbd9243d93c\": \"2000000000000000000000\",\n\t\"cbb7be17953f2ccc93e1bc99805bf45511434e4c\": \"50440000000000000000000\",\n\t\"3549bd40bbbc2b30095cac8be2c07a0588e0aed6\": \"20000000000000000000\",\n\t\"6510df42a599bcb0a519cca961b488759a6f6777\": \"2000000000000000000000\",\n\t\"ed12a1ba1fb8adfcb20dfa19582e525aa3b74524\": \"6685000000000000000000\",\n\t\"135eb8c0e9e101deedec11f2ecdb66ae1aae8867\": \"20000000000000000000000\",\n\t\"ee906d7d5f1748258174be4cbc38930302ab7b42\": \"200000000000000000000\",\n\t\"253f1e742a2cec86b0d7b306e5eacb6ccb2f8554\": \"20040000000000000000000\",\n\t\"ecd1a62802351a41568d23033004acc6c005a5d3\": \"50000000000000000000\",\n\t\"558c54649a8a6e94722bd6d21d14714f71780534\": \"2000000000000000000000\",\n\t\"ca657ec06fe5bc09cf23e52af7f80cc3689e6ede\": \"900000000000000000000\",\n\t\"74bf7a5ab59293149b5c60cf364263e5ebf1aa0d\": \"115800000000000000000\",\n\t\"7a6d781c77c4ba1fcadf687341c1e31799e93d27\": \"274000000000000000000\",\n\t\"77028e409cc43a3bd33d21a9fc53ec606e94910e\": \"3880000000000000000000\",\n\t\"4781a10a4df5eebc82f4cfe107ba1d8a7640bd66\": \"1790000000000000000000\",\n\t\"78e08bc533413c26e291b3143ffa7cc9afb97b78\": \"200000000000000000000\",\n\t\"03ef6ad20ff7bd4f002bac58d47544cf879ae728\": \"6895000000000000000000\",\n\t\"0e3696cf1f4217b163d1bc12a5ea730f1c32a14a\": \"4000000000000000000000\",\n\t\"825135b1a7fc1605614c8aa4d0ac6dbad08f480e\": \"1430000000000000000000\",\n\t\"286b186d61ea1fd78d9930fe12b06537b05c3d51\": \"1000000000000000000000\",\n\t\"8d6657f59711b1f803c6ebef682f915b62f92dc9\": \"2000000000000000000000\",\n\t\"da8bbee182e455d2098acb338a6d45b4b17ed8b6\": \"2000000000000000000000\",\n\t\"3f2da093bb16eb064f8bfa9e30b929d15f8e1c4c\": \"2000000000000000000000\",\n\t\"f5d9cf00d658dd45517a48a9d3f5f633541a533d\": \"116400000000000000000\",\n\t\"c5f64babb7033142f20e46d7aa6201ed86f67103\": \"2000000000000000000000\",\n\t\"a2e2b5941e0c01944bfe1d5fb4e8a34b922ccfb1\": \"200000000000000000000\",\n\t\"6114b0eae5576903f80bfb98842d24ed92237f1e\": \"100000000000000000000\",\n\t\"38df0c4abe7ded5fe068eadf154ac691774324a4\": \"1790000000000000000000\",\n\t\"1c2010bd662df417f2a271879afb13ef4c88a3ae\": \"4000000000000000000000\",\n\t\"918967918cd897dd0005e36dc6c883ef438fc8c7\": \"140000000000000000000\",\n\t\"a522de7eb6ae1250522a513133a93bd42849475c\": \"20000000000000000000000\",\n\t\"7de442c82386154d2e993cbd1280bb7ca6b12ada\": \"4002000000000000000000\",\n\t\"66424bd8785b8cb461102a900283c35dfa07ef6a\": \"40221000000000000000\",\n\t\"7bbbec5e70bdead8bb32b42805988e9648c0aa97\": \"1000076000000000000000\",\n\t\"fec06fe27b44c784b2396ec92f7b923ad17e9077\": \"2000000000000000000000\",\n\t\"95d550427b5a514c751d73a0f6d29fb65d22ed10\": \"300000000000000000000\",\n\t\"8dde60eb08a099d7daa356daaab2470d7b025a6b\": \"197000000000000000000\",\n\t\"81bccbff8f44347eb7fca95b27ce7c952492aaad\": \"152240000000000000000\",\n\t\"3995e096b08a5a726800fcd17d9c64c64e088d2b\": \"200000000000000000000\",\n\t\"4ee13c0d41200b46d19dee5c4bcec71d82bb8e38\": \"7893915000000000000000\",\n\t\"c41461a3cfbd32c9865555a4813137c076312360\": \"999999000000000000000\",\n\t\"3300fb149aded65bcba6c04e9cd6b7a03b893bb1\": \"18200000000000000000\",\n\t\"29f9286c0e738d1721a691c6b95ab3d9a797ede8\": \"200000000000000000000000\",\n\t\"34c8e5f1330fcb4b14ca75cb2580a4b93d204e36\": \"2000000000000000000000\",\n\t\"ec5df227bfa85d7ad76b426e1cee963bc7f519dd\": \"1000000000000000000000\",\n\t\"797510e386f56393ced8f477378a444c484f7dad\": \"1000000000000000000000\",\n\t\"0191eb547e7bf6976b9b1b577546761de65622e2\": \"1999980000000000000000\",\n\t\"615a6f36777f40d6617eb5819896186983fd3731\": \"5910000000000000000000\",\n\t\"17580b766f7453525ca4c6a88b01b50570ea088c\": \"100000000000000000000\",\n\t\"945d96ea573e8df7262bbfa572229b4b16016b0f\": \"209300000000000000000\",\n\t\"2de0964400c282bdd78a919c6bf77c6b5f796179\": \"200000000000000000000\",\n\t\"304ec69a74545721d7316aef4dcfb41ac59ee2f0\": \"200000000000000000000\",\n\t\"be2b326e78ed10e550fee8efa8f8070396522f5a\": \"39400000000000000000000\",\n\t\"1a0841b92a7f7075569dc4627e6b76cab05ade91\": \"1520000000000000000000\",\n\t\"5fa61f152de6123516c751242979285f796ac791\": \"204000000000000000000\",\n\t\"68c8791dc342c373769ea61fb7b510f251d32088\": \"1000000000000000000000\",\n\t\"4167cd48e733418e8f99ffd134121c4a4ab278c4\": \"3640000000000000000000\",\n\t\"598aaabae9ed833d7bc222e91fcaa0647b77580b\": \"1800000000000000000000\",\n\t\"979f30158b574b999aab348107b9eed85b1ff8c1\": \"970000000000000000000\",\n\t\"3ad06149b21c55ff867cc3fb9740d2bcc7101231\": \"197000000000000000000000\",\n\t\"7133843a78d939c69d4486e10ebc7b602a349ff7\": \"329000000000000000000\",\n\t\"8bdfda6c215720eda2136f91052321af4e936c1f\": \"1000008000000000000000\",\n\t\"3e1c53300e4c168912163c7e99b95da268ad280a\": \"1003200000000000000000\",\n\t\"e07ebbc7f4da416e42c8d4f842aba16233c12580\": \"2000000000000000000000\",\n\t\"bac8922c4acc7d2cb6fd59a14eb45cf3e702214b\": \"800000000000000000000\",\n\t\"bb6c284aac8a69b75cddb00f28e145583b56bece\": \"2000000000000000000000\",\n\t\"0372ee5508bf8163ed284e5eef94ce4d7367e522\": \"100000000000000000000\",\n\t\"17125b59ac51cee029e4bd78d7f5947d1ea49bb2\": \"22000000000000000000000\",\n\t\"c88ca1e6e5f4d558d13780f488f10d4ad3130d34\": \"1550000000000000000000\",\n\t\"a825fd5abb7926a67cf36ba246a24bd27be6f6ed\": \"17600000000000000000\",\n\t\"04241b41ecbd0bfdf1295e9d4fa59ea09e6c6186\": \"1870000000000000000000\",\n\t\"6de4d15219182faf3aa2c5d4d2595ff23091a727\": \"1580000000000000000000\",\n\t\"b203d29e6c56b92699c4b92d1f6f84648dc4cfbc\": \"400000000000000000000\",\n\t\"80b42de170dbd723f454e88f7716452d92985092\": \"300202000000000000000\",\n\t\"0a5b79d8f23b6483dbe2bdaa62b1064cc76366ae\": \"1969803000000000000000\",\n\t\"32034e8581d9484e8af42a28df190132ec29c466\": \"3460000000000000000000\",\n\t\"7ee604c7a9dc2909ce321de6b9b24f5767577555\": \"5533575000000000000000\",\n\t\"a387ce4e961a7847f560075c64e1596b5641d21c\": \"668500000000000000000\",\n\t\"fcc9d4a4262e7a027ab7519110d802c495ceea39\": \"6370000000000000000000\",\n\t\"ff8a2ca5a81333f19998255f203256e1a819c0aa\": \"224000000000000000000\",\n\t\"f9811fa19dadbf029f8bfe569adb18228c80481a\": \"200000000000000000000\",\n\t\"0d1f2a57713ebc6e94de29846e8844d376665763\": \"5000000000000000000000\",\n\t\"eab0bd148309186cf8cbd13b7232d8095acb833a\": \"10691800000000000000000\",\n\t\"36928b55bc861509d51c8cf1d546bfec6e3e90af\": \"1970000000000000000000\",\n\t\"30480164bcd84974ebc0d90c9b9afab626cd1c73\": \"800000000000000000000\",\n\t\"36339f84a5c2b44ce53dfdb6d4f97df78212a7df\": \"321600000000000000000\",\n\t\"cfeacaaed57285e0ac7268ce6a4e35ecfdb242d7\": \"1086400000000000000000\",\n\t\"572dd8cd3fe399d1d0ec281231b7cefc20b9e4bb\": \"10400000000000000000000\",\n\t\"5dded049a6e1f329dc4b971e722c9c1f2ade83f0\": \"1000000000000000000000\",\n\t\"9756e176c9ef693ee1eec6b9f8b151d313beb099\": \"1200000000000000000000\",\n\t\"01e6415d587b065490f1ed7f21d6e0f386ee6747\": \"2000000000000000000000\",\n\t\"b4413576869c08f9512ad311fe925988a52d3414\": \"10000000000000000000000\",\n\t\"da9f55460946d7bfb570ddec757ca5773b58429a\": \"507600000000000000000\",\n\t\"7180b83ee5574317f21c8072b191d895d46153c3\": \"460000000000000000000\",\n\t\"0aca9a5626913b08cfc9a66d40508dce52b60f87\": \"1910000000000000000000\",\n\t\"5cd0e475b54421bdfc0c12ea8e082bd7a5af0a6a\": \"59000000000000000000\",\n\t\"7edb02c61a227287611ad950696369cc4e647a68\": \"274000000000000000000\",\n\t\"b2676841ee9f2d31c172e82303b0fe9bbf9f1e09\": \"200000000000000000000\",\n\t\"a2222259dd9c3e3ded127084f808e92a1887302c\": \"162000000000000000000\",\n\t\"4b3a7cc3a7d7b00ed5282221a60259f25bf6538a\": \"1000000000000000000000\",\n\t\"e33ff987541dde5cdee0a8a96dcc3f33c3f24cc2\": \"200000000000000000000000\",\n\t\"1e1a4828119be309bd88236e4d482b504dc55711\": \"2955000000000000000000\",\n\t\"9b1811c3051f46e664ae4bc9c824d18592c4574a\": \"199955000000000000000\",\n\t\"59fe00696dbd87b7976b29d1156c8842a2e17914\": \"2000000000000000000000\",\n\t\"48010ef3b8e95e3f308f30a8cb7f4eb4bf60d965\": \"2000000000000000000000\",\n\t\"c90300cb1d4077e6a6d7e169a460468cf4a492d7\": \"2000000000000000000000\",\n\t\"6dedf62e743f4d2c2a4b87a787f5424a7aeb393c\": \"180000000000000000000\",\n\t\"fb744b951d094b310262c8f986c860df9ab1de65\": \"52009000000000000000\",\n\t\"193ac65183651800e23580f8f0ead3bb597eb8a4\": \"50020000000000000000\",\n\t\"bf05ff5ecf0df2df887759fb8274d93238ac267d\": \"800000000000000000000\",\n\t\"6c0e712f405c59725fe829e9774bf4df7f4dd965\": \"57413800000000000000000\",\n\t\"2744ff67464121e35afc2922177164fa2fcb0267\": \"100000000000000000000\",\n\t\"d09cb2e6082d693a13e8d2f68dd1dd8461f55840\": \"1000000000000000000000\",\n\t\"bc171e53d17ac9b61241ae436deec7af452e7496\": \"5348000000000000000000\",\n\t\"71fa22cc6d33206b7d701a163a0dab31ae4d31d6\": \"1610000000000000000000\",\n\t\"4da8030769844bc34186b85cd4c7348849ff49e9\": \"10000000000000000000000\",\n\t\"c8616b4ec09128cdff39d6e4b9ac86eec471d5f2\": \"19400000000000000000\",\n\t\"407295ebd94b48269c2d569c9b9af9aa05e83e5e\": \"10000000000000000000000\",\n\t\"d45d5daa138dd1d374c71b9019916811f4b20a4e\": \"576000000000000000000\",\n\t\"42c6edc515d35557808d13cd44dcc4400b2504e4\": \"197876000000000000000\",\n\t\"0bc95cb32dbb574c832fa8174a81356d38bc92ac\": \"2000000000000000000000\",\n\t\"5a6071bcebfcba4ab57f4db96fc7a68bece2ba5b\": \"2000000000000000000000\",\n\t\"54c93e03a9b2e8e4c3672835a9ee76f9615bc14e\": \"19400000000000000000\",\n\t\"3c03bbc023e1e93fa3a3a6e428cf0cd8f95e1ec6\": \"1520000000000000000000\",\n\t\"ba1531fb9e791896bcf3a80558a359f6e7c144bd\": \"3940000000000000000000\",\n\t\"aa56a65dc4abb72f11bae32b6fbb07444791d5c9\": \"748600000000000000000\",\n\t\"e437acbe0f6227b0e36f36e4bcf7cf613335fb68\": \"200000000000000000000\",\n\t\"39d4a931402c0c79c457186f24df8729cf957031\": \"4000000000000000000000\",\n\t\"e22b20c77894463baf774cc256d5bddbbf7ddd09\": \"1000000000000000000000\",\n\t\"70a4067d448cc25dc8e70e651cea7cf84e92109e\": \"176000000000000000000\",\n\t\"aa3925dc220bb4ae2177b2883078b6dc346ca1b2\": \"8000000000000000000000\",\n\t\"ad57aa9d00d10c439b35efcc0becac2e3955c313\": \"200000000000000000000\",\n\t\"e93d47a8ca885d540c4e526f25d5c6f2c108c4b8\": \"112640000000000000000000\",\n\t\"232ce782506225fd9860a2edc14a7a3047736da2\": \"20000000000000000000\",\n\t\"49a645e0667dfd7b32d075cc2467dd8c680907c4\": \"129560000000000000000\",\n\t\"cf2e734042a355d05ffb2e3915b16811f45a695e\": \"2000000000000000000000\",\n\t\"39b1c471ae94e12164452e811fbbe2b3cd7275ac\": \"2000000000000000000000\",\n\t\"ffad3dd74e2c1f796ac640de56dc99b4c792a402\": \"5000000000000000000000\",\n\t\"a69d7cd17d4842fe03f62a90b2fbf8f6af7bb380\": \"100000000000000000000\",\n\t\"2001bef77b66f51e1599b02fb110194a0099b78d\": \"2000000000000000000000\",\n\t\"95e7616424cd0961a71727247437f0069272280e\": \"400000000000000000000\",\n\t\"c04f4bd4049f044685b883b62959ae631d667e35\": \"5820000000000000000000\",\n\t\"ede0147ec032c3618310c1ff25690bf172193dac\": \"2000000000000000000000\",\n\t\"66719c0682b2ac7f9e27abebec7edf8decf0ae0d\": \"20000000000000000000\",\n\t\"45272b8f62e9f9fa8ce04420e1aea3eba9686eac\": \"4000000000000000000000\",\n\t\"d1da0c8fb7c210e0f2ec618f85bdae7d3e734b1c\": \"1970000000000000000000\",\n\t\"e9133e7d31845d5f2b66a2618792e869311acf66\": \"24050000000000000000000\",\n\t\"ebb62cf8e22c884b1b28c6fa88fbbc17938aa787\": \"798000000000000000000\",\n\t\"6205c2d5647470848a3840f3887e9b015d34755c\": \"1800000000000000000000\",\n\t\"76ca22bcb8799e5327c4aa2a7d0949a1fcce5f29\": \"1524180000000000000000\",\n\t\"6b925dd5d8ed6132ab6d0860b82c44e1a51f1fee\": \"1480000000000000000000\",\n\t\"797bb7f157d9feaa17f76da4f704b74dc1038341\": \"3340000000000000000000\",\n\t\"ae8954f8d6166de507cf61297d0fc7ca6b9e7128\": \"300000000000000000000\",\n\t\"75c1ad23d23f24b384d0c3149177e86697610d21\": \"6426082000000000000000\",\n\t\"805d846fb0bc02a7337226d685be9ee773b9198a\": \"19999800000000000000000\",\n\t\"c3cb6b36af443f2c6e258b4a39553a818747811f\": \"1610000000000000000000\",\n\t\"cea43f7075816b60bbfce68b993af0881270f6c4\": \"2000000000000000000000\",\n\t\"e0388aeddd3fe2ad56f85748e80e710a34b7c92e\": \"500000000000000000000\",\n\t\"e131f87efc5ef07e43f0f2f4a747b551d750d9e6\": \"19999000000000000000000\",\n\t\"c2b2cbe65bc6c2ee7a3c75b2e47c189c062e8d8b\": \"20000000000000000000000\",\n\t\"bd8765f41299c7f479923c4fd18f126d7229047d\": \"4000000000000000000000\",\n\t\"c83ba6dd9549be1d3287a5a654d106c34c6b5da2\": \"7000000000000000000000\",\n\t\"f870995fe1e522321d754337a45c0c9d7b38951c\": \"20000000000000000000\",\n\t\"0d8ed7d0d15638330ed7e4eaccab8a458d75737e\": \"2000000000000000000000\",\n\t\"36c510bf8d6e569bf2f37d47265dbcb502ff2bce\": \"30000000000000000000000\",\n\t\"0eccf617844fd61fba62cb0e445b7ac68bcc1fbe\": \"387260000000000000000\",\n\t\"ae10e27a014f0d306baf266d4897c89aeee2e974\": \"20000000000000000000000\",\n\t\"1827039f09570294088fddf047165c33e696a492\": \"9550000000000000000000\",\n\t\"23378f42926d0184b793b0c827a6dd3e3d334fcd\": \"56000000000000000000\",\n\t\"467124ae7f452f26b3d574f6088894fa5d1cfb3b\": \"2700000000000000000000\",\n\t\"aae61e43cb0d0c96b30699f77e00d711d0a3979b\": \"1000000000000000000000\",\n\t\"15c7edb8118ee27b342285eb5926b47a855bc7a5\": \"20000000000000000000\",\n\t\"0d5d98565c647ca5f177a2adb9d3022fac287f21\": \"200000000000000000000\",\n\t\"7222fec7711781d26eaa4e8485f7aa3fac442483\": \"456000000000000000000\",\n\t\"dc44275b1715baea1b0345735a29ac42c9f51b4f\": \"1164000000000000000000\",\n\t\"04d82af9e01a936d97f8f85940b970f9d4db9936\": \"200000000000000000000\",\n\t\"45533390e340fe0de3b3cf5fb9fc8ea552e29e62\": \"1460000000000000000000\",\n\t\"1284f0cee9d2ff2989b65574d06ffd9ab0f7b805\": \"400000000000000000000\",\n\t\"ed9ebccba42f9815e78233266dd6e835b6afc31b\": \"6000000000000000000000\",\n\t\"e4324912d64ea3aef76b3c2ff9df82c7e13ae991\": \"2000000000000000000000\",\n\t\"94c742fd7a8b7906b3bfe4f8904fc0be5c768033\": \"20000000000000000000000\",\n\t\"62fb8bd1f0e66b90533e071e6cbe6111fef0bc63\": \"17600000000000000000000\",\n\t\"2c83aeb02fcf067d65a47082fd977833ab1cec91\": \"150400000000000000000\",\n\t\"06cbfa08cdd4fba737bac407be8224f4eef35828\": \"593459000000000000000\",\n\t\"67ee406ea4a7ae6a3a381eb4edd2f09f174b4928\": \"1036000000000000000000\",\n\t\"83c23d8a502124ee150f08d71dc6727410a0f901\": \"33999600000000000000000\",\n\t\"f7c00cdb1f020310d5acab7b496aaa44b779085e\": \"1670000000000000000000\",\n\t\"d096565b7c7407d06536580355fdd6d239144aa1\": \"250000000000000000000\",\n\t\"f8d52dcc5f96cc28007b3ecbb409f7e22a646caa\": \"149200000000000000000\",\n\t\"0c222c7c41c9b048efcce0a232434362e12d673b\": \"10007600000000000000000\",\n\t\"503bdbd8bc421c32a443032deb2e3e4cd5ba8b4e\": \"2000000000000000000000\",\n\t\"77da5e6c72fb36bce1d9798f7bcdf1d18f459c2e\": \"22380000000000000000\",\n\t\"e62f98650712eb158753d82972b8e99ca3f61877\": \"2000000000000000000000\",\n\t\"87a7c508ef71582dd9a54372f89cb01f252fb180\": \"200000000000000000000\",\n\t\"f61283b4bd8504058ca360e993999b62cbc8cd67\": \"255000000000000000000\",\n\t\"9ccddcb2cfc2b25b08729a0a98d9e6f0202ea2c1\": \"100000000000000000000\",\n\t\"d460a4b908dd2b056759b488850b66a838fc77a8\": \"1970000000000000000000\",\n\t\"5431b1d18751b98fc9e2888ac7759f1535a2db47\": \"2000000000000000000000\",\n\t\"da2a14f9724015d79014ed8e5909681d596148f1\": \"48499000000000000000\",\n\t\"c989434f825aaf9c552f685eba7c11db4a5fc73a\": \"501000000000000000000\",\n\t\"2b701d16c0d3cc1e4cd85445e6ad02eea4ac012d\": \"600000000000000000000\",\n\t\"78b978a9d7e91ee529ea4fc4b76feaf8762f698c\": \"32000000000000000000000\",\n\t\"c89cf504b9f3f835181fd8424f5ccbc8e1bddf7d\": \"10000000000000000000000\",\n\t\"e94941b6036019b4016a30c1037d5a6903babaad\": \"780000000000000000000\",\n\t\"95d98d0c1069908f067a52acac2b8b534da37afd\": \"2054053000000000000000\",\n\t\"8284923b62e68bbf7c2b9f3414d13ef6c812a904\": \"3880000000000000000000\",\n\t\"3e5a39fdda70df1126ab0dc49a7378311a537a1f\": \"2400000000000000000000\",\n\t\"a2ace4c993bb1e5383f8ac74e179066e814f0591\": \"100000000000000000000\",\n\t\"0609d83a6ce1ffc9b690f3e9a81e983e8bdc4d9d\": \"70000000000000000000000\",\n\t\"d119417c46732cf34d1a1afb79c3e7e2cd8eece4\": \"2000000000000000000000\",\n\t\"fdb33944f2360615e5be239577c8a19ba52d9887\": \"601650000000000000000\",\n\t\"dd95dbe30f1f1877c5dd7684aeef302ab6885192\": \"8372000000000000000000\",\n\t\"413f4b02669ccff6806bc826fcb7deca3b0ea9bc\": \"20000000000000000000\",\n\t\"5800cd8130839e94495d2d8415a8ea2c90e0c5cb\": \"200000000000000000000\",\n\t\"65053191319e067a25e6361d47f37f6318f83419\": \"394000000000000000000\",\n\t\"9bc573bcda23b8b26f9073d90c230e8e71e0270b\": \"999544000000000000000\",\n\t\"97f7760657c1e202759086963eb4211c5f8139b9\": \"49770000000000000000000\",\n\t\"126897a311a14ad43b78e0920100c4426bfd6bdd\": \"973581000000000000000\",\n\t\"d5276f0cd5ffd5ffb63f98b5703d5594ede0838b\": \"400000000000000000000\",\n\t\"e9c35c913ca1fceab461582fe1a5815164b4fd21\": \"8000000000000000000000\",\n\t\"b43067fe70d9b55973ba58dc64dd7f311e554259\": \"200000000000000000000\",\n\t\"6f8f0d15cc96fb7fe94f1065bc6940f8d12957b2\": \"1000000000000000000000\",\n\t\"b1dba5250ba9625755246e067967f2ad2f0791de\": \"80000000000000000000000\",\n\t\"72b7a03dda14ca9c661a1d469fd33736f673c8e8\": \"2000000000000000000000\",\n\t\"e792349ce9f6f14f81d0674096befa1f9221cdea\": \"1685365000000000000000\",\n\t\"1815279dff9952da3be8f77249dbe22243377be7\": \"4749800000000000000000\",\n\t\"33481e856ebed48ea708a27426ef28e867f57cd1\": \"200000000000000000000\",\n\t\"8eb8c71982a00fb84275293253f8044544b66b49\": \"400000000000000000000\",\n\t\"65f5870f26bce089677dfc23b5001ee492483428\": \"5067230000000000000000\",\n\t\"8e23facd12c765c36ab81a6dd34d8aa9e68918ae\": \"167310000000000000000\",\n\t\"4912d902931676ff39fc34fe3c3cc8fb2182fa7a\": \"20000000000000000000\",\n\t\"c09a66172aea370d9a63da04ff71ffbbfcff7f94\": \"2000000000000000000000\",\n\t\"e969ea1595edc5c4a707cfde380929633251a2b0\": \"200000000000000000000\",\n\t\"4f2b47e2775a1fa7178dad92985a5bbe493ba6d6\": \"200000000000000000000\",\n\t\"cab9a97ada065c87816e6860a8f1426fe6b3d775\": \"1000000000000000000000\",\n\t\"cdfd8217339725d7ebac11a63655f265eff1cc3d\": \"4999962000000000000000\",\n\t\"ab4004c0403f7eabb0ea586f212156c4203d67f1\": \"1999944000000000000000\",\n\t\"1c7cb2fe6bf3e09cbcdc187af38fa8f5053a70b6\": \"9970823000000000000000\",\n\t\"a951b244ff50cfae591d5e1a148df6a938ef2a1a\": \"1734000000000000000000\",\n\t\"b158db43fa62d30e65f3d09bf781c7b67372ebaa\": \"1999000000000000000000\",\n\t\"25e037f00a18270ba5ec3420229ddb0a2ce38fa2\": \"10000000000000000000000\",\n\t\"2aaea1f1046f30f109faec1c63ef5c7594eb08da\": \"4000000000000000000000\",\n\t\"73d7269ff06c9ffd33754ce588f74a966abbbbba\": \"6600000000000000000000\",\n\t\"4c767b65fd91161f4fbdcc6a69e2f6ad711bb918\": \"720000000000000000000\",\n\t\"92ae5b7c7eb492ff1ffa16dd42ad9cad40b7f8dc\": \"865000000000000000000\",\n\t\"a04f2ae02add14c12faf65cb259022d0830a8e26\": \"100000000000000000000000\",\n\t\"63ef2fbc3daf5edaf4a295629ccf31bcdf4038e5\": \"1460000000000000000000\",\n\t\"749ad6f2b5706bbe2f689a44c4b640b58e96b992\": \"100000000000000000000\",\n\t\"4d836d9d3b0e2cbd4de050596faa490cffb60d5d\": \"300000000000000000000\",\n\t\"59f6247b0d582aaa25e5114765e4bf3c774f43c2\": \"50000000000000000000\",\n\t\"1293c78c7d6a443b9d74b0ba5ee7bb47fd418588\": \"6685000000000000000000\",\n\t\"67bc85e87dc34c4e80aafa066ba8d29dbb8e438e\": \"402500000000000000000\",\n\t\"a09f4d5eaa65a2f4cb750a49923401dae59090af\": \"140000000000000000000\",\n\t\"ebbd4db9019952d68b1b0f6d8cf0683c00387bb5\": \"332330000000000000000\",\n\t\"b16479ba8e7df8f63e1b95d149cd8529d735c2da\": \"846477000000000000000\",\n\t\"e1b2aca154b8e0766c4eba30bc10c7f35036f368\": \"19980000000000000000\",\n\t\"5c464197791c8a3da3c925436f277ab13bf2faa2\": \"8000000000000000000000\",\n\t\"170a88a8997f92d238370f1affdee6347050b013\": \"3000800000000000000000\",\n\t\"dadbfafd8b62b92a24efd75256dd83abdbd7bbdb\": \"19700000000000000000\",\n\t\"bb993b96ee925ada7d99d786573d3f89180ce3aa\": \"2000000000000000000000\",\n\t\"f2c362b0ef991bc82fb36e66ff75932ae8dd8225\": \"74000000000000000000\",\n\t\"7f2382ffd8f83956467937f9ba72374623f11b38\": \"600000000000000000000\",\n\t\"74d1a4d0c7524e018d4e06ed3b648092b5b6af2c\": \"50000000000000000000\",\n\t\"24a750eae5874711116dd7d47b7186ce990d3103\": \"200000000000000000000\",\n\t\"a8e42a4e33d7526cca19d9a36dcd6e8040d0ea73\": \"1080000000000000000000\",\n\t\"3e1b2230afbbd310b4926a4c776d5ae7819c661d\": \"30000000000000000000000\",\n\t\"6af9f0dfeeaebb5f64bf91ab771669bf05295553\": \"400000000000000000000\",\n\t\"41e4a20275e39bdcefeb655c0322744b765140c2\": \"10000000000000000000000\",\n\t\"ceb089ec8a78337e8ef88de11b49e3dd910f748f\": \"1000000000000000000000\",\n\t\"e6bcd30a8fa138c5d9e5f6c7d2da806992812dcd\": \"260000000000000000000000\",\n\t\"e08c60313106e3f9334fe6f7e7624d211130c077\": \"40000000000000000000\",\n\t\"f5cffbba624e7eb321bc83c60ca68199b4e36671\": \"2000000000000000000000\",\n\t\"d7c2803ed7b0e0837351411a8e6637d168bc5b05\": \"29549015000000000000000\",\n\t\"0f3665d48e9f1419cd984fc7fa92788710c8f2e4\": \"2000000000000000000000\",\n\t\"b48921c9687d5510744584936e8886bdbf2df69b\": \"1000000000000000000000\",\n\t\"a94bbb8214cf8da0c2f668a2ac73e86248528d4b\": \"960000000000000000000\",\n\t\"be0c2a80b9de084b172894a76cf4737a4f529e1a\": \"1999944000000000000000\",\n\t\"fcf199f8b854222f182e4e1d099d4e323e2aae01\": \"1000000000000000000000\",\n\t\"b52dfb45de5d74e3df208332bc571c809b8dcf32\": \"6000000000000000000000\",\n\t\"704819d2e44d6ed1da25bfce84c49fcca25613e5\": \"400000000000000000000\",\n\t\"6ff6cc90d649de4e96cffee1077a5b302a848dcb\": \"28600000000000000000\",\n\t\"4d9c77d0750c5e6fbc247f2fd79274686cb353d6\": \"20000000000000000000\",\n\t\"68e8022740f4af29eb48db32bcecddfd148d3de3\": \"1000000000000000000000\",\n\t\"2cb615073a40dcdb99faa848572e987b3b056efb\": \"799600000000000000000\",\n\t\"64adcceec53dd9d9dd15c8cc1a9e736de4241d2c\": \"56000000000000000000\",\n\t\"2aec809df9325b9f483996e99f7331097f08aa0e\": \"4000000000000000000000\",\n\t\"438c2f54ff8e629bab36b1442b760b12a88f02ae\": \"2000000000000000000000\",\n\t\"9e35399071a4a101e9194daa3f09f04a0b5f9870\": \"4000000000000000000000\",\n\t\"a5c336083b04f9471b8c6ed73679b74d66c363ec\": \"3014100000000000000000\",\n\t\"7ad3f307616f19dcb143e6444dab9c3c33611f52\": \"50000000000000000000\",\n\t\"455cb8ee39ffbc752331e5aefc588ef0ee593454\": \"999963000000000000000\",\n\t\"c4c01afc3e0f045221da1284d7878574442fb9ac\": \"7419944000000000000000\",\n\t\"99268327c373332e06c3f6164287d455b9d5fa4b\": \"2000000000000000000000\",\n\t\"4367ae4b0ce964f4a54afd4b5c368496db169e9a\": \"2000000000000000000000\",\n\t\"2cd79eb52027b12c18828e3eaab2969bfcd287e9\": \"20000000000000000000\",\n\t\"b96841cabbc7dbd69ef0cf8f81dff3c8a5e21570\": \"12000000000000000000000\",\n\t\"d7ebddb9f93987779b680155375438db65afcb6a\": \"100600000000000000000\",\n\t\"0631d18bbbbd30d9e1732bf36edae2ce8901ab80\": \"3024800000000000000000\",\n\t\"5fad960f6b2c84569c9f4d47bf1985fcb2c65da6\": \"999972000000000000000\",\n\t\"01d599ee0d5f8c38ab2d392e2c65b74c3ce31820\": \"510000000000000000000\",\n\t\"ff0cc8dac824fa24fc3caa2169e6e057cf638ad6\": \"4000000000000000000000\",\n\t\"c25266c7676632f13ef29be455ed948add567792\": \"1337000000000000000000\",\n\t\"9c344098ba615a398f11d009905b177c44a7b602\": \"1000000000000000000000\",\n\t\"3b0accaf4b607cfe61d17334c214b75cdefdbd89\": \"2000000000000000000000\",\n\t\"6d6634b5b8a40195d949027af4828802092ceeb6\": \"3000000000000000000000\",\n\t\"208c45732c0a378f17ac8324926d459ba8b658b4\": \"2955000000000000000000\",\n\t\"c24399b4bf86f7338fbf645e3b22b0e0b7973912\": \"2000000000000000000000\",\n\t\"29763dd6da9a7c161173888321eba6b63c8fb845\": \"328000000000000000000\",\n\t\"9c2fd54089af665df5971d73b804616039647375\": \"1000000000000000000000\",\n\t\"0e09646c99af438e99fa274cb2f9c856cb65f736\": \"1910000000000000000000\",\n\t\"be73274d8c5aa44a3cbefc8263c37ba121b20ad3\": \"500000000000000000000\",\n\t\"ecfd004d02f36cd4d8b4a8c1a9533b6af85cd716\": \"5003800000000000000000\",\n\t\"f978b025b64233555cc3c19ada7f4199c9348bf7\": \"400000000000000000000000\",\n\t\"705ddd38355482b8c7d3b515bda1500dd7d7a817\": \"400000000000000000000\",\n\t\"2b8a0dee5cb0e1e97e15cfca6e19ad21f995efad\": \"504206000000000000000\",\n\t\"1098cc20ef84bad5146639c4cd1ca6c3996cb99b\": \"18200000000000000000\",\n\t\"afdac5c1cb56e245bf70330066a817eaafac4cd1\": \"20000000000000000000\",\n\t\"910e996543344c6815fb97cda7af4b8698765a5b\": \"103400000000000000000\",\n\t\"94612781033b57b146ee74e753c672017f5385e4\": \"3600000000000000000000\",\n\t\"d03fc165576aaed525e5502c8e140f8b2e869639\": \"6850000000000000000000\",\n\t\"293384c42b6f8f2905ce52b7205c2274376c612b\": \"1400000000000000000000\",\n\t\"09ee12b1b42b05af9cf207d5fcac255b2ec411f2\": \"58929000000000000000\",\n\t\"dbd71efa4b93c889e76593de609c3b04cbafbe08\": \"20000000000000000000\",\n\t\"fa86ca27bf2854d98870837fb6f6dfe4bf6453fc\": \"322061000000000000000\",\n\t\"61ff8e67b34d9ee6f78eb36ffea1b9f7c15787af\": \"1640000000000000000000\",\n\t\"6d4cbf3d8284833ae99344303e08b4d614bfda3b\": \"12000000000000000000000\",\n\t\"2ff160c44f72a299b5ec2d71e28ce5446d2fcbaf\": \"360000000000000000000\",\n\t\"94a7cda8f481f9d89d42c303ae1632b3b709db1d\": \"300000000000000000000\",\n\t\"7566496162ba584377be040a4f87777a707acaeb\": \"4000000000000000000000\",\n\t\"bdc461462b6322b462bdb33f22799e8108e2417d\": \"668500000000000000000\",\n\t\"7e47637e97c14622882be057bea229386f4052e5\": \"440000000000000000000\",\n\t\"3b5c251d7fd7893ba209fe541cecd0ce253a990d\": \"30000000000000000000000\",\n\t\"0e498800447177b8c8afc3fdfa7f69f4051bb629\": \"2140234000000000000000\",\n\t\"b71623f35107cf7431a83fb3d204b29ee0b1a7f4\": \"19700000000000000000\",\n\t\"1d395b30adda1cf21f091a4f4a7b753371189441\": \"100000000000000000000000\",\n\t\"2c2428e4a66974edc822d5dbfb241b2728075158\": \"2000000000000000000000\",\n\t\"a575f2891dcfcda83c5cf01474af11ee01b72dc2\": \"100076000000000000000\",\n\t\"ad728121873f0456d0518b80ab6580a203706595\": \"500000000000000000000\",\n\t\"48669eb5a801d8b75fb6aa58c3451b7058c243bf\": \"30940000000000000000000\",\n\t\"b3ae54fba09d3ee1d6bdd1e957923919024c35fa\": \"65513000000000000000\",\n\t\"0d35408f226566116fb8acdaa9e2c9d59b76683f\": \"940000000000000000000\",\n\t\"df211cd21288d6c56fae66c3ff54625dd4b15427\": \"2500024000000000000000\",\n\t\"8a746c5d67064711bfca685b95a4fe291a27028e\": \"40000000000000000000\",\n\t\"1cf105ab23023b554c583e86d7921179ee83169f\": \"1970000000000000000000\",\n\t\"8cfedef198db0a9143f09129b3fd64dcbb9b4956\": \"2000000000000000000000\",\n\t\"1e381adcf801a3bf9fd7bfac9ccc2b8482ad5e66\": \"600200000000000000000\",\n\t\"e74608f506866ada6bfbfdf20fea440be76989ef\": \"1999944000000000000000\",\n\t\"27e63989ca1e903bc620cf1b9c3f67b9e2ae6581\": \"1337000000000000000000\",\n\t\"bb0857f1c911b24b86c8a70681473fe6aaa1cce2\": \"100000000000000000000\",\n\t\"4f8e8d274fb22a3fd36a47fe72980471544b3434\": \"200000000000000000000\",\n\t\"127d3fc5003bf63c0d83e93957836515fd279045\": \"111890000000000000000\",\n\t\"95809e8da3fbe4b7f281f0b8b1715f420f7d7d63\": \"2000000000000000000000\",\n\t\"28904bb7c4302943b709b14d7970e42b8324e1a1\": \"10027500000000000000000\",\n\t\"c07e3867ada096807a051a6c9c34cc3b3f4ad34a\": \"1788210000000000000000\",\n\t\"f0b469eae89d400ce7d5d66a9695037036b88903\": \"20000000000000000000000\",\n\t\"7445202f0c74297a004eb3726aa6a82dd7c02fa1\": \"2000000000000000000000\",\n\t\"c58f62fee9711e6a05dc0910b618420aa127f288\": \"3980000000000000000000\",\n\t\"801d65c518b11d0e3f4f470221417013c8e53ec5\": \"4000000000000000000000\",\n\t\"41010fc8baf8437d17a04369809a168a17ca56fb\": \"100000000000000000000\",\n\t\"a1998144968a5c70a6415554cefec2824690c4a5\": \"20000000000000000000\",\n\t\"e9559185f166fc9513cc71116144ce2deb0f1d4b\": \"20000000000000000000000\",\n\t\"ed5b4c41e762d942404373caf21ed4615d25e6c1\": \"2013960000000000000000\",\n\t\"665b000f0b772750cc3c217a5ef429a92bf1ccbb\": \"4000000000000000000000\",\n\t\"febd9f81cf78bd5fb6c4b9a24bd414bb9bfa4c4e\": \"1990019000000000000000\",\n\t\"a072691c8dd7cd4237ff72a75c1a9506d0ce5b9e\": \"370000000000000000000\",\n\t\"6765df25280e8e4f38d4b1cf446fc5d7eb659e34\": \"100000000000000000000\",\n\t\"524fb210522c5e23bb67dfbf8c26aa616da49955\": \"999971000000000000000\",\n\t\"e987e6139e6146a717fef96bc24934a5447fe05d\": \"2000000000000000000000\",\n\t\"d6110276cfe31e42825a577f6b435dbcc10cf764\": \"1000000000000000000000\",\n\t\"5e51b8a3bb09d303ea7c86051582fd600fb3dc1a\": \"20000000000000000000\",\n\t\"5c4f24e994ed8f850ea7818f471c8fac3bcf0452\": \"1724800000000000000000\",\n\t\"85b2998d0c73302cb2ba13f489313301e053be15\": \"10000000000000000000000\",\n\t\"0af6c8d539c96d50259e1ba6719e9c8060f388c2\": \"1000000000000000000000\",\n\t\"7d901b28bf7f88ef73d8f73cca97564913ea8a24\": \"955000000000000000000\",\n\t\"e01859f242f1a0ec602fa8a3b0b57640ec89075e\": \"555000000000000000000\",\n\t\"c66ae4cee87fb3353219f77f1d6486c580280332\": \"29550000000000000000\",\n\t\"2d40558b06f90a3923145592123b6774e46e31f4\": \"1000000000000000000000\",\n\t\"ccf43975b76bfe735fec3cb7d4dd24f805ba0962\": \"60000000000000000000\",\n\t\"1703b4b292b8a9deddede81bb25d89179f6446b6\": \"19690000000000000000000\",\n\t\"0e9096d343c060db581a120112b278607ec6e52b\": \"20000000000000000000\",\n\t\"f65819ac4cc14c137f05dd7977c7dae08d1a4ab5\": \"102000000000000000000\",\n\t\"ca373fe3c906b8c6559ee49ccd07f37cd4fb5266\": \"1790000000000000000000\",\n\t\"d28298524df5ec4b24b0ffb9df85170a145a9eb5\": \"287700000000000000000\",\n\t\"5fcda847aaf8d7fa8bca08029ca2849166aa15a3\": \"623350000000000000000\",\n\t\"bdc739a699700b2e8e2c4a4c7b058a0e513ddebe\": \"2000000000000000000000\",\n\t\"0bb05f7224bb5804856556c07eeadbed87ba8f7c\": \"401100000000000000000\",\n\t\"ab416fe30d58afe5d9454c7fce7f830bcc750356\": \"114515000000000000000\",\n\t\"3eee6f1e96360b7689b3069adaf9af8eb60ce481\": \"1000000000000000000000\",\n\t\"9a0d3cee3d9892ea3b3700a27ff84140d9025493\": \"60000000000000000000\",\n\t\"5dc36de5359450a1ec09cb0c44cf2bb42b3ae435\": \"1117500000000000000000\",\n\t\"35c8adc11125432b3b77acd64625fe58ebee9d66\": \"2000000000000000000000\",\n\t\"a5e9cd4b74255d22b7d9b27ae8dd43ed6ed0252b\": \"766527000000000000000\",\n\t\"31ea12d49a35a740780ddeeaece84c0835b26270\": \"200000000000000000000\",\n\t\"7aef7b551f0b9c46e755c0f38e5b3a73fe1199f5\": \"1490000000000000000000\",\n\t\"cc6d7b12061bc96d104d606d65ffa32b0036eb07\": \"10000000000000000000000\",\n\t\"322021022678a0166d204b3aaa7ad4ec4b88b7d0\": \"400000000000000000000\",\n\t\"b31196714a48dff726ea9433cd2912f1a414b3b3\": \"2680000000000000000000\",\n\t\"0f2fb884c8aaff6f543ac6228bd08e4f60b0a5fd\": \"3145000000000000000000\",\n\t\"7d9d221a3df89ddd7b5f61c1468c6787d6b333e6\": \"138000000000000000000\",\n\t\"367f59cc82795329384e41e1283115e791f26a01\": \"2000000000000000000000\",\n\t\"fd9579f119bbc819a02b61e38d8803c942f24d32\": \"105600000000000000000\",\n\t\"3e2f26235e137a7324e4dc154b5df5af46ea1a49\": \"22458000000000000000\",\n\t\"4c1579af3312e4f88ae93c68e9449c2e9a68d9c4\": \"2000000000000000000000\",\n\t\"ffb04726dfa41afdc819168418610472970d7bfc\": \"4000000000000000000000\",\n\t\"403c64896a75cad816a9105e18d8aa5bf80f238e\": \"985000000000000000000\",\n\t\"5cd588a14ec648ccf64729f9167aa7bf8be6eb3d\": \"1000000000000000000000\",\n\t\"24b2be118b16d8b2174769d17b4cf84f07ca946d\": \"2000000000000000000000\",\n\t\"d3bb59fa31258be62f8ed232f1a7d47b4a0b41ee\": \"100000000000000000000\",\n\t\"cc9ac715cd6f2610c52b58676456884297018b29\": \"13370000000000000000\",\n\t\"6f2a31900e240395b19f159c1d00dfe4d898ebdf\": \"1999600000000000000000\",\n\t\"d60b247321a32a5affb96b1e279927cc584de943\": \"2265500000000000000000\",\n\t\"f7a1ade2d0f529123d1055f19b17919f56214e67\": \"500000000000000000000\",\n\t\"bea00df17067a43a82bc1daecafb6c14300e89e6\": \"1820000000000000000000\",\n\t\"a2968fc1c64bac0b7ae0d68ba949874d6db253f4\": \"20000000000000000000000\",\n\t\"92d8ad9a4d61683b80d4a6672e84c20d62421e80\": \"20000000000000000000\",\n\t\"6ed2a12b02f8c688c7b5d3a6ea14d63687dab3b6\": \"2000000000000000000000\",\n\t\"7a63869fc767a4c6b1cd0e0649f3634cb121d24b\": \"77500000000000000000\",\n\t\"84f522f0520eba52dd18ad21fa4b829f2b89cb97\": \"4949566000000000000000\",\n\t\"d6234aaf45c6f22e66a225ffb93add629b4ef80f\": \"1000000000000000000000\",\n\t\"e3d8bf4efe84b1616d1b89e427ddc6c8830685ae\": \"2000000000000000000000\",\n\t\"a3db364a332d884ba93b2617ae4d85a1489bea47\": \"1700000000000000000000\",\n\t\"9f7986924aeb02687cd64189189fb167ded2dd5c\": \"985000000000000000000\",\n\t\"2eaf4e2a46b789ccc288c8d1d9294e3fb0853896\": \"2000000000000000000000\",\n\t\"a02dc6aa328b880de99eac546823fccf774047fb\": \"1970000000000000000000\",\n\t\"873b7f786d3c99ff012c4a7cae2677270240b9c5\": \"1730000000000000000000\",\n\t\"1d69c83d28ff0474ceebeacb3ad227a144ece7a3\": \"5474937000000000000000\",\n\t\"7b827cae7ff4740918f2e030ab26cb98c4f46cf5\": \"7460000000000000000000\",\n\t\"3083ef0ed4c4401196774a95cf4edc83edc1484f\": \"170000000000000000000000\",\n\t\"40ad74bc0bce2a45e52f36c3debb1b3ada1b7619\": \"6790000000000000000000\",\n\t\"05423a54c8d0f9707e704173d923b946edc8e700\": \"127543000000000000000\",\n\t\"22eb7db0ba56b0f8b816ccb206e615d929185b0d\": \"80500000000000000000\",\n\t\"66082c75a8de31a53913bbd44de3a0374f7faa41\": \"1460000000000000000000\",\n\t\"e3d3eaa299887865569e88be219be507189be1c9\": \"456156000000000000000\",\n\t\"ae57cc129a96a89981dac60d2ffb877d5dc5e432\": \"1110994000000000000000\",\n\t\"1a2434cc774422d48d53d59c5d562cce8407c94b\": \"30000000000000000000\",\n\t\"21546914dfd3af2add41b0ff3e83ffda7414e1e0\": \"5969100000000000000000\",\n\t\"4dcf62a3de3f061db91498fd61060f1f6398ff73\": \"1999944000000000000000\",\n\t\"6fd98e563d12ce0fd60f4f1f850ae396a9823c02\": \"1261000000000000000000\",\n\t\"edf8a3e1d40f13b79ec8e3e1ecf262fd92116263\": \"158000000000000000000\",\n\t\"c09e3cfc19f605ff3ec9c9c70e2540d7ee974366\": \"500000000000000000000\",\n\t\"953572f0ea6df9b197cae40e4b8ecc056c4371c5\": \"1000000000000000000000\",\n\t\"163cc8be227646cb09719159f28ed09c5dc0dce0\": \"1337000000000000000000\",\n\t\"a3932a31d6ff75fb3b1271ace7caa7d5e1ff1051\": \"20000000000000000000000\",\n\t\"f9a94bd56198da245ed01d1e6430b24b2708dcc0\": \"749938000000000000000\",\n\t\"3eb8b33b21d23cda86d8288884ab470e164691b5\": \"500000000000000000000\",\n\t\"84bcbf22c09607ac84341d2edbc03bfb1739d744\": \"500000000000000000000\",\n\t\"961c59adc74505d1864d1ecfcb8afa0412593c93\": \"40000000000000000000000\",\n\t\"f068dfe95d15cd3a7f98ffa688b4346842be2690\": \"1255160000000000000000\",\n\t\"291efe0081dce8c14799f7b2a43619c0c3b3fc1f\": \"1200000000000000000000\",\n\t\"be4fd073617022b67f5c13499b827f763639e4e3\": \"2000000000000000000000\",\n\t\"e40a7c82e157540a0b00901dbb86c716e1a062da\": \"49800000000000000000\",\n\t\"6635b46f711d2da6f0e16370cd8ee43efb2c2d52\": \"2000000000000000000000\",\n\t\"43748928e8c3ec4436a1d092fbe43ac749be1251\": \"400000000000000000000\",\n\t\"b557ab9439ef50d237b553f02508364a466a5c03\": \"200000000000000000000\",\n\t\"11928378d27d55c520ceedf24ceb1e822d890df0\": \"8000000000000000000000\",\n\t\"61518464fdd8b73c1bb6ac6db600654938dbf17a\": \"200000000000000000000\",\n\t\"004bfbe1546bc6c65b5c7eaa55304b38bbfec6d3\": \"2000000000000000000000\",\n\t\"a5e0fc3c3affed3db6710947d1d6fb017f3e276d\": \"2000000000000000000000\",\n\t\"8ecbcfacbfafe9f00c3922a24e2cf0026756ca20\": \"5640000000000000000000\",\n\t\"fb5ffaa0f7615726357891475818939d2037cf96\": \"20000000000000000000\",\n\t\"ae222865799079aaf4f0674a0cdaab02a6d570ff\": \"2000000000000000000000\",\n\t\"9edc90f4be210865214ab5b35e5a8dd77415279d\": \"4000000000000000000000\",\n\t\"9d7831e834c20b1baa697af1d8e0c621c5afff9a\": \"86500000000000000000\",\n\t\"046d274b1af615fb505a764ad8dda770b1db2f3d\": \"2000000000000000000000\",\n\t\"eaea23aa057200e7c9c15e8ff190d0e66c0c0e83\": \"2000000000000000000000\",\n\t\"417a3cd19496530a6d4204c3b5a17ce0f207b1a5\": \"8000000000000000000000\",\n\t\"a035a3652478f82dbd6d115faa8ca946ec9e681d\": \"109880000000000000000\",\n\t\"4f5801b1eb30b712d8a0575a9a71ff965d4f34eb\": \"300000000000000000000\",\n\t\"91dbb6aaad149585be47375c5d6de5ff09191518\": \"20000000000000000000000\",\n\t\"d043a011ec4270ee7ec8b968737515e503f83028\": \"500000000000000000000\",\n\t\"bb371c72c9f0316cea2bd9c6fbb4079e775429ef\": \"1760000000000000000000\",\n\t\"aa1df92e51dff70b1973e0e924c66287b494a178\": \"534400000000000000000\",\n\t\"bd5f46caab2c3d4b289396bbb07f203c4da82530\": \"80000000000000000000\",\n\t\"4d29fc523a2c1629532121da9998e9b5ab9d1b45\": \"15800000000000000000\",\n\t\"addb26317227f45c87a2cb90dc4cfd02fb23caf8\": \"1000000000000000000000\",\n\t\"52e46783329a769301b175009d346768f4c87ee4\": \"2000000000000000000000\",\n\t\"caad9dc20d589ce428d8fda3a9d53a607b7988b5\": \"4000000000000000000000\",\n\t\"95034e1621865137cd4739b346dc17da3a27c34e\": \"1580000000000000000000\",\n\t\"0c3239e2e841242db989a61518c22247e8c55208\": \"263656000000000000000\",\n\t\"5a0d609aae2332b137ab3b2f26615a808f37e433\": \"160000000000000000000000\",\n\t\"2334c590c7a48769103045c5b6534c8a3469f44a\": \"17443200000000000000000\",\n\t\"ddfcca13f934f0cfbe231da13039d70475e6a1d0\": \"1000169000000000000000\",\n\t\"ee7288d91086d9e2eb910014d9ab90a02d78c2a0\": \"2000000000000000000000\",\n\t\"fb91fb1a695553f0c68e21276decf0b83909b86d\": \"100016000000000000000\",\n\t\"38695fc7e1367ceb163ebb053751f9f68ddb07a0\": \"2000000000000000000000\",\n\t\"65093b239bbfba23c7775ca7da5a8648a9f54cf7\": \"400000000000000000000\",\n\t\"73d8fee3cb864dce22bb26ca9c2f086d5e95e63b\": \"1000000000000000000000\",\n\t\"f7155213449892744bc60f2e04400788bd041fdd\": \"66850000000000000000\",\n\t\"d1a71b2d0858e83270085d95a3b1549650035e23\": \"14900000000000000000000\",\n\t\"eac17b81ed5191fb0802aa54337313834107aaa4\": \"8000000000000000000000\",\n\t\"bb076aac92208069ea318a31ff8eeb14b7e996e3\": \"149000000000000000000\",\n\t\"9f46e7c1e9078cae86305ac7060b01467d6685ee\": \"668500000000000000000\",\n\t\"1598127982f2f8ad3b6b8fc3cf27bf617801ba2b\": \"173000000000000000000\",\n\t\"e91dac0195b19e37b59b53f7c017c0b2395ba44c\": \"1880000000000000000000\",\n\t\"a436c75453ccca4a1f1b62e5c4a30d86dde4be68\": \"2000000000000000000000\",\n\t\"11001b89ed873e3aaec1155634b4681643986323\": \"1000000000000000000000\",\n\t\"ab93b26ece0a0aa21365afed1fa9aea31cd54468\": \"1608000000000000000000\",\n\t\"e77febabdf080f0f5dca1d3f5766f2a79c0ffa7c\": \"1386000000000000000000\",\n\t\"1c4af0e863d2656c8635bc6ffec8dd9928908cb5\": \"2000000000000000000000\",\n\t\"0c48ae62d1539788eba013d75ea60b64eeba4e80\": \"2213311000000000000000\",\n\t\"423cc4594cf4abb6368de59fd2b1230734612143\": \"2000000000000000000000\",\n\t\"7f6b28c88421e4857e459281d78461692489d3fb\": \"2000000000000000000000\",\n\t\"806854588ecce541495f81c28a290373df0274b2\": \"582000000000000000000\",\n\t\"dc76e85ba50b9b31ec1e2620bce6e7c8058c0eaf\": \"20000000000000000000\",\n\t\"b00996b0566ecb3e7243b8227988dcb352c21899\": \"12000000000000000000000\",\n\t\"f5d14552b1dce0d6dc1f320da6ffc8a331cd6f0c\": \"1337000000000000000000\",\n\t\"55a61b109480b5b2c4fcfdef92d90584160c0d35\": \"44700000000000000000\",\n\t\"b8947822d5ace7a6ad8326e95496221e0be6b73d\": \"20000000000000000000\",\n\t\"492de46aaf8f1d708d59d79af1d03ad2cb60902f\": \"2000000000000000000000\",\n\t\"0e0d6633db1e0c7f234a6df163a10e0ab39c200f\": \"200000000000000000000\",\n\t\"f8bf9c04874e5a77f38f4c38527e80c676f7b887\": \"2000000000000000000000\",\n\t\"15528350e0d9670a2ea27f7b4a33b9c0f9621d21\": \"4000086000000000000000\",\n\t\"eccf7a0457b566b346ca673a180f444130216ac3\": \"100000000000000000000\",\n\t\"10cf560964ff83c1c9674c783c0f73fcd89943fc\": \"40000000000000000000000\",\n\t\"e7f06f699be31c440b43b4db0501ec0e25261644\": \"500000000000000000000\",\n\t\"b6ce4dc560fc73dc69fb7a62e388db7e72ea764f\": \"966000000000000000000\",\n\t\"f456055a11ab91ff668e2ec922961f2a23e3db25\": \"18200000000000000000\",\n\t\"8dfbafbc0e5b5c86cd1ad697feea04f43188de96\": \"390060000000000000000\",\n\t\"085b4ab75d8362d914435cedee1daa2b1ee1a23b\": \"3880000000000000000000\",\n\t\"e400d651bb3f2d23d5f849e6f92d9c5795c43a8a\": \"2674000000000000000000\",\n\t\"851aa91c82f42fad5dd8e8bb5ea69c8f3a5977d1\": \"148607000000000000000\",\n\t\"4c935bb250778b3c4c7f7e07fc251fa630314aab\": \"1500000000000000000000\",\n\t\"ebd356156a383123343d48843bffed6103e866b3\": \"1970000000000000000000\",\n\t\"da0b48e489d302b4b7bf204f957c1c9be383b0df\": \"2000000000000000000000\",\n\t\"7085ae7e7e4d932197b5c7858c00a3674626b7a5\": \"6000000000000000000000\",\n\t\"5b06d1e6930c1054692b79e3dbe6ecce53966420\": \"205400000000000000000\",\n\t\"8df53d96191471e059de51c718b983e4a51d2afd\": \"32000000000000000000000\",\n\t\"0678654ac6761db904a2f7e8595ec1eaac734308\": \"878000000000000000000\",\n\t\"89fee30d1728d96cecc1dab3da2e771afbcfaa41\": \"1999944000000000000000\",\n\t\"59c5d06b170ee4d26eb0a0eb46cb7d90c1c91019\": \"10000000000000000000000\",\n\t\"2b129c26b75dde127f8320bd0f63410c92a9f876\": \"2200000000000000000000\",\n\t\"3d6ae053fcbc318d6fd0fbc353b8bf542e680d27\": \"14300000000000000000\",\n\t\"755a60bf522fbd8fff9723446b7e343a7068567e\": \"20000000000000000000000\",\n\t\"947e11e5ea290d6fc3b38048979e0cd44ec7c17f\": \"2000000000000000000000\",\n\t\"711ecf77d71b3d0ea95ce4758afecdb9c131079d\": \"760000000000000000000\",\n\t\"de9eff4c798811d968dccb460d9b069cf30278e0\": \"400000000000000000000\",\n\t\"4e892e8081bf36e488fddb3b2630f3f1e8da30d2\": \"12003800000000000000000\",\n\t\"8ede7e3dc50749c6c50e2e28168478c34db81946\": \"19999800000000000000000\",\n\t\"0c30cacc3f72269f8b4f04cf073d2b05a83d9ad1\": \"2001000000000000000000\",\n\t\"e51eb87e7fb7311f5228c479b48ec9878831ac4c\": \"2000000000000000000000\",\n\t\"8b01da34d470c1d115acf4d8113c4dd8a8c338e4\": \"25220000000000000000000\",\n\t\"4329fc0931cbeb033880fe4c9398ca45b0e2d11a\": \"2000400000000000000000\",\n\t\"540c072802014ef0d561345aec481e8e11cb3570\": \"8000000000000000000000\",\n\t\"21e5d2bae995ccfd08a5c16bb524e1f630448f82\": \"2800000000000000000000\",\n\t\"5cf8c03eb3e872e50f7cfd0c2f8d3b3f2cb5183a\": \"200000000000000000000\",\n\t\"5c0f2e51378f6b0d7bab617331580b6e39ad3ca5\": \"9600000000000000000000\",\n\t\"d2f241255dd7c3f73c07043071ec08ddd9c5cde5\": \"500000000000000000000\",\n\t\"cbe1b948864d8474e765145858fca4550f784b92\": \"10000000000000000000000\",\n\t\"30742ccdf4abbcd005681f8159345c9e79054b1a\": \"668500000000000000000\",\n\t\"6aeb9f74742ea491813dbbf0d6fcde1a131d4db3\": \"440800000000000000000\",\n\t\"821eb90994a2fbf94bdc3233910296f76f9bf6e7\": \"10000000000000000000000\",\n\t\"25c1a37ee5f08265a1e10d3d90d5472955f97806\": \"1820000000000000000000\",\n\t\"7ef98b52bee953bef992f305fda027f8911c5851\": \"514717000000000000000\",\n\t\"8adc53ef8c18ed3051785d88e996f3e4b20ecd51\": \"42000000000000000000000\",\n\t\"007f4a23ca00cd043d25c2888c1aa5688f81a344\": \"773658000000000000000\",\n\t\"4a735d224792376d331367c093d31c8794341582\": \"1900000000000000000000\",\n\t\"05440c5b073b529b4829209dff88090e07c4f6f5\": \"1288000000000000000000\",\n\t\"5e772e27f28800c50dda973bb33e10762e6eea20\": \"1790000000000000000000\",\n\t\"a429fa88731fdd350e8ecd6ea54296b6484fe695\": \"1969606000000000000000\",\n\t\"e0d76b7166b1f3a12b4091ee2b29de8caa7d07db\": \"2000000000000000000000\",\n\t\"7ebd95e9c470f7283583dc6e9d2c4dce0bea8f84\": \"14000000000000000000000\",\n\t\"883a78aeabaa50d8ddd8570bcd34265f14b19363\": \"3879951000000000000000\",\n\t\"51f9c432a4e59ac86282d6adab4c2eb8919160eb\": \"530000000000000000000000\",\n\t\"b86607021b62d340cf2652f3f95fd2dc67698bdf\": \"5000000000000000000000\",\n\t\"acc0909fda2ea6b7b7a88db7a0aac868091ddbf6\": \"22155000000000000000\",\n\t\"69b80ed90f84834afa3ff82eb964703b560977d6\": \"26740000000000000000\",\n\t\"ca4ca9e4779d530ecbacd47e6a8058cfde65d98f\": \"800000000000000000000\",\n\t\"5d6c5c720d66a6abca8397142e63d26818eaab54\": \"40000000000000000000\",\n\t\"c2c13e72d268e7150dc799e7c6cf03c88954ced7\": \"700000000000000000000\",\n\t\"6bbd1e719390e6b91043f8b6b9df898ea8001b34\": \"2000053000000000000000\",\n\t\"a9ba6f413b82fcddf3affbbdd09287dcf50415ca\": \"4000000000000000000000\",\n\t\"ced3c7be8de7585140952aeb501dc1f876ecafb0\": \"4000000000000000000000\",\n\t\"1c63fa9e2cbbf23c49fcdef1cbabfe6e0d1e14c1\": \"1000000000000000000000\",\n\t\"7d6e990daa7105de2526339833f77b5c0b85d84f\": \"20000000000000000000000\",\n\t\"68addf019d6b9cab70acb13f0b3117999f062e12\": \"49941000000000000000\",\n\t\"a77428bcb2a0db76fc8ef1e20e461a0a32c5ac15\": \"401100000000000000000\",\n\t\"26048fe84d9b010a62e731627e49bc2eb73f408f\": \"4000000000000000000000\",\n\t\"ff26138330274df4e0a3081e6df7dd983ec6e78f\": \"2000000000000000000000\",\n\t\"b7382d37db0398ac72410cf9813de9f8e1ec8dad\": \"1000070000000000000000\",\n\t\"44f62f2aaabc29ad3a6b04e1ff6f9ce452d1c140\": \"17000000000000000000000\",\n\t\"47fef58584465248a0810d60463ee93e5a6ee8d3\": \"283100000000000000000\",\n\t\"bd2b70fecc37640f69514fc7f3404946aad86b11\": \"1200000000000000000000\",\n\t\"649a85b93653075fa6562c409a565d087ba3e1ba\": \"2000000000000000000000\",\n\t\"55866486ec168f79dbe0e1abb18864d98991ae2c\": \"16100000000000000000\",\n\t\"d7e74afdbad55e96cebc5a374f2c8b768680f2b0\": \"99000000000000000000\",\n\t\"a8c1d6aa41fe3d65f67bd01de2a866ed1ed9ae52\": \"30000000000000000000\",\n\t\"744c0c77ba7f236920d1e434de5da33e48ebf02c\": \"1970000000000000000000\",\n\t\"9445ba5c30e98961b8602461d0385d40fbd80311\": \"10000000000000000000000\",\n\t\"eb835c1a911817878a33d167569ea3cdd387f328\": \"1000000000000000000000\",\n\t\"761a6e362c97fbbd7c5977acba2da74687365f49\": \"183840000000000000000\",\n\t\"38202c5cd7078d4f887673ab07109ad8ada89720\": \"1000000000000000000000\",\n\t\"5abfec25f74cd88437631a7731906932776356f9\": \"11901484239480000000000000\",\n\t\"28e4af30cd93f686a122ad7bb19f8a8785eee342\": \"2101000000000000000000\",\n\t\"3a9b111029ce1f20c9109c7a74eeeef34f4f2eb2\": \"4000000000000000000000\",\n\t\"7bb9571f394b0b1a8eba5664e9d8b5e840677bea\": \"19700000000000000000\",\n\t\"50fb36c27107ee2ca9a3236e2746cca19ace6b49\": \"2000000000000000000000\",\n\t\"a3bc979b7080092fa1f92f6e0fb347e28d995045\": \"2800000000000000000000\",\n\t\"d04b861b3d9acc563a901689941ab1e1861161a2\": \"20000000000000000000\",\n\t\"58c555bc293cdb16c6362ed97ae9550b92ea180e\": \"20000000000000000000\",\n\t\"8bf02bd748690e1fd1c76d270833048b66b25fd3\": \"11800000000000000000000\",\n\t\"fbc01db54e47cdc3c438694ab717a856c23fe6e9\": \"8456774000000000000000\",\n\t\"9c9a07a8e57c3172a919ef64789474490f0d9f51\": \"10000000000000000000000\",\n\t\"fc7e22a503ec5abe9b08c50bd14999f520fa4884\": \"6387725000000000000000\",\n\t\"9b773669e87d76018c090f8255e54409b9dca8b2\": \"20000000000000000000\",\n\t\"ffe8cbc1681e5e9db74a0f93f8ed25897519120f\": \"1507000000000000000000\",\n\t\"4d4cf5807429615e30cdface1e5aae4dad3055e6\": \"600000000000000000000\",\n\t\"cfde0fc75d6f16c443c3038217372d99f5d907f7\": \"2419000000000000000000\",\n\t\"818ffe271fc3973565c303f213f6d2da89897ebd\": \"5734655000000000000000\",\n\t\"ba1fcaf223937ef89e85675503bdb7ca6a928b78\": \"640000000000000000000\",\n\t\"a30a45520e5206d9004070e6af3e7bb2e8dd5313\": \"400000000000000000000\",\n\t\"a747439ad0d393b5a03861d77296326de8bb9db9\": \"1000000000000000000000\",\n\t\"14d00aad39a0a7d19ca05350f7b03727f08dd82e\": \"500000000000000000000\",\n\t\"551999ddd205563327b9b530785acff9bc73a4ba\": \"6000000000000000000000\",\n\t\"a4670731175893bbcff4fa85ce97d94fc51c4ba8\": \"8000000000000000000000\",\n\t\"f858171a04d357a13b4941c16e7e55ddd4941329\": \"41984000000000000000\",\n\t\"a6484cc684c4c91db53eb68a4da45a6a6bda3067\": \"6000000000000000000000\",\n\t\"00d75ed60c774f8b3a5a5173fb1833ad7105a2d9\": \"2005500000000000000000\",\n\t\"bf92418a0c6c31244d220260cb3e867dd7b4ef49\": \"99800000000000000000\",\n\t\"716d50cca01e938500e6421cc070c3507c67d387\": \"2000000000000000000000\",\n\t\"82a8b96b6c9e13ebec1e9f18ac02a60ea88a48ff\": \"1999998000000000000000\",\n\t\"5a565285374a49eedd504c957d510874d00455bc\": \"100000000000000000000\",\n\t\"778c79f4de1953ebce98fe8006d53a81fb514012\": \"999800000000000000000\",\n\t\"41b2d34fde0b1029262b4172c81c1590405b03ae\": \"1000000000000000000000\",\n\t\"4039bd50a2bde15ffe37191f410390962a2b8886\": \"200000000000000000000\",\n\t\"c033be10cb48613bd5ebcb33ed4902f38b583003\": \"3000000000000000000000\",\n\t\"5d5751819b4f3d26ed0c1ac571552735271dbefa\": \"1000000000000000000000\",\n\t\"b600429752f399c80d0734744bae0a022eca67c6\": \"20000000000000000000\",\n\t\"f875619d8a23e45d8998d184d480c0748970822a\": \"4000000000000000000000\",\n\t\"71c7230a1d35bdd6819ed4b9a88e94a0eb0786dd\": \"4365000000000000000000\",\n\t\"b2f9c972c1e9737755b3ff1b3088738396395b26\": \"20000000000000000000000\",\n\t\"a66a4963b27f1ee1932b172be5964e0d3ae54b51\": \"173000000000000000000\",\n\t\"53ce88e66c5af2f29bbd8f592a56a3d15f206c32\": \"140840000000000000000\",\n\t\"433e3ba1c51b810fc467d5ba4dea42f7a9885e69\": \"40000000000000000000000\",\n\t\"c7837ad0a0bf14186937ace06c5546a36aa54f46\": \"4000000000000000000000\",\n\t\"c3f8f67295a5cd049364d05d23502623a3e52e84\": \"6000000000000000000000\",\n\t\"3fd0bb47798cf44cdfbe4d333de637df4a00e45c\": \"100040000000000000000\",\n\t\"a1ae8d4540d4db6fdde7146f415b431eb55c7983\": \"197000000000000000000\",\n\t\"5cccf1508bfd35c20530aa642500c10dee65eaed\": \"850000000000000000000\",\n\t\"a53ead54f7850af21438cbe07af686279a315b86\": \"10000000000000000000000\",\n\t\"8cf6da0204dbc4860b46ad973fc111008d9e0c46\": \"200000000000000000000\",\n\t\"8e7936d592008fdc7aa04edeeb755ab513dbb89d\": \"20000000000000000000\",\n\t\"4a53dcdb56ce4cdce9f82ec0eb13d67352e7c88b\": \"4200000000000000000000\",\n\t\"2b4f4507bb6b9817942ce433781b708fbcd166fd\": \"18200000000000000000\",\n\t\"026432af37dc5113f1f46d480a4de0b28052237e\": \"355800000000000000000\",\n\t\"e780a56306ba1e6bb331952c22539b858af9f77d\": \"50000000000000000000000\",\n\t\"d1f1694d22671b5aad6a94995c369fbe6133676f\": \"1000000000000000000000\",\n\t\"7c45f0f8442a56dbd39dbf159995415c52ed479b\": \"2000000000000000000000\",\n\t\"b65941d44c50d24666670d364766e991c02e11c2\": \"600000000000000000000\",\n\t\"45e68db8dbbaba5fc2cb337c62bcd0d61b059189\": \"2000000000000000000000\",\n\t\"05f3631f5664bdad5d0132c8388d36d7d8920918\": \"20000000000000000000\",\n\t\"5475d7f174bdb1f789017c7c1705989646079d49\": \"9400000000000000000000\",\n\t\"c7bf2ed1ed312940ee6aded1516e268e4a604856\": \"6000000000000000000000\",\n\t\"39aaf0854db6eb39bc7b2e43846a76171c0445de\": \"1850000000000000000000\",\n\t\"c817df1b91faf30fe3251571727c9711b45d8f06\": \"1999944000000000000000\",\n\t\"7d13d6705884ab2157dd8dcc7046caf58ee94be4\": \"137200000000000000000000\",\n\t\"478dc09a1311377c093f9cc8ae74111f65f82f39\": \"4000000000000000000000\",\n\t\"8043ed22f997e5a2a4c16e364486ae64975692c4\": \"1130513000000000000000\",\n\t\"b9a985501ee950829b17fae1c9cf348c3156542c\": \"294100000000000000000\",\n\t\"d5cba5b26bea5d73fabb1abafacdef85def368cc\": \"200000000000000000000\",\n\t\"6776e133d9dc354c12a951087b639650f539a433\": \"120000000000000000000\",\n\t\"804ca94972634f633a51f3560b1d06c0b293b3b1\": \"200000000000000000000\",\n\t\"0be1fdf626ee6189102d70d13b31012c95cd1cd6\": \"2000000000000000000000\",\n\t\"f848fce9ab611c7d99206e23fac69ad488b94fe1\": \"48500000000000000000\",\n\t\"f01195d657ef3c942e6cb83949e5a20b5cfa8b1e\": \"25760000000000000000000\",\n\t\"78a5e89900bd3f81dd71ba869d25fec65261df15\": \"51900000000000000000000\",\n\t\"d6f1e55b1694089ebcb4fe7d7882aa66c8976176\": \"19998846000000000000000\",\n\t\"d5294b666242303b6df0b1c88d37429bc8c965aa\": \"300700000000000000000\",\n\t\"3171877e9d820cc618fc0919b29efd333fda4934\": \"1000000000000000000000\",\n\t\"2901f8077f34190bb47a8e227fa29b30ce113b31\": \"100000000000000000000\",\n\t\"6b2284440221ce16a8382de5ff0229472269deec\": \"1000000000000000000000\",\n\t\"1bba03ff6b4ad5bf18184acb21b188a399e9eb4a\": \"1790000000000000000000\",\n\t\"80744618de396a543197ee4894abd06398dd7c27\": \"2000000000000000000000\",\n\t\"1b799033ef6dc7127822f74542bb22dbfc09a308\": \"100000000000000000000\",\n\t\"d513a45080ff2febe62cd5854abe29ee4467f996\": \"153200000000000000000\",\n\t\"e761d27fa3502cc76bb1a608740e1403cf9dfc69\": \"280000000000000000000\",\n\t\"53989ed330563fd57dfec9bd343c3760b0799390\": \"6208000000000000000000\",\n\t\"ccf7110d1bd9a74bfd1d7d7d2d9d55607e7b837d\": \"900000000000000000000\",\n\t\"f373e9daac0c8675f53b797a160f6fc034ae6b23\": \"100000000000000000000\",\n\t\"abc9a99e8a2148a55a6d82bd51b98eb5391fdbaf\": \"6000000000000000000000\",\n\t\"ffec0913c635baca2f5e57a37aa9fb7b6c9b6e26\": \"805000000000000000000\",\n\t\"581a3af297efa4436a29af0072929abf9826f58b\": \"2000000000000000000000\",\n\t\"924efa6db595b79313277e88319625076b580a10\": \"2000000000000000000000\",\n\t\"65d8dd4e251cbc021f05b010f2d5dc520c3872e0\": \"834956000000000000000\",\n\t\"6c67d6db1d03516c128b8ff234bf3d49b26d2941\": \"100000000000000000000000\",\n\t\"496d365534530a5fc1577c0a5241cb88c4da7072\": \"1790000000000000000000\",\n\t\"b85ff03e7b5fc422981fae5e9941dacbdaba7584\": \"1337000000000000000000\",\n\t\"e13540ecee11b212e8b775dc8e71f374aae9b3f8\": \"2000000000000000000000\",\n\t\"a02e3f8f5959a7aab7418612129b701ca1b80010\": \"20000000000000000000\",\n\t\"a7a3f153cdc38821c20c5d8c8241b294a3f82b24\": \"500000000000000000000\",\n\t\"366175403481e0ab15bb514615cbb989ebc68f82\": \"2000000000000000000000\",\n\t\"5104ecc0e330dd1f81b58ac9dbb1a9fbf88a3c85\": \"100000000000000000000000\",\n\t\"a466d770d898d8c9d405e4a0e551efafcde53cf9\": \"492500000000000000000\",\n\t\"5fa8a54e68176c4fe2c01cf671c515bfbdd528a8\": \"330000000000000000000000\",\n\t\"e2e15c60dd381e3a4be25071ab249a4c5c5264da\": \"2350502000000000000000\",\n\t\"0628bfbe5535782fb588406bc96660a49b011af5\": \"1520000000000000000000\",\n\t\"04d6b8d4da867407bb997749debbcdc0b358538a\": \"1000000000000000000000\",\n\t\"0e6ec313376271dff55423ab5422cc3a8b06b22b\": \"4000000000000000000000\",\n\t\"8787d12677a5ec291e57e31ffbfad105c3324b87\": \"12438777000000000000000\",\n\t\"58e2f11223fc8237f69d99c6289c148c0604f742\": \"24000000000000000000000\",\n\t\"5600730a55f6b20ebd24811faa3de96d1662abab\": \"1880000000000000000000\",\n\t\"fce089635ce97abac06b44819be5bb0a3e2e0b37\": \"92491000000000000000\",\n\t\"fa0c1a988c8a17ad3528eb28b3409daa58225f26\": \"200000000000000000000\",\n\t\"7ae1c19e53c71cee4c73fae2d7fc73bf9ab5e392\": \"1000000000000000000000\",\n\t\"bd17eed82b9a2592019a1b1b3c0fbad45c408d22\": \"250000000000000000000\",\n\t\"884a7a39d0916e05f1c242df55607f37df8c5fda\": \"23400000000000000000000\",\n\t\"ca70f4ddbf069d2143bd6bbc7f696b52789b32e7\": \"3000000000000000000000\",\n\t\"7b25bb9ca8e702217e9333225250e53c36804d48\": \"1880000000000000000000\",\n\t\"ea8317197959424041d9d7c67a3ece1dbb78bb55\": \"394000000000000000000\",\n\t\"5cb953a0e42f5030812226217fffc3ce230457e4\": \"100000000000000000000\",\n\t\"d1f4dc1ddb8abb8848a8b14e25f3b55a8591c266\": \"250000000000000000000\",\n\t\"6a42ca971c6578d5ade295c3e7f4ad331dd3424e\": \"6000000000000000000000\",\n\t\"07e1162ceae3cf21a3f62d105990302e307f4e3b\": \"1530000000000000000000\",\n\t\"5d1dc3387b47b8451e55106c0cc67d6dc72b7f0b\": \"2000000000000000000000\",\n\t\"5d2819e8d57821922ee445650ccaec7d40544a8d\": \"200000000000000000000\",\n\t\"4c24b78baf2bafc7fcc69016426be973e20a50b2\": \"3000000000000000000000\",\n\t\"630c5273126d517ce67101811cab16b8534cf9a8\": \"9422595000000000000000\",\n\t\"291f929ca59b54f8443e3d4d75d95dee243cef78\": \"499938000000000000000\",\n\t\"2dd325fdffb97b19995284afa5abdb574a1df16a\": \"500000000000000000000\",\n\t\"4fce8429ba49caa0369d1e494db57e89eab2ad39\": \"200000000000000000000000\",\n\t\"712b76510214dc620f6c3a1dd29aa22bf6d214fb\": \"6000000000000000000000\",\n\t\"266f2da7f0085ef3f3fa09baee232b93c744db2e\": \"60000000000000000000000\",\n\t\"0770c61be78772230cb5a3bb2429a72614a0b336\": \"6767695000000000000000\",\n\t\"02dfcb17a1b87441036374b762a5d3418b1cb4d4\": \"1340860000000000000000\",\n\t\"5e67df8969101adabd91accd6bb1991274af8df2\": \"500000000000000000000\",\n\t\"7d9c59631e2ba2e8e82891f3979922aaa3b567a1\": \"8000000000000000000000\",\n\t\"949f8c107bc7f0aceaa0f17052aadbd2f9732b2e\": \"2000000000000000000000\",\n\t\"ea4e809e266ae5f13cdbe38f9d0456e6386d1274\": \"4500000000000000000000\",\n\t\"cd5510a242dfb0183de925fba866e312fabc1657\": \"2400000000000000000000\",\n\t\"a36e0d94b95364a82671b608cb2d373245612909\": \"150011000000000000000\",\n\t\"0ec46696ffac1f58005fa8439824f08eed1df89b\": \"10000000000000000000000\",\n\t\"c6fb1ee37417d080a0d048923bdabab095d077c6\": \"200000000000000000000\",\n\t\"53c9eca40973f63bb5927be0bc6a8a8be1951f74\": \"2000000000000000000000\",\n\t\"ea14bfda0a6e76668f8788321f07df37824ec5df\": \"200000000000000000000000\",\n\t\"dfb4d4ade52fcc818acc7a2c6bb2b00224658f78\": \"7750000000000000000000\",\n\t\"5997ffefb3c1d9d10f1ae2ac8ac3c8e2d2292783\": \"1000000000000000000000\",\n\t\"8eceb2e124536c5b5ffc640ed14ff15ed9a8cb71\": \"2000000000000000000000\",\n\t\"8f02bda6c36922a6be6a509be51906d393f7b99b\": \"1019835000000000000000\",\n\t\"530077c9f7b907ff9cec0c77a41a70e9029add4a\": \"2000000000000000000000\",\n\t\"08936a37df85b3a158cafd9de021f58137681347\": \"18200000000000000000\",\n\t\"8e9c429266df057efa78dd1d5f77fc40742ad466\": \"300061000000000000000\",\n\t\"acc59f3b30ceffc56461cc5b8df48902240e0e7b\": \"2000000000000000000000\",\n\t\"f5534815dc635efa5cc84b2ac734723e21b29372\": \"1580000000000000000000\",\n\t\"f873e57a65c93b6e18cb75f0dc077d5b8933dc5c\": \"197000000000000000000\",\n\t\"25b78c9fad85b43343f0bfcd0fac11c9949ca5eb\": \"2000000000000000000000\",\n\t\"aad2b7f8106695078e6c138ec81a7486aaca1eb2\": \"200000000000000000000\",\n\t\"509c8668036d143fb8ae70b11995631f3dfcad87\": \"1000000000000000000000\",\n\t\"3602458da86f6d6a9d9eb03daf97fe5619d442fa\": \"2000000000000000000000\",\n\t\"9f607b3f12469f446121cebf3475356b71b4328c\": \"4000000000000000000000\",\n\t\"fe3827d57630cf8761d512797b0b858e478bbd12\": \"20000000000000000000\",\n\t\"9d9c4efe9f433989e23be94049215329fa55b4cb\": \"256215000000000000000\",\n\t\"9bd905f1719fc7acd0159d4dc1f8db2f21472338\": \"1000000000000000000000\",\n\t\"7d82e523cc2dc591da3954e8b6bb2caf6461e69c\": \"2316058000000000000000\",\n\t\"74afe54902d615782576f8baac13ac970c050f6e\": \"177670000000000000000\",\n\t\"aff11ccf699304d5f5862af86083451c26e79ae5\": \"1999000000000000000000\",\n\t\"3885fee67107dc3a3c741ee290c98918c9b99397\": \"20000000000000000000\",\n\t\"36343aeca07b6ed58a0e62fa4ecb498a124fc971\": \"300000000000000000000\",\n\t\"c94a28fb3230a9ddfa964e770f2ce3c253a7be4f\": \"200000000000000000000\",\n\t\"9882967cee68d2a839fad8ab4a7c3dddf6c0adc8\": \"1336866000000000000000\",\n\t\"95df4e3445d7662624c48eba74cf9e0a53e9f732\": \"56000000000000000000000\",\n\t\"ca9faa17542fafbb388eab21bc4c94e8a7b34788\": \"1999999000000000000000\",\n\t\"c8b1850525d946f2ae84f317b15188c536a5dc86\": \"2685000000000000000000\",\n\t\"39bac68d947859f59e9226089c96d62e9fbe3cde\": \"40000000000000000000\",\n\t\"a9bfc410dddb20711e45c07387eab30a054e19ac\": \"1154750000000000000000\",\n\t\"540a1819bd7c35861e791804e5fbb3bc97c9abb1\": \"1454400000000000000000\",\n\t\"667b61c03bb937a9f5d0fc5a09f1ea3363c77035\": \"4250000000000000000000\",\n\t\"010df1df4bed23760d2d1c03781586ddf7918e54\": \"60000000000000000000\",\n\t\"bd51ee2ea143d7b1d6b77e7e44bdd7da12f485ac\": \"1318800000000000000000\",\n\t\"fb5125bf0f5eb0b6f020e56bfc2fdf3d402c097e\": \"5910000000000000000000\",\n\t\"3f0c83aac5717962734e5ceaeaecd39b28ad06be\": \"2000000000000000000000\",\n\t\"f10661ff94140f203e7a482572437938bec9c3f7\": \"20000000000000000000000\",\n\t\"bd3097a79b3c0d2ebff0e6e86ab0edadbed47096\": \"1670000000000000000000\",\n\t\"edeb4894aadd0081bbddd3e8846804b583d19f27\": \"2000000000000000000000\",\n\t\"49c9771fca19d5b9d245c891f8158fe49f47a062\": \"10000000000000000000000\",\n\t\"6405dd13e93abcff377e700e3c1a0086eca27d29\": \"18200000000000000000\",\n\t\"ce5e04f0184369bcfa06aca66ffa91bf59fa0fb9\": \"40000000000000000000\",\n\t\"4364309a9fa07095600f79edc65120cdcd23dc64\": \"10000000000000000000000\",\n\t\"b749b54e04d5b19bdcedfb84da7701ab478c27ae\": \"2680000000000000000000\",\n\t\"f593c65285ee6bbd6637f3be8f89ad40d489f655\": \"3000000000000000000000\",\n\t\"d224f880f9479a89d32f09e52be990b288135cef\": \"17300000000000000000000\",\n\t\"85bb51bc3bfe9a1b2a2f6b1cda95bca8b38c8d5e\": \"321750000000000000000\",\n\t\"caf4481d9db78dc4f25f7b4ac8bd3b1ca0106b31\": \"5000000000000000000000\",\n\t\"51ca8bd4dc644fac47af675563d5804a0da21eeb\": \"788000000000000000000\",\n\t\"19f643e1a8fa04ae16006028138333a59a96de87\": \"20000000000000000000\",\n\t\"58b808a65b51e6338969afb95ec70735e451d526\": \"39998000000000000000000\",\n\t\"574921838cc77d6c98b17d903a3ae0ee0da95bd0\": \"53480000000000000000000\",\n\t\"7c6924d07c3ef5891966fe0a7856c87bef9d2034\": \"2000000000000000000000\",\n\t\"f9767e4ecb4a5980527508d7bec3d45e4c649c13\": \"1910000000000000000000\",\n\t\"f3be99b9103ce7550aa74ff1db18e09dfe32e005\": \"2000000000000000000000\",\n\t\"625644c95a873ef8c06cdb9e9f6d8d7680043d62\": \"1800000000000000000000\",\n\t\"6a44af96b3f032ae641beb67f4b6c83342d37c5d\": \"29000000000000000000\",\n\t\"d3a10ec7a5c9324999dd9e9b6bde7c911e584bda\": \"600000000000000000000\",\n\t\"e8ddbed732ebfe754096fde9086b8ea4a4cdc616\": \"2000000000000000000000\",\n\t\"235fa66c025ef5540070ebcf0d372d8177c467ab\": \"33400000000000000000000\",\n\t\"4d08471d68007aff2ae279bc5e3fe4156fbbe3de\": \"40000000000000000000000\",\n\t\"dadc00ab7927603c2fcf31cee352f80e6c4d6351\": \"1999664000000000000000\",\n\t\"7393cbe7f9ba2165e5a7553500b6e75da3c33abf\": \"100000000000000000000\",\n\t\"77617ebc4bebc5f5ddeb1b7a70cdeb6ae2ffa024\": \"1970000000000000000000\",\n\t\"7fea1962e35d62059768c749bedd96cab930d378\": \"2000000000000000000000\",\n\t\"243b3bca6a299359e886ce33a30341fafe4d573d\": \"20000000000000000000000\",\n\t\"b94d47b3c052a5e50e4261ae06a20f45d8eee297\": \"2000000000000000000000\",\n\t\"e727e67ef911b81f6cf9c73fcbfebc2b02b5bfc6\": \"2000000000000000000000\",\n\t\"e510d6797fba3d6693835a844ea2ad540691971b\": \"17381000000000000000000\",\n\t\"0cdc960b998c141998160dc179b36c15d28470ed\": \"500038000000000000000\",\n\t\"3e76a62db187aa74f63817533b306cead0e8cebe\": \"31200000000000000000000\",\n\t\"495b641b1cdea362c3b4cbbd0f5cc50b1e176b9c\": \"1000000000000000000000\",\n\t\"5126460d692c71c9af6f05574d93998368a23799\": \"52000000000000000000\",\n\t\"a008019863c1a77c1499eb39bbd7bf2dd7a31cb9\": \"137000000000000000000\",\n\t\"65ee20b06d9ad589a7e7ce04b9f5f795f402aece\": \"2000000000000000000000\",\n\t\"f432b9dbaf11bdbd73b6519fc0a904198771aac6\": \"152000000000000000000\",\n\t\"85946d56a4d371a93368539690b60ec825107454\": \"1730000000000000000000\",\n\t\"26f9f7cefd7e394b9d3924412bf2c2831faf1f85\": \"4000000000000000000000\",\n\t\"d4ebb1929a23871cf77fe049ab9602be08be0a73\": \"1910000000000000000000\",\n\t\"4fdac1aa517007e0089430b3316a1badd12c01c7\": \"500000000000000000000\",\n\t\"05e671de55afec964b074de574d5158d5d21b0a3\": \"3940000000000000000000\",\n\t\"20181c4b41f6f972b66958215f19f570c15ddff1\": \"1600000000000000000000\",\n\t\"cc9519d1f3985f6b255eaded12d5624a972721e1\": \"1000000000000000000000\",\n\t\"169bbefc41cfd7d7cbb8dfc63020e9fb06d49546\": \"2000000000000000000000\",\n\t\"175a183a3a235ffbb03ba835675267229417a091\": \"16000000000000000000000\",\n\t\"8dde3cb8118568ef4503fe998ccdf536bf19a098\": \"4000000000000000000000\",\n\t\"6a05b21c4f17f9d73f5fb2b0cb89ff5356a6cc7e\": \"1500000000000000000000\",\n\t\"5cc4cba621f220637742057f6055b80dffd77e13\": \"39997692000000000000000\",\n\t\"ecb94c568bfe59ade650645f4f26306c736cace4\": \"267400000000000000000\",\n\t\"dfa6b8b8ad3184e357da282951d79161cfb089bc\": \"400000000000000000000\",\n\t\"a3058c51737a4e96c55f2ef6bd7bb358167ec2a7\": \"606093000000000000000\",\n\t\"051d424276b21239665186133d653bb8b1862f89\": \"1000000000000000000000\",\n\t\"d05ffb2b74f867204fe531653b0248e21c13544e\": \"1000000000000000000000\",\n\t\"e1f63ebbc62c7b7444040eb99623964f7667b376\": \"20000000000000000000\",\n\t\"e5a3d7eb13b15c100177236d1beb30d17ee15420\": \"2000000000000000000000\",\n\t\"18fa8625c9dc843c78c7ab259ff87c9599e07f10\": \"1000000000000000000000\",\n\t\"64264aedd52dcae918a012fbcd0c030ee6f71821\": \"1000000000000000000000\",\n\t\"6f1f4907b8f61f0c51568d692806b382f50324f5\": \"2000000000000000000000\",\n\t\"becef61c1c442bef7ce04b73adb249a8ba047e00\": \"1000400000000000000000\",\n\t\"7b893286427e72db219a21fc4dcd5fbf59283c31\": \"10000000000000000000000\",\n\t\"ce5eb63a7bf4fbc2f6e4baa0c68ab1cb4cf98fb4\": \"2000000000000000000000\",\n\t\"66ec16ee9caab411c55a6629e318de6ee216491d\": \"865000000000000000000\",\n\t\"30b66150f1a63457023fdd45d0cc6cb54e0c0f06\": \"1000000000000000000000\",\n\t\"87183160d172d2e084d327b86bcb7c1d8e6784ef\": \"4000086000000000000000\",\n\t\"c420388fbee84ad656dd68cdc1fbaa9392780b34\": \"187767000000000000000\",\n\t\"90f774c9147dde90853ddc43f08f16d455178b8c\": \"4000000000000000000000\",\n\t\"1e1d7a5f2468b94ea826982dbf2125793c6e4a5a\": \"999940000000000000000\",\n\t\"8043fdd0bc4c973d1663d55fc135508ec5d4f4fa\": \"20000000000000000000\",\n\t\"7bca1da6c80a66baa5db5ac98541c4be276b447d\": \"679000000000000000000\",\n\t\"73550beb732ba9ddafda7ae406e18f7feb0f8bb2\": \"2800000000000000000000\",\n\t\"adc19ec835afe3e58d87dc93a8a9213c90451326\": \"1971200000000000000000\",\n\t\"821d798af19989c3ae5b84a7a7283cd7fda1fabe\": \"20000000000000000000000\",\n\t\"4c4e6f13fb5e3f70c3760262a03e317982691d10\": \"100000000000000000000\",\n\t\"664e43119870af107a448db1278b044838ffcdaf\": \"400000000000000000000\",\n\t\"8da1178f55d97772bb1d24111a404a4f8715b95d\": \"878149000000000000000\",\n\t\"5e6e9747e162f8b45c656e0f6cae7a84bac80e4e\": \"2000000000000000000000\",\n\t\"c7eac31abce6d5f1dea42202b6a674153db47a29\": \"591000000000000000000\",\n\t\"d96711540e2e998343d4f590b6fc8fac3bb8b31d\": \"1758944000000000000000\",\n\t\"9da4ec407077f4b9707b2d9d2ede5ea5282bf1df\": \"4000000000000000000000\",\n\t\"f60c1b45f164b9580e20275a5c39e1d71e35f891\": \"2000000000000000000000\",\n\t\"eb6394a7bfa4d28911d5a5b23e93f35e340c2294\": \"78000000000000000000\",\n\t\"a89ac93b23370472daac337e9afdf642543f3e57\": \"10000000000000000000000\",\n\t\"bb618e25221ad9a740b299ed1406bc3934b0b16d\": \"1000000000000000000000\",\n\t\"817ac33bd8f847567372951f4a10d7a91ce3f430\": \"200015000000000000000\",\n\t\"fe6a895b795cb4bf85903d3ce09c5aa43953d3bf\": \"3400000000000000000000\",\n\t\"3673954399f6dfbe671818259bb278e2e92ee315\": \"200000000000000000000000\",\n\t\"df0ff1f3d27a8ec9fb8f6b0cb254a63bba8224a5\": \"4367636000000000000000\",\n\t\"ff12e49d8e06aa20f886293c0b98ed7eff788805\": \"4000000000000000000000\",\n\t\"5aef16a226dd68071f2483e1da42598319f69b2c\": \"2000000000000000000000\",\n\t\"0266ab1c6b0216230b9395443d5fa75e684568c6\": \"1000000000000000000000\",\n\t\"14a7352066364404db50f0d0d78d754a22198ef4\": \"1880000000000000000000\",\n\t\"444caf79b71338ee9aa7c733b02acaa7dc025948\": \"40000000000000000000\",\n\t\"64e2de21200b1899c3a0c0653b5040136d0dc842\": \"20000000000000000000000\",\n\t\"36e156610cd8ff64e780d89d0054385ca76755aa\": \"14000000000000000000000\",\n\t\"0a6ebe723b6ed1f9a86a69ddda68dc47465c2b1b\": \"1185000000000000000000\",\n\t\"38bf2a1f7a69de0e2546adb808b36335645da9ff\": \"2000320000000000000000\",\n\t\"39f44663d92561091b82a70dcf593d754005973a\": \"199999000000000000000\",\n\t\"24b9e6644f6ba4cde126270d81f6ab60f286dff4\": \"133700000000000000000\",\n\t\"9b59eb213b1e7565e45047e04ea0374f10762d16\": \"2000000000000000000000\",\n\t\"309544b6232c3dd737f945a03193d19b5f3f65b9\": \"1087440000000000000000\",\n\t\"b28bb39f3466517cd46f979cf59653ee7d8f152e\": \"450000000000000000000\",\n\t\"9da8e22ca10e67fea44e525e4751eeac36a31194\": \"260000000000000000000\",\n\t\"4f8ae80238e60008557075ab6afe0a7f2e74d729\": \"100000000000000000000\",\n\t\"74ed33acf43f35b98c9230b9e6642ecb5330839e\": \"681872000000000000000\",\n\t\"22842ab830da509913f81dd1f04f10af9edd1c55\": \"2000000000000000000000\",\n\t\"a8f37f0ab3a1d448a9e3ce40965f97a646083a34\": \"329800000000000000000\",\n\t\"582b70669c97aab7d68148d8d4e90411e2810d56\": \"999972000000000000000\",\n\t\"d5e55100fbd1956bbed2ca518d4b1fa376032b0b\": \"100000000000000000000\",\n\t\"b7cc6b1acc32d8b295df68ed9d5e60b8f64cb67b\": \"300000000000000000000\",\n\t\"e081ca1f4882db6043d5a9190703fde0ab3bf56d\": \"400000000000000000000\",\n\t\"c02077449a134a7ad1ef7e4d927affeceeadb5ae\": \"18200000000000000000\",\n\t\"e09fea755aee1a44c0a89f03b5deb762ba33006f\": \"1100070000000000000000\",\n\t\"b3717731dad65132da792d876030e46ac227bb8a\": \"1000000000000000000000\",\n\t\"157eb3d3113bd3b597714d3a954edd018982a5cb\": \"2000000000000000000000\",\n\t\"dc57345b38e0f067c9a31d9deac5275a10949321\": \"200000000000000000000\",\n\t\"40ea5044b204b23076b1a5803bf1d30c0f88871a\": \"14000000000000000000000\",\n\t\"2bab0fbe28d58420b52036770a12f9952aea6911\": \"3820000000000000000000\",\n\t\"adaa0e548c035affed64ca678a963fabe9a26bfd\": \"70000000000000000000\",\n\t\"bb48eaf516ce2dec3e41feb4c679e4957641164f\": \"3820000000000000000000\",\n\t\"7693bdeb6fc82b5bca721355223175d47a084b4d\": \"22000000000000000000000\",\n\t\"03cb98d7acd817de9d886d22fab3f1b57d92a608\": \"1600000000000000000000\",\n\t\"f88900db737955b1519b1a7d170a18864ce590eb\": \"18200000000000000000\",\n\t\"757fa55446c460968bb74b5ebca96c4ef2c709c5\": \"1015200000000000000000\",\n\t\"da855d53477f505ec4c8d5e8bb9180d38681119c\": \"5600000000000000000000\",\n\t\"e41aea250b877d423a63ba2bce2f3a61c0248d56\": \"260000000000000000000\",\n\t\"8262169b615870134eb4ac6c5f471c6bf2f789fc\": \"462500000000000000000\",\n\t\"66b0c100c49149935d14c0dc202cce907cea1a3d\": \"1970000000000000000000\",\n\t\"854c0c469c246b83b5d1b3eca443b39af5ee128a\": \"1600000000000000000000\",\n\t\"eb6810691d1ae0d19e47bd22cebee0b3ba27f88a\": \"2499922000000000000000\",\n\t\"24dcc24bd9c7210ceacfb30da98ae04a4d7b8ab9\": \"1000000000000000000000\",\n\t\"e31b4eef184c24ab098e36c802714bd4743dd0d4\": \"200000000000000000000\",\n\t\"99b8c824869de9ed24f3bff6854cb6dd45cc3f9f\": \"1880000000000000000000\",\n\t\"2ae73a79aea0278533accf21070922b1613f8f32\": \"3097417000000000000000\",\n\t\"ddbd2b932c763ba5b1b7ae3b362eac3e8d40121a\": \"10000000000000000000000\",\n\t\"1b4bbcb18165211b265b280716cb3f1f212176e8\": \"472325000000000000000\",\n\t\"e177e0c201d335ba3956929c571588b51c5223ae\": \"2000000000000000000000\",\n\t\"1945fe377fe6d4b71e3e791f6f17db243c9b8b0f\": \"2185500000000000000000\",\n\t\"3e9b34a57f3375ae59c0a75e19c4b641228d9700\": \"17900000000000000000\",\n\t\"a4d6c82eddae5947fbe9cdfbd548ae33d91a7191\": \"8000000000000000000000\",\n\t\"bad4425e171c3e72975eb46ac0a015db315a5d8f\": \"2000000000000000000000\",\n\t\"a2d2aa626b09d6d4e4b13f7ffc5a88bd7ad36742\": \"4639390000000000000000\",\n\t\"b61c34fcacda701a5aa8702459deb0e4ae838df8\": \"35000000000000000000000\",\n\t\"145e0600e2a927b2dd8d379356b45a2e7d51d3ae\": \"2545843000000000000000\",\n\t\"8df339214b6ad1b24663ce716034749d6ef838d9\": \"11000000000000000000000\",\n\t\"8fd9a5c33a7d9edce0997bdf77ab306424a11ea9\": \"2000000000000000000000\",\n\t\"097da12cfc1f7c1a2464def08c29bed5e2f851e9\": \"20000000000000000000\",\n\t\"ddabf13c3c8ea4e3d73d78ec717afafa430e5479\": \"41600000000000000000000\",\n\t\"9eeb07bd2b7890195e7d46bdf2071b6617514ddb\": \"2000000000000000000000\",\n\t\"819af9a1c27332b1c369bbda1b3de1c6e933d640\": \"314308000000000000000\",\n\t\"d7d2c6fca8ad1f75395210b57de5dfd673933909\": \"340000000000000000000\",\n\t\"cdd5d881a7362c9070073bdfbc75e72453ac510e\": \"842000000000000000000\",\n\t\"e9ac36376efa06109d40726307dd1a57e213eaa9\": \"194000000000000000000\",\n\t\"1bea4df5122fafdeb3607eddda1ea4ffdb9abf2a\": \"346000000000000000000\",\n\t\"3e5e93fb4c9c9d1246f8f247358e22c3c5d17b6a\": \"150000000000000000000\",\n\t\"6c1ddd33c81966dc8621776071a4129482f2c65f\": \"40000000000000000000000\",\n\t\"2ccb66494d0af689abf9483d365d782444e7dead\": \"1000000000000000000000\",\n\t\"19571a2b8f81c6bcf66ab3a10083295617150003\": \"492500000000000000000\",\n\t\"38ac664ee8e0795e4275cb852bcba6a479ad9c8d\": \"20000000000000000000\",\n\t\"c4803bb407c762f90b7596e6fde194931e769590\": \"4000000000000000000000\",\n\t\"93507e9e8119cbceda8ab087e7ecb071383d6981\": \"14000000000000000000000\",\n\t\"b672734afcc224e2e609fc51d4f059732744c948\": \"295500000000000000000\",\n\t\"fbbbebcfbe235e57dd2306ad1a9ec581c7f9f48f\": \"40000000000000000000\",\n\t\"8c81410ea8354cc5c65c41be8bd5de733c0b111d\": \"9550000000000000000000\",\n\t\"942c6b8c955bc0d88812678a236725b32739d947\": \"1550000000000000000000\",\n\t\"d2e817738abf1fb486583f80c350318bed860c80\": \"240010000000000000000\",\n\t\"bff5df769934b8943ca9137d0efef2fe6ebbb34e\": \"100000000000000000000\",\n\t\"6c4e426e8dc005dfa3516cb8a680b02eea95ae8e\": \"1337000000000000000000\",\n\t\"f645dd7c890093e8e4c8aa92a6bb353522d3dc98\": \"134000000000000000000\",\n\t\"4bac846af4169f1d95431b341d8800b22180af1a\": \"20000000000000000000\",\n\t\"0514954c3c2fb657f9a06f510ea22748f027cdd3\": \"400000000000000000000\",\n\t\"163dca73d7d6ea3f3e6062322a8734180c0b78ef\": \"2941400000000000000000\",\n\t\"feaca2ac74624bf348dac9985143cfd652a4be55\": \"26148245000000000000000\",\n\t\"fe80e9232deaff19baf99869883a4bdf0004e53c\": \"855680000000000000000\",\n\t\"17108dab2c50f99de110e1b3b3b4cd82f5df28e7\": \"980000000000000000000\",\n\t\"837a645dc95c49549f899c4e8bcf875324b2f57c\": \"600400000000000000000\",\n\t\"762998e1d75227fced7a70be109a4c0b4ed86414\": \"20000000000000000000\",\n\t\"c0a7e8435dff14c25577739db55c24d5bf57a3d9\": \"49250000000000000000000\",\n\t\"aead88d689416b1c91f2364421375b7d3c70fb2e\": \"2000000000000000000000\",\n\t\"9279b2228cec8f7b4dda3f320e9a0466c2f585ca\": \"5000000000000000000000\",\n\t\"36726f3b885a24f92996da81625ec8ad16d8cbe6\": \"1543723000000000000000\",\n\t\"3951e48e3c869e6b72a143b6a45068cdb9d466d0\": \"20000000000000000000\",\n\t\"f5d61ac4ca95475e5b7bffd5f2f690b316759615\": \"31040000000000000000000\",\n\t\"158a0d619253bf4432b5cd02c7b862f7c2b75636\": \"135733000000000000000\",\n\t\"e56d431324c92911a1749df292709c14b77a65cd\": \"8200000000000000000000\",\n\t\"9976947eff5f6ae5da08dd541192f378b428ff94\": \"8000000000000000000000\",\n\t\"83210583c16a4e1e1dac84ebd37e3d0f7c57eba4\": \"2000000000000000000000\",\n\t\"dcb64df43758c7cf974fa660484fbb718f8c67c1\": \"20000000000000000000000\",\n\t\"d4205592844055b3c7a1f80cefe3b8eb509bcde7\": \"178973000000000000000\",\n\t\"d0648a581b3508e135a2935d12c9657045d871ca\": \"8022000000000000000000\",\n\t\"e7d17524d00bad82497c0f27156a647ff51d2792\": \"20000000000000000000\",\n\t\"21582e99e502cbf3d3c23bdffb76e901ac6d56b2\": \"100000000000000000000\",\n\t\"e61f280915c774a31d223cf80c069266e5adf19b\": \"880000000000000000000\",\n\t\"03c91d92943603e752203e05340e566013b90045\": \"802200000000000000000\",\n\t\"22561c5931143536309c17e832587b625c390b9a\": \"4000000000000000000000\",\n\t\"e399c81a1d701b44f0b66f3399e66b275aaaf8c1\": \"1000000000000000000000\",\n\t\"7f8dbce180ed9c563635aad2d97b4cbc428906d9\": \"2674000000000000000000\",\n\t\"9f61beb46f5e853d0a8521c7446e68e34c7d0973\": \"560000000000000000000\",\n\t\"6d3f2ba856ccbb0237fa7661156b14b013f21240\": \"1000000000000000000000\",\n\t\"5f742e487e3ab81af2f94afdbe1b9b8f5ccc81bc\": \"2172412000000000000000\",\n\t\"b600feab4aa96c537504d96057223141692c193a\": \"400000000000000000000\",\n\t\"fab487500df20fb83ebed916791d561772adbebf\": \"1999980000000000000000\",\n\t\"f8704c16d2fd5ba3a2c01d0eb20484e6ecfa3109\": \"200000000000000000000\",\n\t\"3f1bc420c53c002c9e90037c44fe6a8ef4ddc962\": \"173000000000000000000\",\n\t\"82e577b515cb2b0860aafe1ce09a59e09fe7d040\": \"600000000000000000000\",\n\t\"bc999e385c5aebcac8d6f3f0d60d5aa725336d0d\": \"2000000000000000000000\",\n\t\"e16ce35961cd74bd590d04c4ad4a1989e05691c6\": \"146000000000000000000\",\n\t\"eb76424c0fd597d3e341a9642ad1ee118b2b579d\": \"4000000000000000000000\",\n\t\"c440c7ca2f964b6972ef664a2261dde892619d9c\": \"20000000000000000000000\",\n\t\"460d5355b2ceeb6e62107d81e51270b26bf45620\": \"2005500000000000000000\",\n\t\"fcada300283f6bcc134a91456760b0d77de410e0\": \"2000000000000000000000\",\n\t\"be8d7f18adfe5d6cc775394989e1930c979d007d\": \"1000000000000000000000\",\n\t\"a7f9220c8047826bd5d5183f4e676a6d77bfed36\": \"153368000000000000000\",\n\t\"98d204f9085f8c8e7de23e589b64c6eff692cc63\": \"2000000000000000000000\",\n\t\"5a2916b8d2e8cc12e207ab464d433e2370d823d9\": \"2000000000000000000000\",\n\t\"c42d6aeb710e3a50bfb44d6c31092969a11aa7f3\": \"150052000000000000000\",\n\t\"04ce45f600db18a9d0851b29d9393ebdaafe3dc5\": \"20000000000000000000\",\n\t\"7a1370a742ec2687e761a19ac5a794329ee67404\": \"2999988000000000000000\",\n\t\"da2ad58e77deddede2187646c465945a8dc3f641\": \"660000000000000000000\",\n\t\"ec58bc0d0c20d8f49465664153c5c196fe59e6be\": \"400000000000000000000\",\n\t\"f8063af4cc1dd9619ab5d8bff3fcd1faa8488221\": \"2000000000000000000000\",\n\t\"b9231eb26e5f9e4b4d288f03906704fab96c87d6\": \"19700000000000000000000\",\n\t\"6e5c2d9b1c546a86eefd5d0a5120c9e4e730190e\": \"199600000000000000000\",\n\t\"e49936a92a8ccf710eaac342bc454b9b14ebecb1\": \"2000000000000000000000\",\n\t\"21dbdb817a0d8404c6bdd61504374e9c43c9210e\": \"9999917000000000000000\",\n\t\"5cebe30b2a95f4aefda665651dc0cf7ef5758199\": \"18200000000000000000\",\n\t\"597038ff91a0900cbbab488af483c790e6ec00a0\": \"10000000000000000000000\",\n\t\"0fa5d8c5b3f294efd495ab69d768f81872508548\": \"2000000000000000000000\",\n\t\"feef3b6eabc94affd3310c1c4d0e65375e131119\": \"20000000000000000000\",\n\t\"1ce81d31a7923022e125bf48a3e03693b98dc9dd\": \"2000000000000000000000\",\n\t\"5887dc6a33dfed5ac1edefe35ef91a216231ac96\": \"250000000000000000000\",\n\t\"4e8e47ae3b1ef50c9d54a38e14208c1abd3603c2\": \"2235000000000000000000\",\n\t\"e845e387c4cbdf982280f6aa01c40e4be958ddb2\": \"25000000000000000000000\",\n\t\"71d9494e50c5dd59c599dba3810ba1755e6537f0\": \"4000000000000000000000\",\n\t\"6eb5578a6bb7c32153195b0d8020a6914852c059\": \"660000000000000000000000\",\n\t\"543f8c674e2462d8d5daa0e80195a8708e11a29e\": \"63940000000000000000\",\n\t\"a0459ef3693aacd1647cd5d8929839204cef53be\": \"1000000000000000000000\",\n\t\"dda371e600d30688d4710e088e02fdf2b9524d5f\": \"6920000000000000000000\",\n\t\"dd4dd6d36033b0636fcc8d0938609f4dd64f4a86\": \"60000000000000000000\",\n\t\"3bd624b548cb659736907ed8aa3c0c705e24b575\": \"2000000000000000000000\",\n\t\"414599092e879ae25372a84d735af5c4e510cd6d\": \"400000000000000000000\",\n\t\"3d66cd4bd64d5c8c1b5eea281e106d1c5aad2373\": \"1951100000000000000000\",\n\t\"5948bc3650ed519bf891a572679fd992f8780c57\": \"197000000000000000000\",\n\t\"8b74a7cb1bb8c58fce267466a30358adaf527f61\": \"13620000000000000000000\",\n\t\"3f10800282d1b7ddc78fa92d8230074e1bf6aeae\": \"4925000000000000000000\",\n\t\"32dbb6716c54e83165829a4abb36757849b6e47d\": \"1000000000000000000000\",\n\t\"e6b3ac3f5d4da5a8857d0b3f30fc4b2b692b77d7\": \"1460000000000000000000\",\n\t\"052a58e035f1fe9cdd169bcf20970345d12b9c51\": \"1490000000000000000000\",\n\t\"581bdf1bb276dbdd86aedcdb397a01efc0e00c5b\": \"1000000000000000000000\",\n\t\"604e9477ebf4727c745bcabbedcb6ccf29994022\": \"1000060000000000000000\",\n\t\"59b96deb8784885d8d3b4a166143cc435d2555a1\": \"1337000000000000000000\",\n\t\"37d980a12ee3bf23cc5cdb63b4ae45691f74c837\": \"2000000000000000000000\",\n\t\"3bfbd3847c17a61cf3f17b52f8eba1b960b3f39f\": \"3000000000000000000000\",\n\t\"49c941e0e5018726b7290fc473b471d41dae80d1\": \"500000000000000000000\",\n\t\"f26bcedce3feadcea3bc3e96eb1040dfd8ffe1a0\": \"775000000000000000000\",\n\t\"d0944aa185a1337061ae20dc9dd96c83b2ba4602\": \"200000000000000000000\",\n\t\"904caa429c619d940f8e6741826a0db692b19728\": \"1000000000000000000000\",\n\t\"b95c9b10aa981cf4a67a71cc52c504dee8cf58bd\": \"4000000000000000000000\",\n\t\"15874686b6733d10d703c9f9bec6c52eb8628d67\": \"2000000000000000000000\",\n\t\"1374facd7b3f8d68649d60d4550ee69ff0484133\": \"269700000000000000000\",\n\t\"b0e469c886593815b3495638595daef0665fae62\": \"1940000000000000000000\",\n\t\"47ff6feb43212060bb1503d7a397fc08f4e70352\": \"2000000000000000000000\",\n\t\"c60b04654e003b4683041f1cbd6bc38fda7cdbd6\": \"2000000000000000000000\",\n\t\"3ecdb532e397579662b2a46141e78f8235936a5f\": \"66850000000000000000\",\n\t\"b3a8c2cb7d358e5739941d945ba9045a023a8bbb\": \"1000000000000000000000\",\n\t\"32ef5cdc671df5562a901aee5db716b9be76dcf6\": \"2000000000000000000000\",\n\t\"c94110e71afe578aa218e4fc286403b0330ace8d\": \"2000000000000000000000\",\n\t\"9b43dcb95fde318075a567f1e6b57617055ef9e8\": \"3940000000000000000000\",\n\t\"efeea010756f81da4ba25b721787f058170befbd\": \"32470000000000000000\",\n\t\"c88255eddcf521c6f81d97f5a42181c9073d4ef1\": \"290793000000000000000\",\n\t\"dd47189a3e64397167f0620e484565b762bfbbf4\": \"1850000000000000000000\",\n\t\"82f39b2758ae42277b86d69f75e628d958ebcab0\": \"40000000000000000000000\",\n\t\"e37f5fdc6ec97d2f866a1cfd0d3a4da4387b22b5\": \"10000000000000000000000\",\n\t\"62331df2a3cbee3520e911dea9f73e905f892505\": \"2000000000000000000000\",\n\t\"8c5d16ed65e3ed7e8b96ca972bc86173e3500b03\": \"2000000000000000000000\",\n\t\"8b9841862e77fbbe919470935583a93cf027e450\": \"2000054000000000000000\",\n\t\"c8dd27f16bf22450f5771b9fe4ed4ffcb30936f4\": \"197000000000000000000\",\n\t\"dec8a1a898f1b895d8301fe64ab3ad5de941f689\": \"787803000000000000000\",\n\t\"61c4ee7c864c4d6b5e37ea1331c203739e826b2f\": \"30063000000000000000\",\n\t\"3250e3e858c26adeccadf36a5663c22aa84c4170\": \"5000000000000000000000\",\n\t\"299e0bca55e069de8504e89aca6eca21d38a9a5d\": \"55500000000000000000\",\n\t\"d50f7fa03e389876d3908b60a537a6706304fb56\": \"100000000000000000000\",\n\t\"69073269729e6414b26ec8dc0fd935c73b579f1e\": \"30000000000000000000000\",\n\t\"14fcd1391e7d732f41766cdacd84fa1deb9ffdd2\": \"2000000000000000000000\",\n\t\"823768746737ce6da312d53e54534e106f967cf3\": \"20000000000000000000\",\n\t\"882f75708386653c80171d0663bfe30b017ed0ad\": \"2000000000000000000000\",\n\t\"a25b086437fd2192d0a0f64f6ed044f38ef3da32\": \"335000000000000000000\",\n\t\"5a9c8b69fc614d69564999b00dcb42db67f97e90\": \"3429227000000000000000\",\n\t\"a2b701f9f5cdd09e4ba62baebae3a88257105885\": \"1000000000000000000000\",\n\t\"5e7b8c54dc57b0402062719dee7ef5e37ea35d62\": \"2877224000000000000000\",\n\t\"7ffabfbc390cbe43ce89188f0868b27dcb0f0cad\": \"6370000000000000000000\",\n\t\"b5cdbc4115406f52e5aa85d0fea170d2979cc7ba\": \"1337000000000000000000\",\n\t\"263814309de4e635cf585e0d365477fc40e66cf7\": \"146000000000000000000\",\n\t\"24cff0e9336a9f80f9b1cb968caf6b1d1c4932a4\": \"200200000000000000000\",\n\t\"d3a941c961e8ca8b1070f23c6d6d0d2a758a4444\": \"200000000000000000000\",\n\t\"a97beb3a48c45f1528284cb6a95f7de453358ec6\": \"31000000000000000000000\",\n\t\"4dd131c74a068a37c90aded4f309c2409f6478d3\": \"400008000000000000000\",\n\t\"653675b842d7d8b461f722b4117cb81dac8e639d\": \"31000000000000000000\",\n\t\"561be9299b3e6b3e63b79b09169d1a948ae6db01\": \"500000000000000000000\",\n\t\"dc067ed3e12d711ed475f5156ef7e71a80d934b9\": \"9550000000000000000000\",\n\t\"08d97eadfcb7b064e1ccd9c8979fbee5e77a9719\": \"266063000000000000000\",\n\t\"6e4c2ab7db026939dbd3bc68384af660a61816b2\": \"167000000000000000000\",\n\t\"bf4c73a7ede7b164fe072114843654e4d8781dde\": \"2000000000000000000000\",\n\t\"f504943aaf16796e0b341bbcdf21d11cc586cdd1\": \"9000000000000000000000\",\n\t\"ea81ca8638540cd9d4d73d060f2cebf2241ffc3e\": \"1970000000000000000000\",\n\t\"9944fee9d34a4a880023c78932c00b59d5c82a82\": \"750022000000000000000\",\n\t\"12f460ae646cd2780fd35c50a6af4b9accfa85c6\": \"1000000000000000000000\",\n\t\"4e232d53b3e6be8f895361d31c34d4762b12c82e\": \"1760000000000000000000\",\n\t\"6bb2aca23fa1626d18efd6777fb97db02d8e0ae4\": \"40000000000000000000000\",\n\t\"bc4e471560c99c8a2a4b1b1ad0c36aa6502b7c4b\": \"12000000000000000000000\",\n\t\"2e2cbd7ad82547b4f5ff8b3ab56f942a6445a3b0\": \"200000000000000000000\",\n\t\"21ecb2dfa65779c7592d041cd2105a81f4fd4e46\": \"1000000000000000000000\",\n\t\"34318625818ec13f11835ae97353ce377d6f590a\": \"1520000000000000000000\",\n\t\"a7ef35ce87eda6c28df248785815053ec97a5045\": \"4999998000000000000000\",\n\t\"6a514e6242f6b68c137e97fea1e78eb555a7e5f7\": \"20000000000000000000\",\n\t\"9340b5f678e45ee05eb708bb7abb6ec8f08f1b6b\": \"6000000000000000000000\",\n\t\"43cc08d0732aa58adef7619bed46558ad7774173\": \"4443926000000000000000\",\n\t\"12e9a4ad2ad57484dd700565bddb46423bd9bd31\": \"19999800000000000000000\",\n\t\"ebbeeb259184a6e01cccfc2207bbd883785ac90a\": \"619966000000000000000\",\n\t\"704ab1150d5e10f5e3499508f0bf70650f028d4b\": \"4000000000000000000000\",\n\t\"fc361105dd90f9ede566499d69e9130395f12ac8\": \"395000000000000000000000\",\n\t\"c1b9a5704d351cfe983f79abeec3dbbbae3bb629\": \"20000000000000000000\",\n\t\"66f50406eb1b11a946cab45927cca37470e5a208\": \"2000000000000000000000\",\n\t\"53942e7949d6788bb780a7e8a0792781b1614b84\": \"15899600000000000000000\",\n\t\"32ba9a7d0423e03a525fe2ebeb661d2085778bd8\": \"20000000000000000000000\",\n\t\"11c0358aa6479de21866fe21071924b65e70f8b9\": \"36400000000000000000000\",\n\t\"76cb9c8b69f4387675c48253e234cb7e0d74a426\": \"7396300000000000000000\",\n\t\"9f5f44026b576a4adb41e95961561d41039ca391\": \"250000000000000000000\",\n\t\"533a73a4a2228eee05c4ffd718bbf3f9c1b129a7\": \"6000000000000000000000\",\n\t\"dcc52d8f8d9fc742a8b82767f0555387c563efff\": \"500000000000000000000\",\n\t\"f456a75bb99655a7412ce97da081816dfdb2b1f2\": \"200000000000000000000\",\n\t\"d0c101fd1f01c63f6b1d19bc920d9f932314b136\": \"20000000000000000000000\",\n\t\"dabc225042a6592cfa13ebe54efa41040878a5a2\": \"259550000000000000000\",\n\t\"38eec6e217f4d41aa920e424b9525197041cd4c6\": \"4428166000000000000000\",\n\t\"8a247d186510809f71cffc4559471c3910858121\": \"1790000000000000000000\",\n\t\"4f152b2fb8659d43776ebb1e81673aa84169be96\": \"2000000000000000000000\",\n\t\"b4496ddb27799a222457d73979116728e8a1845b\": \"2610331000000000000000\",\n\t\"4a4053b31d0ee5dbafb1d06bd7ac7ff3222c47d6\": \"1400000000000000000000\",\n\t\"0f7bea4ef3f73ae0233df1e100718cbe29310bb0\": \"2000000000000000000000\",\n\t\"c836e24a6fcf29943b3608e662290a215f6529ea\": \"292000000000000000000\",\n\t\"1765361c2ec2f83616ce8363aae21025f2566f40\": \"5000000000000000000000\",\n\t\"b6e6c3222b6b6f9be2875d2a89f127fb64100fe2\": \"8008000000000000000000\",\n\t\"01bbc14f67af0639aab1441e6a08d4ce7162090f\": \"1309500000000000000000\",\n\t\"af2058c7282cf67c8c3cf930133c89617ce75d29\": \"6920000000000000000000\",\n\t\"464d9c89cce484df000277198ed8075fa63572d1\": \"20000000000000000000\",\n\t\"50cd97e9378b5cf18f173963236c9951ef7438a5\": \"1400000000000000000000\",\n\t\"cb47bd30cfa8ec5468aaa6a94642ced9c819c8d4\": \"4000000000000000000000\",\n\t\"6b10f8f8b3e3b60de90aa12d155f9ff5ffb22c50\": \"2000000000000000000000\",\n\t\"09b7a988d13ff89186736f03fdf46175b53d16e0\": \"6000000000000000000000\",\n\t\"5bfafe97b1dd1d712be86d41df79895345875a87\": \"500000000000000000000\",\n\t\"a06cd1f396396c0a64464651d7c205efaf387ca3\": \"1999944000000000000000\",\n\t\"fc0096b21e95acb8d619d176a4a1d8d529badbef\": \"384601000000000000000\",\n\t\"a74444f90fbb54e56f3ac9b6cfccaa4819e4614a\": \"20000000000000000000\",\n\t\"3c15b3511df6f0342e7348cc89af39a168b7730f\": \"1000000000000000000000\",\n\t\"3d6ff82c9377059fb30d9215723f60c775c891fe\": \"250066000000000000000\",\n\t\"a524a8cccc49518d170a328270a2f88133fbaf5d\": \"294500000000000000000\",\n\t\"8a7a06be199a3a58019d846ac9cbd4d95dd757de\": \"3000200000000000000000\",\n\t\"d744ac7e5310be696a63b003c40bd039370561c6\": \"1670000000000000000000\",\n\t\"fe362688845fa244cc807e4b1130eb3741a8051e\": \"1000000000000000000000\",\n\t\"b2d0360515f17daba90fcbac8205d569b915d6ac\": \"6000000000000000000000\",\n\t\"c53594c7cfb2a08f284cc9d7a63bbdfc0b319732\": \"49200000000000000000000\",\n\t\"b3c228731d186d2ded5b5fbe004c666c8e469b86\": \"29000000000000000000\",\n\t\"63e414603e80d4e5a0f5c18774204642258208e4\": \"5000000000000000000000\",\n\t\"826ce5790532e0548c6102a30d3eac836bd6388f\": \"18000000000000000000000\",\n\t\"c5e812f76f15f2e1f2f9bc4823483c8804636f67\": \"73000000000000000000\",\n\t\"116fef5e601642c918cb89160fc2293ba71da936\": \"802200000000000000000\",\n\t\"08b84536b74c8c01543da88b84d78bb95747d822\": \"200000000000000000000\",\n\t\"04a80afad53ef1f84165cfd852b0fdf1b1c24ba8\": \"58000000000000000000\",\n\t\"2b0362633614bfcb583569438ecc4ea57b1d337e\": \"20000000000000000000000\",\n\t\"e95179527deca5916ca9a38f215c1e9ce737b4c9\": \"10000000000000000000000\",\n\t\"2c5df866666a194b26cebb407e4a1fd73e208d5e\": \"1000000000000000000000\",\n\t\"529e824fa072582b4032683ac7eecc1c04b4cac1\": \"2000000000000000000000\",\n\t\"78634371e17304cbf339b1452a4ce438dc764cce\": \"10000000000000000000000\",\n\t\"e172dfc8f80cd1f8cd8539dc26082014f5a8e3e8\": \"3000000000000000000000\",\n\t\"b07618328a901307a1b7a0d058fcd5786e9e72fe\": \"30239500000000000000000\",\n\t\"b0571153db1c4ed7acaefe13ecdfdb72e7e4f06a\": \"80520000000000000000000\",\n\t\"ad910a23d6850613654af786337ad2a70868ac6d\": \"1999800000000000000000\",\n\t\"4da5edc688b0cb62e1403d1700d9dcb99ffe3fd3\": \"2000000000000000000000\",\n\t\"be2471a67f6047918772d0e36839255ed9d691ae\": \"4000000000000000000000\",\n\t\"28868324337e11ba106cb481da962f3a8453808d\": \"2000000000000000000000\",\n\t\"d8f94579496725b5cb53d7985c989749aff849c0\": \"17000000000000000000000\",\n\t\"4981c5ff66cc4e9680251fc4cd2ff907cb327865\": \"750000000000000000000\",\n\t\"fd2872d19e57853cfa16effe93d0b1d47b4f93fb\": \"4000000000000000000000\",\n\t\"63c8dfde0b8e01dadc2e748c824cc0369df090b3\": \"3880000000000000000000\",\n\t\"c4dd048bfb840e2bc85cb53fcb75abc443c7e90f\": \"3716000000000000000000\",\n\t\"f579714a45eb8f52c3d57bbdefd2c15b2e2f11df\": \"1560000000000000000000\",\n\t\"cc7b0481cc32e6faef2386a07022bcb6d2c3b4fc\": \"3160000000000000000000\",\n\t\"a0aa5f0201f04d3bbeb898132f7c11679466d901\": \"36600000000000000000\",\n\t\"f3df63a97199933330383b3ed7570b96c4812334\": \"2000000000000000000000\",\n\t\"42732d8ef49ffda04b19780fd3c18469fb374106\": \"425068000000000000000\",\n\t\"6f92d6e4548c78996509ee684b2ee29ba3c532b4\": \"1000000000000000000000\",\n\t\"fff4bad596633479a2a29f9a8b3f78eefd07e6ee\": \"100000000000000000000\",\n\t\"ac4460a76e6db2b9fcd152d9c7718d9ac6ed8c6f\": \"200000000000000000000\",\n\t\"553b6b1c57050e88cf0c31067b8d4cd1ff80cb09\": \"400000000000000000000\",\n\t\"84b6b6adbe2f5b3e2d682c66af1bc4905340c3ed\": \"619333000000000000000\",\n\t\"9f4a7195ac7c151ca258cafda0cab083e049c602\": \"1537100000000000000000\",\n\t\"2955c357fd8f75d5159a3dfa69c5b87a359dea8c\": \"2000000000000000000000\",\n\t\"11d7844a471ef89a8d877555583ceebd1439ea26\": \"10098000000000000000000\",\n\t\"34b454416e9fb4274e6addf853428a0198d62ee1\": \"407000000000000000000\",\n\t\"308dd21cebe755126704b48c0f0dc234c60ba9b1\": \"200000000000000000000\",\n\t\"381db4c8465df446a4ce15bf81d47e2f17c980bf\": \"32000000000000000000000\",\n\t\"1abc4e253b080aeb437984ab05bca0979aa43e1c\": \"1000000000000000000000\",\n\t\"53e35b12231f19c3fd774c88fec8cbeedf1408b2\": \"512000000000000000000\",\n\t\"69e2e2e704307ccc5b5ca3f164fece2ea7b2e512\": \"7000000000000000000000\",\n\t\"1914f1eb95d1277e93b6e61b668b7d77f13a11a1\": \"970000000000000000000\",\n\t\"50e13023bd9ca96ad4c53fdfd410cb6b1f420bdf\": \"200000000000000000000\",\n\t\"46224f32f4ece5c8867090d4409d55e50b18432d\": \"6000000000000000000000\",\n\t\"ff83855051ee8ffb70b4817dba3211ed2355869d\": \"400000000000000000000\",\n\t\"fb39189af876e762c71d6c3e741893df226cedd6\": \"4000000000000000000000\",\n\t\"9875623495a46cdbf259530ff838a1799ec38991\": \"2000000000000000000000\",\n\t\"e1b39b88d9900dbc4a6cdc481e1060080a8aec3c\": \"2000000000000000000000\",\n\t\"5baf6d749620803e8348af3710e5c4fbf20fc894\": \"5003680000000000000000\",\n\t\"9c54e4ed479a856829c6bb42da9f0b692a75f728\": \"7520000000000000000000\",\n\t\"486a6c8583a84484e3df43a123837f8c7e2317d0\": \"323378000000000000000\",\n\t\"d235d15cb5eceebb61299e0e827fa82748911d89\": \"4000000000000000000000\",\n\t\"47d792a756779aedf1343e8883a6619c6c281184\": \"2000000000000000000000\",\n\t\"70c213488a020c3cfb39014ef5ba6404724bcaa3\": \"1940000000000000000000\",\n\t\"133c490fa5bf7f372888e607d958fab7f955bae1\": \"1580000000000000000000\",\n\t\"a9e194661aac704ee9dea043974e9692ded84a5d\": \"482400000000000000000\",\n\t\"bc6b58364bf7f1951c309e0cba0595201cd73f9a\": \"1812400000000000000000\",\n\t\"2309d34091445b3232590bd70f4f10025b2c9509\": \"10000000000000000000000\",\n\t\"d89bc271b27ba3ab6962c94a559006ae38d5f56a\": \"2000000000000000000000\",\n\t\"ff0e2fec304207467e1e3307f64cbf30af8fd9cd\": \"2000000000000000000000\",\n\t\"c0b0b7a8a6e1acdd05e47f94c09688aa16c7ad8d\": \"64234000000000000000\",\n\t\"b66f92124b5e63035859e390628869dbdea9485e\": \"9850000000000000000000\",\n\t\"a9e6e25e656b762558619f147a21985b8874edfe\": \"2000000000000000000000\",\n\t\"a43e1947a9242b355561c30a829dfeeca2815af8\": \"3878255000000000000000\",\n\t\"8b20ad3b94656dbdc0dd21a393d8a7d9e02138cb\": \"3000000000000000000000\",\n\t\"aca2a838330b17302da731d30db48a04f0f207c1\": \"1337000000000000000000\",\n\t\"fa60868aafd4ff4c5c57914b8ed58b425773dfa9\": \"8557400000000000000000\",\n\t\"1848003c25bfd4aa90e7fcb5d7b16bcd0cffc0d8\": \"1000000000000000000000\",\n\t\"b4b185d943ee2b58631e33dff5af6854c17993ac\": \"1000000000000000000000\",\n\t\"7719888795ad745924c75760ddb1827dffd8cda8\": \"1999980000000000000000\",\n\t\"ccd521132d986cb96869842622a7dda26c3ed057\": \"2000000000000000000000\",\n\t\"253e32b74ea4490ab92606fda0aa257bf23dcb8b\": \"10000000000000000000000\",\n\t\"3712367e5e55a96d5a19168f6eb2bc7e9971f869\": \"1000000000000000000000\",\n\t\"8f29a14a845ad458f2d108b568d813166bcdf477\": \"10000000000000000000000\",\n\t\"51a8c2163602a32ee24cf4aa97fd9ea414516941\": \"62904000000000000000\",\n\t\"61cea71fa464d62a07063f920b0cc917539733d8\": \"1670000000000000000000\",\n\t\"6f81f3abb1f933b1df396b8e9cc723a89b7c9806\": \"280000000000000000000\",\n\t\"61b1b8c012cd4c78f698e470f90256e6a30f48dd\": \"200000000000000000000\",\n\t\"4f3f2c673069ac97c2023607152981f5cd6063a0\": \"600000000000000000000\",\n\t\"e2efa5fca79538ce6068bf31d2c516d4d53c08e5\": \"131200000000000000000\",\n\t\"2383c222e67e969190d3219ef14da37850e26c55\": \"2000000000000000000000\",\n\t\"eac3af5784927fe9a598fc4eec38b8102f37bc58\": \"1000000000000000000000\",\n\t\"4fe56ab3bae1b0a44433458333c4b05a248f8241\": \"2180000000000000000000\",\n\t\"fe9cfc3bb293ddb285e625f3582f74a6b0a5a6cd\": \"1970000000000000000000\",\n\t\"f48e1f13f6af4d84b371d7de4b273d03a263278e\": \"600000000000000000000\",\n\t\"1ba9228d388727f389150ea03b73c82de8eb2e09\": \"7258000000000000000000\",\n\t\"37a7a6ff4ea3d60ec307ca516a48d3053bb79cbb\": \"2000000000000000000000\",\n\t\"e33840d8bca7da98a6f3d096d83de78b70b71ef8\": \"2000000000000000000000\",\n\t\"8e7fd23848f4db07906a7d10c04b21803bb08227\": \"1000000000000000000000\",\n\t\"07d4334ec385e8aa54eedaeadb30022f0cdfa4ab\": \"2629946000000000000000\",\n\t\"d4b085fb086f3d0d68bf12926b1cc3142cae8770\": \"3700000000000000000000\",\n\t\"5a87f034e6f68f4e74ffe60c64819436036cf7d7\": \"20000000000000000000\",\n\t\"c00ab080b643e1c2bae363e0d195de2efffc1c44\": \"500000000000000000000\",\n\t\"22f3c779dd79023ea92a78b65c1a1780f62d5c4a\": \"1970000000000000000000\",\n\t\"c7d5c7054081e918ec687b5ab36e973d18132935\": \"182000000000000000000\",\n\t\"9662ee021926682b31c5f200ce457abea76c6ce9\": \"670500000000000000000\",\n\t\"116a09df66cb150e97578e297fb06e13040c893c\": \"2000000000000000000000\",\n\t\"b7240af2af90b33c08ae9764103e35dce3638428\": \"8464547000000000000000\",\n\t\"e8b28acda971725769db8f563d28666d41ddab6c\": \"10000000000000000000000\",\n\t\"17d4918dfac15d77c47f9ed400a850190d64f151\": \"2000000000000000000000\",\n\t\"c42250b0fe42e6b7dcd5c890a6f0c88f5f5fb574\": \"149800000000000000000\",\n\t\"5da2a9a4c2c0a4a924cbe0a53ab9d0c627a1cfa0\": \"733202000000000000000\",\n\t\"5869fb867d71f1387f863b698d09fdfb87c49b5c\": \"3666000000000000000000\",\n\t\"d49a75bb933fca1fca9aa1303a64b6cb44ea30e1\": \"10000000000000000000000\",\n\t\"76331e30796ce664b2700e0d4153700edc869777\": \"2000000000000000000000\",\n\t\"8a5fb75793d043f1bcd43885e037bd30a528c927\": \"356500000000000000000\",\n\t\"fc0ee6f7c2b3714ae9916c45566605b656f32441\": \"1760000000000000000000\",\n\t\"bf50ce2e264b9fe2b06830617aedf502b2351b45\": \"1000000000000000000000\",\n\t\"0f6000de1578619320aba5e392706b131fb1de6f\": \"499986000000000000000\",\n\t\"c953f934c0eb2d0f144bdab00483fd8194865ce7\": \"2000000000000000000000\",\n\t\"24fd9a6c874c2fab3ff36e9afbf8ce0d32c7de92\": \"1337000000000000000000\",\n\t\"c6cd68ec35362c5ad84c82ad4edc232125912d99\": \"27750000000000000000000\",\n\t\"2a67660a1368efcd626ef36b2b1b601980941c05\": \"133700000000000000000\",\n\t\"9deb39027af877992b89f2ec4a1f822ecdf12693\": \"2000000000000000000000\",\n\t\"c12f881fa112b8199ecbc73ec4185790e614a20f\": \"2000000000000000000000\",\n\t\"d58a52e078a805596b0d56ea4ae1335af01c66eb\": \"267400000000000000000\",\n\t\"4d7cfaa84cb33106800a8c802fb8aa463896c599\": \"1790000000000000000000\",\n\t\"0ee391f03c765b11d69026fd1ab35395dc3802a0\": \"200000000000000000000\",\n\t\"a192f06ab052d5fd7f94eea8318e827815fe677a\": \"131400000000000000000\",\n\t\"8f0ab894bd3f4e697dbcfb859d497a9ba195994a\": \"39501652000000000000000\",\n\t\"387eeafd6b4009deaf8bd5b85a72983a8dcc3487\": \"4000000000000000000000\",\n\t\"03b0f17cd4469ddccfb7da697e82a91a5f9e7774\": \"20000000000000000000\",\n\t\"11172b278ddd44eea2fdf4cb1d16962391c453d9\": \"935900000000000000000000\",\n\t\"33d172ab075c51db1cd40a8ca8dbff0d93b843bb\": \"5727139000000000000000\",\n\t\"909b5e763a39dcc795223d73a1dbb7d94ca75ac8\": \"2000000000000000000000\",\n\t\"0ca12ab0b9666cf0cec6671a15292f2653476ab2\": \"210000600000000000000000\",\n\t\"6b5ae7bf78ec75e90cb503c778ccd3b24b4f1aaf\": \"800000000000000000000\",\n\t\"d9e3857efd1e202a441770a777a49dcc45e2e0d3\": \"223500000000000000000\",\n\t\"d703c6a4f11d60194579d58c2766a7ef16c30a29\": \"2000000000000000000000\",\n\t\"838bd565f99fde48053f7917fe333cf84ad548ab\": \"200000000000000000000\",\n\t\"8168edce7f2961cf295b9fcd5a45c06cdeda6ef5\": \"200000000000000000000\",\n\t\"de50868eb7e3c71937ec73fa89dd8b9ee10d45aa\": \"1000000000000000000000\",\n\t\"087498c0464668f31150f4d3c4bcdda5221ba102\": \"20000000000000000000\",\n\t\"613fab44b16bbe554d44afd178ab1d02f37aeaa5\": \"2000000000000000000000\",\n\t\"e2ee691f237ee6529b6557f2fcdd3dcf0c59ec63\": \"5450048000000000000000\",\n\t\"a9ed377b7d6ec25971c1a597a3b0f3bead57c98f\": \"400000000000000000000\",\n\t\"175feeea2aa4e0efda12e1588d2f483290ede81a\": \"200000000000000000000\",\n\t\"b51ddcb4dd4e8ae6be336dd9654971d9fec86b41\": \"421133000000000000000\",\n\t\"92c0f573eccf62c54810ee6ba8d1f113542b301b\": \"3384000000000000000000\",\n\t\"a109e18bb0a39c9ef82fa19597fc5ed8e9eb6d58\": \"1640000000000000000000\",\n\t\"f74e6e145382b4db821fe0f2d98388f45609c69f\": \"100000000000000000000\",\n\t\"378f37243f3ff0bef5e1dc85eb4308d9340c29f9\": \"2000200000000000000000\",\n\t\"84e9949680bece6841b9a7e5250d08acd87d16cd\": \"200000000000000000000\",\n\t\"882bd3a2e9d74110b24961c53777f22f1f46dc5d\": \"13370000000000000000000\",\n\t\"acce01e0a70610dc70bb91e9926fa9957f372fba\": \"537000000000000000000\",\n\t\"c5f687717246da8a200d20e5e9bcac60b67f3861\": \"28650000000000000000\",\n\t\"e14617f6022501e97e7b3e2d8836aa61f0ff2dba\": \"200000000000000000000\",\n\t\"076ee99d3548623a03b5f99859d2d785a1778d48\": \"200000000000000000000\",\n\t\"2c424ee47f583cdce07ae318b6fad462381d4d2b\": \"4000000000000000000000\",\n\t\"f98250730c4c61c57f129835f2680894794542f3\": \"4000000000000000000000\",\n\t\"ed1b24b6912d51b334ac0de6e771c7c0454695ea\": \"40000000000000000000\",\n\t\"ffd5170fd1a8118d558e7511e364b24906c4f6b3\": \"60085000000000000000\",\n\t\"bf49c14898316567d8b709c2e50594b366c6d38c\": \"733202000000000000000\",\n\t\"65ea26eabbe2f64ccccfe06829c25d4637520225\": \"700000000000000000000\",\n\t\"5c5419565c3aad4e714e0739328e3521c98f05cc\": \"528000000000000000000\",\n\t\"c53b50fd3b2b72bc6c430baf194a515585d3986d\": \"20000000000000000000\",\n\t\"2b74c373d04bfb0fd60a18a01a88fbe84770e58c\": \"40000000000000000000\",\n\t\"d97f4526dea9b163f8e8e33a6bcf92fb907de6ec\": \"284000000000000000000\",\n\t\"a4a49f0bc8688cc9e6dc04e1e08d521026e65574\": \"200000000000000000000\",\n\t\"575c00c2818210c28555a0ff29010289d3f82309\": \"10000000000000000000000\",\n\t\"3f1233714f204de9de4ee96d073b368d8197989f\": \"38606000000000000000\",\n\t\"f964d98d281730ba35b2e3a314796e7b42fedf67\": \"1543800000000000000000\",\n\t\"1deec01abe5c0d952de9106c3dc30639d85005d6\": \"2000000000000000000000\",\n\t\"12d60d65b7d9fc48840be5f891c745ce76ee501e\": \"21359400000000000000000\",\n\t\"5c6136e218de0a61a137b2b3962d2a6112b809d7\": \"294273000000000000000\",\n\t\"cd43258b7392a930839a51b2ef8ad23412f75a9f\": \"2000000000000000000000\",\n\t\"db3f258ab2a3c2cf339c4499f75a4bd1d3472e9e\": \"1500000000000000000000\",\n\t\"0edd4b580ff10fe06c4a03116239ef96622bae35\": \"197000000000000000000\",\n\t\"1d157c5876c5cad553c912caf6ce2d5277e05c73\": \"2000000000000000000000\",\n\t\"cda1b886e3a795c9ba77914e0a2fe5676f0f5ccf\": \"106024000000000000000\",\n\t\"f50cbafd397edd556c0678988cb2af5c2617e0a2\": \"716000000000000000000\",\n\t\"327bb49e754f6fb4f733c6e06f3989b4f65d4bee\": \"20000000000000000000\",\n\t\"c44bdec8c36c5c68baa2ddf1d431693229726c43\": \"100000000000000000000000\",\n\t\"34e2849bea583ab0cc37975190f322b395055582\": \"7780340000000000000000\",\n\t\"9221c9ce01232665741096ac07235903ad1fe2fc\": \"126489000000000000000\",\n\t\"ff3ded7a40d3aff0d7a8c45fa6136aa0433db457\": \"1999800000000000000000\",\n\t\"10b5b34d1248fcf017f8c8ffc408ce899ceef92f\": \"267400000000000000000\",\n\t\"f1a1f320407964fd3c8f2e2cc8a4580da94f01ea\": \"2000040000000000000000\",\n\t\"6c800d4b49ba07250460f993b8cbe00b266a2553\": \"492500000000000000000\",\n\t\"f827d56ed2d32720d4abf103d6d0ef4d3bcd559b\": \"26265000000000000000\",\n\t\"ffb9c7217e66743031eb377af65c77db7359dcda\": \"40000000000000000000\",\n\t\"530319db0a8f93e5bb7d4dbf4816314fbed8361b\": \"2000000000000000000000\",\n\t\"9c28a2c4086091cb5da226a657ce3248e8ea7b6f\": \"280000000000000000000\",\n\t\"db23a6fef1af7b581e772cf91882deb2516fc0a7\": \"200000000000000000000\",\n\t\"6636d7ac637a48f61d38b14cfd4865d36d142805\": \"500000000000000000000\",\n\t\"b3c260609b9df4095e6c5dff398eeb5e2df49985\": \"254030000000000000000\",\n\t\"58e5c9e344c806650dacfc904d33edba5107b0de\": \"19100000000000000000\",\n\t\"4f67396d2553f998785f704e07a639197dd1948d\": \"300080000000000000000\",\n\t\"510d8159cc945768c7450790ba073ec0d9f89e30\": \"2560000000000000000000\",\n\t\"593c48935beaff0fde19b04d309cd530a28e52ce\": \"4000000000000000000000\",\n\t\"c27f4e08099d8cf39ee11601838ef9fc06d7fc41\": \"1790000000000000000000\",\n\t\"07723e3c30e8b731ee456a291ee0e798b0204a77\": \"2000000000000000000000\",\n\t\"0a652e2a8b77bd97a790d0e91361c98890dbb04e\": \"1000000000000000000000\",\n\t\"671015b97670b10d5e583f3d62a61c1c79c5143f\": \"400000000000000000000\",\n\t\"7cc24a6a958c20c7d1249660f7586226950b0d9a\": \"1970000000000000000000\",\n\t\"6ef9e8c9b6217d56769af97dbb1c8e1b8be799d2\": \"182000000000000000000\",\n\t\"5c4368918ace6409c79eca80cdaae4391d2b624e\": \"4000000000000000000000\",\n\t\"043707071e2ae21eed977891dc79cd5d8ee1c2da\": \"2000000000000000000000\",\n\t\"39bfd978689bec048fc776aa15247f5e1d7c39a2\": \"20000000000000000000000\",\n\t\"05915d4e225a668162aee7d6c25fcfc6ed18db03\": \"66348000000000000000\",\n\t\"3f551ba93cd54693c183fb9ad60d65e1609673c9\": \"2000000000000000000000\",\n\t\"a8c0b02faf02cb5519dda884de7bbc8c88a2da81\": \"16700000000000000000\",\n\t\"bd0c5cd799ebc48642ef97d74e8e429064fee492\": \"326000000000000000000\",\n\t\"0a931b449ea8f12cdbd5e2c8cc76bad2c27c0639\": \"23031000000000000000\",\n\t\"2ea5fee63f337a376e4b918ea82148f94d48a626\": \"1864242000000000000000\",\n\t\"cc6c2df00e86eca40f21ffda1a67a1690f477c65\": \"3160000000000000000000\",\n\t\"e5e37e19408f2cfbec83349dd48153a4a795a08f\": \"4200000000000000000000\",\n\t\"f555a27bb1e2fd4e2cc784caee92939fc06e2fc9\": \"2000000000000000000000\",\n\t\"dcf9719be87c6f46756db4891db9b611d2469c50\": \"1000000000000000000000\",\n\t\"8e2f9034c9254719c38e50c9aa64305ed696df1e\": \"4728000000000000000000\",\n\t\"a01f12d70f44aa7b113b285c22dcdb45873454a7\": \"18200000000000000000\",\n\t\"bce40475d345b0712dee703d87cd7657fc7f3b62\": \"7750000000000000000000\",\n\t\"bb19bf91cbad74cceb5f811db27e411bc2ea0656\": \"17600000000000000000\",\n\t\"acc062702c59615d3444ef6214b8862b009a02ed\": \"1499936000000000000000\",\n\t\"449ac4fbe383e36738855e364a57f471b2bfa131\": \"197000000000000000000000\",\n\t\"ad59a78eb9a74a7fbdaefafa82eada8475f07f95\": \"500000000000000000000\",\n\t\"6b6577f3909a4d6de0f411522d4570386400345c\": \"1880000000000000000000\",\n\t\"79bf2f7b6e328aaf26e0bb093fa22da29ef2f471\": \"1790000000000000000000\",\n\t\"940f715140509ffabf974546fab39022a41952d2\": \"1400000000000000000000\",\n\t\"1d572edd2d87ca271a6714c15a3b37761dcca005\": \"127674000000000000000\",\n\t\"d78ecd25adc86bc2051d96f65364866b42a426b7\": \"3877300000000000000000\",\n\t\"f9729d48282c9e87166d5eef2d01eda9dbf78821\": \"99981000000000000000\",\n\t\"17762560e82a93b3f522e0e524adb8612c3a7470\": \"1000000000000000000000\",\n\t\"d500e4d1c9824ba9f5b635cfa3a8c2c38bbd4ced\": \"400000000000000000000\",\n\t\"a11effab6cf0f5972cffe4d56596e98968144a8f\": \"1670000000000000000000\",\n\t\"f64ecf2117931c6d535a311e4ffeaef9d49405b8\": \"2674000000000000000000\",\n\t\"229cc4711b62755ea296445ac3b77fc633821cf2\": \"39481000000000000000\",\n\t\"fc989cb487bf1a7d17e4c1b7c4b7aafdda6b0a8d\": \"20000000000000000000\",\n\t\"ea8527febfa1ade29e26419329d393b940bbb7dc\": \"1999944000000000000000\",\n\t\"bce13e22322acfb355cd21fd0df60cf93add26c6\": \"200000000000000000000\",\n\t\"19ff244fcfe3d4fa2f4fd99f87e55bb315b81eb6\": \"200000000000000000000\",\n\t\"d2581a55ce23ab10d8ad8c44378f59079bd6f658\": \"8800000000000000000000\",\n\t\"4073fa49b87117cb908cf1ab512da754a932d477\": \"1970000000000000000000\",\n\t\"b6a82933c9eadabd981e5d6d60a6818ff806e36b\": \"400000000000000000000\",\n\t\"c79806032bc7d828f19ac6a640c68e3d820fa442\": \"20000000000000000000\",\n\t\"577b2d073c590c50306f5b1195a4b2ba9ecda625\": \"373600000000000000000\",\n\t\"7f13d760498d7193ca6859bc95c901386423d76c\": \"5000000000000000000000\",\n\t\"416784af609630b070d49a8bcd12235c6428a408\": \"20000000000000000000000\",\n\t\"fbe71622bcbd31c1a36976e7e5f670c07ffe16de\": \"400000000000000000000\",\n\t\"a5698035391e67a49013c0002079593114feb353\": \"240000000000000000000\",\n\t\"ab2871e507c7be3965498e8fb462025a1a1c4264\": \"775000000000000000000\",\n\t\"9c78fbb4df769ce2c156920cfedfda033a0e254a\": \"1970000000000000000000\",\n\t\"95e6f93dac228bc7585a25735ac2d076cc3a4017\": \"6000000000000000000000\",\n\t\"3c1f91f301f4b565bca24751aa1f761322709ddd\": \"1790000000000000000000\",\n\t\"f77f9587ff7a2d7295f1f571c886bd33926a527c\": \"1999800000000000000000\",\n\t\"755f587e5efff773a220726a13d0f2130d9f896b\": \"1000000000000000000000\",\n\t\"8c6aa882ee322ca848578c06cb0fa911d3608305\": \"600000000000000000000\",\n\t\"492cb5f861b187f9df21cd4485bed90b50ffe22d\": \"499928000000000000000\",\n\t\"95a577dc2eb3ae6cb9dfc77af697d7efdfe89a01\": \"136000000000000000000\",\n\t\"4173419d5c9f6329551dc4d3d0ceac1b701b869e\": \"88000000000000000000\",\n\t\"456ae0aca48ebcfae166060250525f63965e760f\": \"300000000000000000000\",\n\t\"81f8de2c283d5fd4afbda85dedf9760eabbbb572\": \"3000000000000000000000\",\n\t\"cd0af3474e22f069ec3407870dd770443d5b12b0\": \"2626262000000000000000\",\n\t\"283c2314283c92d4b064f0aef9bb5246a7007f39\": \"200000000000000000000\",\n\t\"29b3f561ee7a6e25941e98a5325b78adc79785f3\": \"100000000000000000000\",\n\t\"cd4306d7f6947ac1744d4e13b8ef32cb657e1c00\": \"499986000000000000000\",\n\t\"d9ec2efe99ff5cf00d03a8317b92a24aef441f7e\": \"2000000000000000000000\",\n\t\"83dbf8a12853b40ac61996f8bf1dc8fdbaddd329\": \"970000000000000000000\",\n\t\"9d93fab6e22845f8f45a07496f11de71530debc7\": \"1998000000000000000000\",\n\t\"fd204f4f4aba2525ba728afdf78792cbdeb735ae\": \"2000000000000000000000\",\n\t\"99fad50038d0d9d4c3fbb4bce05606ecadcd5121\": \"2000000000000000000000\",\n\t\"d206aaddb336d45e7972e93cb075471d15897b5d\": \"600000000000000000000\",\n\t\"428a1ee0ed331d7952ccbe1c7974b2852bd1938a\": \"2208370000000000000000\",\n\t\"690228e4bb12a8d4b5e0a797b0c5cf2a7509131e\": \"1880000000000000000000\",\n\t\"fa3a1aa4488b351aa7560cf5ee630a2fd45c3222\": \"878850000000000000000\",\n\t\"0372e852582e0934344a0fed2178304df25d4628\": \"20000000000000000000000\",\n\t\"35ea2163a38cdf9a123f82a5ec00258dae0bc767\": \"4000000000000000000000\",\n\t\"d1fed0aee6f5dfd7e25769254c3cfad15adeccaa\": \"730000000000000000000\",\n\t\"c05b740620f173f16e52471dc38b9c514a0b1526\": \"140000000000000000000\",\n\t\"87e3062b2321e9dfb0875ce3849c9b2e3522d50a\": \"10000000000000000000000\",\n\t\"303fbaebbe46b35b6e5b74946a5f99bc1585cae7\": \"878148000000000000000\",\n\t\"e7a8e471eafb798f4554cc6e526730fd56e62c7d\": \"1000000000000000000000\",\n\t\"ad7dd053859edff1cb6f9d2acbed6dd5e332426f\": \"1970000000000000000000\",\n\t\"dc4345d6812e870ae90c568c67d2c567cfb4f03c\": \"6700000000000000000000\",\n\t\"a6a08252c8595177cc2e60fc27593e2379c81fb1\": \"20055000000000000000\",\n\t\"a9af21acbe482f8131896a228036ba51b19453c3\": \"49999000000000000000\",\n\t\"86e3fe86e93da486b14266eadf056cbfa4d91443\": \"2000000000000000000000\",\n\t\"744b03bba8582ae5498e2dc22d19949467ab53fc\": \"500000000000000000000\",\n\t\"d3118ea3c83505a9d893bb67e2de142d537a3ee7\": \"20000000000000000000\",\n\t\"b32f1c2689a5ce79f1bc970b31584f1bcf2283e7\": \"20000000000000000000\",\n\t\"4828e4cbe34e1510afb72c2beeac8a4513eaebd9\": \"3940000000000000000000\",\n\t\"b07bcc085ab3f729f24400416837b69936ba8873\": \"2000140000000000000000\",\n\t\"bdc74873af922b9df474853b0fa7ff0bf8c82695\": \"3999000000000000000000\",\n\t\"15ebd1c7cad2aff19275c657c4d808d010efa0f5\": \"200550000000000000000\",\n\t\"cbc04b4d8b82caf670996f160c362940d66fcf1a\": \"6000000000000000000000\",\n\t\"8197948121732e63d9c148194ecad46e30b749c8\": \"4000000000000000000000\",\n\t\"69797bfb12c9bed682b91fbc593591d5e4023728\": \"10000000000000000000000\",\n\t\"be9b8c34b78ee947ff81472eda7af9d204bc8466\": \"150000000000000000000\",\n\t\"df3f57b8ee6434d047223def74b20f63f9e4f955\": \"250500000000000000000\",\n\t\"a3ae1879007d801cb5f352716a4dd8ba2721de3d\": \"200000000000000000000000\",\n\t\"cb4bb1c623ba28dc42bdaaa6e74e1d2aa1256c2a\": \"1999944000000000000000\",\n\t\"e03c00d00388ecbf4f263d0ac778bb41a57a40d9\": \"1000072000000000000000\",\n\t\"fc2c1f88961d019c3e9ea33009152e0693fbf88a\": \"8000000000000000000000\",\n\t\"8599cbd5a6a9dcd4b966be387d69775da5e33c6f\": \"58180000000000000000000\",\n\t\"b7a31a7c38f3db09322eae11d2272141ea229902\": \"2000000000000000000000\",\n\t\"231a15acc199c89fa9cb22441cc70330bdcce617\": \"500000000000000000000\",\n\t\"3fbed6e7e0ca9c84fbe9ebcf9d4ef9bb49428165\": \"2000000000000000000000\",\n\t\"92cfd60188efdfb2f8c2e7b1698abb9526c1511f\": \"2000000000000000000000\",\n\t\"5c936f3b9d22c403db5e730ff177d74eef42dbbf\": \"75000000000000000000\",\n\t\"931fe712f64207a2fd5022728843548bfb8cbb05\": \"2000000000000000000000\",\n\t\"08d54e83ad486a934cfaeae283a33efd227c0e99\": \"1039000000000000000000\",\n\t\"a339a3d8ca280e27d2415b26d1fc793228b66043\": \"1013600000000000000000\",\n\t\"581f34b523e5b41c09c87c298e299cbc0e29d066\": \"1131607000000000000000\",\n\t\"caaa68ee6cdf0d34454a769b0da148a1faaa1865\": \"7216000000000000000000\",\n\t\"0838a7768d9c2aca8ba279adfee4b1f491e326f1\": \"200000000000000000000\",\n\t\"dde77a4740ba08e7f73fbe3a1674912931742eeb\": \"19867021000000000000000\",\n\t\"cbe810fe0fecc964474a1db97728bc87e973fcbd\": \"10000000000000000000000\",\n\t\"86c28b5678af37d727ec05e4447790f15f71f2ea\": \"200000000000000000000\",\n\t\"dd6c062193eac23d2fdbf997d5063a346bb3b470\": \"20000000000000000000\",\n\t\"5975b9528f23af1f0e2ec08ac8ebaa786a2cb8e0\": \"345827000000000000000\",\n\t\"e29d8ae452dcf3b6ac645e630409385551faae0a\": \"80276000000000000000\",\n\t\"2fbc85798a583598b522166d6e9dda121d627dbc\": \"200000000000000000000\",\n\t\"7a36aba5c31ea0ca7e277baa32ec46ce93cf7506\": \"20000000000000000000000\",\n\t\"dbcbcd7a57ea9db2349b878af34b1ad642a7f1d1\": \"200000000000000000000\",\n\t\"92aae59768eddff83cfe60bb512e730a05a161d7\": \"1708015000000000000000\",\n\t\"a5e93b49ea7c509de7c44d6cfeddef5910deaaf2\": \"2000000000000000000000\",\n\t\"e33d980220fab259af6a1f4b38cf0ef3c6e2ea1a\": \"2000000000000000000000\",\n\t\"8ed0af11ff2870da0681004afe18b013f7bd3882\": \"4000000000000000000000\",\n\t\"f23e5c633221a8f7363e65870c9f287424d2a960\": \"1380000000000000000000\",\n\t\"96334bfe04fffa590213eab36514f338b864b736\": \"400000000000000000000\",\n\t\"fa1f1971a775c3504fef5079f640c2c4bce7ac05\": \"2000000000000000000000\",\n\t\"df44c47fc303ac76e74f97194cca67b5bb3c023f\": \"591000000000000000000\",\n\t\"4b74f5e58e2edf76daf70151964a0b8f1de0663c\": \"324020000000000000000\",\n\t\"e38b91b35190b6d9deed021c30af094b953fdcaa\": \"33340000000000000000\",\n\t\"6b38de841fad7f53fe02da115bd86aaf662466bd\": \"1730000000000000000000\",\n\t\"11675a25554607a3b6c92a9ee8f36f75edd3e336\": \"159800000000000000000\",\n\t\"0ba8705bf55cf219c0956b5e3fc01c4474a6cdc1\": \"94963000000000000000\",\n\t\"0f05f120c89e9fbc93d4ab0c5e2b4a0df092b424\": \"30000000000000000000000\",\n\t\"fdd1195f797d4f35717d15e6f9810a9a3ff55460\": \"18200000000000000000\",\n\t\"63a61dc30a8e3b30a763c4213c801cbf98738178\": \"1000000000000000000000\",\n\t\"e5bdf34f4ccc483e4ca530cc7cf2bb18febe92b3\": \"126260000000000000000\",\n\t\"d6e09e98fe1300332104c1ca34fbfac554364ed9\": \"2000000000000000000000\",\n\t\"5bd6862d517d4de4559d4eec0a06cad05e2f946e\": \"200000000000000000000\",\n\t\"7294ec9da310bc6b4bbdf543b0ef45abfc3e1b4d\": \"22000000000000000000000\",\n\t\"ae34861d342253194ffc6652dfde51ab44cad3fe\": \"466215000000000000000\",\n\t\"f50ae7fab4cfb5a646ee04ceadf9bf9dd5a8e540\": \"3999952000000000000000\",\n\t\"dd2bdfa917c1f310e6fa35aa8af16939c233cd7d\": \"400000000000000000000\",\n\t\"e0060462c47ff9679baef07159cae08c29f274a9\": \"2000000000000000000000\",\n\t\"b7d12e84a2e4c4a6345af1dd1da9f2504a2a996e\": \"200000000000000000000\",\n\t\"f5500178cb998f126417831a08c2d7abfff6ab5f\": \"1308923000000000000000\",\n\t\"fd377a385272900cb436a3bb7962cdffe93f5dad\": \"2000000000000000000000\",\n\t\"a4a83a0738799b971bf2de708c2ebf911ca79eb2\": \"600000000000000000000\",\n\t\"52a5e4de4393eeccf0581ac11b52c683c76ea15d\": \"19999800000000000000000\",\n\t\"b07fdeaff91d4460fe6cd0e8a1b0bd8d22a62e87\": \"5260000000000000000000\",\n\t\"35f5860149e4bbc04b8ac5b272be55ad1aca58e0\": \"200000000000000000000\",\n\t\"fb135eb15a8bac72b69915342a60bbc06b7e077c\": \"20000000000000000000000\",\n\t\"02d4a30968a39e2b3498c3a6a4ed45c1c6646822\": \"2000000000000000000000\",\n\t\"e44b7264dd836bee8e87970340ed2b9aed8ed0a5\": \"5772100000000000000000\",\n\t\"e90a354cec04d69e5d96ddc0c5138d3d33150aa0\": \"499971000000000000000\",\n\t\"693d83be09459ef8390b2e30d7f7c28de4b4284e\": \"2000000000000000000000\",\n\t\"87bf7cd5d8a929e1c785f9e5449106ac232463c9\": \"77800000000000000000\",\n\t\"e5f8ef6d970636b0dcaa4f200ffdc9e75af1741c\": \"2000000000000000000000\",\n\t\"fef09d70243f39ed8cd800bf9651479e8f4aca3c\": \"200000000000000000000\",\n\t\"e98c91cadd924c92579e11b41217b282956cdaa1\": \"135800000000000000000\",\n\t\"c2836188d9a29253e0cbda6571b058c289a0bb32\": \"2000000000000000000000\",\n\t\"afa6946effd5ff53154f82010253df47ae280ccc\": \"1970000000000000000000\",\n\t\"43c7ebc5b3e7af16f47dc5617ab10e0f39b4afbb\": \"1910000000000000000000\",\n\t\"097ecda22567c2d91cb03f8c5215c22e9dcda949\": \"20055000000000000000\",\n\t\"3e66b84769566ab67945d5fa81373556bcc3a1fa\": \"152000000000000000000\",\n\t\"56373daab46316fd7e1576c61e6affcb6559ddd7\": \"215340000000000000000\",\n\t\"faaeba8fc0bbda553ca72e30ef3d732e26e82041\": \"1338337000000000000000\",\n\t\"f54c19d9ef3873bfd1f7a622d02d86249a328f06\": \"44284729000000000000000\",\n\t\"825309a7d45d1812f51e6e8df5a7b96f6c908887\": \"2365000000000000000000\",\n\t\"89009e3c6488bd5e570d1da34eabe28ed024de1b\": \"20000000000000000000000\",\n\t\"63977cad7d0dcdc52b9ac9f2ffa136e8642882b8\": \"75000000000000000000\",\n\t\"c239abdfae3e9af5457f52ed2b91fd0ab4d9c700\": \"2000000000000000000000\",\n\t\"1a4ec6a0ae7f5a9427d23db9724c0d0cffb2ab2f\": \"179000000000000000000\",\n\t\"a12a6c2d985daf0e4f5f207ae851aaf729b332cd\": \"100000000000000000000000\",\n\t\"cbe52fc533d7dd608c92a260b37c3f45deb4eb33\": \"1000000000000000000000\",\n\t\"abb2e6a72a40ba6ed908cdbcec3c5612583132fe\": \"1460000000000000000000\",\n\t\"6503860b191008c15583bfc88158099301762828\": \"1000000000000000000000\",\n\t\"a0228240f99e1de9cb32d82c0f2fa9a3d44b0bf3\": \"1600000000000000000000\",\n\t\"e154daeadb545838cbc6aa0c55751902f528682a\": \"4925000000000000000000\",\n\t\"8e92aba38e72a098170b92959246537a2e5556c0\": \"267400000000000000000\",\n\t\"d23d7affacdc3e9f3dae7afcb4006f58f8a44600\": \"3600000000000000000000\",\n\t\"00d78d89b35f472716eceafebf600527d3a1f969\": \"27750000000000000000000\",\n\t\"120f9de6e0af7ec02a07c609ca8447f157e6344c\": \"267400000000000000000\",\n\t\"e0352fdf819ba265f14c06a6315c4ac1fe131b2e\": \"1000000000000000000000\",\n\t\"8f47328ee03201c9d35ed2b5412b25decc859362\": \"2000000000000000000000\",\n\t\"453e359a3397944c5a275ab1a2f70a5e5a3f6989\": \"240000000000000000000\",\n\t\"9bf58efbea0784eb068adecfa0bb215084c73a35\": \"5800000000000000000000\",\n\t\"21bfe1b45cacde6274fd8608d9a178bf3eeb6edc\": \"2009400000000000000000\",\n\t\"d1d5b17ffe2d7bbb79cc7d7930bcb2e518fb1bbf\": \"3000000000000000000000\",\n\t\"20a29c5079e26b3f18318bb2e50e8e8b346e5be8\": \"499986000000000000000\",\n\t\"7d392852f3abd92ff4bb5bb26cb60874f2be6795\": \"1000070000000000000000\",\n\t\"55852943492970f8d629a15366cdda06a94f4513\": \"2000000000000000000000\",\n\t\"ab5dfc1ea21adc42cf8c3f6e361e243fd0da61e5\": \"300000000000000000000\",\n\t\"9d2bfc36106f038250c01801685785b16c86c60d\": \"380000000000000000000000\",\n\t\"6e60aee1a78f8eda8b424c73e353354ae67c3042\": \"3490300000000000000000\",\n\t\"7e29290038493559194e946d4e460b96fc38a156\": \"309072000000000000000\",\n\t\"6006e36d929bf45d8f16231b126a011ae283d925\": \"176000000000000000000\",\n\t\"d6d03572a45245dbd4368c4f82c95714bd2167e2\": \"1162200000000000000000\",\n\t\"d1432538e35b7664956ae495a32abdf041a7a21c\": \"19700000000000000000000\",\n\t\"2276264bec8526c0c0f270677abaf4f0e441e167\": \"1000000000000000000000\",\n\t\"c8814e34523e38e1f927a7dce8466a447a093603\": \"10000000000000000000000\",\n\t\"688a569e965524eb1d0ac3d3733eab909fb3d61e\": \"1320000000000000000000\",\n\t\"90dc09f717fc2a5b69fd60ba08ebf40bf4e8246c\": \"4000086000000000000000\",\n\t\"239a733e6b855ac592d663156186a8a174d2449e\": \"1637020000000000000000\",\n\t\"bcdfacb9d9023c3417182e9100e8ea1d373393a3\": \"59100000000000000000\",\n\t\"ba6440aeb3737b8ef0f1af9b0c15f4c214ffc7cf\": \"1000000000000000000000\",\n\t\"322e5c43b0f524389655a9b3ff24f2d4db3da10f\": \"4650000000000000000000\",\n\t\"be5a60689998639ad75bc105a371743eef0f7940\": \"501700000000000000000\",\n\t\"b727a9fc82e1cffc5c175fa1485a9befa2cdbdd1\": \"999000000000000000000\",\n\t\"a3883a24f7f166205f1a6a9949076c26a76e7178\": \"1820000000000000000000\",\n\t\"5e95fe5ffcf998f9f9ac0e9a81dab83ead77003d\": \"539766000000000000000\",\n\t\"e60955dc0bc156f6c41849f6bd776ba44b0ef0a1\": \"299982000000000000000\",\n\t\"af203e229d7e6d419df4378ea98715515f631485\": \"1970000000000000000000\",\n\t\"86499a1228ff2d7ee307759364506f8e8c8307a5\": \"1970000000000000000000\",\n\t\"1a04cec420ad432215246d77fe178d339ed0b595\": \"316000000000000000000\",\n\t\"cc2b5f448f3528d3fe41cc7d1fa9c0dc76f1b776\": \"60000000000000000000\",\n\t\"cb50587412822304ebcba07dab3a0f09fffee486\": \"1370000000000000000000\",\n\t\"4ae2a04d3909ef454e544ccfd614bfefa71089ae\": \"442800000000000000000\",\n\t\"c8a2c4e59e1c7fc54805580438aed3e44afdf00e\": \"44000000000000000000\",\n\t\"5792814f59a33a1843faa01baa089eb02ffb5cf1\": \"499986000000000000000\",\n\t\"a1f2854050f872658ed82e52b0ad7bbc1cb921f6\": \"2010918000000000000000\",\n\t\"92dca5e102b3b81b60f1a504634947c374a88ccb\": \"2000000000000000000000\",\n\t\"732fead60f7bfdd6a9dec48125e3735db1b6654f\": \"20000000000000000000\",\n\t\"6bf7b3c065f2c1e7c6eb092ba0d15066f393d1b8\": \"400000000000000000000\",\n\t\"cde36d81d128c59da145652193eec2bfd96586ef\": \"4000000000000000000000\",\n\t\"40eddb448d690ed72e05c225d34fc8350fa1e4c5\": \"7000000000000000000000\",\n\t\"454b61b344c0ef965179238155f277c3829d0b38\": \"2000000000000000000000\",\n\t\"ac3da526cfce88297302f34c49ca520dc271f9b2\": \"800000000000000000000\",\n\t\"c989eec307e8839b9d7237cfda08822962abe487\": \"400000000000000000000\",\n\t\"e99de258a4173ce9ac38ede26c0b3bea3c0973d5\": \"1656800000000000000000\",\n\t\"ff0cb06c42e3d88948e45bd7b0d4e291aefeea51\": \"1910000000000000000000\",\n\t\"0990e81cd785599ea236bd1966cf526302c35b9c\": \"1000000000000000000000\",\n\t\"6da0ed8f1d69339f059f2a0e02471cb44fb8c3bb\": \"935900000000000000000\",\n\t\"5d958a9bd189c2985f86c58a8c69a7a78806e8da\": \"10200000000000000000000\",\n\t\"98be696d51e390ff1c501b8a0f6331b628ddc5ad\": \"2000000000000000000000\",\n\t\"09d0b8cd077c69d9f32d9cca43b3c208a21ed48b\": \"150011000000000000000\",\n\t\"96e7c0c9d5bf10821bf140c558a145b7cac21397\": \"1056000000000000000000\",\n\t\"5b736eb18353629bde9676dadd165034ce5ecc68\": \"1970000000000000000000\",\n\t\"e5a365343cc4eb1e770368e1f1144a77b832d7e0\": \"20000000000000000000\",\n\t\"4cf5537b85842f89cfee359eae500fc449d2118f\": \"1000000000000000000000\",\n\t\"c71f1d75873f33dcb2dd4b3987a12d0791a5ce27\": \"1015200000000000000000\",\n\t\"9bf703b41c3624e15f4054962390bcba3052f0fd\": \"6055000000000000000000\",\n\t\"145e1de0147911ccd880875fbbea61f6a142d11d\": \"4000000000000000000000\",\n\t\"68419c6dd2d3ce6fcbb3c73e2fa079f06051bde6\": \"1970000000000000000000\",\n\t\"d8eb78503ec31a54a90136781ae109004c743257\": \"1000000000000000000000\",\n\t\"f25e4c70bc465632c89e5625a832a7722f6bffab\": \"4488000000000000000000\",\n\t\"7b4d2a38269069c18557770d591d24c5121f5e83\": \"700000000000000000000\",\n\t\"27d158ac3d3e1109ab6e570e90e85d3892cd7680\": \"100000000000000000000\",\n\t\"d3679a47df2d99a49b01c98d1c3e0c987ce1e158\": \"280000000000000000000\",\n\t\"095b949de3333a377d5019d893754a5e4656ff97\": \"340000000000000000000\",\n\t\"6b17598a8ef54f797ae515ccb6517d1859bf8011\": \"100000000000000000000\",\n\t\"3eaf0879b5b6db159b589f84578b6a74f6c10357\": \"7253657000000000000000\",\n\t\"40d45d9d7625d15156c932b771ca7b0527130958\": \"100000000000000000000000\",\n\t\"0392549a727f81655429cb928b529f25df4d1385\": \"26248000000000000000\",\n\t\"c5b009baeaf788a276bd35813ad65b400b849f3b\": \"1000000000000000000000\",\n\t\"6ed884459f809dfa1016e770edaf3e9fef46fa30\": \"3400170000000000000000\",\n\t\"439d2f2f5110a4d58b1757935015408740fec7f8\": \"3830421000000000000000\",\n\t\"dc46c13325cd8edf0230d068896486f007bf4ef1\": \"1337000000000000000000\",\n\t\"8c54c7f8b9896e75d7d5f5c760258699957142ad\": \"40000000000000000000\",\n\t\"61c8f1fa43bf846999ecf47b2b324dfb6b63fe3a\": \"800000000000000000000\",\n\t\"935069444a6a984de2084e46692ab99f671fc727\": \"9000000000000000000000\",\n\t\"fc49c1439a41d6b3cf26bb67e0365224e5e38f5f\": \"1000076000000000000000\",\n\t\"e1dfb5cc890ee8b2877e885d267c256187d019e6\": \"100000000000000000000\",\n\t\"ee7c3ded7c28f459c92fe13b4d95bafbab02367d\": \"700000000000000000000\",\n\t\"a5874d754635a762b381a5c4c792483af8f23d1d\": \"50000000000000000000\",\n\t\"cfbb32b7d024350e3321fa20c9a914035372ffc6\": \"401100000000000000000\",\n\t\"2bc429d618a66a4cf82dbb2d824e9356effa126a\": \"1999944000000000000000\",\n\t\"db244f97d9c44b158a40ed9606d9f7bd38913331\": \"102000000000000000000\",\n\t\"55e220876262c218af4f56784798c7e55da09e91\": \"133566000000000000000\",\n\t\"ca41ccac30172052d522cd2f2f957d248153409f\": \"1970000000000000000000\",\n\t\"b11fa7fb270abcdf5a2eab95aa30c4b53636efbf\": \"800000000000000000000\",\n\t\"0ffea06d7113fb6aec2869f4a9dfb09007facef4\": \"225416000000000000000\",\n\t\"646628a53c2c4193da88359ce718dadd92b7a48d\": \"200032000000000000000\",\n\t\"ca8409083e01b397cf12928a05b68455ce6201df\": \"1600000000000000000000\",\n\t\"dbbcbb79bf479a42ad71dbcab77b5adfaa872c58\": \"1730000000000000000000\",\n\t\"db7d4037081f6c65f9476b0687d97f1e044d0a1d\": \"660000000000000000000\",\n\t\"4be90d412129d5a4d0424361d6649d4e47a62316\": \"1015200000000000000000\",\n\t\"e3ab3ca9b870e3f548517306bba4de2591afafc2\": \"1200062000000000000000\",\n\t\"5c61ab79b408dd3229f662593705d72f1e147bb8\": \"22729000000000000000000\",\n\t\"4f177f9d56953ded71a5611f393322c30279895c\": \"246000000000000000000\",\n\t\"e6cb260b716d4c0ab726eeeb07c8707204e276ae\": \"1000000000000000000000\",\n\t\"44355253b27748e3f34fe9cae1fb718c8f249529\": \"200000000000000000000\",\n\t\"a309df54cabce70c95ec3033149cd6678a6fd4cf\": \"223600000000000000000\",\n\t\"ec4867d2175ab5b9469361595546554684cda460\": \"3000000000000000000000\",\n\t\"8d06e464245cad614939e0af0845e6d730e20374\": \"200359000000000000000\",\n\t\"9810e34a94db6ed156d0389a0e2b80f4fd6b0a8a\": \"2000000000000000000000\",\n\t\"dcfff3e8d23c2a34b56bd1b3bd45c79374432239\": \"5000000000000000000000\",\n\t\"7d7dd5ee614dbb6fbfbcd26305247a058c41faa1\": \"2000000000000000000000\",\n\t\"8a9eca9c5aba8e139f8003edf1163afb70aa3aa9\": \"660000000000000000000\",\n\t\"d942de4784f7a48716c0fd4b9d54a6e54c5f2f3e\": \"20000000000000000000000\",\n\t\"07dae622630d1136381933d2ad6b22b839d82102\": \"200000000000000000000\",\n\t\"abf12fa19e82f76c718f01bdca0003674523ef30\": \"2000000000000000000000\",\n\t\"411c831cc6f44f1965ec5757ab4e5b3ca4cffd1f\": \"425000000000000000000\",\n\t\"99129d5b3c0cde47ea0def4dfc070d1f4a599527\": \"2000000000000000000000\",\n\t\"c5cdcee0e85d117dabbf536a3f4069bf443f54e7\": \"1969606000000000000000\",\n\t\"f218bd848ee7f9d38bfdd1c4eb2ed2496ae4305f\": \"500000000000000000000\",\n\t\"fe549bbfe64740189892932538daaf46d2b61d4f\": \"40000000000000000000\",\n\t\"dc3f0e7672f71fe7525ba30b9755183a20b9166a\": \"9603617000000000000000\",\n\t\"0e83b850481ab44d49e0a229a2e464902c69539b\": \"100000000000000000000\",\n\t\"07ddd0422c86ef65bf0c7fc3452862b1228b08b8\": \"2065302000000000000000\",\n\t\"a68c313445c22d919ee46cc2d0cdff043a755825\": \"75189000000000000000\",\n\t\"a9e9dbce7a2cb03694799897bed7c54d155fdaa8\": \"197559000000000000000\",\n\t\"18fccf62d2c3395453b7587b9e26f5cff9eb7482\": \"1000000000000000000000\",\n\t\"ff41d9e1b4effe18d8b0d1f63fc4255fb4e06c3d\": \"1337000000000000000000\",\n\t\"8f69eafd0233cadb4059ab779c46edf2a0506e48\": \"1788210000000000000000\",\n\t\"9aa48c66e4fb4ad099934e32022e827427f277ba\": \"10000000000000000000000\",\n\t\"f46980e3a4a9d29a6a6e90604537a3114bcb2897\": \"500000000000000000000\",\n\t\"801732a481c380e57ed62d6c29de998af3fa3b13\": \"100000000000000000000\",\n\t\"0cd6a141918d126b106d9f2ebf69e102de4d3277\": \"20000000000000000000\",\n\t\"17589a6c006a54cad70103123aae0a82135fdeb4\": \"4000000000000000000000\",\n\t\"8725e8c753b3acbfdca55f3c62dfe1a59454968a\": \"1000090000000000000000\",\n\t\"d20dcb0b78682b94bc3000281448d557a20bfc83\": \"895000000000000000000\",\n\t\"e84f8076a0f2969ecd333eef8de41042986291f2\": \"432000000000000000000\",\n\t\"b3145b74506d1a8d047cdcdc55392a7b5350799a\": \"129314663000000000000000\",\n\t\"0d9a825ff2bcd397cbad5b711d9dcc95f1cc112d\": \"12800000000000000000000\",\n\t\"0ca670eb2c8b96cba379217f5929c2b892f39ef6\": \"2000000000000000000000\",\n\t\"25cfc4e25c35c13b69f7e77dbfb08baf58756b8d\": \"40000000000000000000000\",\n\t\"182db85293f606e88988c3704cb3f0c0bbbfca5a\": \"133700000000000000000\",\n\t\"bd73c3cbc26a175062ea0320dd84b253bce64358\": \"394000000000000000000\",\n\t\"2680713d40808e2a50ed013150a2a694b96a7f1d\": \"1790000000000000000000\",\n\t\"51e32f14f4ca5e287cdac057a7795ea9e0439953\": \"500000000000000000000\",\n\t\"b1e9c5f1d21e61757a6b2ee75913fc5a1a4101c3\": \"2000000000000000000000\",\n\t\"d4c4d1a7c3c74984f6857b2f5f07e8face68056d\": \"2000000000000000000000\",\n\t\"4651dc420e08c3293b27d2497890eb50223ae2f4\": \"20000000000000000000000\",\n\t\"c74a3995f807de1db01a2eb9c62e97d0548f696f\": \"1000000000000000000000\",\n\t\"0505a08e22a109015a22f685305354662a5531d5\": \"2600000000000000000000\",\n\t\"39c773367c8825d3596c686f42bf0d14319e3f84\": \"133700000000000000000\",\n\t\"0f929cf895db017af79f3ead2216b1bd69c37dc7\": \"2000000000000000000000\",\n\t\"bdd3254e1b3a6dc6cc2c697d45711aca21d516b2\": \"2000000000000000000000\",\n\t\"ae5d221afcd3d29355f508eadfca408ce33ca903\": \"100000000000000000000000\",\n\t\"916cf17d71412805f4afc3444a0b8dd1d9339d16\": \"14300000000000000000\",\n\t\"4319263f75402c0b5325f263be4a5080651087f0\": \"983086000000000000000\",\n\t\"0f1c249cd962b00fd114a9349f6a6cc778d76c4d\": \"2000000000000000000000\",\n\t\"54febcce20fe7a9098a755bd90988602a48c089e\": \"640000000000000000000\",\n\t\"2c1800f35fa02d3eb6ff5b25285f5e4add13b38d\": \"906400000000000000000\",\n\t\"72b904440e90e720d6ac1c2ad79c321dcc1c1a86\": \"1550000000000000000000\",\n\t\"b0aa00950c0e81fa3210173e729aaf163a27cd71\": \"40000000000000000000000\",\n\t\"663604b0503046e624cd26a8b6fb4742dce02a6f\": \"65400000000000000000\",\n\t\"3c98594bf68b57351e8814ae9e6dfd2d254aa06f\": \"300000000000000000000\",\n\t\"9c45202a25f6ad0011f115a5a72204f2f2198866\": \"5014000000000000000000\",\n\t\"b02d062873334545cea29218e4057760590f7423\": \"3186000000000000000000\",\n\t\"7bddb2ee98de19ee4c91f661ee8e67a91d054b97\": \"1000000000000000000000\",\n\t\"9cf2928beef09a40f9bfc953be06a251116182fb\": \"6000000000000000000000\",\n\t\"51b4758e9e1450e7af4268c3c7b1e7bd6f5c7550\": \"1000000000000000000000\",\n\t\"eb570dba975227b1c42d6e8dea2c56c9ad960670\": \"2000000000000000000000\",\n\t\"970d8b8a0016d143054f149fb3b8e550dc0797c7\": \"1000000000000000000000\",\n\t\"c7b39b060451000ca1049ba154bcfa00ff8af262\": \"100000000000000000000000\",\n\t\"945e18769d7ee727c7013f92de24d117967ff317\": \"2000000000000000000000\",\n\t\"d18eb9e1d285dabe93e5d4bae76beefe43b521e8\": \"668500000000000000000\",\n\t\"c618521321abaf5b26513a4a9528086f220adc6f\": \"27000000000000000000\",\n\t\"dd65f6e17163b5d203641f51cc7b24b00f02c8fb\": \"200000000000000000000\",\n\t\"131faed12561bb7aee04e5185af802b1c3438d9b\": \"219000000000000000000\",\n\t\"1ced6715f862b1ff86058201fcce5082b36e62b2\": \"6684522000000000000000\",\n\t\"a0ff5b4cf016027e8323497d4428d3e5a83b8795\": \"6596500000000000000000\",\n\t\"02e816afc1b5c0f39852131959d946eb3b07b5ad\": \"1000000000000000000000\",\n\t\"153cf2842cb9de876c276fa64767d1a8ecf573bb\": \"2000000000000000000000\",\n\t\"3bc6e3ee7a56ce8f14a37532590f63716b9966e8\": \"2000000000000000000000\",\n\t\"f6d25d3f3d846d239f525fa8cac97bc43578dbac\": \"896000000000000000000\",\n\t\"2066774d822793ff25f1760909479cf62491bf88\": \"55160000000000000000000\",\n\t\"46779a5656ff00d73eac3ad0c38b6c853094fb40\": \"230752000000000000000\",\n\t\"22eed327f8eb1d1338a3cb7b0f8a4baa5907cd95\": \"23445000000000000000\",\n\t\"ff88ebacc41b3687f39e4b59e159599b80cba33f\": \"400000000000000000000\",\n\t\"2874f3e2985d5f7b406627e17baa772b01abcc9e\": \"6014000000000000000000\",\n\t\"eb10458daca79e4a6b24b29a8a8ada711b7f2eb6\": \"3998000000000000000000\",\n\t\"541060fc58c750c40512f83369c0a63340c122b6\": \"1970000000000000000000\",\n\t\"fd2757cc3551a095878d97875615fe0c6a32aa8a\": \"598200000000000000000\",\n\t\"be659d85e7c34f8833ea7f488de1fbb5d4149bef\": \"9072500000000000000000\",\n\t\"e149b5726caf6d5eb5bf2acc41d4e2dc328de182\": \"1940000000000000000000\",\n\t\"2fe0cc424b53a31f0916be08ec81c50bf8eab0c1\": \"600000000000000000000\",\n\t\"e3712701619ca7623c55db3a0ad30e867db0168b\": \"20000000000000000000\",\n\t\"f8ca336c8e91bd20e314c20b2dd4608b9c8b9459\": \"846000000000000000000\",\n\t\"68acdaa9fb17d3c309911a77b05f5391fa034ee9\": \"8950000000000000000000\",\n\t\"e77d7deab296c8b4fa07ca3be184163d5a6d606c\": \"92538000000000000000\",\n\t\"e6b9545f7ed086e552924639f9a9edbbd5540b3e\": \"3760000000000000000000\",\n\t\"2866b81decb02ee70ae250cee5cdc77b59d7b679\": \"2000000000000000000000\",\n\t\"60e3cc43bcdb026aad759c7066f555bbf2ac66f5\": \"2000000000000000000000\",\n\t\"fcbd85feea6a754fcf3449449e37ff9784f7773c\": \"3086000000000000000000\",\n\t\"38a744efa6d5c2137defef8ef9187b649eee1c78\": \"4000000000000000000000\",\n\t\"9d7655e9f3e5ba5d6e87e412aebe9ee0d49247ee\": \"2620100000000000000000\",\n\t\"2020b81ae53926ace9f7d7415a050c031d585f20\": \"341200000000000000000\",\n\t\"4244f1331158b9ce26bbe0b9236b9203ca351434\": \"10000000000000000000000\",\n\t\"99c236141daec837ece04fdaee1d90cf8bbdc104\": \"2184000000000000000000\",\n\t\"943d37864a4a537d35c8d99723cd6406ce2562e6\": \"2000000000000000000000\",\n\t\"d79483f6a8444f2549d611afe02c432d15e11051\": \"20000000000000000000\",\n\t\"9fd64373f2fbcd9c0faca60547cad62e26d9851f\": \"1000000000000000000000\",\n\t\"b89c036ed7c492879921be41e10ca1698198a74c\": \"1820000000000000000000\",\n\t\"7462c89caa9d8d7891b2545def216f7464d5bb21\": \"109162000000000000000\",\n\t\"bb0366a7cfbd3445a70db7fe5ae34885754fd468\": \"6160000000000000000000\",\n\t\"6c52cf0895bb35e656161e4dc46ae0e96dd3e62c\": \"4000086000000000000000\",\n\t\"b9cf71b226583e3a921103a5316f855a65779d1b\": \"24000000000000000000000\",\n\t\"016b60bb6d67928c29fd0313c666da8f1698d9c5\": \"2000000000000000000000\",\n\t\"9454b3a8bff9709fd0e190877e6cb6c89974dbd6\": \"2674000000000000000000\",\n\t\"84aac7fa197ff85c30e03b7a5382b957f41f3afb\": \"157600000000000000000\",\n\t\"db6e560c9bc620d4bea3a94d47f7880bf47f2d5f\": \"89500000000000000000\",\n\t\"eefd05b0e3c417d55b3343060486cdd5e92aa7a6\": \"1430000000000000000000\",\n\t\"3a59a08246a8206f8d58f70bb1f0d35c5bcc71bd\": \"185000000000000000000\",\n\t\"9bfff50db36a785555f07652a153b0c42b1b8b76\": \"2000000000000000000000\",\n\t\"d44f5edf2bcf2433f211dadd0cc450db1b008e14\": \"267400000000000000000\",\n\t\"2378fd4382511e968ed192106737d324f454b535\": \"1000000000000000000000\",\n\t\"c94089553ae4c22ca09fbc98f57075cf2ec59504\": \"4000000000000000000000\",\n\t\"08ef3fa4c43ccdc57b22a4b9b2331a82e53818f2\": \"4000000000000000000000\",\n\t\"e48e65125421880d42bdf1018ab9778d96928f3f\": \"4200000000000000000000\",\n\t\"67518e5d02b205180f0463a32004471f753c523e\": \"1984289000000000000000\",\n\t\"0da7401262384e2e8b4b26dd154799b55145efa0\": \"300000000000000000000\",\n\t\"0b6920a64b363b8d5d90802494cf564b547c430d\": \"1200000000000000000000\",\n\t\"a5ab4bd3588f46cb272e56e93deed386ba8b753d\": \"1332989000000000000000\",\n\t\"1788da9b57fd05edc4ff99e7fef301519c8a0a1e\": \"2000000000000000000000\",\n\t\"17b2d6cf65c6f4a347ddc6572655354d8a412b29\": \"2000000000000000000000\",\n\t\"d0319139fbab2e8e2accc1d924d4b11df6696c5a\": \"200000000000000000000\",\n\t\"4c377bb03ab52c4cb79befa1dd114982924c4ae9\": \"1827814000000000000000\",\n\t\"fb949c647fdcfd2514c7d58e31f28a532d8c5833\": \"20000000000000000000000\",\n\t\"70e5e9da735ff077249dcb9aaf3db2a48d9498c0\": \"1000000000000000000000\",\n\t\"fe6f5f42b6193b1ad16206e4afb5239d4d7db45e\": \"1730000000000000000000\",\n\t\"bda4be317e7e4bed84c0495eee32d607ec38ca52\": \"2309457000000000000000\",\n\t\"5910106debd291a1cd80b0fbbb8d8d9e93a7cc1e\": \"2000000000000000000000\",\n\t\"ba42f9aace4c184504abf5425762aca26f71fbdc\": \"37400000000000000000\",\n\t\"beb4fd315559436045dcb99d49dcec03f40c42dc\": \"2000000000000000000000\",\n\t\"452b64db8ef7d6df87c788639c2290be8482d575\": \"8000000000000000000000\",\n\t\"66e09427c1e63deed7e12b8c55a6a19320ef4b6a\": \"170000000000000000000\",\n\t\"faad905d847c7b23418aeecbe3addb8dd3f8924a\": \"1970000000000000000000\",\n\t\"a29319e81069e5d60df00f3de5adee3505ecd5fb\": \"2000000000000000000000\",\n\t\"cf348f2fe47b7e413c077a7baf3a75fbf8428692\": \"2000000000000000000000\",\n\t\"e1e8c50b80a352b240ce7342bbfdf5690cc8cb14\": \"394000000000000000000\",\n\t\"131c792c197d18bd045d7024937c1f84b60f4438\": \"4000000000000000000000\",\n\t\"e49af4f34adaa2330b0e49dc74ec18ab2f92f827\": \"2000000000000000000000\",\n\t\"f2e99f5cbb836b7ad36247571a302cbe4b481c69\": \"1970000000000000000000\",\n\t\"c93fbde8d46d2bcc0fa9b33bd8ba7f8042125565\": \"1400000000000000000000\",\n\t\"038779ca2dbe663e63db3fe75683ea0ec62e2383\": \"1670000000000000000000\",\n\t\"a33cb450f95bb46e25afb50fe05feee6fb8cc8ea\": \"776000000000000000000\",\n\t\"40ab66fe213ea56c3afb12c75be33f8e32fd085d\": \"4000000000000000000000\",\n\t\"6403d062549690c8e8b63eae41d6c109476e2588\": \"2000000000000000000000\",\n\t\"bfb0ea02feb61dec9e22a5070959330299c43072\": \"20000000000000000000000\",\n\t\"99c475bf02e8b9214ada5fad02fdfd15ba365c0c\": \"591000000000000000000\",\n\t\"904966cc2213b5b8cb5bd6089ef9cddbef7edfcc\": \"2000000000000000000000\",\n\t\"767a03655af360841e810d83f5e61fb40f4cd113\": \"985000000000000000000\",\n\t\"ab209fdca979d0a647010af9a8b52fc7d20d8cd1\": \"9129000000000000000000\",\n\t\"6294eae6e420a3d5600a39c4141f838ff8e7cc48\": \"2955000000000000000000\",\n\t\"9777cc61cf756be3b3c20cd4491c69d275e7a120\": \"10000000000000000000000\",\n\t\"bcbf6ba166e2340db052ea23d28029b0de6aa380\": \"3880000000000000000000\",\n\t\"9f10f2a0463b65ae30b070b3df18cf46f51e89bd\": \"1910000000000000000000\",\n\t\"8d9952d0bb4ebfa0efd01a3aa9e8e87f0525742e\": \"3460000000000000000000\",\n\t\"4f23b6b817ffa5c664acdad79bb7b726d30af0f9\": \"1760000000000000000000\",\n\t\"b4c20040ccd9a1a3283da4d4a2f365820843d7e2\": \"1000000000000000000000\",\n\t\"7f49e7a4269882bd8722d4a6f566347629624079\": \"2000000000000000000000\",\n\t\"33629bd52f0e107bc071176c64df108f64777d49\": \"33425000000000000000\",\n\t\"6a7b2e0d88867ff15d207c222bebf94fa6ce8397\": \"60000000000000000000000\",\n\t\"b7ce684b09abda53389a875369f71958aeac3bdd\": \"2000000000000000000000\",\n\t\"ffbc3da0381ec339c1c049eb1ed9ee34fdcea6ca\": \"4000000000000000000000\",\n\t\"849ab80790b28ff1ffd6ba394efc7463105c36f7\": \"34600000000000000000\",\n\t\"b0b36af9aeeedf97b6b02280f114f13984ea3260\": \"985000000000000000000\",\n\t\"4d57e716876c0c95ef5eaebd35c8f41b069b6bfe\": \"2000000000000000000000\",\n\t\"2d2b032359b363964fc11a518263bfd05431e867\": \"149600000000000000000\",\n\t\"2ccc1f1cb5f4a8002e186b20885d9dbc030c0894\": \"2000000000000000000000\",\n\t\"016c85e1613b900fa357b8283b120e65aefcdd08\": \"799954000000000000000\",\n\t\"710b0274d712c77e08a5707d6f3e70c0ce3d92cf\": \"6400000000000000000000\",\n\t\"3cd3a6e93579c56d494171fc533e7a90e6f59464\": \"2000000000000000000000\",\n\t\"fe0e30e214290d743dd30eb082f1f0a5225ade61\": \"200000000000000000000\",\n\t\"d0718520eae0a4d62d70de1be0ca431c5eea2482\": \"2000000000000000000000\",\n\t\"af7f79cb415a1fb8dbbd094607ee8d41fb7c5a3b\": \"10000000000000000000000\",\n\t\"b7d252ee9402b0eef144295f0e69f0db586c0871\": \"660000000000000000000\",\n\t\"c3b928a76fad6578f04f0555e63952cd21d1520a\": \"2000000000000000000000\",\n\t\"a7a517d7ad35820b09d497fa7e5540cde9495853\": \"2000000000000000000000\",\n\t\"e6e886317b6a66a5b4f81bf164c538c264351765\": \"2000000000000000000000\",\n\t\"0770b43dbae4b1f35a927b4fa8124d3866caf97b\": \"1016390000000000000000\",\n\t\"52b4257cf41b6e28878d50d57b99914ffa89873a\": \"3930150000000000000000\",\n\t\"e08bc29c2b48b169ff2bdc16714c586e6cb85ccf\": \"20000000000000000000\",\n\t\"2372c4c1c9939f7aaf6cfac04090f00474840a09\": \"10000000000000000000000\",\n\t\"ab6b65eab8dfc917ec0251b9db0ecfa0fa032849\": \"500000000000000000000\",\n\t\"582e7cc46f1d7b4e6e9d95868bfd370573178f4c\": \"2000000000000000000000\",\n\t\"f167f5868dcf4233a7830609682caf2df4b1b807\": \"2396150000000000000000\",\n\t\"ec82f50d06475f684df1b392e00da341aa145444\": \"2000000000000000000000\",\n\t\"0968ee5a378f8cadb3bafdbed1d19aaacf936711\": \"1000000000000000000000\",\n\t\"a86613e6c4a4c9c55f5c10bcda32175dcbb4af60\": \"10696140000000000000000\",\n\t\"a5cd123992194b34c4781314303b03c54948f4b9\": \"2010462000000000000000\",\n\t\"52f058d46147e9006d29bf2c09304ad1cddd6e15\": \"1500000000000000000000\",\n\t\"160226efe7b53a8af462d117a0108089bdecc2d1\": \"200550000000000000000\",\n\t\"256292a191bdda34c4da6b6bd69147bf75e2a9ab\": \"14051000000000000000\",\n\t\"1b8aa0160cd79f005f88510a714913d70ad3be33\": \"201760000000000000000\",\n\t\"d4b2ff3bae1993ffea4d3b180231da439f7502a2\": \"2000000000000000000000\",\n\t\"e408aa99835307eea4a6c5eb801fe694117f707d\": \"500000000000000000000\",\n\t\"e60a55f2df996dc3aedb696c08dde039b2641de8\": \"2000000000000000000000\",\n\t\"73df3c3e7955f4f2d859831be38000b1076b3884\": \"1970000000000000000000\",\n\t\"6228ade95e8bb17d1ae23bfb0518414d497e0eb8\": \"400000000000000000000\",\n\t\"0f46c81db780c1674ac73d314f06539ee56ebc83\": \"9850000000000000000000\",\n\t\"762d6f30dab99135e4eca51d5243d6c8621102d5\": \"282000000000000000000\",\n\t\"4ba0d9e89601772b496847a2bb4340186787d265\": \"1000000000000000000000\",\n\t\"ca747576446a4c8f30b08340fee198de63ec92cf\": \"7020000000000000000000\",\n\t\"99c31fe748583787cdd3e525b281b218961739e3\": \"1015200000000000000000\",\n\t\"1210f80bdb826c175462ab0716e69e46c24ad076\": \"100000000000000000000\",\n\t\"3f75ae61cc1d8042653b5baec4443e051c5e7abd\": \"95500000000000000000\",\n\t\"5c4892907a0720df6fd3413e63ff767d6b398023\": \"13189467000000000000000\",\n\t\"17f14632a7e2820be6e8f6df823558283dadab2d\": \"2000000000000000000000\",\n\t\"1dc7f7dad85df53f1271152403f4e1e4fdb3afa0\": \"200000000000000000000\",\n\t\"5a30feac37ac9f72d7b4af0f2bc73952c74fd5c3\": \"2000000000000000000000\",\n\t\"136d4b662bbd1080cfe4445b0fa213864435b7f1\": \"4000000000000000000000\",\n\t\"c1ec81dd123d4b7c2dd9b4d438a7072c11dc874c\": \"2000000000000000000000\",\n\t\"09f9575be57d004793c7a4eb84b71587f97cbb6a\": \"200000000000000000000\",\n\t\"2c4b470307a059854055d91ec3794d80b53d0f4a\": \"20000000000000000000000\",\n\t\"6af6c7ee99df271ba15bf384c0b764adcb4da182\": \"999972000000000000000\",\n\t\"0dae3ee5b915b36487f9161f19846d101433318a\": \"1910000000000000000000\",\n\t\"0dcf9d8c9804459f647c14138ed50fad563b4154\": \"173000000000000000000\",\n\t\"bfa8c858df102cb12421008b0a31c4c7190ad560\": \"200000000000000000000\",\n\t\"c2fd0bf7c725ef3e047e5ae1c29fe18f12a7299c\": \"1337000000000000000000\",\n\t\"d70a612bd6dda9eab0dddcff4aaf4122d38feae4\": \"540000000000000000000\",\n\t\"e07137ae0d116d033533c4eab496f8a9fb09569c\": \"1400000000000000000000\",\n\t\"7f49f20726471ac1c7a83ef106e9775ceb662566\": \"5910000000000000000000\",\n\t\"1e706655e284dcf0bb37fe075d613a18dc12ff4a\": \"4376760000000000000000\",\n\t\"03af7ad9d5223cf7c8c13f20df67ebe5ffc5bb41\": \"200000000000000000000\",\n\t\"228242f8336eecd8242e1f000f41937e71dffbbf\": \"5000000000000000000000\",\n\t\"e8ed51bbb3ace69e06024b33f86844c47348db9e\": \"165170600000000000000000\",\n\t\"3b566a8afad19682dc2ce8679a3ce444a5b0fd4f\": \"2000000000000000000000\",\n\t\"dc738fb217cead2f69594c08170de1af10c419e3\": \"100000000000000000000000\",\n\t\"13032446e7d610aa00ec8c56c9b574d36ca1c016\": \"2000000000000000000000\",\n\t\"6ca6a132ce1cd288bee30ec7cfeffb85c1f50a54\": \"2000000000000000000000\",\n\t\"b85f26dd0e72d9c29ebaf697a8af77472c2b58b5\": \"11900000000000000000000\",\n\t\"055bd02caf19d6202bbcdc836d187bd1c01cf261\": \"100000000000000000000\",\n\t\"3c322e611fdb820d47c6f8fc64b6fad74ca95f5e\": \"242514000000000000000\",\n\t\"8daddf52efbd74da95b969a5476f4fbbb563bfd2\": \"835000000000000000000\",\n\t\"c63ac417992e9f9b60386ed953e6d7dff2b090e8\": \"4000086000000000000000\",\n\t\"27f03cf1abc5e1b51dbc444b289e542c9ddfb0e6\": \"5000000000000000000000\",\n\t\"d8f4bae6f84d910d6d7d5ac914b1e68372f94135\": \"100000000000000000000\",\n\t\"9f83a293c324d4106c18faa8888f64d299054ca0\": \"200000000000000000000\",\n\t\"39ee4fe00fbced647068d4f57c01cb22a80bccd1\": \"6000000000000000000000\",\n\t\"404100db4c5d0eec557823b58343758bcc2c8083\": \"20000000000000000000\",\n\t\"02751dc68cb5bd737027abf7ddb77390cd77c16b\": \"20000000000000000000\",\n\t\"d10302faa1929a326904d376bf0b8dc93ad04c4c\": \"1790000000000000000000\",\n\t\"cc419fd9912b85135659e77a93bc3df182d45115\": \"10000000000000000000000\",\n\t\"10097198b4e7ee91ff82cc2f3bd95fed73c540c0\": \"2000000000000000000000\",\n\t\"7e24d9e22ce1da3ce19f219ccee523376873f367\": \"5900150000000000000000\",\n\t\"2e4ee1ae996aa0a1d92428d06652a6bea6d2d15d\": \"2000000000000000000000\",\n\t\"91a4149a2c7b1b3a67ea28aff34725e0bf8d7524\": \"1940000000000000000000\",\n\t\"ead65262ed5d122df2b2751410f98c32d1238f51\": \"101680000000000000000\",\n\t\"e20954d0f4108c82d4dcb2148d26bbd924f6dd24\": \"10000000000000000000000\",\n\t\"ebb7d2e11bc6b58f0a8d45c2f6de3010570ac891\": \"26740000000000000000\",\n\t\"ef115252b1b845cd857f002d630f1b6fa37a4e50\": \"1970000000000000000000\",\n\t\"01a818135a414210c37c62b625aca1a54611ac36\": \"260000000000000000000\",\n\t\"ea1ea0c599afb9cd36caacbbb52b5bbb97597377\": \"1069600000000000000000\",\n\t\"7a7a4f807357a4bbe68e1aa806393210c411ccb3\": \"30000000000000000000000\",\n\t\"6d40ca27826d97731b3e86effcd7b92a4161fe89\": \"2000000000000000000000\",\n\t\"8431277d7bdd10457dc017408c8dbbbd414a8df3\": \"39400000000000000000\",\n\t\"69b81d5981141ec7a7141060dfcf8f3599ffc63e\": \"5000000000000000000000\",\n\t\"47688410ff25d654d72eb2bc06e4ad24f833b094\": \"160440000000000000000\",\n\t\"6c101205b323d77544d6dc52af37aca3cec6f7f1\": \"10000000000000000000000\",\n\t\"fb685c15e439965ef626bf0d834cd1a89f2b5695\": \"3940000000000000000000\",\n\t\"673706b1b0e4dc7a949a7a796258a5b83bb5aa83\": \"16100000000000000000000\",\n\t\"ecdaf93229b45ee672f65db506fb5eca00f7fce6\": \"1605009000000000000000\",\n\t\"ec6904bae1f69790591709b0609783733f2573e3\": \"500000000000000000000\",\n\t\"812ea7a3b2c86eed32ff4f2c73514cc63bacfbce\": \"1000000000000000000000\",\n\t\"196c02210a450ab0b36370655f717aa87bd1c004\": \"259456000000000000000\",\n\t\"d96ac2507409c7a383ab2eee1822a5d738b36b56\": \"200000000000000000000\",\n\t\"ae2f9c19ac76136594432393b0471d08902164d3\": \"698600000000000000000\",\n\t\"9d32962ea99700d93228e9dbdad2cc37bb99f07e\": \"3327560000000000000000\",\n\t\"17e584e810e567702c61d55d434b34cdb5ee30f6\": \"5000000000000000000000\",\n\t\"a3a93ef9dbea2636263d06d8492f6a41de907c22\": \"60000000000000000000\",\n\t\"2b5016e2457387956562587115aa8759d8695fdf\": \"200000000000000000000000\",\n\t\"140129eaa766b5a29f5b3af2574e4409f8f6d3f1\": \"6400000000000000000000\",\n\t\"7025965d2b88da197d4459be3dc9386344cc1f31\": \"2005500000000000000000\",\n\t\"388bdcdae794fc44082e667501344118ea96cd96\": \"1670000000000000000000\",\n\t\"eee9d0526eda01e43116a395322dda8970578f39\": \"9999980000000000000000\",\n\t\"6ec89b39f9f5276a553e8da30e6ec17aa47eefc7\": \"447500000000000000000\",\n\t\"7e236666b2d06e63ea4e2ab84357e2dfc977e50e\": \"999972000000000000000\",\n\t\"68df947c495bebaeb8e889b3f953d533874bf106\": \"546000000000000000000\",\n\t\"d40ed66ab3ceff24ca05ecd471efb492c15f5ffa\": \"500000000000000000000\",\n\t\"f0c70d0d6dab7663aa9ed9ceea567ee2c6b02765\": \"2089349000000000000000\",\n\t\"b589676d15a04448344230d4ff27c95edf122c49\": \"1000000000000000000000\",\n\t\"a0347f0a98776390165c166d32963bf74dcd0a2f\": \"1000000000000000000000\",\n\t\"d47d8685faee147c520fd986709175bf2f886bef\": \"2000000000000000000000\",\n\t\"a1dcd0e5b05a977c9623e5ae2f59b9ada2f33e31\": \"100000000000000000000\",\n\t\"4979194ec9e97db9bee8343b7c77d9d7f3f1dc9f\": \"20000000000000000000\",\n\t\"7cd20eccb518b60cab095b720f571570caaa447e\": \"500000000000000000000\",\n\t\"2ff830cf55fb00d5a0e03514fecd44314bd6d9f1\": \"10000000000000000000000\",\n\t\"0bb25ca7d188e71e4d693d7b170717d6f8f0a70a\": \"336870000000000000000\",\n\t\"e9a2b4914e8553bf0d7c00ca532369b879f931bf\": \"2000000000000000000000\",\n\t\"720e6b22bf430966fa32b6acb9a506eebf662c61\": \"152000000000000000000\",\n\t\"7ade5d66b944bb860c0efdc86276d58f4653f711\": \"2000000000000000000000\",\n\t\"2eaff9f8f8113064d3957ac6d6e11eee42c8195d\": \"1970000000000000000000\",\n\t\"0c8fd7775e54a6d9c9a3bf890e761f6577693ff0\": \"9850000000000000000000\",\n\t\"290a56d41f6e9efbdcea0342e0b7929a8cdfcb05\": \"344000000000000000000\",\n\t\"d73ed2d985b5f21b55b274643bc6da031d8edd8d\": \"49250000000000000000000\",\n\t\"80156d10efa8b230c99410630d37e269d4093cea\": \"2000000000000000000000\",\n\t\"0989c200440b878991b69d6095dfe69e33a22e70\": \"1910000000000000000000\",\n\t\"ec8014efc7cbe5b0ce50f3562cf4e67f8593cd32\": \"17300000000000000000\",\n\t\"de612d0724e84ea4a7feaa3d2142bd5ee82d3201\": \"20000000000000000000\",\n\t\"0f832a93df9d7f74cd0fb8546b7198bf5377d925\": \"143000000000000000000\",\n\t\"aa2c670096d3f939305325427eb955a8a60db3c5\": \"2003010000000000000000\",\n\t\"25287b815f5c82380a73b0b13fbaf982be24c4d3\": \"40000000000000000000\",\n\t\"e75c3b38a58a3f33d55690a5a59766be185e0284\": \"500000000000000000000\",\n\t\"1940dc9364a852165f47414e27f5002445a4f143\": \"10850000000000000000000\",\n\t\"e5b826196c0e1bc1119b021cf6d259a610c99670\": \"200000000000000000000\",\n\t\"82a15cef1d6c8260eaf159ea3f0180d8677dce1c\": \"2000000000000000000000\",\n\t\"da06044e293c652c467fe74146bf185b21338a1c\": \"1000000000000000000000\",\n\t\"f815c10a032d13c34b8976fa6e3bd2c9131a8ba9\": \"1337000000000000000000\",\n\t\"cd95fa423d6fc120274aacde19f4eeb766f10420\": \"200000000000000000000\",\n\t\"e3a4f83c39f85af9c8b1b312bfe5fc3423afa634\": \"28650000000000000000\",\n\t\"768ce0daa029b7ded022e5fc574d11cde3ecb517\": \"322000000000000000000\",\n\t\"e3ec18a74ed43855409a26ade7830de8e42685ef\": \"19700000000000000000\",\n\t\"b2bdbedf95908476d7148a370cc693743628057f\": \"4000000000000000000000\",\n\t\"bbb8ffe43f98de8eae184623ae5264e424d0b8d7\": \"107600000000000000000\",\n\t\"090cebef292c3eb081a05fd8aaf7d39bf07b89d4\": \"4000000000000000000000\",\n\t\"dd2a233adede66fe1126d6c16823b62a021feddb\": \"2000000000000000000000\",\n\t\"d8cd64e0284eec53aa4639afc4750810b97fab56\": \"20000000000000000000\",\n\t\"e5953fea497104ef9ad2d4e5841c271f073519c2\": \"704000000000000000000\",\n\t\"967d4142af770515dd7062af93498dbfdff29f20\": \"20200000000000000000\",\n\t\"fd191a35157d781373fb411bf9f25290047c5eef\": \"1000000000000000000000\",\n\t\"8967d7b9bdb7b4aed22e65a15dc803cb7a213f10\": \"400000000000000000000\",\n\t\"51e43fe0d25c782860af81ea89dd793c13f0cbb1\": \"60000000000000000000\",\n\t\"a38476691d34942eea6b2f76889223047db4617a\": \"2000000000000000000000\",\n\t\"1321ccf29739b974e5a516f18f3a843671e39642\": \"4000000000000000000000\",\n\t\"4d71a6eb3d7f327e1834278e280b039eddd31c2f\": \"6000000000000000000000\",\n\t\"dc2d15a69f6bb33b246aef40450751c2f6756ad2\": \"1996000000000000000000\",\n\t\"ec89f2b678a1a15b9134ec5eb70c6a62071fbaf9\": \"200000000000000000000\",\n\t\"27bf943c1633fe32f8bcccdb6302b407a5724e44\": \"940229000000000000000\",\n\t\"d0a6c6f9e9c4b383d716b31de78d56414de8fa91\": \"300000000000000000000\",\n\t\"7b6175ec9befc738249535ddde34688cd36edf25\": \"10000000000000000000000\",\n\t\"41ce79950935cff55bf78e4ccec2fe631785db95\": \"2000000000000000000000\",\n\t\"5598b3a79a48f32b1f5fc915b87b645d805d1afe\": \"500000000000000000000\",\n\t\"5c4881165cb42bb82e97396c8ef44adbf173fb99\": \"110600000000000000000\",\n\t\"25b0533b81d02a617b9229c7ec5d6f2f672e5b5a\": \"1000000000000000000000\",\n\t\"015f097d9acddcddafaf2a107eb93a40fc94b04c\": \"20000000000000000000000\",\n\t\"b84b53d0bb125656cddc52eb852ab71d7259f3d5\": \"16000000000000000000000\",\n\t\"1a79c7f4039c67a39d7513884cdc0e2c34222490\": \"20000000000000000000\",\n\t\"926209b7fda54e8ddb9d9e4d3d19ebdc8e88c29f\": \"2000000000000000000000\",\n\t\"c2fe7d75731f636dcd09dbda0671393ba0c82a7d\": \"2200000000000000000000\",\n\t\"30248d58e414b20fed3a6c482b59d9d8f5a4b7e2\": \"60000000000000000000\",\n\t\"d0e194f34b1db609288509ccd2e73b6131a2538b\": \"999972000000000000000\",\n\t\"e8f29969e75c65e01ce3d86154207d0a9e7c76f2\": \"2991807000000000000000\",\n\t\"cb93199b9c90bc4915bd859e3d42866dc8c18749\": \"231800000000000000000\",\n\t\"e6fe0afb9dcedd37b2e22c451ba6feab67348033\": \"10000000000000000000000\",\n\t\"82f854c9c2f087dffa985ac8201e626ca5467686\": \"100000000000000000000000\",\n\t\"63bb664f9117037628594da7e3c5089fd618b5b5\": \"20000000000000000000\",\n\t\"f8d17424c767bea31205739a2b57a7277214eebe\": \"42000000000000000000\",\n\t\"4ca8db4a5efefc80f4cd9bbcccb03265931332b6\": \"200000000000000000000\",\n\t\"c56e6b62ba6e40e52aab167d21df025d0055754b\": \"2000000000000000000000\",\n\t\"0d8c40a79e18994ff99ec251ee10d088c3912e80\": \"114600000000000000000\",\n\t\"40a331195b977325c2aa28fa2f42cb25ec3c253c\": \"2000000000000000000000\",\n\t\"a2c5854ff1599f98892c5725d262be1da98aadac\": \"314315000000000000000\",\n\t\"23ab09e73f87aa0f3be0139df0c8eb6be5634f95\": \"8000000000000000000000\",\n\t\"b8040536958d5998ce4bec0cfc9c2204989848e9\": \"24472420000000000000000\",\n\t\"42d6b263d9e9f4116c411424fc9955783c763030\": \"2000000000000000000000\",\n\t\"c496cbb0459a6a01600fc589a55a32b454217f9d\": \"274000000000000000000\",\n\t\"48302c311ef8e5dc664158dd583c81194d6e0d58\": \"3364760000000000000000\",\n\t\"d5b284040130abf7c1d163712371cc7e28ad66da\": \"1970000000000000000000\",\n\t\"d22f0ca4cd479e661775053bcc49e390f670dd8a\": \"1000000000000000000000\",\n\t\"e597f083a469c4591c3d2b1d2c772787befe27b2\": \"280000000000000000000\",\n\t\"668b6ba8ab08eace39c502ef672bd5ccb6a67a20\": \"31135320000000000000000\",\n\t\"a3bff1dfa9971668360c0d82828432e27bf54e67\": \"200000000000000000000\",\n\t\"ee655bb4ee0e8d5478526fb9f15e4064e09ff3dd\": \"200000000000000000000\",\n\t\"121f855b70149ac83473b9706fb44d47828b983b\": \"1400000000000000000000\",\n\t\"20a15256d50ce058bf0eac43aa533aa16ec9b380\": \"20000000000000000000\",\n\t\"69bcfc1d43b4ba19de7b274bdffb35139412d3d7\": \"985000000000000000000\",\n\t\"db288f80ffe232c2ba47cc94c763cf6fc9b82b0d\": \"85000000000000000000\",\n\t\"e1cb83ec5eb6f1eeb85e99b2fc63812fde957184\": \"20000000000000000000000\",\n\t\"a419a984142363267575566089340eea0ea20819\": \"1999944000000000000000\",\n\t\"8489f6ad1d9a94a297789156899db64154f1dbb5\": \"358849000000000000000\",\n\t\"d609bf4f146eea6b0dc8e06ddcf4448a1fccc9fa\": \"2000000000000000000000\",\n\t\"df1fa2e20e31985ebe2c0f0c93b54c0fb67a264b\": \"200000000000000000000\",\n\t\"efe8ff87fc260e0767638dd5d02fc4672e0ec06d\": \"2000000000000000000000\",\n\t\"eef1bbb1e5a83fde8248f88ee3018afa2d1332eb\": \"200000000000000000000\",\n\t\"4b3aab335ebbfaa870cc4d605e7d2e74c668369f\": \"60000000000000000000000\",\n\t\"8f4fb1aea7cd0f570ea5e61b40a4f4510b6264e4\": \"4000000000000000000000\",\n\t\"0b0b3862112aeec3a03492b1b05f440eca54256e\": \"4000000000000000000000\",\n\t\"dff4007931786593b229efe5959f3a4e219e51af\": \"4925000000000000000000\",\n\t\"fec14e5485de2b3eef5e74c46146db8e454e0335\": \"179000000000000000000\",\n\t\"ac21c1e5a3d7e0b50681679dd6c792dbca87decb\": \"100000000000000000000000\",\n\t\"796ebbf49b3e36d67694ad79f8ff36767ac6fab0\": \"60800000000000000000\",\n\t\"ae7739124ed153052503fc101410d1ffd8cd13b7\": \"999942000000000000000\",\n\t\"86026cad3fe4ea1ce7fca260d3d45eb09ea6a364\": \"200000000000000000000\",\n\t\"b2fc84a3e50a50af02f94da0383ed59f71ff01d7\": \"30000000000000000000000\",\n\t\"bbab000b0408ed015a37c04747bc461ab14e151b\": \"6000000000000000000000\",\n\t\"c4ff6fbb1f09bd9e102ba033d636ac1c4c0f5304\": \"1000000000000000000000\",\n\t\"cc606f511397a38fc7872bd3b0bd03c71bbd768b\": \"1000000000000000000000\",\n\t\"f346d7de92741c08fc58a64db55b062dde012d14\": \"295106000000000000000\",\n\t\"33f15223310d44de8b6636685f3a4c3d9c5655a5\": \"250500000000000000000\",\n\t\"3c860e2e663f46db53427b29fe3ea5e5bf62bbcc\": \"98500000000000000000\",\n\t\"acb94338554bc488cc88ae2d9d94080d6bdf8410\": \"1000000000000000000000\",\n\t\"9c5cc111092c122116f1a85f4ee31408741a7d2f\": \"492500000000000000000\",\n\t\"5f76f0a306269c78306b3d650dc3e9c37084db61\": \"2400000000000000000000\",\n\t\"2c0cc3f951482cc8a2925815684eb9f94e060200\": \"6000000000000000000000\",\n\t\"b74372dbfa181dc9242f39bf1d3731dffe2bdacf\": \"2000000000000000000000\",\n\t\"3bab4b01a7c84ba13feea9b0bb191b77a3aadca3\": \"200000000000000000000\",\n\t\"39aa05e56d7d32385421cf9336e90d3d15a9f859\": \"26000000000000000000\",\n\t\"4a52bad20357228faa1e996bed790c93674ba7d0\": \"1337000000000000000000\",\n\t\"ff128f4b355be1dc4a6f94fa510d7f15d53c2aff\": \"2720000000000000000000\",\n\t\"92793ac5b37268774a7130de2bbd330405661773\": \"40110000000000000000\",\n\t\"db19a3982230368f0177219cb10cb259cdb2257c\": \"2000000000000000000000\",\n\t\"8d1794da509cb297053661a14aa892333231e3c1\": \"199600000000000000000\",\n\t\"9b7c8810cc7cc89e804e6d3e38121850472877fe\": \"2000000000000000000000\",\n\t\"ed3cbc3782cebd67989b305c4133b2cde32211eb\": \"400000000000000000000\",\n\t\"8532490897bbb4ce8b7f6b837e4cba848fbe9976\": \"100000000000000000000\",\n\t\"c384ac6ee27c39e2f278c220bdfa5baed626d9d3\": \"600000000000000000000\",\n\t\"b1459285863ea2db3759e546ceb3fb3761f5909c\": \"1122309000000000000000\",\n\t\"634efc24371107b4cbf03f79a93dfd93e431d5fd\": \"1221341000000000000000\",\n\t\"ef9f59aeda418c1494682d941aab4924b5f4929a\": \"100000000000000000000000\",\n\t\"e7311c9533f0092c7248c9739b5b2c864a34b1ce\": \"2803436000000000000000\",\n\t\"e6e621eaab01f20ef0836b7cad47464cb5fd3c96\": \"316014000000000000000\",\n\t\"cd102cd6db3df14ad6af0f87c72479861bfc3d24\": \"2000000000000000000000\",\n\t\"005a9c03f69d17d66cbb8ad721008a9ebbb836fb\": \"2000000000000000000000\",\n\t\"a072cebe62a9e9f61cc3fbf88a9efbfe3e9a8d70\": \"400000000000000000000\",\n\t\"f2ab1161750244d0ecd048ee0d3e51abb143a2fd\": \"1235800000000000000000\",\n\t\"f686785b89720b61145fea80978d6acc8e0bc196\": \"4000000000000000000000\",\n\t\"0a2b4fc5d81ace67dc4bba03f7b455413d46fe3d\": \"197000000000000000000\",\n\t\"c32ec7e42ad16ce3e2555ad4c54306eda0b26758\": \"2000000000000000000000\",\n\t\"f3fa723552a5d0512e2b62f48dca7b2b8105305b\": \"137000000000000000000\",\n\t\"6dc3f92baa1d21dab7382b893261a0356fa7c187\": \"1730000000000000000000\",\n\t\"4627c606842671abde8295ee5dd94c7f549534f4\": \"286600000000000000000\",\n\t\"e39e46e15d22ce56e0c32f1877b7d1a264cf94f3\": \"20000000000000000000000\",\n\t\"d7d157e4c0a96437a6d285741dd23ec4361fa36b\": \"2000000000000000000000\",\n\t\"68f8f45155e98c5029a4ebc5b527a92e9fa83120\": \"4436101000000000000000\",\n\t\"9aba2b5e27ff78baaab5cdc988b7be855cebbdce\": \"9999000000000000000000\",\n\t\"66b39837cb3cac8a802afe3f12a258bbca62dacd\": \"400000000000000000000\",\n\t\"d39b7cbc94003fc948f0cde27b100db8ccd6e063\": \"400000000000000000000\",\n\t\"3db9ed7f024c7e26372feacf2b050803445e3810\": \"1285600000000000000000\",\n\t\"3fbc1e4518d73400c6d046359439fb68ea1a49f4\": \"16400000000000000000000\",\n\t\"e3da4f3240844c9b6323b4996921207122454399\": \"11539639000000000000000\",\n\t\"09afa73bc047ef46b977fd9763f87286a6be68c6\": \"501500000000000000000\",\n\t\"1dbe8e1c2b8a009f85f1ad3ce80d2e05350ee39c\": \"135400000000000000000\",\n\t\"2c5a2d0abda03bbe215781b4ff296c8c61bdbaf6\": \"30617000000000000000\",\n\t\"9a9d1dc0baa77d6e20c3d849c78862dd1c054c87\": \"880000000000000000000\",\n\t\"3ccef88679573947e94997798a1e327e08603a65\": \"807700000000000000000\",\n\t\"850b9db18ff84bf0c7da49ea3781d92090ad7e64\": \"2600000000000000000000\",\n\t\"361c75931696bc3d427d93e76c77fd13b241f6f4\": \"549212000000000000000\",\n\t\"c8f2b320e6dfd70906c597bad2f9501312c78259\": \"1504800000000000000000\",\n\t\"8dc1d5111d09af25fdfcac455c7cec283e6d6775\": \"2000000000000000000000\",\n\t\"cd7ece086b4b619b3b369352ee38b71ddb06439a\": \"200000000000000000000\",\n\t\"f607c2150d3e1b99f24fa1c7d540add35c4ebe1e\": \"3098020000000000000000\",\n\t\"32485c818728c197fea487fbb6e829159eba8370\": \"1053893000000000000000\",\n\t\"8e670815fb67aeaea57b86534edc00cdf564fee5\": \"3300000000000000000000\",\n\t\"10df681506e34930ac7a5c67a54c3e89ce92b981\": \"2153800000000000000000\",\n\t\"1cf2eb7a8ccac2adeaef0ee87347d535d3b94058\": \"2000000000000000000000\",\n\t\"f0dc43f205619127507b2b1c1cfdf32d28310920\": \"301973000000000000000\",\n\t\"f2c2904e9fa664a11ee25656d8fd2cc0d9a522a0\": \"13370000000000000000\",\n\t\"70670fbb05d33014444b8d1e8e7700258b8caa6d\": \"2000000000000000000000\",\n\t\"5160ed612e1b48e73f3fc15bc4321b8f23b8a24b\": \"562800000000000000000\",\n\t\"54a62bf9233e146ffec3876e45f20ee8414adeba\": \"10000000000000000000000\",\n\t\"26d4ec17d5ceb2c894bdc59d0a6a695dad2b43cc\": \"2935300000000000000000\",\n\t\"205fc843e19a4913d1881eb69b69c0fa3be5c50b\": \"9700000000000000000000\",\n\t\"e001aba77c02e172086c1950fffbcaa30b83488f\": \"1970000000000000000000\",\n\t\"21efbca09b3580b98e73f5b2f7f4dc0bf02c529c\": \"2000000000000000000000\",\n\t\"c4d916574e68c49f7ef9d3d82d1638b2b7ee0985\": \"1580000000000000000000\",\n\t\"cab0d32cf3767fa6b3537c84328baa9f50458136\": \"8960000000000000000000\",\n\t\"7ce4686446f1949ebed67215eb0d5a1dd72c11b8\": \"2217776000000000000000\",\n\t\"7837fcb876da00d1eb3b88feb3df3fa4042fac82\": \"1760000000000000000000\",\n\t\"71e38ff545f30fe14ca863d4f5297fd48c73a5ce\": \"3580000000000000000000\",\n\t\"e528a0e5a267d667e9393a6584e19b34dc9be973\": \"5600000000000000000000\",\n\t\"c5374928cdf193705443b14cc20da423473cd9cf\": \"138139000000000000000\",\n\t\"e406f5dd72cab66d8a6ecbd6bfb494a7b6b09afe\": \"100000000000000000000\",\n\t\"d7ef340e66b0d7afcce20a19cb7bfc81da33d94e\": \"3000000000000000000000\",\n\t\"e012db453827a58e16c1365608d36ed658720507\": \"2000000000000000000000\",\n\t\"d59638d3c5faa7711bf085745f9d5bdc23d498d8\": \"2000000000000000000000\",\n\t\"008fc7cbadffbd0d7fe44f8dfd60a79d721a1c9c\": \"1000000000000000000000\",\n\t\"8a3470282d5e2a2aefd7a75094c822c4f5aeef8a\": \"242743000000000000000\",\n\t\"38b3965c21fa893931079beacfffaf153678b6eb\": \"170374000000000000000\",\n\t\"57dd9471cbfa262709f5f486bcb774c5f527b8f8\": \"197000000000000000000\",\n\t\"5a60c924162873fc7ea4da7f972e350167376031\": \"83583000000000000000\",\n\t\"b9013c51bd078a098fae05bf2ace0849c6be17a5\": \"80000000000000000000\",\n\t\"dc23b260fcc26e7d10f4bd044af794579460d9da\": \"500038000000000000000\",\n\t\"45db03bccfd6a5f4d0266b82a22a368792c77d83\": \"8000000000000000000000\",\n\t\"3e0cbe6a6dcb61f110c45ba2aa361d7fcad3da73\": \"8022000000000000000000\",\n\t\"42d3a5a901f2f6bd9356f112a70180e5a1550b60\": \"925000000000000000000\",\n\t\"47219229e8cd56659a65c2a943e2dd9a8f4bfd89\": \"1520000000000000000000\",\n\t\"a20d071b1b003063497d7990e1249dabf36c35f7\": \"1000000000000000000000\",\n\t\"6835c8e8b74a2ca2ae3f4a8d0f6b954a3e2a8392\": \"60140000000000000000\",\n\t\"0c2d5c920538e953caaf24f0737f554cc6927742\": \"1000000000000000000000\",\n\t\"eedf6c4280e6eb05b934ace428e11d4231b5905b\": \"200000000000000000000\",\n\t\"ffa696ecbd787e66abae4fe87b635f07ca57d848\": \"1337000000000000000000\",\n\t\"3e81772175237eb4cbe0fe2dcafdadffeb6a1999\": \"8800000000000000000000\",\n\t\"b44783c8e57b480793cbd69a45d90c7b4f0c48ac\": \"20000000000000000000\",\n\t\"f84f090adf3f8db7e194b350fbb77500699f66fd\": \"1970000000000000000000\",\n\t\"2e9824b5c132111bca24ddfba7e575a5cd7296c1\": \"17201900000000000000000\",\n\t\"5cce72d068c7c3f55b1d2819545e77317cae8240\": \"1940000000000000000000\",\n\t\"d815e1d9f4e2b5e57e34826b7cfd8881b8546890\": \"17300000000000000000\",\n\t\"f901c00fc1db88b69c4bc3252b5ca70ea6ee5cf6\": \"400000000000000000000\",\n\t\"a960b1cadd3b5c1a8e6cb3abcaf52ee7c3d9fa88\": \"1522704000000000000000\",\n\t\"f7e45a12aa711c709acefe95f33b78612d2ad22a\": \"66230000000000000000000\",\n\t\"c332df50b13c013490a5d7c75dbfa366da87b6d6\": \"4000000000000000000000\",\n\t\"d467cf064c0871989b90d8b2eb14ccc63b360823\": \"200000000000000000000\",\n\t\"b9144b677c2dc614ceefdf50985f1183208ea64c\": \"2000000000000000000000\",\n\t\"ea7c4d6dc729cd6b157c03ad237ca19a209346c3\": \"2000000000000000000000\",\n\t\"9c9de44724a4054da0eaa605abcc802668778bea\": \"200020000000000000000\",\n\t\"d7140c8e5a4307fab0cc27badd9295018bf87970\": \"109600000000000000000\",\n\t\"c33acdb3ba1aab27507b86b15d67faf91ecf6293\": \"2000000000000000000000\",\n\t\"db2a0c9ab64df58ddfb1dbacf8ba0d89c85b31b4\": \"4000000000000000000000\",\n\t\"bfcb9730246304700da90b4153e71141622e1c41\": \"1000000000000000000000\",\n\t\"07dc8c8b927adbedfa8f5d639b4352351f2f36d2\": \"314382000000000000000\",\n\t\"2d5391e938b34858cf965b840531d5efda410b09\": \"1400000000000000000000\",\n\t\"0b5e2011ebc25a007f21362960498afb8af280fb\": \"2000000000000000000000\",\n\t\"ed9fb1f5af2fbf7ffc5029cee42b70ff5c275bf5\": \"280000000000000000000\",\n\t\"a3232d068d50064903c9ebc563b515acc8b7b097\": \"2002000000000000000000\",\n\t\"66274fea82cd30b6c29b23350e4f4f3d310a5899\": \"2070000000000000000000\",\n\t\"dbfb1bb464b8a58e500d2ed8de972c45f5f1c0fb\": \"1600000000000000000000\",\n\t\"a1f8d8bcf90e777f19b3a649759ad95027abdfc3\": \"200000000000000000000\",\n\t\"5bd23547477f6d09d7b2a005c5ee650c510c56d7\": \"10000000000000000000000\",\n\t\"ec3b8b58a12703e581ce5ffd7e21c57d1e5c663f\": \"1700000000000000000000\",\n\t\"54310b3aa88703a725dfa57de6e646935164802c\": \"1910000000000000000000\",\n\t\"8f41b1fbf54298f5d0bc2d122f4eb95da4e5cd3d\": \"354200000000000000000\",\n\t\"c80b36d1beafba5fcc644d60ac6e46ed2927e7dc\": \"13370000000000000000\",\n\t\"1ea492bce1ad107e337f4bd4a7ac9a7babcccdab\": \"100000000000000000000\",\n\t\"aaf023fef290a49bb78bb7abc95d669c50d528b0\": \"200000000000000000000\",\n\t\"80b79f338390d1ba1b3737a29a0257e5d91e0731\": \"20000000000000000000\",\n\t\"f382e4c20410b951089e19ba96a2fee3d91cce7e\": \"5054000000000000000000\",\n\t\"0748713145ef83c3f0ef4d31d823786f7e9cc689\": \"4500000000000000000000\",\n\t\"21e219c89ca8ac14ae4cba6130eeb77d9e6d3962\": \"789580000000000000000\",\n\t\"ca9a042a6a806ffc92179500d24429e8ab528117\": \"1100000000000000000000\",\n\t\"bcc9593b2da6df6a34d71b1aa38dacf876f95b88\": \"20000000000000000000\",\n\t\"d1438267231704fc7280d563adf4763844a80722\": \"200000000000000000000\",\n\t\"4989e1ab5e7cd00746b3938ef0f0d064a2025ba5\": \"2000000000000000000000\",\n\t\"bd4b60faec740a21e3071391f96aa534f7c1f44e\": \"182000000000000000000\",\n\t\"8c7cb4e48b25031aa1c4f92925d631a8c3edc761\": \"1000000000000000000000\",\n\t\"322788b5e29bf4f5f55ae1ddb32085fda91b8ebe\": \"200000000000000000000\",\n\t\"f15e182c4fbbad79bd93342242d4dccf2be58925\": \"1940000000000000000000\",\n\t\"1548b770a5118ede87dba2f690337f616de683ab\": \"527558000000000000000\",\n\t\"69c2d835f13ee90580408e6a3283c8cca6a434a2\": \"656000000000000000000\",\n\t\"a1e4380a3b1f749673e270229993ee55f35663b4\": \"2000000000000000000000\",\n\t\"c7675e5647b9d8daf4d3dff1e552f6b07154ac38\": \"180000000000000000000\",\n\t\"a02c1e34064f0475f7fa831ccb25014c3aa31ca2\": \"60000000000000000000\",\n\t\"517c75430de401c341032686112790f46d4d369e\": \"388000000000000000000\",\n\t\"29681d9912ddd07eaabb88d05d90f766e862417d\": \"1000000000000000000000\",\n\t\"544dda421dc1eb73bb24e3e56a248013b87c0f44\": \"1970000000000000000000\",\n\t\"2ab97e8d59eee648ab6caf8696f89937143864d6\": \"3820000000000000000000\",\n\t\"79c130c762b8765b19d2abc9a083ab8f3aad7940\": \"3940000000000000000000\",\n\t\"f9650d6989f199ab1cc479636ded30f241021f65\": \"850000000000000000000\",\n\t\"d1c96e70f05ae0e6cd6021b2083750a7717cde56\": \"500000000000000000000\",\n\t\"88106c27d20b74b4b98ca62b232bd5c97411171f\": \"197000000000000000000\",\n\t\"37ab66083a4fa23848b886f9e66d79cdc150cc70\": \"88510000000000000000000\",\n\t\"8e6156336be2cdbe32140df08a2ba55fd0a58463\": \"74480000000000000000\",\n\t\"2982d76a15f847dd41f1922af368fe678d0e681e\": \"100000000000000000000\",\n\t\"209e8e29d33beae8fb6baa783d133e1d9ec1bc0b\": \"835000000000000000000\",\n\t\"b325674c01e3f7290d5226339fbeac67d221279f\": \"2800000000000000000000\",\n\t\"f20c9a99b74759d782f25c1ceca802a27e0b436c\": \"1670000000000000000000\",\n\t\"61bf84d5ab026f58c873f86ff0dfca82b55733ae\": \"2000000000000000000000\",\n\t\"0734a0a81c9562f4d9e9e10a8503da15db46d76e\": \"18200000000000000000\",\n\t\"0521bc3a9f8711fecb10f50797d71083e341eb9d\": \"20000000000000000000\",\n\t\"3301d9ca2f3bfe026279cd6819f79a293d98156e\": \"50000000000000000000000\",\n\t\"549d51af29f724c967f59423b85b2681e7b15136\": \"3760000000000000000000\",\n\t\"2053ac97548a0c4e8b80bc72590cd6a098fe7516\": \"187000000000000000000\",\n\t\"aa321fdbd449180db8ddd34f0fe906ec18ee0914\": \"685000000000000000000\",\n\t\"697f55536bf85ada51841f0287623a9f0ed09a17\": \"10000000000000000000000\",\n\t\"df57353aaff2aadb0a04f9014e8da7884e86589c\": \"152800000000000000000\",\n\t\"6807ddc88db489b033e6b2f9a81553571ab3c805\": \"29944000000000000000\",\n\t\"90057af9aa66307ec9f033b29724d3b2f41eb6f9\": \"121930000000000000000000\",\n\t\"3ff836b6f57b901b440c30e4dbd065cf37d3d48c\": \"200000000000000000000\",\n\t\"91051764af6b808e4212c77e30a5572eaa317070\": \"1000000000000000000000\",\n\t\"7faa30c31519b584e97250ed2a3cf3385ed5fd50\": \"2000000000000000000000\",\n\t\"fb842ca2c5ef133917a236a0d4ac40690110b038\": \"306000000000000000000\",\n\t\"aa167026d39ab7a85635944ed9edb2bfeba11850\": \"8298000000000000000000\",\n\t\"57beea716cbd81700a73d67f9ff039529c2d9025\": \"200000000000000000000\",\n\t\"654b7e808799a83d7287c67706f2abf49a496404\": \"1970000000000000000000\",\n\t\"dde8f0c31b7415511dced1cd7d46323e4bd12232\": \"1610000000000000000000\",\n\t\"8667fa1155fed732cfb8dca5a0d765ce0d0705ed\": \"81770000000000000000\",\n\t\"905526568ac123afc0e84aa715124febe83dc87c\": \"17900000000000000000\",\n\t\"8e98766524b0cf2747c50dd43b9567594d9731de\": \"1997200000000000000000\",\n\t\"c6df2075ebd240d44869c2be6bdf82e63d4ef1f5\": \"20000000000000000000\",\n\t\"2ff5cab12c0d957fd333f382eeb75107a64cb8e8\": \"10000000000000000000000\",\n\t\"3055efd26029e0d11b930df4f53b162c8c3fd2ce\": \"499938000000000000000\",\n\t\"b2c53efa33fe4a3a1a80205c73ec3b1dbcad0602\": \"1918595000000000000000\",\n\t\"766b3759e8794e926dac473d913a8fb61ad0c2c9\": \"86500000000000000000\",\n\t\"882aa798bf41df179f85520130f15ccdf59b5e58\": \"2000000000000000000000\",\n\t\"80b23d380b825c46e0393899a85556462da0e18c\": \"2000000000000000000000\",\n\t\"51f4663ab44ff79345f427a0f6f8a6c8a53ff234\": \"20000000000000000000000\",\n\t\"8d5ef172bf77315ea64e85d0061986c794c6f519\": \"3940000000000000000000\",\n\t\"75ac547017134c04ae1e11d60e63ec04d18db4ef\": \"6000000000000000000000\",\n\t\"ce1b0cb46aaecfd79b880cad0f2dda8a8dedd0b1\": \"20000000000000000000\",\n\t\"21408b4d7a2c0e6eca4143f2cacdbbccba121bd8\": \"20000000000000000000000\",\n\t\"9c526a140683edf1431cfaa128a935e2b614d88b\": \"111000000000000000000\",\n\t\"599728a78618d1a17b9e34e0fed8e857d5c40622\": \"14000000000000000000000\",\n\t\"6ac4d4be2db0d99da3faaaf7525af282051d6a90\": \"80185000000000000000\",\n\t\"785c8ea774d73044a734fa790a1b1e743e77ed7c\": \"238750000000000000000\",\n\t\"ff2726294148b86c78a9372497e459898ed3fee3\": \"1970000000000000000000\",\n\t\"68a86c402388fddc59028fec7021e98cbf830eac\": \"19100000000000000000\",\n\t\"6121af398a5b2da69f65c6381aec88ce9cc6441f\": \"640000000000000000000\",\n\t\"5a6686b0f17e07edfc59b759c77d5bef164d3879\": \"1490000000000000000000\",\n\t\"a2d38de1c73906f6a7ca6efeb97cf6f69cc421be\": \"1000000000000000000000\",\n\t\"ae3f98a443efe00f3e711d525d9894dc9a61157b\": \"295500000000000000000\",\n\t\"5f1c8a04c90d735b8a152909aeae636fb0ce1665\": \"6999974000000000000000\",\n\t\"d687cec0059087fdc713d4d2d65e77daefedc15f\": \"60000000000000000000\",\n\t\"845203750f7148a9aa262921e86d43bf641974fd\": \"100000000000000000000\",\n\t\"64464a6805b462412a901d2db8174b06c22deea6\": \"475600000000000000000\",\n\t\"053471cd9a41925b3904a5a8ffca3659e034be23\": \"199600000000000000000\",\n\t\"911ff233e1a211c0172c92b46cf997030582c83a\": \"1970000000000000000000\",\n\t\"d930b27a78876485d0f48b70dd5336549679ca8f\": \"40000000000000000000\",\n\t\"6ba9b21b35106be159d1c1c2657ac56cd29ffd44\": \"4480000000000000000000\",\n\t\"ebac2b4408ef5431a13b8508e86250982114e145\": \"4000000000000000000000\",\n\t\"931df34d1225bcd4224e63680d5c4c09bce735a6\": \"68000000000000000000\",\n\t\"23eb6fd85671a9063ab7678ebe265a20f61a02b3\": \"2000000000000000000000\",\n\t\"b32af3d3e8d075344926546f2e32887bf93b16bd\": \"200000000000000000000\",\n\t\"8261fa230c901d43ff579f4780d399f31e6076bc\": \"2000000000000000000000\",\n\t\"84a74ceecff65cb93b2f949d773ef1ad7fb4a245\": \"92998000000000000000\",\n\t\"da982e9643ffece723075a40fe776e5ace04b29b\": \"160884000000000000000\",\n\t\"ba70e8b4759c0c3c82cc00ac4e9a94dd5bafb2b8\": \"890342000000000000000\",\n\t\"82f2e991fd324c5f5d17768e9f61335db6319d6c\": \"500000000000000000000\",\n\t\"3e84b35c5b2265507061d30b6f12da033fe6f8b9\": \"1790000000000000000000\",\n\t\"2895e80999d406ad592e2b262737d35f7db4b699\": \"1940000000000000000000\",\n\t\"65f534346d2ffb787fa9cf185d745ba42986bd6e\": \"500000000000000000000\",\n\t\"c7368b9709a5c1b51c0adf187a65df14e12b7dba\": \"9489681000000000000000\",\n\t\"ba176dbe3249e345cd4fa967c0ed13b24c47e586\": \"399990000000000000000\",\n\t\"cff6a6fe3e9a922a12f21faa038156918c4fcb9c\": \"78800000000000000000\",\n\t\"bcbd31252ec288f91e298cd812c92160e738331a\": \"1975802000000000000000\",\n\t\"5543dd6d169eec8a213bbf7a8af9ffd15d4ff759\": \"18200000000000000000\",\n\t\"b65bd780c7434115162027565223f44e5498ff8c\": \"19999800000000000000000\",\n\t\"4cadf573ce4ceec78b8e1b21b0ed78eb113b2c0e\": \"2000000000000000000000\",\n\t\"04aafc8ae5ce6f4903c89d7fac9cb19512224777\": \"500000000000000000000\",\n\t\"fdc4d4765a942f5bf96931a9e8cc7ab8b757ff4c\": \"87000000000000000000000\",\n\t\"38c7851f5ffd4cee98df30f3b25597af8a6ca263\": \"2631920000000000000000\",\n\t\"0e320219838e859b2f9f18b72e3d4073ca50b37d\": \"2000000000000000000000\",\n\t\"bbbf39b1b67995a42241504f9703d2a14a515696\": \"1580000000000000000000\",\n\t\"5b800bfd1b3ed4a57d875aed26d42f1a7708d72a\": \"6392000000000000000000\",\n\t\"5b85e60e2af0544f2f01c64e2032900ebd38a3c7\": \"2000000000000000000000\",\n\t\"c9ac01c3fb0929033f0ccc7e1acfeaaba7945d47\": \"12459235000000000000000\",\n\t\"f355d3ec0cfb907d8dbb1bf3464e458128190bac\": \"4925600000000000000000\",\n\t\"69c08d744754de709ce96e15ae0d1d395b3a2263\": \"1000000000000000000000\",\n\t\"cef77451dfa2c643e00b156d6c6ff84e2373eb66\": \"188000000000000000000\",\n\t\"f3034367f87d24d3077fa9a2e38a8b0ccb1104ef\": \"1000000000000000000000\",\n\t\"73473e72115110d0c3f11708f86e77be2bb0983c\": \"20000000000000000000\",\n\t\"761e6caec189c230a162ec006530193e67cf9d19\": \"2000000000000000000000\",\n\t\"e9caf827be9d607915b365c83f0d3b7ea8c79b50\": \"3000000000000000000000\",\n\t\"eda4b2fa59d684b27a810df8978a73df308a63c2\": \"4000000000000000000000\",\n\t\"065ff575fd9c16d3cb6fd68ffc8f483fc32ec835\": \"200000000000000000000\",\n\t\"a72ee666c4b35e82a506808b443cebd5c632c7dd\": \"800000000000000000000\",\n\t\"5b30608c678e1ac464a8994c3b33e5cdf3497112\": \"400000000000000000000\",\n\t\"b0c7ce4c0dc3c2bbb99cc1857b8a455f611711ce\": \"4000000000000000000000\",\n\t\"d7274d50804d9c77da93fa480156efe57ba501de\": \"1940000000000000000000\",\n\t\"a609c26dd350c235e44b2b9c1dddccd0a9d9f837\": \"1000000000000000000000\",\n\t\"bddfa34d0ebf1b04af53b99b82494a9e3d8aa100\": \"12000000000000000000000\",\n\t\"fd40242bb34a70855ef0fd90f3802dec2136b327\": \"1930600000000000000000\",\n\t\"58aed6674affd9f64233272a578dd9386b99c263\": \"3400000000000000000000\",\n\t\"24434a3e32e54ecf272fe3470b5f6f512f675520\": \"5910000000000000000000\",\n\t\"a379a5070c503d2fac89b8b3afa080fd45ed4bec\": \"19700000000000000000000\",\n\t\"37e169a93808d8035698f815c7235613c1e659f2\": \"1000000000000000000000\",\n\t\"849b116f596301c5d8bb62e0e97a8248126e39f3\": \"300000000000000000000\",\n\t\"fe7011b698bf3371132d7445b19eb5b094356aee\": \"2000000000000000000000\",\n\t\"f16de1891d8196461395f9b136265b3b9546f6ef\": \"31313000000000000000\",\n\t\"6c6564e5c9c24eaaa744c9c7c968c9e2c9f1fbae\": \"1357800000000000000000\",\n\t\"8bb0212f3295e029cab1d961b04133a1809e7b91\": \"2000000000000000000000\",\n\t\"408a69a40715e1b313e1354e600800a1e6dc02a5\": \"35144000000000000000\",\n\t\"ddf0cce1fe996d917635f00712f4052091dff9ea\": \"2000000000000000000000\",\n\t\"50fef296955588caae74c62ec32a23a454e09ab8\": \"1201200000000000000000\",\n\t\"d913f0771949753c4726acaa2bd3619c5c20ff77\": \"3000000000000000000000\",\n\t\"9d6ecfa03af2c6e144b7c4692a86951e902e9e1f\": \"3000310000000000000000\",\n\t\"ecbe5e1c9ad2b1dccf0a305fc9522f4669dd3ae7\": \"5000000000000000000000\",\n\t\"33e9b71823952e1f66958c278fc28b1196a6c5a4\": \"100000000000000000000\",\n\t\"9de20bc37e7f48a80ffd7ad84ffbf1a1abe1738c\": \"200000000000000000000\",\n\t\"16f313cf8ad000914a0a176dc6a4342b79ec2538\": \"2000000000000000000000\",\n\t\"991ac7ca7097115f26205eee0ef7d41eb4e311ae\": \"20000000000000000000\",\n\t\"ddfafdbc7c90f1320e54b98f374617fbd01d109f\": \"13370000000000000000\",\n\t\"26b11d066588ce74a572a85a6328739212aa8b40\": \"2000000000000000000000\",\n\t\"ef2c34bb487d3762c3cca782ccdd7a8fbb0a9931\": \"180000000000000000000\",\n\t\"a9be88ad1e518b0bbb024ab1d8f0e73f790e0c76\": \"2800000000000000000000\",\n\t\"4a7494cce44855cc80582842be958a0d1c0072ee\": \"2400000000000000000000\",\n\t\"23569542c97d566018c907acfcf391d14067e87e\": \"2000000000000000000000\",\n\t\"d252960b0bf6b2848fdead80136db5f507f8be02\": \"2000000000000000000000\",\n\t\"2c0f5b9df43625798e7e03c1a5fd6a6d091af82b\": \"31200000000000000000\",\n\t\"a7c9d388ebd873e66b1713448397d0f37f8bd3a8\": \"5000000000000000000000\",\n\t\"3259bd2fddfbbc6fbad3b6e874f0bbc02cda18b5\": \"11886645000000000000000\",\n\t\"f287ff52f461117adb3e1daa71932d1493c65f2e\": \"3640000000000000000000\",\n\t\"c852428d2b586497acd30c56aa13fb5582f84402\": \"945600000000000000000\",\n\t\"296f00de1dc3bb01d47a8ccd1e5d1dd9a1eb7791\": \"1000000000000000000000\",\n\t\"817493cd9bc623702a24a56f9f82e3fd48f3cd31\": \"2920000000000000000000\",\n\t\"7adfedb06d91f3cc7390450b85550270883c7bb7\": \"322312000000000000000\",\n\t\"8d544c32c07fd0842c761d53a897d6c950bb7599\": \"200000000000000000000\",\n\t\"86297d730fe0f7a9ee24e08fb1087b31adb306a7\": \"2000000000000000000000\",\n\t\"f64fe0939a8d1eea2a0ecd9a9730fd7958e33109\": \"20600000000000000000\",\n\t\"b06eab09a610c6a53d56a946b2c43487ac1d5b2d\": \"1000000000000000000000\",\n\t\"bae9b82f7299631408659dd74e891cb8f3860fe5\": \"1970000000000000000000\",\n\t\"0eda80f4ed074aea697aeddf283b63dbca3dc4da\": \"2000000000000000000000\",\n\t\"ea686c5057093c171c66db99e01b0ececb308683\": \"384907000000000000000\",\n\t\"425725c0f08f0811f5f006eec91c5c5c126b12ae\": \"150000000000000000000\",\n\t\"b18e67a5050a1dc9fb190919a33da838ef445014\": \"20000000000000000000\",\n\t\"8dd484ff8a307364eb66c525a571aac701c5c318\": \"4000000000000000000000\",\n\t\"6671b182c9f741a0cd3c356c73c23126d4f9e6f4\": \"200000000000000000000\",\n\t\"ba0249e01d945bef93ee5ec61925e03c5ca509fd\": \"4000000000000000000000\",\n\t\"b2968f7d35f208871631c6687b3f3daeabc6616c\": \"156060000000000000000\",\n\t\"a6f62b8a3d7f11220701ab9ffffcb327959a2785\": \"506000000000000000000\",\n\t\"c885a18aabf4541b7b7b7ecd30f6fae6869d9569\": \"2000000000000000000000\",\n\t\"33fb577a4d214fe010d32cca7c3eeda63f87ceef\": \"1000000000000000000000\",\n\t\"be86d0b0438419ceb1a038319237ba5206d72e46\": \"999942000000000000000\",\n\t\"466292f0e80d43a78774277590a9eb45961214f4\": \"970000000000000000000\",\n\t\"b33c0323fbf9c26c1d8ac44ef74391d0804696da\": \"20000000000000000000\",\n\t\"f7bc4c44910d5aedd66ed2355538a6b193c361ec\": \"96980000000000000000\",\n\t\"d0f04f52109aebec9a7b1e9332761e9fe2b97bb5\": \"4000000000000000000000\",\n\t\"cb4a914d2bb029f32e5fef5c234c4fec2d2dd577\": \"1800000000000000000000\",\n\t\"2e619f57abc1e987aa936ae3a2264962e7eb2d9a\": \"756000000000000000000\",\n\t\"166bf6dab22d841b486c38e7ba6ab33a1487ed8c\": \"20000000000000000000000\",\n\t\"c3a046e3d2b2bf681488826e32d9c061518cfe8c\": \"2600000000000000000000\",\n\t\"d082275f745a2cac0276fbdb02d4b2a3ab1711fe\": \"30000000000000000000\",\n\t\"a701df79f594901afe1444485e6b20c3bda2b9b3\": \"1000000000000000000000\",\n\t\"dec3eec2640a752c466e2b7e7ee685afe9ac41f4\": \"1324245000000000000000\",\n\t\"8134dd1c9df0d6c8a5812426bb55c761ca831f08\": \"122360000000000000000\",\n\t\"bfc57aa666fae28e9f107a49cb5089a4e22151dd\": \"1000000000000000000000\",\n\t\"c3c2297329a6fd99117e54fc6af379b4d556547e\": \"6000000000000000000000\",\n\t\"40585200683a403901372912a89834aadcb55fdb\": \"2000000000000000000000\",\n\t\"cd49bf185e70d04507999f92a4de4455312827d0\": \"1000000000000000000000\",\n\t\"9c6bc9a46b03ae5404f043dfcf21883e4110cc33\": \"200000000000000000000\",\n\t\"1f49b86d0d3945590698a6aaf1673c37755ca80d\": \"700000000000000000000\",\n\t\"efeb1997aad277cc33430e6111ed0943594048b8\": \"2000000000000000000000\",\n\t\"7c0883054c2d02bc7a852b1f86c42777d0d5c856\": \"500000000000000000000\",\n\t\"ff49a775814ec00051a795a875de24592ea400d4\": \"200000000000000000000000\",\n\t\"f039683d7b3d225bc7d8dfadef63163441be41e2\": \"34380000000000000000\",\n\t\"a3ba0d3a3617b1e31b4e422ce269e873828d5d69\": \"850000000000000000000\",\n\t\"d116f3dcd5db744bd008887687aa0ec9fd7292aa\": \"1000000000000000000000\",\n\t\"5719f49b720da68856f4b9e708f25645bdbc4b41\": \"640000000000000000000\",\n\t\"870796abc0db84af82da52a0ed68734de7e636f5\": \"300000000000000000000\",\n\t\"68b6854788a7c6496cdbf5f84b9ec5ef392b78bb\": \"19700000000000000000000\",\n\t\"8c2fbeee8eacc5c5d77c16abd462ee9c8145f34b\": \"1940000000000000000000\",\n\t\"421684baa9c0b4b5f55338e6f6e7c8e146d41cb7\": \"1500000000000000000000\",\n\t\"dd26b429fd43d84ec179825324bad5bfb916b360\": \"5142000000000000000000\",\n\t\"3821862493242c0aeb84b90de05d250c1e50c074\": \"322200000000000000000\",\n\t\"68a7425fe09eb28cf86eb1793e41b211e57bd68d\": \"668500000000000000000\",\n\t\"da875e4e2f3cabe4f37e0eaed7d1f6dcc6ffef43\": \"2000000000000000000000\",\n\t\"c2663f8145dbfec6c646fc5c49961345de1c9f11\": \"690000000000000000000\",\n\t\"e89c22f1a4e1d4746ecfaa59ed386fee12d51e37\": \"44932000000000000000\",\n\t\"eff86b5123bcdc17ed4ce8e05b7e12e51393a1f7\": \"500000000000000000000\",\n\t\"6c3d18704126aa99ee3342ce60f5d4c85f1867cd\": \"50000000000000000000\",\n\t\"b8d531a964bcea13829620c0ced72422dadb4cca\": \"169990000000000000000\",\n\t\"7c29d47d57a733f56b9b217063b513dc3b315923\": \"4000000000000000000000\",\n\t\"bc1e80c181616342ebb3fb3992072f1b28b802c6\": \"4000000000000000000000\",\n\t\"31313ffd635bf2f3324841a88c07ed146144ceeb\": \"1970000000000000000000\",\n\t\"cc4feb72df98ff35a138e01761d1203f9b7edf0a\": \"7000000000000000000000\",\n\t\"741693c30376508513082020cc2b63e9fa92131b\": \"1200000000000000000000\",\n\t\"aa3135cb54f102cbefe09e96103a1a796718ff54\": \"57800000000000000000\",\n\t\"ef61155ba009dcdebef10b28d9da3d1bc6c9ced4\": \"59100000000000000000\",\n\t\"b3c94811e7175b148b281c1a845bfc9bb6fbc115\": \"200000000000000000000\",\n\t\"96d9cca8f55eea0040ec6eb348a1774b95d93ef4\": \"4000000000000000000000\",\n\t\"ce62125adec3370ac52110953a4e760be9451e3b\": \"152000000000000000000\",\n\t\"aca1e6bc64cc3180f620e94dc5b1bcfd8158e45d\": \"2000000000000000000000\",\n\t\"bc237148d30c13836ffa2cad520ee4d2e5c4eeff\": \"1970000000000000000000\",\n\t\"0e024e7f029c6aaf3a8b910f5e080873b85795aa\": \"1000000000000000000000\",\n\t\"7283cd4675da58c496556151dafd80c7f995d318\": \"760000000000000000000\",\n\t\"39b299327490d72f9a9edff11b83afd0e9d3c450\": \"200000000000000000000\",\n\t\"5f333a3b2310765a0d1832b9be4c0a03704c1c09\": \"1000000000000000000000\",\n\t\"5aaf1c31254a6e005fba7f5ab0ec79d7fc2b630e\": \"5910000000000000000000\",\n\t\"833db42c14163c7be4cab86ac593e06266d699d5\": \"174212000000000000000000\",\n\t\"f32d25eb0ea2b8b3028a4c7a155dc1aae865784d\": \"5710684000000000000000\",\n\t\"1fa2319fed8c2d462adf2e17feec6a6f30516e95\": \"125300000000000000000\",\n\t\"c49cfaa967f3afbf55031061fc4cef88f85da584\": \"2000000000000000000000\",\n\t\"43db7ff95a086d28ebbfb82fb8fb5f230a5ebccd\": \"16100000000000000000\",\n\t\"cf3f9128b07203a3e10d7d5755c0c4abc6e2cac2\": \"5000000000000000000000\",\n\t\"8f4d1e7e4561284a34fef9673c0d34e12af4aa03\": \"2000000000000000000000\",\n\t\"934af21b7ebfa467e2ced65aa34edd3a0ec71332\": \"35420000000000000000000\",\n\t\"5d231a70c1dfeb360abd97f616e2d10d39f3cab5\": \"400000000000000000000\",\n\t\"2d5d7335acb0362b47dfa3a8a4d3f5949544d380\": \"200000000000000000000\",\n\t\"d1e1f2b9c16c309874dee7fac32675aff129c398\": \"72800000000000000000\",\n\t\"a43b6da6cb7aac571dff27f09d39f846f53769b1\": \"380000000000000000000\",\n\t\"779274bf1803a336e4d3b00ddd93f2d4f5f4a62e\": \"1000000000000000000000\",\n\t\"a644ed922cc237a3e5c4979a995477f36e50bc62\": \"583900000000000000000\",\n\t\"ee6c03429969ca1262cb3f0a4a54afa7d348d7f5\": \"256100000000000000000\",\n\t\"4f06246b8d4bd29661f43e93762201d286935ab1\": \"4818730000000000000000\",\n\t\"e04972a83ca4112bc871c72d4ae1616c2f0728db\": \"267606000000000000000\",\n\t\"df098f5e4e3dffa51af237bda8652c4f73ed9ca6\": \"502000000000000000000\",\n\t\"dfded2574b27d1613a7d98b715159b0d00baab28\": \"20000000000000000000000\",\n\t\"17d931d4c56294dcbe77c8655be4695f006d4a3c\": \"2000000000000000000000\",\n\t\"3ccb71aa6880cb0b84012d90e60740ec06acd78f\": \"2000000000000000000000\",\n\t\"e57d2995b0ebdf3f3ca6c015eb04260dbb98b7c6\": \"2000000000000000000000\",\n\t\"fb3860f4121c432ebdc8ec6a0331b1b709792e90\": \"600400000000000000000\",\n\t\"fa00c376e89c05e887817a9dd0748d96f341aa89\": \"300700000000000000000\",\n\t\"c7a018f0968a51d1f6603c5c49dc545bcb0ff293\": \"4000000000000000000000\",\n\t\"7d73863038ccca22f96affda10496e51e1e6cd48\": \"20000000000000000000\",\n\t\"38ea6f5b5a7b88417551b4123dc127dfe9342da6\": \"400000000000000000000\",\n\t\"014b7f67b14f5d983d87014f570c8b993b9872b5\": \"200000000000000000000\",\n\t\"8ac89bd9b8301e6b0677fa25fcf0f58f0cc7b611\": \"20000000000000000000\",\n\t\"7eb4b0185c92b6439a08e7322168cb353c8a774a\": \"10165988000000000000000\",\n\t\"d29dc08efbb3d72e263f78ab7610d0226de76b00\": \"12000000000000000000000\",\n\t\"72a8260826294726a75bf39cd9aa9e07a3ea14cd\": \"2000000000000000000000\",\n\t\"4cb5c6cd713ca447b848ae2f56b761ca14d7ad57\": \"267400000000000000000\",\n\t\"49185dd7c23632f46c759473ebae966008cd3598\": \"254030000000000000000\",\n\t\"13d67a7e25f2b12cdb85585009f8acc49b967301\": \"1999944000000000000000\",\n\t\"9d913b5d339c95d87745562563fea98b23c60cc4\": \"170718000000000000000\",\n\t\"abdc9f1bcf4d19ee96591030e772c334302f7d83\": \"40110000000000000000000\",\n\t\"e9a5ae3c9e05977dd1069e9fd9d3aefbae04b8df\": \"1970000000000000000000\",\n\t\"1fd296be03ad737c92f9c6869e8d80a71c5714aa\": \"13370000000000000000\",\n\t\"2f13657526b177cad547c3908c840eff647b45d9\": \"1170685000000000000000\",\n\t\"e69fcc26ed225f7b2e379834c524d70c1735e5bc\": \"2000000000000000000000\",\n\t\"bade43599e02f84f4c3014571c976b13a36c65ab\": \"4000000000000000000000\",\n\t\"184a4f0beb71ffd558a6b6e8f228b78796c4cf3e\": \"12000000000000000000000\",\n\t\"d1de5aad3a5fd803f1b1aeb6103cb8e14fe723b7\": \"20000000000000000000\",\n\t\"0bd67dbde07a856ebd893b5edc4f3a5be4202616\": \"2000000000000000000000\",\n\t\"6b30f1823910b86d3acb5a6afc9defb6f3a30bf8\": \"4200000000000000000000\",\n\t\"9a63d185a79129fdab19b58bb631ea36a420544e\": \"42000000000000000000\",\n\t\"df660a91dab9f730f6190d50c8390561500756ca\": \"2000000000000000000000\",\n\t\"a1a1f0fa6d20b50a794f02ef52085c9d036aa6ca\": \"1000000000000000000000\",\n\t\"4ec768295eeabafc42958415e22be216cde77618\": \"59600000000000000000\",\n\t\"c348fc5a461323b57be303cb89361b991913df28\": \"100000000000000000000000\",\n\t\"3a7db224acae17de7798797d82cdf8253017dfa8\": \"5000000000000000000000\",\n\t\"8bea40379347a5c891d59a6363315640f5a7e07a\": \"1999992000000000000000\",\n\t\"2257fca16a6e5c2a647c3c29f36ce229ab93b17e\": \"4000000000000000000000\",\n\t\"e492818aa684e5a676561b725d42f3cc56ae5198\": \"800000000000000000000\",\n\t\"c841884fa4785fb773b28e9715fae99a5134305d\": \"2000000000000000000000\",\n\t\"0d9443a79468a5bbf7c13c6e225d1de91aee07df\": \"70000000000000000000\",\n\t\"6d4008b4a888a826f248ee6a0b0dfde9f93210b9\": \"5460000000000000000000\",\n\t\"884980eb4565c1048317a8f47fdbb461965be481\": \"3999922000000000000000\",\n\t\"985d70d207892bed398590024e2421b1cc119359\": \"20000000000000000000000\",\n\t\"d9ec8fe69b7716c0865af888a11b2b12f720ed33\": \"4000000000000000000000\",\n\t\"49b74e169265f01a89ec4c9072c5a4cd72e4e835\": \"16100000000000000000000\",\n\t\"4c3e95cc3957d252ce0bf0c87d5b4f2234672e70\": \"2500000000000000000000\",\n\t\"d9ff115d01266c9f73b063c1c238ef3565e63b36\": \"680000000000000000000\",\n\t\"48c5c6970b9161bb1c7b7adfed9cdede8a1ba864\": \"4000000000000000000000\",\n\t\"ea6afe2cc928ac8391eb1e165fc40040e37421e7\": \"2997569000000000000000\",\n\t\"08ccda50e4b26a0ffc0ef92e9205310706bec2c7\": \"6077440000000000000000\",\n\t\"e6e9a39d750fe994394eb68286e5ea62a6997882\": \"600000000000000000000\",\n\t\"4b58101f44f7e389e12d471d1635b71614fdd605\": \"160000000000000000000\",\n\t\"8d93dac785f88f1a84bf927d53652b45a154ccdd\": \"158000000000000000000\",\n\t\"415d096ab06293183f3c033d25f6cf7178ac3bc7\": \"40000000000000000000\",\n\t\"c3e387b03ce95ccfd7fa51dd840183bc43532809\": \"2000000000000000000000\",\n\t\"da34b2eae30bafe8daeccde819a794cd89e09549\": \"2000000000000000000000\",\n\t\"fa279bfd8767f956bf7fa0bd5660168da75686bd\": \"2674000000000000000000\",\n\t\"b98ca31785ef06be49a1e47e864f60d076ca472e\": \"4000000000000000000000\",\n\t\"b768b5234eba3a9968b34d6ddb481c8419b3655d\": \"14974000000000000000\",\n\t\"31047d703f63b93424fbbd6e2f1f9e74de13e709\": \"2850123000000000000000\",\n\t\"9a24ce8d485cc4c86e49deb39022f92c7430e67e\": \"1300000000000000000000\",\n\t\"e62f9d7c64e8e2635aeb883dd73ba684ee7c1079\": \"8000000000000000000000\",\n\t\"f15d9d5a21b1929e790371a17f16d95f0c69655c\": \"2000000000000000000000\",\n\t\"285ae51b9500c58d541365d97569f14bb2a3709b\": \"2000000000000000000000\",\n\t\"09c177f1ae442411ddacf187d46db956148360e7\": \"8950000000000000000000\",\n\t\"12173074980153aeaa4b0dcbc7132eadcec21b64\": \"240000000000000000000\",\n\t\"351f16e5e0735af56751b0e225b2421171394090\": \"13370000000000000000000\",\n\t\"ac52b77e15664814f39e4f271be641308d91d6cc\": \"220000000000000000000\",\n\t\"99c883258546cc7e4e971f522e389918da5ea63a\": \"4000000000000000000000\",\n\t\"aa16269aac9c0d803068d82fc79151dadd334b66\": \"4000000000000000000000\",\n\t\"7c9a110cb11f2598b2b20e2ca400325e41e9db33\": \"26000000000000000000000\",\n\t\"583e83ba55e67e13e0e76f8392d873cd21fbf798\": \"20000000000000000000\",\n\t\"555ebe84daa42ba256ea789105cec4b693f12f18\": \"100000000000000000000\",\n\t\"978c430ce4359b06bc2cdf5c2985fc950e50d5c8\": \"480000000000000000000\",\n\t\"dc1eb9b6e64351f56424509645f83e79eee76cf4\": \"4000000000000000000000\",\n\t\"5b290c01967c812e4dc4c90b174c1b4015bae71e\": \"149946000000000000000\",\n\t\"e7d213947fcb904ad738480b1eed2f5c329f27e8\": \"18718000000000000000\",\n\t\"c517d0315c878813c717e18cafa1eab2654e01da\": \"10000000000000000000000\",\n\t\"7e972a8a7c2a44c93b21436c38d21b9252c345fe\": \"1790000000000000000000\",\n\t\"9cb28ac1a20a106f7f373692c5ce4c73f13732a1\": \"1000000000000000000000\",\n\t\"14ab164b3b524c82d6abfbc0de831126ae8d1375\": \"2000000000000000000000\",\n\t\"d46f8223452982a1eea019a8816efc2d6fc00768\": \"137000000000000000000\",\n\t\"5cdc4708f14f40dcc15a795f7dc8cb0b7faa9e6e\": \"537000000000000000000\",\n\t\"66fdc9fee351fa1538eb0d87d819fcf09e7c106a\": \"6016500000000000000000\",\n\t\"e7be82c6593c1eeddd2ae0b15001ff201ab57b2f\": \"19100000000000000000\",\n\t\"47d20e6ae4cad3f829eac07e5ac97b66fdd56cf5\": \"1000000000000000000000\",\n\t\"0f2d8daf04b5414a0261f549ff6477b80f2f1d07\": \"200000000000000000000000\",\n\t\"84bfcef0491a0ae0694b37ceac024584f2aa0467\": \"1999944000000000000000\",\n\t\"ec5feafe210c12bfc9a5d05925a123f1e73fbef8\": \"456000000000000000000000\",\n\t\"7023c70956e04a92d70025aad297b539af355869\": \"2000000000000000000000\",\n\t\"d66ddf1159cf22fd8c7a4bc8d5807756d433c43e\": \"2200000000000000000000\",\n\t\"d0638ea57189a6a699024ad78c71d939c1c2ff8c\": \"2632000000000000000000\",\n\t\"70d25ed2c8ada59c088cf70dd22bf2db93acc18a\": \"1056600000000000000000\",\n\t\"a4875928458ec2005dbb578c5cd33580f0cf1452\": \"1000000000000000000000\",\n\t\"b5ad5157dda921e6bafacd9086ae73ae1f611d3f\": \"2000000000000000000000\",\n\t\"c493489e56c3bdd829007dc2f956412906f76bfa\": \"48968000000000000000\",\n\t\"c57612de91110c482e6f505bcd23f3c5047d1d61\": \"3580000000000000000000\",\n\t\"9b18478655a4851cc906e660feac61f7f4c8bffc\": \"4174120000000000000000\",\n\t\"b21b7979bf7c5ca01fa82dd640b41c39e6c6bc75\": \"1999944000000000000000\",\n\t\"a9d4a2bcbe5b9e0869d70f0fe2e1d6aacd45edc5\": \"198800000000000000000\",\n\t\"6f29bb375be5ed34ed999bb830ee2957dde76d16\": \"2000000000000000000000\",\n\t\"a006268446643ec5e81e7acb3f17f1c351ee2ed9\": \"4000000000000000000000\",\n\t\"42ddd014dc52bfbcc555325a40b516f4866a1dd3\": \"2000000000000000000000\",\n\t\"d6d6776958ee23143a81adadeb08382009e996c2\": \"3000000000000000000000\",\n\t\"d34e03d36a2bd4d19a5fa16218d1d61e3ffa0b15\": \"320000000000000000000\",\n\t\"dac0c177f11c5c3e3e78f2efd663d13221488574\": \"1000000000000000000000\",\n\t\"814135da8f9811075783bf1ab67062af8d3e9f40\": \"20000000000000000000\",\n\t\"7c3eb713c4c9e0381cd8154c7c9a7db8645cde17\": \"200000000000000000000\",\n\t\"f49c47b3efd86b6e6a5bc9418d1f9fec814b69ef\": \"20000000000000000000000\",\n\t\"35f1da127b83376f1b88c82a3359f67a5e67dd50\": \"1910000000000000000000\",\n\t\"44dfba50b829becc5f4f14d1b04aab3320a295e5\": \"1000000000000000000000\",\n\t\"0b924df007e9c0878417cfe63b976ea1a382a897\": \"40000000000000000000\",\n\t\"82438fd2b32a9bdd674b49d8cc5fa2eff9781847\": \"20000000000000000000\",\n\t\"794529d09d017271359730027075b87ad83dae6e\": \"310000000000000000000\",\n\t\"f4b49100757772f33c177b9a76ba95226c8f3dd8\": \"6700000000000000000000\",\n\t\"8563c49361b625e768771c96151dbfbd1c906976\": \"2000000000000000000000\",\n\t\"0b9df80fbe232009dacf0aa8cac59376e2476203\": \"2000000000000000000000\",\n\t\"149b6dbde632c19f5af47cb493114bebd9b03c1f\": \"12000000000000000000000\",\n\t\"d7a1431ee453d1e49a0550d1256879b4f5d10201\": \"1670000000000000000000\",\n\t\"1d37616b793f94911838ac8e19ee9449df921ec4\": \"1500000000000000000000\",\n\t\"d6670c036df754be43dadd8f50feea289d061fd6\": \"5988459000000000000000\",\n\t\"02778e390fa17510a3428af2870c4273547d386c\": \"16163700000000000000000\",\n\t\"b89f4632df5909e58b2a9964f74feb9a3b01e0c5\": \"21406707000000000000000\",\n\t\"76c27535bcb59ce1fa2d8c919cabeb4a6bba01d1\": \"2000000000000000000000\",\n\t\"36bf43ff35df90908824336c9b31ce33067e2f50\": \"346837200000000000000000\",\n\t\"b53bcb174c2518348b818aece020364596466ba3\": \"2000000000000000000000\",\n\t\"b4dd460cd016725a64b22ea4f8e06e06674e033e\": \"5370000000000000000000\",\n\t\"cda1741109c0265b3fb2bf8d5ec9c2b8a3346b63\": \"20000000000000000000\",\n\t\"feb8b8e2af716ae41fc7c04bcf29540156461e6b\": \"1555396000000000000000\",\n\t\"a49f523aa51364cbc7d995163d34eb590ded2f08\": \"2659160000000000000000\",\n\t\"a7e74f0bdb278ff0a805a648618ec52b166ff1be\": \"100000000000000000000\",\n\t\"5ead29037a12896478b1296ab714e9cb95428c81\": \"71500000000000000000\",\n\t\"cdecf5675433cdb0c2e55a68db5d8bbe78419dd2\": \"20000000000000000000\",\n\t\"c24ccebc2344cce56417fb684cf81613f0f4b9bd\": \"1550000000000000000000\",\n\t\"5a70106f20d63f875265e48e0d35f00e17d02bc9\": \"20000000000000000000\",\n\t\"2606c3b3b4ca1b091498602cb1978bf3b95221c0\": \"400000000000000000000\",\n\t\"1ad4563ea5786be1159935abb0f1d5879c3e7372\": \"6000000000000000000000\",\n\t\"b782bfd1e2de70f467646f9bc09ea5b1fcf450af\": \"267400000000000000000\",\n\t\"649a2b9879cd8fb736e6703b0c7747849796f10f\": \"7358102000000000000000\",\n\t\"1cc1d3c14f0fb8640e36724dc43229d2ea7a1e48\": \"1700000000000000000000\",\n\t\"824b3c3c443e19295d7ef6faa7f374a4798486a8\": \"20000000000000000000\",\n\t\"a7758cecb60e8f614cce96137ef72b4fbd07774a\": \"500000000000000000000\",\n\t\"981f712775c0dad97518ffedcb47b9ad1d6c2762\": \"6685000000000000000000\",\n\t\"26e801b62c827191dd68d31a011990947fd0ebe0\": \"20000000000000000000\",\n\t\"95447046313b2f3a5e19b948fd3b8bedc82c717c\": \"500000000000000000000\",\n\t\"0b701101a4109f9cb360dc57b77442673d5e5983\": \"2000000000000000000000\",\n\t\"5b25cae86dcafa2a60e7723631fc5fa49c1ad87d\": \"2491200000000000000000\",\n\t\"f73ac46c203be1538111b151ec8220c786d84144\": \"294515000000000000000\",\n\t\"e8c3d3b0e17f97d1e756e684f94e1470f99c95a1\": \"400000000000000000000\",\n\t\"8c900a8236b08c2b65405d39d75f20062a7561fd\": \"1640000000000000000000\",\n\t\"43898c49a34d509bfed4f76041ee91caf3aa6aa5\": \"300000000000000000000\",\n\t\"c85325eab2a59b3ed863c86a5f2906a04229ffa9\": \"465600000000000000000\",\n\t\"4a430170152de5172633dd8262d107a0afd96a0f\": \"3160000000000000000000\",\n\t\"6e0ee70612c976287d499ddfa6c0dcc12c06deea\": \"129980000000000000000\",\n\t\"21c07380484f6cbc8724ad32bc864c3b5ad500b7\": \"1000000000000000000000\",\n\t\"ff5162f2354dc492c75fd6e3a107268660eecb47\": \"1700000000000000000000\",\n\t\"8845e9f90e96336bac3c616be9d88402683e004c\": \"2000000000000000000000\",\n\t\"f23c7b0cb8cd59b82bd890644a57daf40c85e278\": \"50038000000000000000\",\n\t\"1784948bf99848c89e445638504dd698271b5924\": \"6037580000000000000000\",\n\t\"b39f4c00b2630cab7db7295ef43d47d501e17fd7\": \"4000000000000000000000\",\n\t\"3fb7d197b3ba4fe045efc23d50a14585f558d9b2\": \"20000000000000000000\",\n\t\"bd043b67c63e60f841ccca15b129cdfe6590c8e3\": \"200000000000000000000\",\n\t\"86ca0145957e6b0dfe36875fbe7a0dec55e17a28\": \"10000000000000000000000\",\n\t\"dae7201eab8c063302930d693929d07f95e71962\": \"2687370000000000000000\",\n\t\"cc034985d3f28c2d39b1a34bced4d3b2b6ca234e\": \"182000000000000000000\",\n\t\"40e0dbf3efef9084ea1cd7e503f40b3b4a8443f6\": \"4000000000000000000000\",\n\t\"b1896a37e5d8825a2d01765ae5de629977de8352\": \"200000000000000000000\",\n\t\"d9f547f2c1de0ed98a53d161df57635dd21a00bd\": \"98500000000000000000\",\n\t\"2fea1b2f834f02fc54333f8a809f0438e5870aa9\": \"20200000000000000000\",\n\t\"68b31836a30a016ada157b638ac15da73f18cfde\": \"26000000000000000000\",\n\t\"bc967fe4418c18b99858966d870678dca2b88879\": \"8740000000000000000000\",\n\t\"16bae5d24eff91778cd98b4d3a1cc3162f44aa77\": \"401100000000000000000\",\n\t\"f476e1267f86247cc908816f2e7ad5388c952db0\": \"4000000000000000000000\",\n\t\"0203ae01d4c41cae1865e04b1f5b53cdfaecae31\": \"1006054000000000000000\",\n\t\"bd4bd5b122d8ef7b7c8f0667450320db2116142e\": \"600000000000000000000\",\n\t\"a394ad4fd9e6530e6f5c53faecbede81cb172da1\": \"5600000000000000000000\",\n\t\"3a9960266df6492063538a99f487c950a3a5ec9e\": \"24000000000000000000000\",\n\t\"d8069f84b521493f4715037f3226b25f33b60586\": \"1910000000000000000000\",\n\t\"136c834bf111326d207395295b2e583ea7f33572\": \"100000000000000000000\",\n\t\"c5c73d61cce7c8fe4c8fce29f39092cd193e0fff\": \"8000000000000000000000\",\n\t\"3cfbf066565970639e130df2a7d16b0e14d6091c\": \"1700000000000000000000\",\n\t\"61b905de663fc17386523b3a28e2f7d037a655cd\": \"500000000000000000000\",\n\t\"fda0ce15330707f10bce3201172d2018b9ddea74\": \"51900000000000000000\",\n\t\"f7fc45abf76f5088e2e5b5a8d132f28a4d4ec1c0\": \"2000000000000000000000\",\n\t\"c3db9fb6f46c480af34465d79753b4e2b74a67ce\": \"20000000000000000000000\",\n\t\"ebe46cc3c34c32f5add6c3195bb486c4713eb918\": \"1000000000000000000000\",\n\t\"91d2a9ee1a6db20f5317cca7fbe2313895db8ef8\": \"8499600000000000000000\",\n\t\"c4cc45a2b63c27c0b4429e58cd42da59be739bd6\": \"1000000000000000000000\",\n\t\"a43b81f99356c0af141a03010d77bd042c71c1ee\": \"2000000000000000000000\",\n\t\"4c45d4c9a725d11112bfcbca00bf31186ccaadb7\": \"400000000000000000000\",\n\t\"bf9f271f7a7e12e36dd2fe9facebf385fe6142bd\": \"62760000000000000000\",\n\t\"e0ce80a461b648a501fd0b824690c8868b0e4de8\": \"500000000000000000000\",\n\t\"a1f7dde1d738d8cd679ea1ee965bee224be7d04d\": \"1127000000000000000000\",\n\t\"7f1c81ee1697fc144b7c0be5493b5615ae7fddca\": \"500200000000000000000\",\n\t\"b508f987b2de34ae4cf193de85bff61389621f88\": \"6000000000000000000000\",\n\t\"5f26cf34599bc36ea67b9e7a9f9b4330c9d542a3\": \"1000000000000000000000\",\n\t\"d02108d2ae3cab10cbcf1657af223e027c8210f6\": \"2000140000000000000000\",\n\t\"952183cfd38e352e579d36decec5b18450f7fba0\": \"2000000000000000000000\",\n\t\"eb90c793b3539761e1c814a29671148692193eb4\": \"12000000000000000000000\",\n\t\"1076212d4f758c8ec7121c1c7d74254926459284\": \"35000056000000000000000\",\n\t\"f05ceeab65410564709951773c8445ad9f4ec797\": \"299982000000000000000\",\n\t\"05361d8eb6941d4e90fb7e1418a95a32d5257732\": \"20000000000000000000\",\n\t\"a5783bf33432ff82ac498985d7d460ae67ec3673\": \"1820000000000000000000\",\n\t\"b1cd4bdfd104489a026ec99d597307a04279f173\": \"20000000000000000000000\",\n\t\"876c3f218b4776df3ca9dbfb270de152d94ed252\": \"100000000000000000000\",\n\t\"8a36869ad478997cbf6d8924d20a3c8018e9855b\": \"20000000000000000000\",\n\t\"fb3fe09bb836861529d7518da27635f538505615\": \"1399904000000000000000\",\n\t\"d093e829819fd2e25b973800bb3d5841dd152d05\": \"4000000000000000000000\",\n\t\"126d91f7ad86debb0557c612ca276eb7f96d00a1\": \"100000000000000000000\",\n\t\"2a81d27cb6d4770ff4f3c4a3ba18e5e57f07517c\": \"2000000000000000000000\",\n\t\"c4f7b13ac6d4eb4db3d4e6a252af8a07bd5957da\": \"200000000000000000000\",\n\t\"305d26c10bdc103f6b9c21272eb7cb2d9108c47e\": \"500000000000000000000\",\n\t\"d0d0a2ad45f59a9dccc695d85f25ca46ed31a5a3\": \"840000000000000000000\",\n\t\"522323aad71dbc96d85af90f084b99c3f09decb7\": \"6000000000000000000000\",\n\t\"f43da3a4e3f5fab104ca9bc1a0f7f3bb4a56f351\": \"1999944000000000000000\",\n\t\"a2dc65ee256b59a5bd7929774f904b358df3ada1\": \"21319600000000000000000\",\n\t\"f382df583155d8548f3f93440cd5f68cb79d6026\": \"266619800000000000000000\",\n\t\"0c967e3061b87a753e84507eb60986782c8f3013\": \"100000000000000000000\",\n\t\"a3a262afd2936819230892fde84f2d5a594ab283\": \"1880000000000000000000\",\n\t\"93868ddb2a794d02ebda2fa4807c76e3609858dc\": \"2027851000000000000000\",\n\t\"cd35ff010ec501a721a1b2f07a9ca5877dfcf95a\": \"4011000000000000000000\",\n\t\"5824a7e22838277134308c5f4b50dab65e43bb31\": \"6000000000000000000000\",\n\t\"7f7a3a21b3f5a65d81e0fcb7d52dd00a1aa36dba\": \"100000000000000000000\",\n\t\"30513fca9f36fd788cfea7a340e86df98294a244\": \"447000000000000000000\",\n\t\"283e6252b4efcf4654391acb75f903c59b78c5fb\": \"12000000000000000000000\",\n\t\"eddbaafbc21be8f25562f1ed6d05d6afb58f02c2\": \"2000000000000000000000\",\n\t\"0dcfe837ea1cf28c65fccec3bef1f84e59d150c0\": \"200000000000000000000\",\n\t\"828ba651cb930ed9787156299a3de44cd08b7212\": \"1337000000000000000000\",\n\t\"cfd47493c9f89fe680bda5754dd7c9cfe7cb5bbe\": \"54508000000000000000\",\n\t\"0e89eddd3fa0d71d8ab0ff8da5580686e3d4f74f\": \"2000000000000000000000\",\n\t\"205f5166f12440d85762c967d3ae86184f8f4d98\": \"432500000000000000000\",\n\t\"25dad495a11a86b9eeece1eeec805e57f157faff\": \"16000000000000000000000\",\n\t\"6c84cba77c6db4f7f90ef13d5ee21e8cfc7f8314\": \"2000000000000000000000\",\n\t\"91a787bc5196f34857fe0c372f4df376aaa76613\": \"2000000000000000000000\",\n\t\"b0d3c9872b85056ea0c0e6d1ecf7a77e3ce6ab85\": \"4999711000000000000000\",\n\t\"6e4d2e39c8836629e5b487b1918a669aebdd9536\": \"1000000000000000000000\",\n\t\"dc703a5f3794c84d6cb3544918cae14a35c3bd4f\": \"1850000000000000000000\",\n\t\"47beb20f759100542aa93d41118b3211d664920e\": \"2000000000000000000000\",\n\t\"5a7735007d70b06844da9901cdfadb11a2582c2f\": \"6000000000000000000000\",\n\t\"aff107960b7ec34ed690b665024d60838c190f70\": \"500000000000000000000\",\n\t\"563a03ab9c56b600f6d25b660c21e16335517a75\": \"1000000000000000000000\",\n\t\"a106465bbd19e1b6bce50d1b1157dc59095a3630\": \"2000000000000000000000\",\n\t\"ca9dec02841adf5cc920576a5187edd2bd434a18\": \"500000000000000000000\",\n\t\"572ac1aba0de23ae41a7cae1dc0842d8abfc103b\": \"1910000000000000000000\",\n\t\"5f74ed0e24ff80d9b2c4a44baa9975428cd6b935\": \"2980000000000000000000\",\n\t\"f2049532fd458a83ca1bff2eebacb6d5ca63f4a4\": \"3625693000000000000000\",\n\t\"cee699c0707a7836252b292f047ce8ad289b2f55\": \"324700000000000000000\",\n\t\"8b3696f3c60de32432a2e4c395ef0303b7e81e75\": \"30000000000000000000000\",\n\t\"13dee03e3799952d0738843d4be8fc0a803fb20e\": \"2000000000000000000000\",\n\t\"c853215b9b9f2d2cd0741e585e987b5fb80c212e\": \"1550000000000000000000\",\n\t\"851c0d62be4635d4777e8035e37e4ba8517c6132\": \"500000000000000000000\",\n\t\"a76b743f981b693072a131b22ba510965c2fefd7\": \"18200000000000000000\",\n\t\"69bd25ade1a3346c59c4e930db2a9d715ef0a27a\": \"4000000000000000000000\",\n\t\"0fec4ee0d7ca180290b6bd20f9992342f60ff68d\": \"334383000000000000000\",\n\t\"ccfd725760a68823ff1e062f4cc97e1360e8d997\": \"399800000000000000000\",\n\t\"9f017706b830fb9c30efb0a09f506b9157457534\": \"2000000000000000000000\",\n\t\"420fb86e7d2b51401fc5e8c72015decb4ef8fc2e\": \"1000000000000000000000\",\n\t\"cb7d2b8089e9312cc9aeaa2773f35308ec6c2a7b\": \"10000000000000000000000\",\n\t\"6c822029218ac8e98a260c1e064029348839875b\": \"5010000000000000000000\",\n\t\"1c68a66138783a63c98cc675a9ec77af4598d35e\": \"50100000000000000000\",\n\t\"f270792576f05d514493ffd1f5e84bec4b2df810\": \"1000000000000000000000\",\n\t\"9191f94698210516cf6321a142070e20597674ed\": \"17194000000000000000\",\n\t\"c0ca3277942e7445874be31ceb902972714f1823\": \"250000000000000000000\",\n\t\"35e096120deaa5c1ecb1645e2ccb8b4edbd9299a\": \"500000000000000000000\",\n\t\"e2bbf84641e3541f6c33e6ed683a635a70bde2ec\": \"502763000000000000000\",\n\t\"d12d77ae01a92d35117bac705aacd982d02e74c1\": \"1000000000000000000000\",\n\t\"dabb0889fc042926b05ef57b2520910abc4b4149\": \"2000000000000000000000\",\n\t\"5a1a336962d6e0c63031cc83c6a5c6a6f4478ecb\": \"1000000000000000000000\",\n\t\"abd154903513b8da4f019f68284b0656a1d0169b\": \"1000000000000000000000\",\n\t\"ad377cd25eb53e83ae091a0a1d2b4516f484afde\": \"1940000000000000000000\",\n\t\"08c2f236ac4adcd3fda9fbc6e4532253f9da3bec\": \"20000000000000000000\",\n\t\"71135d8f05963c905a4a07922909235a896a52ea\": \"3000000000000000000000\",\n\t\"080546508a3d2682c8b9884f13637b8847b44db3\": \"2000000000000000000000\",\n\t\"2d61bfc56873923c2b00095dc3eaa0f590d8ae0f\": \"20760000000000000000000\",\n\t\"cbfa6af6c283b046e2772c6063b0b21553c40106\": \"2000000000000000000000\",\n\t\"ccabc6048a53464424fcf76eeb9e6e1801fa23d4\": \"49250000000000000000\",\n\t\"60cc3d445ebdf76a7d7ae571c6971dff68cc8585\": \"1000000000000000000000\",\n\t\"fff33a3bd36abdbd412707b8e310d6011454a7ae\": \"8000000000000000000000\",\n\t\"d2dbebe89b0357aea98bbe8e496338debb28e805\": \"4000000000000000000000\",\n\t\"5f521282e9b278dc8c034c72af53ee29e5443d78\": \"6520000000000000000000\",\n\t\"c5a48a8500f9b4e22f0eb16c6f4649687674267d\": \"812721000000000000000\",\n\t\"8cb3aa3fcd212854d7578fcc30fdede6742a312a\": \"300000000000000000000\",\n\t\"90d2809ae1d1ffd8f63eda01de49dd552df3d1bc\": \"3998000000000000000000\",\n\t\"96a55f00dff405dc4de5e58c57f6f6f0cac55d2f\": \"1962711000000000000000\",\n\t\"ae842e81858ecfedf6506c686dc204ac15bf8b24\": \"40000000000000000000\",\n\t\"0be6a09e4307fe48d412b8d1a1a8284dce486261\": \"19180000000000000000000\",\n\t\"c9c7ac0bdd9342b5ead4360923f68c72a6ba633a\": \"500000000000000000000\",\n\t\"ea8f30b6e4c5e65290fb9864259bc5990fa8ee8a\": \"20000000000000000000\",\n\t\"74d37a51747bf8b771bfbf43943933d100d21483\": \"1000000000000000000000\",\n\t\"1a04d5389eb006f9ce880c30d15353f8d11c4b31\": \"17072800000000000000000\",\n\t\"726a14c90e3f84144c765cffacba3e0df11b48be\": \"10000000000000000000000\",\n\t\"86b7bd563ceab686f96244f9ddc02ad7b0b14bc2\": \"10000000000000000000000\",\n\t\"2bbe672a1857508f630f2a5edb563d9e9de92815\": \"2000000000000000000000\",\n\t\"a17070c2e9c5a940a4ec0e4954c4d7d643be8f49\": \"1999965000000000000000\",\n\t\"f2d1b7357724ec4c03185b879b63f57e26589153\": \"6000000000000000000000\",\n\t\"d6a7ac4de7b510f0e8de519d973fa4c01ba83400\": \"1880000000000000000000\",\n\t\"593b45a1864ac5c7e8f0caaeba0d873cd5d113b2\": \"6000000000000000000000\",\n\t\"0837539b5f6a522a482cdcd3a9bb7043af39bdd2\": \"6000000000000000000000\",\n\t\"b927abd2d28aaaa24db31778d27419df8e1b04bb\": \"27531000000000000000\",\n\t\"b2e085fddd1468ba07415b274e734e11237fb2a9\": \"100000000000000000000\",\n\t\"970938522afb5e8f994873c9fbdc26e3b37e314c\": \"1000000000000000000000\",\n\t\"f3de5f26ef6aded6f06d3b911346ee70401da4a0\": \"354718000000000000000\",\n\t\"bffb6929241f788693273e7022e60e3eab1fe84f\": \"2000000000000000000000\",\n\t\"b56ad2aec6c8c3f19e1515bbb7dd91285256b639\": \"1000000000000000000000\",\n\t\"47730f5f8ebf89ac72ef80e46c12195038ecdc49\": \"3160000000000000000000\",\n\t\"f39a9d7aa3581df07ee4279ae6c312ef21033658\": \"4000000000000000000000\",\n\t\"36227cdfa0fd3b9d7e6a744685f5be9aa366a7f0\": \"198479000000000000000\",\n\t\"89e3b59a15864737d493c1d23cc53dbf8dcb1362\": \"4000000000000000000000\",\n\t\"bd08e0cddec097db7901ea819a3d1fd9de8951a2\": \"20000000000000000000\",\n\t\"533444584082eba654e1ad30e149735c6f7ba922\": \"1730000000000000000000\",\n\t\"6a8a4317c45faa0554ccdb482548183e295a24b9\": \"1000000000000000000000\",\n\t\"22ce349159eeb144ef06ff2636588aef79f62832\": \"188000000000000000000\",\n\t\"3cd1d9731bd548c1dd6fcea61beb75d91754f7d3\": \"5130285000000000000000\",\n\t\"8b7056f6abf3b118d026e944d5c073433ca451d7\": \"999999000000000000000\",\n\t\"15f1b352110d68901d8f67aac46a6cfafe031477\": \"200000000000000000000\",\n\t\"0f789e30397c53bf256fc364e6ef39f853504114\": \"3640000000000000000000\",\n\t\"750bbb8c06bbbf240843cc75782ee02f08a97453\": \"835000000000000000000\",\n\t\"fff7ac99c8e4feb60c9750054bdc14ce1857f181\": \"1000000000000000000000\",\n\t\"5c6f36af90ab1a656c6ec8c7d521512762bba3e1\": \"1999800000000000000000\",\n\t\"6811b54cd19663b11b94da1de2448285cd9f68d9\": \"1100000000000000000000\",\n\t\"6f50929777824c291a49c46dc854f379a6bea080\": \"360000000000000000000\",\n\t\"e83604e4ff6be7f96f6018d3ec3072ec525dff6b\": \"182000000000000000000\",\n\t\"d731bb6b5f3c37395e09ceaccd14a918a6060789\": \"3940000000000000000000\",\n\t\"372e453a6b629f27678cc8aeb5e57ce85ec0aef9\": \"200000000000000000000\",\n\t\"86924fb211aad23cf5ce600e0aae806396444087\": \"10000000000000000000000\",\n\t\"18c6723a6753299cb914477d04a3bd218df8c775\": \"1000000000000000000000\",\n\t\"e00484788db50fc6a48e379d123e508b0f6e5ab1\": \"1000000000000000000000\",\n\t\"150e3dbcbcfc84ccf89b73427763a565c23e60d0\": \"40000000000000000000\",\n\t\"8ffa062122ac307418821adb9311075a3703bfa3\": \"1000000000000000000000\",\n\t\"21206ce22ea480e85940d31314e0d64f4e4d3a04\": \"1000000000000000000000\",\n\t\"ac024f594f9558f04943618eb0e6b2ee501dc272\": \"2000000000000000000000\",\n\t\"b2b7cdb4ff4b61d5b7ce0b2270bbb5269743ec04\": \"2000000000000000000000\",\n\t\"abc74706964960dfe0dca3dca79e9216056f1cf4\": \"40000000000000000000000\",\n\t\"d7eb903162271c1afa35fe69e37322c8a4d29b11\": \"10000000000000000000000\",\n\t\"d7c6265dea11876c903b718e4cd8ab24fe265bde\": \"2000000000000000000000\",\n\t\"cba288cd3c1eb4d59ddb06a6421c14c345a47b24\": \"4000000000000000000000\",\n\t\"8c22426055b76f11f0a2de1a7f819a619685fe60\": \"1980000000000000000000\",\n\t\"f463a90cb3f13e1f0643423636beab84c123b06d\": \"40000000000000000000\",\n\t\"2b5ced9987c0765f900e49cf9da2d9f9c1138855\": \"400000000000000000000\",\n\t\"9bb760d5c289a3e1db18db095345ca413b9a43c2\": \"197000000000000000000\",\n\t\"d66ab79294074c8b627d842dab41e17dd70c5de5\": \"1000000000000000000000\",\n\t\"0bdd58b96e7c916dd2fb30356f2aebfaaf1d8630\": \"2000000000000000000000\",\n\t\"d612597bc31743c78633f633f239b1e9426bd925\": \"76000000000000000000000\",\n\t\"140518a3194bad1350b8949e650565debe6db315\": \"2000000000000000000000\",\n\t\"daedd4ad107b271e89486cbf80ebd621dd974578\": \"2000000000000000000000\",\n\t\"c36c0b63bfd75c2f8efb060883d868cccd6cbdb4\": \"3000000000000000000000\",\n\t\"e646665872e40b0d7aa2ff82729caaba5bc3e89e\": \"400000000000000000000\",\n\t\"b5fb7ea2ddc1598b667a9d57dd39e85a38f35d56\": \"500000000000000000000\",\n\t\"e51421f8ee2210c71ed870fe618276c8954afbe9\": \"1337000000000000000000\",\n\t\"08a9a44e1f41de3dbba7a363a3ab412c124cd15e\": \"200000000000000000000\",\n\t\"562bced38ab2ab6c080f3b0541b8456e70824b3f\": \"641760000000000000000\",\n\t\"1e484d0621f0f5331b35d5408d9aae4eb1acf21e\": \"20000000000000000000\",\n\t\"3a476bd2c9e664c63ab266aa4c6e4a4825f516c3\": \"200000000000000000000\",\n\t\"8d6df209484d7b94702b03a53e56b9fb0660f6f0\": \"2000000000000000000000\",\n\t\"5970fb1b144dd751e4ce2eca7caa20e363dc4da3\": \"10000000000000000000000\",\n\t\"d1dd79fb158160e5b4e8e23f312e6a907fbc4d4e\": \"500000000000000000000\",\n\t\"7ee5ca805dce23af89c2d444e7e40766c54c7404\": \"240660000000000000000\",\n\t\"93e0f37ecdfb0086e3e862a97034447b1e4dec1a\": \"30000000000000000000\",\n\t\"e10ac19c546fc2547c61c139f5d1f45a6666d5b0\": \"4775000000000000000000\",\n\t\"1c73d00b6e25d8eb9c1ff4ad827b6b9e9cf6d20c\": \"200000000000000000000\",\n\t\"d771d9e0ca8a08a113775731434eb3270599c40d\": \"20000000000000000000\",\n\t\"e69d1c378b771e0feff051db69d966ac6779f4ed\": \"553000000000000000000\",\n\t\"0ef85b49d08a75198692914eddb4b22cf5fa4450\": \"2004800000000000000000\",\n\t\"ed70a37cdd1cbda9746d939658ae2a6181288578\": \"9600000000000000000000\",\n\t\"eee761847e33fd61d99387ee14628694d1bfd525\": \"2000000000000000000000\",\n\t\"271d3d481cb88e7671ad216949b6365e06303de0\": \"4000000000000000000000\",\n\t\"5255dc69155a45b970c604d30047e2f530690e7f\": \"20000000000000000000\",\n\t\"cabab6274ed15089737e287be878b757934864e2\": \"20000000000000000000000\",\n\t\"9defe56a0ff1a1947dba0923f7dd258d8f12fa45\": \"26880000000000000000000\",\n\t\"b7a2c103728b7305b5ae6e961c94ee99c9fe8e2b\": \"50000000000000000000000\",\n\t\"b498bb0f520005b6216a4425b75aa9adc52d622b\": \"4000000000000000000000\",\n\t\"c1132878235c5ddba5d9f3228b5236e47020dc6f\": \"1000000000000000000000\",\n\t\"f81622e55757daea6675975dd93538da7d16991e\": \"2000000000000000000000\",\n\t\"ce2deab51c0a9ae09cd212c4fa4cc52b53cc0dec\": \"2000000000000000000000\",\n\t\"86a1eadeeb30461345d9ef6bd05216fa247c0d0c\": \"2000000000000000000000\",\n\t\"7b1fe1ab4dfd0088cdd7f60163ef59ec2aee06f5\": \"2000000000000000000000\",\n\t\"6bbc3f358a668dd1a11f0380f3f73108426abd4a\": \"4000000000000000000000\",\n\t\"b1e6e810c24ab0488de9e01e574837829f7c77d0\": \"400000000000000000000\",\n\t\"03eb3cb860f6028da554d344a2bb5a500ae8b86f\": \"2000000000000000000000\",\n\t\"e5481a7fed42b901bbed20789bd4ade50d5f83b9\": \"2000000000000000000000\",\n\t\"1f3da68fe87eaf43a829ab6d7ec5a6e009b204fb\": \"554988000000000000000\",\n\t\"30037988702671acbe892c03fe5788aa98af287a\": \"2800000000000000000000\",\n\t\"edb473353979a206879de144c10a3c51d7d7081a\": \"6000000000000000000000\",\n\t\"22bdffc240a88ff7431af3bff50e14da37d5183e\": \"1000000000000000000000\",\n\t\"9374869d4a9911ee1eaf558bc4c2b63ec63acfdd\": \"1000000000000000000000\",\n\t\"b756ad52f3bf74a7d24c67471e0887436936504c\": \"20000000000000000000000\",\n\t\"8bd0b65a50ef5cef84fec420be7b89ed1470ceb9\": \"11999000000000000000000\",\n\t\"af26f7c6bf453e2078f08953e4b28004a2c1e209\": \"100000000000000000000\",\n\t\"7c532db9e0c06c26fd40acc56ac55c1ee92d3c3a\": \"300000000000000000000000\",\n\t\"dde670d01639667576a22dd05d3246d61f06e083\": \"26740000000000000000\",\n\t\"5cf44e10540d65716423b1bcb542d21ff83a94cd\": \"10000000000000000000000\",\n\t\"f96b4c00766f53736a8574f822e6474c2f21da2d\": \"400000000000000000000\",\n\t\"8d89170b92b2be2c08d57c48a7b190a2f146720f\": \"19700000000000000000000\",\n\t\"142b87c5043ffb5a91df18c2e109ced6fe4a71db\": \"200000000000000000000\",\n\t\"42d34940edd2e7005d46e2188e4cfece8311d74d\": \"158000000000000000000\",\n\t\"562105e82b099735de49f62692cc87cd38a8edcd\": \"6000000000000000000000\",\n\t\"457bcef37dd3d60b2dd019e3fe61d46b3f1e7252\": \"20000000000000000000\",\n\t\"cf8882359c0fb23387f5674074d8b17ade512f98\": \"6000000000000000000000\",\n\t\"f0c081da52a9ae36642adf5e08205f05c54168a6\": \"111000000000000000000\",\n\t\"551e7784778ef8e048e495df49f2614f84a4f1dc\": \"600000000000000000000\",\n\t\"3c869c09696523ced824a070414605bb76231ff2\": \"1000000000000000000000\",\n\t\"7e7f18a02eccaa5d61ab8fbf030343c434a25ef7\": \"66850000000000000000\",\n\t\"9328d55ccb3fce531f199382339f0e576ee840a3\": \"4000000000000000000000\",\n\t\"9d0f347e826b7dceaad279060a35c0061ecf334b\": \"4000000000000000000000\",\n\t\"680640838bd07a447b168d6d923b90cf6c43cdca\": \"1730000000000000000000\",\n\t\"c951900c341abbb3bafbf7ee2029377071dbc36a\": \"327600000000000000000\",\n\t\"ddf5810a0eb2fb2e32323bb2c99509ab320f24ac\": \"17900000000000000000000\",\n\t\"2489ac126934d4d6a94df08743da7b7691e9798e\": \"1000000000000000000000\",\n\t\"f42f905231c770f0a406f2b768877fb49eee0f21\": \"197000000000000000000\",\n\t\"756f45e3fa69347a9a973a725e3c98bc4db0b5a0\": \"200000000000000000000\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ethereum-common/genesisState.json\n// module id = 174\n// module chunks = 0","module.exports = {\n\t\"genesisGasLimit\": {\n\t\t\"v\": 5000,\n\t\t\"d\": \"Gas limit of the Genesis block.\"\n\t},\n\t\"genesisDifficulty\": {\n\t\t\"v\": 17179869184,\n\t\t\"d\": \"Difficulty of the Genesis block.\"\n\t},\n\t\"genesisNonce\": {\n\t\t\"v\": \"0x0000000000000042\",\n\t\t\"d\": \"the geneis nonce\"\n\t},\n\t\"genesisExtraData\": {\n\t\t\"v\": \"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa\",\n\t\t\"d\": \"extra data \"\n\t},\n\t\"genesisHash\": {\n\t\t\"v\": \"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\",\n\t\t\"d\": \"genesis hash\"\n\t},\n\t\"genesisStateRoot\": {\n\t\t\"v\": \"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544\",\n\t\t\"d\": \"the genesis state root\"\n\t},\n\t\"minGasLimit\": {\n\t\t\"v\": 5000,\n\t\t\"d\": \"Minimum the gas limit may ever be.\"\n\t},\n\t\"gasLimitBoundDivisor\": {\n\t\t\"v\": 1024,\n\t\t\"d\": \"The bound divisor of the gas limit, used in update calculations.\"\n\t},\n\t\"minimumDifficulty\": {\n\t\t\"v\": 131072,\n\t\t\"d\": \"The minimum that the difficulty may ever be.\"\n\t},\n\t\"difficultyBoundDivisor\": {\n\t\t\"v\": 2048,\n\t\t\"d\": \"The bound divisor of the difficulty, used in the update calculations.\"\n\t},\n\t\"durationLimit\": {\n\t\t\"v\": 13,\n\t\t\"d\": \"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not.\"\n\t},\n\t\"maximumExtraDataSize\": {\n\t\t\"v\": 32,\n\t\t\"d\": \"Maximum size extra data may be after Genesis.\"\n\t},\n\t\"epochDuration\": {\n\t\t\"v\": 30000,\n\t\t\"d\": \"Duration between proof-of-work epochs.\"\n\t},\n\t\"stackLimit\": {\n\t\t\"v\": 1024,\n\t\t\"d\": \"Maximum size of VM stack allowed.\"\n\t},\n\t\"callCreateDepth\": {\n\t\t\"v\": 1024,\n\t\t\"d\": \"Maximum depth of call/create stack.\"\n\t},\n\t\"tierStepGas\": {\n\t\t\"v\": [\n\t\t\t0,\n\t\t\t2,\n\t\t\t3,\n\t\t\t5,\n\t\t\t8,\n\t\t\t10,\n\t\t\t20\n\t\t],\n\t\t\"d\": \"Once per operation, for a selection of them.\"\n\t},\n\t\"expGas\": {\n\t\t\"v\": 10,\n\t\t\"d\": \"Once per EXP instuction.\"\n\t},\n\t\"expByteGas\": {\n\t\t\"v\": 10,\n\t\t\"d\": \"Times ceil(log256(exponent)) for the EXP instruction.\"\n\t},\n\t\"sha3Gas\": {\n\t\t\"v\": 30,\n\t\t\"d\": \"Once per SHA3 operation.\"\n\t},\n\t\"sha3WordGas\": {\n\t\t\"v\": 6,\n\t\t\"d\": \"Once per word of the SHA3 operation's data.\"\n\t},\n\t\"sloadGas\": {\n\t\t\"v\": 50,\n\t\t\"d\": \"Once per SLOAD operation.\"\n\t},\n\t\"sstoreSetGas\": {\n\t\t\"v\": 20000,\n\t\t\"d\": \"Once per SSTORE operation if the zeroness changes from zero.\"\n\t},\n\t\"sstoreResetGas\": {\n\t\t\"v\": 5000,\n\t\t\"d\": \"Once per SSTORE operation if the zeroness does not change from zero.\"\n\t},\n\t\"sstoreRefundGas\": {\n\t\t\"v\": 15000,\n\t\t\"d\": \"Once per SSTORE operation if the zeroness changes to zero.\"\n\t},\n\t\"jumpdestGas\": {\n\t\t\"v\": 1,\n\t\t\"d\": \"Refunded gas, once per SSTORE operation if the zeroness changes to zero.\"\n\t},\n\t\"logGas\": {\n\t\t\"v\": 375,\n\t\t\"d\": \"Per LOG* operation.\"\n\t},\n\t\"logDataGas\": {\n\t\t\"v\": 8,\n\t\t\"d\": \"Per byte in a LOG* operation's data.\"\n\t},\n\t\"logTopicGas\": {\n\t\t\"v\": 375,\n\t\t\"d\": \"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas.\"\n\t},\n\t\"createGas\": {\n\t\t\"v\": 32000,\n\t\t\"d\": \"Once per CREATE operation & contract-creation transaction.\"\n\t},\n\t\"callGas\": {\n\t\t\"v\": 40,\n\t\t\"d\": \"Once per CALL operation & message call transaction.\"\n\t},\n\t\"callStipend\": {\n\t\t\"v\": 2300,\n\t\t\"d\": \"Free gas given at beginning of call.\"\n\t},\n\t\"callValueTransferGas\": {\n\t\t\"v\": 9000,\n\t\t\"d\": \"Paid for CALL when the value transfor is non-zero.\"\n\t},\n\t\"callNewAccountGas\": {\n\t\t\"v\": 25000,\n\t\t\"d\": \"Paid for CALL when the destination address didn't exist prior.\"\n\t},\n\t\"suicideRefundGas\": {\n\t\t\"v\": 24000,\n\t\t\"d\": \"Refunded following a suicide operation.\"\n\t},\n\t\"memoryGas\": {\n\t\t\"v\": 3,\n\t\t\"d\": \"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL.\"\n\t},\n\t\"quadCoeffDiv\": {\n\t\t\"v\": 512,\n\t\t\"d\": \"Divisor for the quadratic particle of the memory cost equation.\"\n\t},\n\t\"createDataGas\": {\n\t\t\"v\": 200,\n\t\t\"d\": \"\"\n\t},\n\t\"txGas\": {\n\t\t\"v\": 21000,\n\t\t\"d\": \"Per transaction. NOTE: Not payable on data of calls between transactions.\"\n\t},\n\t\"txCreation\": {\n\t\t\"v\": 32000,\n\t\t\"d\": \"the cost of creating a contract via tx\"\n\t},\n\t\"txDataZeroGas\": {\n\t\t\"v\": 4,\n\t\t\"d\": \"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions.\"\n\t},\n\t\"txDataNonZeroGas\": {\n\t\t\"v\": 68,\n\t\t\"d\": \"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions.\"\n\t},\n\t\"copyGas\": {\n\t\t\"v\": 3,\n\t\t\"d\": \"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added.\"\n\t},\n\t\"ecrecoverGas\": {\n\t\t\"v\": 3000,\n\t\t\"d\": \"\"\n\t},\n\t\"sha256Gas\": {\n\t\t\"v\": 60,\n\t\t\"d\": \"\"\n\t},\n\t\"sha256WordGas\": {\n\t\t\"v\": 12,\n\t\t\"d\": \"\"\n\t},\n\t\"ripemd160Gas\": {\n\t\t\"v\": 600,\n\t\t\"d\": \"\"\n\t},\n\t\"ripemd160WordGas\": {\n\t\t\"v\": 120,\n\t\t\"d\": \"\"\n\t},\n\t\"identityGas\": {\n\t\t\"v\": 15,\n\t\t\"d\": \"\"\n\t},\n\t\"identityWordGas\": {\n\t\t\"v\": 3,\n\t\t\"d\": \"\"\n\t},\n\t\"minerReward\": {\n\t\t\"v\": \"5000000000000000000\",\n\t\t\"d\": \"the amount a miner get rewarded for mining a block\"\n\t},\n\t\"ommerReward\": {\n\t\t\"v\": \"625000000000000000\",\n\t\t\"d\": \"The amount of wei a miner of an uncle block gets for being inculded in the blockchain\"\n\t},\n\t\"niblingReward\": {\n\t\t\"v\": \"156250000000000000\",\n\t\t\"d\": \"the amount a miner gets for inculding a uncle\"\n\t},\n\t\"homeSteadForkNumber\": {\n\t\t\"v\": 1000000,\n\t\t\"d\": \"the block that the homestead fork started at\"\n\t},\n\t\"timebombPeriod\": {\n\t\t\"v\": 100000,\n\t\t\"d\": \"Exponential difficulty timebomb period\"\n\t},\n\t\"freeBlockPeriod\": {\n\t\t\"v\": 2\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ethereum-common/params.json\n// module id = 175\n// module chunks = 0","module.exports = require('browserify-sha3').SHA3Hash\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/keccakjs/browser.js\n// module id = 176\n// module chunks = 0","\nmodule.exports = function () {\n\n  var next = typeof setImmediate === 'undefined' ? setTimeout : setImmediate\n\n  var locked = {}\n\n  function _releaser (key, exec) {\n    return function (done) {\n      return function () {\n      _release(key, exec)\n      if (done) done.apply(null, arguments)\n      }\n    }\n  }\n\n  function _release (key, exec) {\n    var i = locked[key].indexOf(exec) //should usually be 0\n\n    if(!~i) return\n\n    locked[key].splice(i, 1)\n\n    //note, that the next locker isn't triggered until next tick,\n    //so it's always after the released callback\n    if(isLocked(key))\n      next(function () {\n        locked[key][0](_releaser(key, locked[key][0]))\n      })\n    else\n      delete locked[key]\n  }\n\n  function _lock(key, exec) {\n    if(isLocked(key))\n      return locked[key].push(exec), false\n    return locked[key] = [exec], true\n  }\n\n  function lock(key, exec) {\n    if(Array.isArray(key)) {\n      var keys = key.length, locks = []\n      var l = {}\n\n      function releaser (done) {\n        return function () {\n          var args = [].slice.call(arguments)\n          for(var key in l)\n            _release(key, l[key])\n          done.apply(this, args)\n        }\n      }\n\n      key.forEach(function (key) {\n        var n = 0\n\n        function ready () {\n          if(n++) return\n          if(!--keys)\n            //all the keys are ready!\n            exec(releaser)\n        }\n\n        l[key] = ready\n        if(_lock(key, ready)) ready()\n      })\n\n      return\n    }\n\n    if(_lock(key, exec))\n      exec(_releaser(key, exec))\n  }\n\n  function isLocked (key) {\n    return Array.isArray(locked[key]) ? !! locked[key].length : false\n  }\n\n  lock.isLocked = isLocked\n\n  return lock\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lock/index.js\n// module id = 177\n// module chunks = 0","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_apply.js\n// module id = 178\n// module chunks = 0","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_arrayLikeKeys.js\n// module id = 179\n// module chunks = 0","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseIsArguments.js\n// module id = 180\n// module chunks = 0","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseIsTypedArray.js\n// module id = 181\n// module chunks = 0","var isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseKeys.js\n// module id = 182\n// module chunks = 0","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseTimes.js\n// module id = 183\n// module chunks = 0","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseUnary.js\n// module id = 184\n// module chunks = 0","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getRawTag.js\n// module id = 185\n// module chunks = 0","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_isIndex.js\n// module id = 186\n// module chunks = 0","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_isPrototype.js\n// module id = 187\n// module chunks = 0","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_nativeKeys.js\n// module id = 188\n// module chunks = 0","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_nodeUtil.js\n// module id = 189\n// module chunks = 0","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_objectToString.js\n// module id = 190\n// module chunks = 0","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_overArg.js\n// module id = 191\n// module chunks = 0","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_overRest.js\n// module id = 192\n// module chunks = 0","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/identity.js\n// module id = 193\n// module chunks = 0","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isArguments.js\n// module id = 194\n// module chunks = 0","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isBuffer.js\n// module id = 195\n// module chunks = 0","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isFunction.js\n// module id = 196\n// module chunks = 0","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isObject.js\n// module id = 197\n// module chunks = 0","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isTypedArray.js\n// module id = 198\n// module chunks = 0","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeys = require('./_baseKeys'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/keys.js\n// module id = 199\n// module chunks = 0","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/stubFalse.js\n// module id = 200\n// module chunks = 0","'use strict';\n\nvar constants = [['base1', '1'], ['base2', '0'], ['base8', '7'], ['base10', '9'], ['base16', 'f'], ['base58flickr', 'Z'], ['base58btc', 'z'], ['base64', 'y'], ['base64url', 'Y']];\n\nvar names = constants.reduce(function (prev, tupple) {\n  prev[tupple[0]] = tupple[1];\n  return prev;\n}, {});\n\nvar codes = constants.reduce(function (prev, tupple) {\n  prev[tupple[1]] = tupple[0];\n  return prev;\n}, {});\n\nmodule.exports = {\n  names: names,\n  codes: codes\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multibase/lib/constants.js\n// module id = 201\n// module chunks = 0","'use strict';\n\nvar constants = require('./constants');\nvar bs58 = require('bs58');\n\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\n\nvar errNotSupported = new Error('Unsupported encoding');\n\n// returns a new buffer with the multibase varint+code`\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer');\n  }\n  var code = getCode(nameOrCode);\n  var codeBuf = new Buffer(code);\n\n  var name = getName(nameOrCode);\n  validEncode(name, buf);\n  return Buffer.concat([codeBuf, buf]);\n}\n\nfunction encode(nameOrCode, buf) {\n  var name = getName(nameOrCode);\n\n  var encode = void 0;\n\n  switch (name) {\n    case 'base58btc':\n      {\n        encode = function encode(buf) {\n          return new Buffer(bs58.encode(buf));\n        };\n      }break;\n    default:\n      throw errNotSupported;\n  }\n\n  return multibase(name, encode(buf));\n}\n\n// receives a buffer or string encoded with multibase header\n// decodes it and returns an object with the decoded buffer\n// and the encoded type { base: <name>, data: <buffer> }\nfunction decode(bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString();\n  }\n\n  var code = bufOrString.substring(0, 1);\n  bufOrString = bufOrString.substring(1, bufOrString.length);\n\n  if (typeof bufOrString === 'string') {\n    bufOrString = new Buffer(bufOrString);\n  }\n\n  var decode = void 0;\n\n  switch (code) {\n    case 'z':\n      {\n        decode = function decode(buf) {\n          return new Buffer(bs58.decode(buf.toString()));\n        };\n      }break;\n    default:\n      throw errNotSupported;\n  }\n\n  return decode(bufOrString);\n}\n\nfunction isEncoded(bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString();\n  }\n\n  var code = bufOrString.substring(0, 1);\n  try {\n    var name = getName(code);\n    return name;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction validNameOrCode(nameOrCode) {\n  var err = new Error('Unsupported encoding');\n\n  if (!constants.names[nameOrCode] && !constants.codes[nameOrCode]) {\n    throw err;\n  }\n}\n\nfunction validEncode(name, buf) {\n  var decode = void 0;\n\n  switch (name) {\n    case 'base58btc':\n      {\n        decode = bs58.decode;\n        buf = buf.toString(); // bs58 only operates in strings bs58 strings\n      }break;\n    default:\n      throw errNotSupported;\n  }\n\n  decode(buf);\n}\n\nfunction getCode(nameOrCode) {\n  validNameOrCode(nameOrCode);\n\n  var code = nameOrCode;\n\n  if (constants.names[nameOrCode]) {\n    code = constants.names[nameOrCode];\n  }\n\n  return code;\n}\n\nfunction getName(nameOrCode) {\n  validNameOrCode(nameOrCode);\n\n  var name = nameOrCode;\n\n  if (constants.codes[nameOrCode]) {\n    name = constants.codes[nameOrCode];\n  }\n\n  return name;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multibase/lib/multibase.js\n// module id = 202\n// module chunks = 0","'use strict'\nconst varint = require('varint')\nconst codecNameToCodeVarint = require('./varint-table')\nconst codeToCodecName = require('./name-table')\nconst util = require('./util')\n\nexports = module.exports\n\nexports.addPrefix = (multicodecStrOrCode, data) => {\n  let prefix\n\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    prefix = util.varintBufferEncode(multicodecStrOrCode)\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n  return Buffer.concat([prefix, data])\n}\n\nexports.rmPrefix = (data) => {\n  varint.decode(data)\n  return data.slice(varint.decode.bytes)\n}\n\nexports.getCodec = (prefixedData) => {\n  const code = util.varintBufferDecode(prefixedData)\n  const codecName = codeToCodecName[code.toString('hex')]\n  return codecName\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multicodec/src/index.js\n// module id = 203\n// module chunks = 0","'use strict'\nconst baseTable = require('./base-table')\n\n// this creates a map for code as hexString -> codecName\n\nconst nameTable = {}\nmodule.exports = nameTable\n\nfor (let encodingName in baseTable) {\n  let code = baseTable[encodingName]\n  nameTable[code.toString('hex')] = encodingName\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multicodec/src/name-table.js\n// module id = 204\n// module chunks = 0","/* eslint quote-props: off */\n/* eslint key-spacing: off */\n'use strict'\n\nexports.names = {\n  'sha1':       0x11,\n  'sha2-256':   0x12,\n  'sha2-512':   0x13,\n  'sha3-224':   0x17,\n  'sha3-256':   0x16,\n  'sha3-384':   0x15,\n  'sha3-512':   0x14,\n  'shake-128':  0x18,\n  'shake-256':  0x19,\n  'keccak-224': 0x1A,\n  'keccak-256': 0x1B,\n  'keccak-384': 0x1C,\n  'keccak-512': 0x1D,\n  'blake2b':    0x40,\n  'blake2s':    0x41\n}\n\nexports.codes = {\n  0x11: 'sha1',\n  0x12: 'sha2-256',\n  0x13: 'sha2-512',\n  0x17: 'sha3-224',\n  0x16: 'sha3-256',\n  0x15: 'sha3-384',\n  0x14: 'sha3-512',\n  0x18: 'shake-128',\n  0x19: 'shake-256',\n  0x1A: 'keccak-224',\n  0x1B: 'keccak-256',\n  0x1C: 'keccak-384',\n  0x1D: 'keccak-512',\n  0x40: 'blake2b',\n  0x41: 'blake2s'\n}\n\nexports.defaultLengths = {\n  0x11: 20,\n  0x12: 32,\n  0x13: 64,\n  0x17: 28,\n  0x16: 32,\n  0x15: 48,\n  0x14: 64,\n  0x18: 32,\n  0x19: 64,\n  0x1A: 28,\n  0x1B: 32,\n  0x1C: 48,\n  0x1D: 64,\n  0x40: 64,\n  0x41: 32\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multihashes/src/constants.js\n// module id = 205\n// module chunks = 0","'use strict'\n\nconst nodeify = require('nodeify')\n\nconst webCrypto = getWebCrypto()\n\nfunction getWebCrypto () {\n  if (typeof window !== 'undefined') {\n    if (window.crypto) {\n      return window.crypto.subtle || window.crypto.webkitSubtle\n    }\n\n    if (window.msCrypto) {\n      return window.msCrypto.subtle\n    }\n  }\n}\n\nfunction webCryptoHash (type) {\n  if (!webCrypto) {\n    throw new Error('Please use a browser with webcrypto support')\n  }\n\n  return (data, callback) => {\n    const res = webCrypto.digest({ name: type }, data)\n\n    if (typeof res.then !== 'function') { // IE11\n      res.onerror = () => {\n        callback(`Error hashing data using ${type}`)\n      }\n      res.oncomplete = (e) => {\n        callback(null, e.target.result)\n      }\n      return\n    }\n\n    nodeify(\n      res.then((raw) => new Buffer(new Uint8Array(raw))),\n      callback\n    )\n  }\n}\n\nfunction sha1 (buf, callback) {\n  webCryptoHash('SHA-1')(buf, callback)\n}\n\nfunction sha2256 (buf, callback) {\n  webCryptoHash('SHA-256')(buf, callback)\n}\n\nfunction sha2512 (buf, callback) {\n  webCryptoHash('SHA-512')(buf, callback)\n}\n\nmodule.exports = {\n  sha1: sha1,\n  sha2256: sha2256,\n  sha2512: sha2512\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multihashing-async/src/crypto-sha1-2-browser.js\n// module id = 206\n// module chunks = 0","'use strict'\n\nconst sha3 = require('js-sha3')\n\nconst toCallback = require('./to-callback')\nconst sha = require('./crypto-sha1-2')\n\nconst toBuf = (doWork, other) => (input) => {\n  return new Buffer(doWork(input, other), 'hex')\n}\n\nmodule.exports = {\n  sha1: sha.sha1,\n  sha2256: sha.sha2256,\n  sha2512: sha.sha2512,\n  sha3512: toCallback(toBuf(sha3.sha3_512)),\n  sha3384: toCallback(toBuf(sha3.sha3_384)),\n  sha3256: toCallback(toBuf(sha3.sha3_256)),\n  sha3224: toCallback(toBuf(sha3.sha3_224)),\n  shake128: toCallback(toBuf(sha3.shake_128, 256)),\n  shake256: toCallback(toBuf(sha3.shake_256, 512)),\n  keccak224: toCallback(toBuf(sha3.keccak_224)),\n  keccak256: toCallback(toBuf(sha3.keccak_256)),\n  keccak384: toCallback(toBuf(sha3.keccak_384)),\n  keccak512: toCallback(toBuf(sha3.keccak_512))\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multihashing-async/src/crypto.js\n// module id = 207\n// module chunks = 0","'use strict'\n\nconst setImmediate = require('async/setImmediate')\n\nmodule.exports = function toCallback (doWork) {\n  return function (input, callback) {\n    const done = (err, res) => setImmediate(() => {\n      callback(err, res)\n    })\n\n    let res\n    try {\n      res = doWork(input)\n    } catch (err) {\n      done(err)\n      return\n    }\n\n    done(null, res)\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/multihashing-async/src/to-callback.js\n// module id = 208\n// module chunks = 0","var Promise = require('promise');\r\nvar isPromise = require('is-promise');\r\n\r\nvar nextTick;\r\nif (typeof setImediate === 'function') nextTick = setImediate\r\nelse if (typeof process === 'object' && process && process.nextTick) nextTick = process.nextTick\r\nelse nextTick = function (cb) { setTimeout(cb, 0) }\r\n\r\nmodule.exports = nodeify;\r\nfunction nodeify(promise, cb) {\r\n  if (typeof cb !== 'function') return promise;\r\n  return promise\r\n    .then(function (res) {\r\n      nextTick(function () {\r\n        cb(null, res);\r\n      });\r\n    }, function (err) {\r\n      nextTick(function () {\r\n        cb(err);\r\n      });\r\n    });\r\n}\r\nfunction nodeifyThis(cb) {\r\n  return nodeify(this, cb);\r\n}\r\n\r\nnodeify.extend = extend;\r\nnodeify.Promise = NodeifyPromise;\r\n\r\nfunction extend(prom) {\r\n  if (prom && isPromise(prom)) {\r\n    prom.nodeify = nodeifyThis;\r\n    var then = prom.then;\r\n    prom.then = function () {\r\n      return extend(then.apply(this, arguments));\r\n    };\r\n    return prom;\r\n  } else if (typeof prom === 'function') {\r\n    prom.prototype.nodeify = nodeifyThis;\r\n  } else {\r\n    Promise.prototype.nodeify = nodeifyThis;\r\n  }\r\n}\r\n\r\nfunction NodeifyPromise(fn) {\r\n  if (!(this instanceof NodeifyPromise)) {\r\n    return new NodeifyPromise(fn);\r\n  }\r\n  Promise.call(this, fn);\r\n  extend(this);\r\n}\r\n\r\nNodeifyPromise.prototype = Object.create(Promise.prototype);\r\nNodeifyPromise.prototype.constructor = NodeifyPromise;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/nodeify/index.js\n// module id = 209\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/path-browserify/index.js\n// module id = 210\n// module chunks = 0","var isPromise = require('is-promise')\r\n\r\nvar nextTick;\r\nif (typeof setImediate === 'function') nextTick = setImediate\r\nelse if (typeof process === 'object' && process && process.nextTick) nextTick = process.nextTick\r\nelse nextTick = function (cb) { setTimeout(cb, 0) }\r\n\r\nvar extensions = [];\r\n\r\nmodule.exports = Promise\r\nfunction Promise(fn) {\r\n  if (!(this instanceof Promise)) {\r\n    return typeof fn === 'function' ? new Promise(fn) : defer()\r\n  }\r\n  var isResolved = false\r\n  var isFulfilled = false\r\n  var value\r\n  var waiting = []\r\n  var running = false\r\n\r\n  function next(skipTimeout) {\r\n    if (waiting.length) {\r\n      running = true\r\n      waiting.shift()(skipTimeout || false)\r\n    } else {\r\n      running = false\r\n    }\r\n  }\r\n  this.then = then;\r\n  function then(cb, eb) {\r\n    return new Promise(function (resolver) {\r\n      function done(skipTimeout) {\r\n        var callback = isFulfilled ? cb : eb\r\n        if (typeof callback === 'function') {\r\n          function timeoutDone() {\r\n            var val;\r\n            try {\r\n              val = callback(value)\r\n            } catch (ex) {\r\n              resolver.reject(ex)\r\n              return next()\r\n            }\r\n            resolver.fulfill(val);\r\n            next(true);\r\n          }\r\n          if (skipTimeout) timeoutDone()\r\n          else nextTick(timeoutDone)\r\n        } else if (isFulfilled) {\r\n          resolver.fulfill(value)\r\n          next(skipTimeout)\r\n        } else {\r\n          resolver.reject(value)\r\n          next(skipTimeout)\r\n        }\r\n      }\r\n      waiting.push(done)\r\n      if (isResolved && !running) next()\r\n    });\r\n  }\r\n  \r\n  (function () {\r\n    function fulfill(val) {\r\n      if (isResolved) return\r\n      if (isPromise(val)) val.then(fulfill, reject)\r\n      else {\r\n        isResolved = isFulfilled = true\r\n        value = val\r\n        next()\r\n      }\r\n    }\r\n    function reject(err) {\r\n      if (isResolved) return\r\n      isResolved = true\r\n      isFulfilled = false\r\n      value = err\r\n      next()\r\n    }\r\n    var resolver = {fulfill: fulfill, reject: reject};\r\n    for (var i = 0; i < extensions.length; i++) {\r\n      extensions[i](this, resolver);\r\n    }\r\n    if (typeof fn === 'function') {\r\n      try {\r\n        fn(resolver)\r\n      } catch (ex) {\r\n        resolver.reject(ex);\r\n      }\r\n    }\r\n  }());\r\n}\r\nfunction defer() {\r\n  var resolver\r\n  var promise = new Promise(function (res) { resolver = res })\r\n  return {resolver: resolver, promise: promise}\r\n}\r\nPromise.use = function (extension) {\r\n  extensions.push(extension);\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/promise/index.js\n// module id = 211\n// module chunks = 0","var parse = require('./parse')\nvar stringify = require('./stringify')\n\nmodule.exports = parse\nmodule.exports.parse = parse\nmodule.exports.stringify = stringify\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protocol-buffers-schema/index.js\n// module id = 212\n// module chunks = 0","var tokenize = require('./tokenize')\nvar MAX_RANGE = 0x1FFFFFFF\n\nvar onfieldoptions = function (tokens) {\n  var opts = {}\n\n  while (tokens.length) {\n    switch (tokens[0]) {\n      case '[':\n      case ',':\n        tokens.shift()\n        var name = tokens.shift()\n        if (name === '(') {       // handling [(A) = B]\n          name = tokens.shift()\n          tokens.shift()          // remove the end of bracket\n        }\n        if (tokens[0] !== '=') throw new Error('Unexpected token in field options: ' + tokens[0])\n        tokens.shift()\n        if (tokens[0] === ']') throw new Error('Unexpected ] in field option')\n        opts[name] = tokens.shift()\n        break\n      case ']':\n        tokens.shift()\n        return opts\n\n      default:\n        throw new Error('Unexpected token in field options: ' + tokens[0])\n    }\n  }\n\n  throw new Error('No closing tag for field options')\n}\n\nvar onfield = function (tokens) {\n  var field = {\n    name: null,\n    type: null,\n    tag: -1,\n    map: null,\n    oneof: null,\n    required: false,\n    repeated: false,\n    options: {}\n  }\n\n  while (tokens.length) {\n    switch (tokens[0]) {\n      case '=':\n        tokens.shift()\n        field.tag = Number(tokens.shift())\n        break\n\n      case 'map':\n        field.type = 'map'\n        field.map = {from: null, to: null}\n        tokens.shift()\n        if (tokens[0] !== '<') throw new Error('Unexpected token in map type: ' + tokens[0])\n        tokens.shift()\n        field.map.from = tokens.shift()\n        if (tokens[0] !== ',') throw new Error('Unexpected token in map type: ' + tokens[0])\n        tokens.shift()\n        field.map.to = tokens.shift()\n        if (tokens[0] !== '>') throw new Error('Unexpected token in map type: ' + tokens[0])\n        tokens.shift()\n        field.name = tokens.shift()\n        break\n\n      case 'repeated':\n      case 'required':\n      case 'optional':\n        var t = tokens.shift()\n        field.required = t === 'required'\n        field.repeated = t === 'repeated'\n        field.type = tokens.shift()\n        field.name = tokens.shift()\n        break\n\n      case '[':\n        field.options = onfieldoptions(tokens)\n        break\n\n      case ';':\n        if (field.name === null) throw new Error('Missing field name')\n        if (field.type === null) throw new Error('Missing type in message field: ' + field.name)\n        if (field.tag === -1) throw new Error('Missing tag number in message field: ' + field.name)\n        tokens.shift()\n        return field\n\n      default:\n        throw new Error('Unexpected token in message field: ' + tokens[0])\n    }\n  }\n\n  throw new Error('No ; found for message field')\n}\n\nvar onmessagebody = function (tokens) {\n  var body = {\n    enums: [],\n    messages: [],\n    fields: [],\n    extends: [],\n    extensions: null\n  }\n\n  while (tokens.length) {\n    switch (tokens[0]) {\n      case 'map':\n      case 'repeated':\n      case 'optional':\n      case 'required':\n        body.fields.push(onfield(tokens))\n        break\n\n      case 'enum':\n        body.enums.push(onenum(tokens))\n        break\n\n      case 'message':\n        body.messages.push(onmessage(tokens))\n        break\n\n      case 'extensions':\n        body.extensions = onextensions(tokens)\n        break\n\n      case 'oneof':\n        tokens.shift()\n        var name = tokens.shift()\n        if (tokens[0] !== '{') throw new Error('Unexpected token in oneof: ' + tokens[0])\n        tokens.shift()\n        while (tokens[0] !== '}') {\n          tokens.unshift('optional')\n          var field = onfield(tokens)\n          field.oneof = name\n          body.fields.push(field)\n        }\n        tokens.shift()\n        break\n\n      case 'extend':\n        body.extends.push(onextend(tokens))\n        break\n\n      case ';':\n        tokens.shift()\n        break\n\n      default:\n        // proto3 does not require the use of optional/required, assumed as optional\n        // \"singular: a well-formed message can have zero or one of this field (but not more than one).\"\n        // https://developers.google.com/protocol-buffers/docs/proto3#specifying-field-rules\n        tokens.unshift('optional')\n        body.fields.push(onfield(tokens))\n    }\n  }\n\n  return body\n}\n\nvar onextend = function (tokens) {\n  var out = {\n    name: tokens[1],\n    message: onmessage(tokens)\n  }\n  return out\n}\n\nvar onextensions = function (tokens) {\n  tokens.shift()\n  var from = Number(tokens.shift())\n  if (isNaN(from)) throw new Error('Invalid from in extensions definition')\n  if (tokens.shift() !== 'to') throw new Error(\"Expected keyword 'to' in extensions definition\")\n  var to = tokens.shift()\n  if (to === 'max') to = MAX_RANGE\n  to = Number(to)\n  if (isNaN(to)) throw new Error('Invalid to in extensions definition')\n  if (tokens.shift() !== ';') throw new Error('Missing ; in extensions definition')\n  return {from: from, to: to}\n}\nvar onmessage = function (tokens) {\n  tokens.shift()\n\n  var lvl = 1\n  var body = []\n  var msg = {\n    name: tokens.shift(),\n    enums: [],\n    extends: [],\n    messages: [],\n    fields: []\n  }\n\n  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0])\n  tokens.shift()\n\n  while (tokens.length) {\n    if (tokens[0] === '{') lvl++\n    else if (tokens[0] === '}') lvl--\n\n    if (!lvl) {\n      tokens.shift()\n      body = onmessagebody(body)\n      msg.enums = body.enums\n      msg.messages = body.messages\n      msg.fields = body.fields\n      msg.extends = body.extends\n      msg.extensions = body.extensions\n      return msg\n    }\n\n    body.push(tokens.shift())\n  }\n\n  if (lvl) throw new Error('No closing tag for message')\n}\n\nvar onpackagename = function (tokens) {\n  tokens.shift()\n  var name = tokens.shift()\n  if (tokens[0] !== ';') throw new Error('Expected ; but found ' + tokens[0])\n  tokens.shift()\n  return name\n}\n\nvar onsyntaxversion = function (tokens) {\n  tokens.shift()\n\n  if (tokens[0] !== '=') throw new Error('Expected = but found ' + tokens[0])\n  tokens.shift()\n\n  var version = tokens.shift()\n  switch (version) {\n    case '\"proto2\"':\n      version = 2\n      break\n\n    case '\"proto3\"':\n      version = 3\n      break\n\n    default:\n      throw new Error('Expected protobuf syntax version but found ' + version)\n  }\n\n  if (tokens[0] !== ';') throw new Error('Expected ; but found ' + tokens[0])\n  tokens.shift()\n\n  return version\n}\n\nvar onenumvalue = function (tokens) {\n  if (tokens.length < 4) throw new Error('Invalid enum value: ' + tokens.slice(0, 3).join(' '))\n  if (tokens[1] !== '=') throw new Error('Expected = but found ' + tokens[1])\n  if (tokens[3] !== ';' && tokens[3] !== '[') throw new Error('Expected ; or [ but found ' + tokens[1])\n\n  var name = tokens.shift()\n  tokens.shift()\n  var val = {\n    value: null,\n    options: {}\n  }\n  val.value = Number(tokens.shift())\n  if (tokens[0] === '[') {\n    val.options = onfieldoptions(tokens)\n  }\n  tokens.shift() // expecting the semicolon here\n\n  return {\n    name: name,\n    val: val\n  }\n}\n\nvar onenum = function (tokens) {\n  tokens.shift()\n  var options = {}\n  var e = {\n    name: tokens.shift(),\n    values: {},\n    options: {}\n  }\n\n  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0])\n  tokens.shift()\n\n  while (tokens.length) {\n    if (tokens[0] === '}') {\n      tokens.shift()\n      // there goes optional semicolon after the enclosing \"}\"\n      if (tokens[0] === ';') tokens.shift()\n      return e\n    }\n    if (tokens[0] === 'option') {\n      options = onoption(tokens)\n      e.options[options.name] = options.value\n      continue\n    }\n    var val = onenumvalue(tokens)\n    e.values[val.name] = val.val\n  }\n\n  throw new Error('No closing tag for enum')\n}\n\nvar onoption = function (tokens) {\n  var name = null\n  var value = null\n\n  var parse = function (value) {\n    if (value === 'true') return true\n    if (value === 'false') return false\n    return value.replace(/^\"+|\"+$/gm, '')\n  }\n\n  while (tokens.length) {\n    if (tokens[0] === ';') {\n      tokens.shift()\n      return {name: name, value: value}\n    }\n    switch (tokens[0]) {\n      case 'option':\n        tokens.shift()\n\n        var hasBracket = tokens[0] === '('\n        if (hasBracket) tokens.shift()\n\n        name = tokens.shift()\n\n        if (hasBracket) {\n          if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0])\n          tokens.shift()\n        }\n        break\n\n      case '=':\n        tokens.shift()\n        if (name === null) throw new Error('Expected key for option with value: ' + tokens[0])\n        value = parse(tokens.shift())\n\n        if (name === 'optimize_for' && !/^(SPEED|CODE_SIZE|LITE_RUNTIME)$/.test(value)) {\n          throw new Error('Unexpected value for option optimize_for: ' + value)\n        } else if (value === '{') {\n          // option foo = {bar: baz}\n          value = onoptionMap(tokens)\n        }\n        break\n\n      default:\n        throw new Error('Unexpected token in option: ' + tokens[0])\n    }\n  }\n}\n\nvar onoptionMap = function (tokens) {\n  var parse = function (value) {\n    if (value === 'true') return true\n    if (value === 'false') return false\n    return value.replace(/^\"+|\"+$/gm, '')\n  }\n\n  var map = {}\n\n  while (tokens.length) {\n    if (tokens[0] === '}') {\n      tokens.shift()\n      return map\n    }\n\n    var hasBracket = tokens[0] === '('\n    if (hasBracket) tokens.shift()\n\n    var key = tokens.shift()\n    if (hasBracket) {\n      if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0])\n      tokens.shift()\n    }\n\n    var value = null\n\n    switch (tokens[0]) {\n      case ':':\n        if (map[key] !== undefined) throw new Error('Duplicate option map key ' + key)\n\n        tokens.shift()\n\n        value = parse(tokens.shift())\n\n        if (value === '{') {\n          // option foo = {bar: baz}\n          value = onoptionMap(tokens)\n        }\n\n        map[key] = value\n        break\n\n      case '{':\n        tokens.shift()\n        value = onoptionMap(tokens)\n\n        if (map[key] === undefined) map[key] = []\n        if (!Array.isArray(map[key])) throw new Error('Duplicate option map key ' + key)\n\n        map[key].push(value)\n        break\n\n      default:\n        throw new Error('Unexpected token in option map: ' + tokens[0])\n    }\n  }\n\n  throw new Error('No closing tag for option map')\n}\n\nvar onimport = function (tokens) {\n  tokens.shift()\n  var file = tokens.shift().replace(/^\"+|\"+$/gm, '')\n\n  if (tokens[0] !== ';') throw new Error('Unexpected token: ' + tokens[0] + '. Expected \";\"')\n\n  tokens.shift()\n  return file\n}\n\nvar onservice = function (tokens) {\n  tokens.shift()\n\n  var service = {\n    name: tokens.shift(),\n    methods: [],\n    options: {}\n  }\n\n  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0])\n  tokens.shift()\n\n  while (tokens.length) {\n    if (tokens[0] === '}') {\n      tokens.shift()\n      // there goes optional semicolon after the enclosing \"}\"\n      if (tokens[0] === ';') tokens.shift()\n      return service\n    }\n\n    switch (tokens[0]) {\n      case 'option':\n        var opt = onoption(tokens)\n        if (service.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name)\n        service.options[opt.name] = opt.value\n        break\n      case 'rpc':\n        service.methods.push(onrpc(tokens))\n        break\n      default:\n        throw new Error('Unexpected token in service: ' + tokens[0])\n    }\n  }\n\n  throw new Error('No closing tag for service')\n}\n\nvar onrpc = function (tokens) {\n  tokens.shift()\n\n  var rpc = {\n    name: tokens.shift(),\n    input_type: null,\n    output_type: null,\n    client_streaming: false,\n    server_streaming: false,\n    options: {}\n  }\n\n  if (tokens[0] !== '(') throw new Error('Expected ( but found ' + tokens[0])\n  tokens.shift()\n\n  if (tokens[0] === 'stream') {\n    tokens.shift()\n    rpc.client_streaming = true\n  }\n\n  rpc.input_type = tokens.shift()\n\n  if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0])\n  tokens.shift()\n\n  if (tokens[0] !== 'returns') throw new Error('Expected returns but found ' + tokens[0])\n  tokens.shift()\n\n  if (tokens[0] !== '(') throw new Error('Expected ( but found ' + tokens[0])\n  tokens.shift()\n\n  if (tokens[0] === 'stream') {\n    tokens.shift()\n    rpc.server_streaming = true\n  }\n\n  rpc.output_type = tokens.shift()\n\n  if (tokens[0] !== ')') throw new Error('Expected ) but found ' + tokens[0])\n  tokens.shift()\n\n  if (tokens[0] === ';') {\n    tokens.shift()\n    return rpc\n  }\n\n  if (tokens[0] !== '{') throw new Error('Expected { but found ' + tokens[0])\n  tokens.shift()\n\n  while (tokens.length) {\n    if (tokens[0] === '}') {\n      tokens.shift()\n      // there goes optional semicolon after the enclosing \"}\"\n      if (tokens[0] === ';') tokens.shift()\n      return rpc\n    }\n\n    if (tokens[0] === 'option') {\n      var opt = onoption(tokens)\n      if (rpc.options[opt.name] !== undefined) throw new Error('Duplicate option ' + opt.name)\n      rpc.options[opt.name] = opt.value\n    } else {\n      throw new Error('Unexpected token in rpc options: ' + tokens[0])\n    }\n  }\n\n  throw new Error('No closing tag for rpc')\n}\n\nvar parse = function (buf) {\n  var tokens = tokenize(buf.toString())\n  // check for isolated strings in tokens by looking for opening quote\n  for (var i = 0; i < tokens.length; i++) {\n    if (/^(\\\"|\\')([^\\'\\\"]*)$/.test(tokens[i])) {\n      var j\n      if (tokens[i].length === 1) {\n        j = i + 1\n      } else {\n        j = i\n      }\n      // look ahead for the closing quote and collapse all\n      // in-between tokens into a single token\n      for (j; j < tokens.length; j++) {\n        if (/^([^\\'\\\"]*)(\\\"|\\')$/.test(tokens[j])) {\n          tokens = tokens.slice(0, i).concat(tokens.slice(i, j + 1).join('')).concat(tokens.slice(j + 1))\n          break\n        }\n      }\n    }\n  }\n  var schema = {\n    syntax: 3,\n    package: null,\n    imports: [],\n    enums: [],\n    messages: [],\n    options: {},\n    extends: []\n  }\n\n  var firstline = true\n\n  while (tokens.length) {\n    switch (tokens[0]) {\n      case 'package':\n        schema.package = onpackagename(tokens)\n        break\n\n      case 'syntax':\n        if (!firstline) throw new Error('Protobuf syntax version should be first thing in file')\n        schema.syntax = onsyntaxversion(tokens)\n        break\n\n      case 'message':\n        schema.messages.push(onmessage(tokens))\n        break\n\n      case 'enum':\n        schema.enums.push(onenum(tokens))\n        break\n\n      case 'option':\n        var opt = onoption(tokens)\n        if (schema.options[opt.name]) throw new Error('Duplicate option ' + opt.name)\n        schema.options[opt.name] = opt.value\n        break\n\n      case 'import':\n        schema.imports.push(onimport(tokens))\n        break\n\n      case 'extend':\n        schema.extends.push(onextend(tokens))\n        break\n\n      case 'service':\n        if (!schema.services) schema.services = []\n        schema.services.push(onservice(tokens))\n        break\n\n      default:\n        throw new Error('Unexpected token: ' + tokens[0])\n    }\n    firstline = false\n  }\n\n  // now iterate over messages and propagate extends\n  schema.extends.forEach(function (ext) {\n    schema.messages.forEach(function (msg) {\n      if (msg.name === ext.name) {\n        ext.message.fields.forEach(function (field) {\n          if (!msg.extensions || field.tag < msg.extensions.from || field.tag > msg.extensions.to) {\n            throw new Error(msg.name + ' does not declare ' + field.tag + ' as an extension number')\n          }\n          msg.fields.push(field)\n        })\n      }\n    })\n  })\n\n  return schema\n}\n\nmodule.exports = parse\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protocol-buffers-schema/parse.js\n// module id = 213\n// module chunks = 0","var onfield = function (f, result) {\n  var prefix = f.repeated ? 'repeated' : f.required ? 'required' : 'optional'\n  if (f.type === 'map') prefix = 'map<' + f.map.from + ',' + f.map.to + '>'\n  if (f.oneof) prefix = ''\n\n  var opts = Object.keys(f.options || {}).map(function (key) {\n    return key + ' = ' + f.options[key]\n  }).join(',')\n\n  if (opts) opts = ' [' + opts + ']'\n\n  result.push((prefix ? prefix + ' ' : '') + (f.map === 'map' ? '' : f.type + ' ') + f.name + ' = ' + f.tag + opts + ';')\n  return result\n}\n\nvar onmessage = function (m, result) {\n  result.push('message ' + m.name + ' {')\n\n  if (!m.enums) m.enums = []\n  m.enums.forEach(function (e) {\n    result.push(onenum(e, []))\n  })\n\n  if (!m.messages) m.messages = []\n  m.messages.forEach(function (m) {\n    result.push(onmessage(m, []))\n  })\n\n  var oneofs = {}\n\n  if (!m.fields) m.fields = []\n  m.fields.forEach(function (f) {\n    if (f.oneof) {\n      if (!oneofs[f.oneof]) oneofs[f.oneof] = []\n      oneofs[f.oneof].push(onfield(f, []))\n    } else {\n      result.push(onfield(f, []))\n    }\n  })\n\n  Object.keys(oneofs).forEach(function (n) {\n    oneofs[n].unshift('oneof ' + n + ' {')\n    oneofs[n].push('}')\n    result.push(oneofs[n])\n  })\n\n  result.push('}', '')\n  return result\n}\n\nvar onenum = function (e, result) {\n  result.push('enum ' + e.name + ' {')\n  if (!e.options) e.options = {}\n  var options = onoption(e.options, [])\n  if (options.length > 1) {\n    result.push(options.slice(0, -1))\n  }\n  Object.keys(e.values).map(function (v) {\n    var val = onenumvalue(e.values[v])\n    result.push([v + ' = ' + val + ';'])\n  })\n  result.push('}', '')\n  return result\n}\n\nvar onenumvalue = function (v, result) {\n  var opts = Object.keys(v.options || {}).map(function (key) {\n    return key + ' = ' + v.options[key]\n  }).join(',')\n\n  if (opts) opts = ' [' + opts + ']'\n  var val = v.value + opts\n  return val\n}\n\nvar onoption = function (o, result) {\n  var keys = Object.keys(o)\n  keys.forEach(function (option) {\n    var v = o[option]\n    if (~option.indexOf('.')) option = '(' + option + ')'\n\n    var type = typeof v\n\n    if (type === 'object') {\n      v = onoptionMap(v, [])\n      if (v.length) result.push('option ' + option + ' = {', v, '};')\n    } else {\n      if (type === 'string' && option !== 'optimize_for') v = '\"' + v + '\"'\n      result.push('option ' + option + ' = ' + v + ';')\n    }\n  })\n  if (keys.length > 0) {\n    result.push('')\n  }\n\n  return result\n}\n\nvar onoptionMap = function (o, result) {\n  var keys = Object.keys(o)\n  keys.forEach(function (k) {\n    var v = o[k]\n\n    var type = typeof v\n\n    if (type === 'object') {\n      if (Array.isArray(v)) {\n        v.forEach(function (v) {\n          v = onoptionMap(v, [])\n          if (v.length) result.push(k + ' {', v, '}')\n        })\n      } else {\n        v = onoptionMap(v, [])\n        if (v.length) result.push(k + ' {', v, '}')\n      }\n    } else {\n      if (type === 'string') v = '\"' + v + '\"'\n      result.push(k + ': ' + v)\n    }\n  })\n\n  return result\n}\n\nvar onservices = function (s, result) {\n  result.push('service ' + s.name + ' {')\n\n  if (!s.options) s.options = {}\n  onoption(s.options, result)\n  if (!s.methods) s.methods = []\n  s.methods.forEach(function (m) {\n    result.push(onrpc(m, []))\n  })\n\n  result.push('}', '')\n  return result\n}\n\nvar onrpc = function (rpc, result) {\n  var def = 'rpc ' + rpc.name + '('\n  if (rpc.client_streaming) def += 'stream '\n  def += rpc.input_type + ') returns ('\n  if (rpc.server_streaming) def += 'stream '\n  def += rpc.output_type + ')'\n\n  if (!rpc.options) rpc.options = {}\n\n  var options = onoption(rpc.options, [])\n  if (options.length > 1) {\n    result.push(def + ' {', options.slice(0, -1), '}')\n  } else {\n    result.push(def + ';')\n  }\n\n  return result\n}\n\nvar indent = function (lvl) {\n  return function (line) {\n    if (Array.isArray(line)) return line.map(indent(lvl + '  ')).join('\\n')\n    return lvl + line\n  }\n}\n\nmodule.exports = function (schema) {\n  var result = []\n\n  result.push('syntax = \"proto' + schema.syntax + '\";', '')\n\n  if (schema.package) result.push('package ' + schema.package + ';', '')\n\n  if (!schema.options) schema.options = {}\n\n  onoption(schema.options, result)\n\n  if (!schema.enums) schema.enums = []\n  schema.enums.forEach(function (e) {\n    onenum(e, result)\n  })\n\n  if (!schema.messages) schema.messages = []\n  schema.messages.forEach(function (m) {\n    onmessage(m, result)\n  })\n\n  if (schema.services) {\n    schema.services.forEach(function (s) {\n      onservices(s, result)\n    })\n  }\n  return result.map(indent('')).join('\\n')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protocol-buffers-schema/stringify.js\n// module id = 214\n// module chunks = 0","module.exports = function (sch) {\n  var noComments = function (line) {\n    var i = line.indexOf('//')\n    return i > -1 ? line.slice(0, i) : line\n  }\n\n  var noMultilineComments = function () {\n    var inside = false\n    return function (token) {\n      if (token === '/*') {\n        inside = true\n        return false\n      }\n      if (token === '*/') {\n        inside = false\n        return false\n      }\n      return !inside\n    }\n  }\n\n  var trim = function (line) {\n    return line.trim()\n  }\n\n  return sch\n    .replace(/([;,{}\\(\\)=\\:\\[\\]<>]|\\/\\*|\\*\\/)/g, ' $1 ')\n    .split(/\\n/)\n    .map(trim)\n    .filter(Boolean)\n    .map(noComments)\n    .map(trim)\n    .filter(Boolean)\n    .join('\\n')\n    .split(/\\s+|\\n+/gm)\n    .filter(noMultilineComments())\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protocol-buffers-schema/tokenize.js\n// module id = 215\n// module chunks = 0","/* eslint-disable no-spaced-func */\n/* eslint-disable no-unexpected-multiline */\nvar encodings = require('./encodings')\nvar varint = require('varint')\nvar genobj = require('generate-object-property')\nvar genfun = require('generate-function')\n\nvar flatten = function (values) {\n  if (!values) return null\n  var result = {}\n  Object.keys(values).forEach(function (k) {\n    result[k] = values[k].value\n  })\n  return result\n}\n\nvar skip = function (type, buffer, offset) {\n  switch (type) {\n    case 0:\n      varint.decode(buffer, offset)\n      return offset + varint.decode.bytes\n\n    case 1:\n      return offset + 8\n\n    case 2:\n      var len = varint.decode(buffer, offset)\n      return offset + varint.decode.bytes + len\n\n    case 3:\n    case 4:\n      throw new Error('Groups are not supported')\n\n    case 5:\n      return offset + 4\n  }\n\n  throw new Error('Unknown wire type: ' + type)\n}\n\nvar defined = function (val) {\n  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))\n}\n\nvar isString = function (def) {\n  try {\n    return !!def && typeof JSON.parse(def) === 'string'\n  } catch (err) {\n    return false\n  }\n}\n\nvar defaultValue = function (f, def) {\n  if (f.map) return '{}'\n  if (f.repeated) return '[]'\n\n  switch (f.type) {\n    case 'string':\n      return isString(def) ? def : '\"\"'\n\n    case 'bool':\n      if (def === 'true') return 'true'\n      return 'false'\n\n    case 'float':\n    case 'double':\n    case 'sfixed32':\n    case 'fixed32':\n    case 'varint':\n    case 'enum':\n    case 'uint64':\n    case 'uint32':\n    case 'int64':\n    case 'int32':\n    case 'sint64':\n    case 'sint32':\n      return '' + Number(def || 0)\n\n    default:\n      return 'null'\n  }\n}\n\nmodule.exports = function (schema, extraEncodings) {\n  var messages = {}\n  var enums = {}\n  var cache = {}\n\n  var visit = function (schema, prefix) {\n    if (schema.enums) {\n      schema.enums.forEach(function (e) {\n        e.id = prefix + (prefix ? '.' : '') + e.name\n        enums[e.id] = e\n        visit(e, e.id)\n      })\n    }\n    if (schema.messages) {\n      schema.messages.forEach(function (m) {\n        m.id = prefix + (prefix ? '.' : '') + m.name\n        messages[m.id] = m\n        m.fields.forEach(function (f) {\n          if (!f.map) return\n\n          var name = 'Map_' + f.map.from + '_' + f.map.to\n          var map = {\n            name: name,\n            enums: [],\n            messages: [],\n            fields: [{\n              name: 'key',\n              type: f.map.from,\n              tag: 1,\n              repeated: false,\n              required: true\n            }, {\n              name: 'value',\n              type: f.map.to,\n              tag: 2,\n              repeated: false,\n              required: false\n            }],\n            extensions: null,\n            id: prefix + (prefix ? '.' : '') + name\n          }\n\n          if (!messages[map.id]) {\n            messages[map.id] = map\n            schema.messages.push(map)\n          }\n          f.type = name\n          f.repeated = true\n        })\n        visit(m, m.id)\n      })\n    }\n  }\n\n  visit(schema, '')\n\n  var compileEnum = function (e) {\n    var conditions = Object.keys(e.values)\n      .map(function (k) {\n        return 'val !== ' + parseInt(e.values[k].value, 10)\n      })\n      .join(' && ')\n\n    if (!conditions) conditions = 'true'\n\n    var encode = genfun()\n      ('function encode (val, buf, offset) {')\n        ('if (%s) throw new Error(\"Invalid enum value: \"+val)', conditions)\n        ('varint.encode(val, buf, offset)')\n        ('encode.bytes = varint.encode.bytes')\n        ('return buf')\n      ('}')\n      .toFunction({\n        varint: varint\n      })\n\n    var decode = genfun()\n      ('function decode (buf, offset) {')\n        ('var val = varint.decode(buf, offset)')\n        ('if (%s) throw new Error(\"Invalid enum value: \"+val)', conditions)\n        ('decode.bytes = varint.decode.bytes')\n        ('return val')\n      ('}')\n      .toFunction({\n        varint: varint\n      })\n\n    return encodings.make(0, encode, decode, varint.encodingLength)\n  }\n\n  var compileMessage = function (m, exports) {\n    m.messages.forEach(function (nested) {\n      exports[nested.name] = resolve(nested.name, m.id)\n    })\n\n    m.enums.forEach(function (val) {\n      exports[val.name] = flatten(val.values)\n    })\n\n    exports.type = 2\n    exports.message = true\n    exports.name = m.name\n\n    var oneofs = {}\n\n    m.fields.forEach(function (f) {\n      if (!f.oneof) return\n      if (!oneofs[f.oneof]) oneofs[f.oneof] = []\n      oneofs[f.oneof].push(f.name)\n    })\n\n    var enc = m.fields.map(function (f) {\n      return resolve(f.type, m.id)\n    })\n\n    var forEach = function (fn) {\n      for (var i = 0; i < enc.length; i++) fn(enc[i], m.fields[i], genobj('obj', m.fields[i].name), i)\n    }\n\n    // compile encodingLength\n\n    var encodingLength = genfun()\n      ('function encodingLength (obj) {')\n        ('var length = 0')\n\n    Object.keys(oneofs).forEach(function (name) {\n      var msg = JSON.stringify('only one of the properties defined in oneof ' + name + ' can be set')\n      var cnt = oneofs[name]\n        .map(function (prop) {\n          return '+defined(' + genobj('obj', prop) + ')'\n        })\n        .join(' + ')\n\n      encodingLength('if ((%s) > 1) throw new Error(%s)', cnt, msg)\n    })\n\n    forEach(function (e, f, val, i) {\n      var packed = f.repeated && f.options && f.options.packed && f.options.packed !== 'false'\n      var hl = varint.encodingLength(f.tag << 3 | e.type)\n\n      if (f.required) encodingLength('if (!defined(%s)) throw new Error(%s)', val, JSON.stringify(f.name + ' is required'))\n      else encodingLength('if (defined(%s)) {', val)\n\n      if (f.map) {\n        encodingLength()\n          ('var tmp = Object.keys(%s)', val)\n          ('for (var i = 0; i < tmp.length; i++) {')\n            ('tmp[i] = {key: tmp[i], value: %s[tmp[i]]}', val)\n          ('}')\n        val = 'tmp'\n      }\n\n      if (packed) {\n        encodingLength()\n          ('var packedLen = 0')\n          ('for (var i = 0; i < %s.length; i++) {', val)\n            ('if (!defined(%s)) continue', val + '[i]')\n            ('var len = enc[%d].encodingLength(%s)', i, val + '[i]')\n            ('packedLen += len')\n\n        if (e.message) encodingLength('packedLen += varint.encodingLength(len)')\n\n        encodingLength('}')\n          ('if (packedLen) {')\n            ('length += %d + packedLen + varint.encodingLength(packedLen)', hl)\n          ('}')\n      } else {\n        if (f.repeated) {\n          encodingLength('for (var i = 0; i < %s.length; i++) {', val)\n          val += '[i]'\n          encodingLength('if (!defined(%s)) continue', val)\n        }\n\n        encodingLength('var len = enc[%d].encodingLength(%s)', i, val)\n        if (e.message) encodingLength('length += varint.encodingLength(len)')\n        encodingLength('length += %d + len', hl)\n        if (f.repeated) encodingLength('}')\n      }\n\n      if (!f.required) encodingLength('}')\n    })\n\n    encodingLength()\n        ('return length')\n      ('}')\n\n    encodingLength = encodingLength.toFunction({\n      defined: defined,\n      varint: varint,\n      enc: enc\n    })\n\n    // compile encode\n\n    var encode = genfun()\n      ('function encode (obj, buf, offset) {')\n        ('if (!offset) offset = 0')\n        ('if (!buf) buf = new Buffer(encodingLength(obj))')\n        ('var oldOffset = offset')\n\n    Object.keys(oneofs).forEach(function (name) {\n      var msg = JSON.stringify('only one of the properties defined in oneof ' + name + ' can be set')\n      var cnt = oneofs[name]\n        .map(function (prop) {\n          return '+defined(' + genobj('obj', prop) + ')'\n        })\n        .join(' + ')\n\n      encode('if ((%s) > 1) throw new Error(%s)', cnt, msg)\n    })\n\n    forEach(function (e, f, val, i) {\n      if (f.required) encode('if (!defined(%s)) throw new Error(%s)', val, JSON.stringify(f.name + ' is required'))\n      else encode('if (defined(%s)) {', val)\n\n      var packed = f.repeated && f.options && f.options.packed && f.options.packed !== 'false'\n      var p = varint.encode(f.tag << 3 | 2)\n      var h = varint.encode(f.tag << 3 | e.type)\n      var j\n\n      if (f.map) {\n        encode()\n          ('var tmp = Object.keys(%s)', val)\n          ('for (var i = 0; i < tmp.length; i++) {')\n            ('tmp[i] = {key: tmp[i], value: %s[tmp[i]]}', val)\n          ('}')\n        val = 'tmp'\n      }\n\n      if (packed) {\n        encode()\n          ('var packedLen = 0')\n          ('for (var i = 0; i < %s.length; i++) {', val)\n            ('if (!defined(%s)) continue', val + '[i]')\n            ('packedLen += enc[%d].encodingLength(%s)', i, val + '[i]')\n          ('}')\n\n        encode('if (packedLen) {')\n        for (j = 0; j < h.length; j++) encode('buf[offset++] = %d', p[j])\n        encode('varint.encode(packedLen, buf, offset)')\n        encode('offset += varint.encode.bytes')\n        encode('}')\n      }\n\n      if (f.repeated) {\n        encode('for (var i = 0; i < %s.length; i++) {', val)\n        val += '[i]'\n        encode('if (!defined(%s)) continue', val)\n      }\n\n      if (!packed) for (j = 0; j < h.length; j++) encode('buf[offset++] = %d', h[j])\n\n      if (e.message) {\n        encode('varint.encode(enc[%d].encodingLength(%s), buf, offset)', i, val)\n        encode('offset += varint.encode.bytes')\n      }\n\n      encode('enc[%d].encode(%s, buf, offset)', i, val)\n      encode('offset += enc[%d].encode.bytes', i)\n\n      if (f.repeated) encode('}')\n      if (!f.required) encode('}')\n    })\n\n    encode()\n        ('encode.bytes = offset - oldOffset')\n        ('return buf')\n      ('}')\n\n    encode = encode.toFunction({\n      encodingLength: encodingLength,\n      defined: defined,\n      varint: varint,\n      enc: enc,\n      Buffer: Buffer\n    })\n\n    // compile decode\n\n    var invalid = m.fields\n      .map(function (f, i) {\n        return f.required && '!found' + i\n      })\n      .filter(function (f) {\n        return f\n      })\n      .join(' || ')\n\n    var decode = genfun()\n\n    var objectKeys = []\n    forEach(function (e, f) {\n      var def = f.options && f.options.default\n      var resolved = resolve(f.type, m.id, false)\n      var vals = resolved && resolved.values\n\n      if (vals) { // is enum\n        if (f.repeated) {\n          objectKeys.push(genobj.property(f.name) + ': []')\n        } else {\n          def = (def && vals[def]) ? vals[def].value : vals[Object.keys(vals)[0]].value\n          objectKeys.push(genobj.property(f.name) + ': ' + parseInt(def || 0, 10))\n        }\n        return\n      }\n\n      objectKeys.push(genobj.property(f.name) + ': ' + defaultValue(f, def))\n    })\n\n    decode()\n      ('function decode (buf, offset, end) {')\n        ('if (!offset) offset = 0')\n        ('if (!end) end = buf.length')\n        ('if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")')\n        ('var oldOffset = offset')\n        ('var obj = {')\n\n    objectKeys.forEach(function (prop, i) {\n      decode(prop + (i === objectKeys.length - 1 ? '' : ','))\n    })\n\n    decode('}')\n\n    forEach(function (e, f, val, i) {\n      if (f.required) decode('var found%d = false', i)\n    })\n\n    decode('while (true) {')\n      ('if (end <= offset) {')\n        (invalid && 'if (%s) throw new Error(\"Decoded message is not valid\")', invalid)\n        ('decode.bytes = offset - oldOffset')\n        ('return obj')\n      ('}')\n      ('var prefix = varint.decode(buf, offset)')\n      ('offset += varint.decode.bytes')\n      ('var tag = prefix >> 3')\n      ('switch (tag) {')\n\n    forEach(function (e, f, val, i) {\n      var packed = f.repeated && f.options && f.options.packed && f.options.packed !== 'false'\n\n      decode('case %d:', f.tag)\n\n      if (f.oneof) {\n        m.fields.forEach(function (otherField) {\n          if (otherField.oneof === f.oneof && f.name !== otherField.name) {\n            decode('delete %s', genobj('obj', otherField.name))\n          }\n        })\n      }\n\n      if (packed) {\n        decode()\n          ('var packedEnd = varint.decode(buf, offset)')\n          ('offset += varint.decode.bytes')\n          ('packedEnd += offset')\n          ('while (offset < packedEnd) {')\n      }\n\n      if (e.message) {\n        decode('var len = varint.decode(buf, offset)')\n        decode('offset += varint.decode.bytes')\n        if (f.map) {\n          decode('var tmp = enc[%d].decode(buf, offset, offset + len)', i)\n          decode('%s[tmp.key] = tmp.value', val)\n        } else if (f.repeated) {\n          decode('%s.push(enc[%d].decode(buf, offset, offset + len))', val, i)\n        } else {\n          decode('%s = enc[%d].decode(buf, offset, offset + len)', val, i)\n        }\n      } else {\n        if (f.repeated) {\n          decode('%s.push(enc[%d].decode(buf, offset))', val, i)\n        } else {\n          decode('%s = enc[%d].decode(buf, offset)', val, i)\n        }\n      }\n\n      decode('offset += enc[%d].decode.bytes', i)\n\n      if (packed) decode('}')\n      if (f.required) decode('found%d = true', i)\n      decode('break')\n    })\n\n    decode()\n          ('default:')\n          ('offset = skip(prefix & 7, buf, offset)')\n        ('}')\n      ('}')\n    ('}')\n\n    decode = decode.toFunction({\n      varint: varint,\n      skip: skip,\n      enc: enc\n    })\n\n    // end of compilation - return all the things\n\n    encode.bytes = decode.bytes = 0\n\n    exports.buffer = true\n    exports.encode = encode\n    exports.decode = decode\n    exports.encodingLength = encodingLength\n\n    return exports\n  }\n\n  var resolve = function (name, from, compile) {\n    if (extraEncodings && extraEncodings[name]) return extraEncodings[name]\n    if (encodings[name]) return encodings[name]\n\n    var m = (from ? from + '.' + name : name).split('.')\n      .map(function (part, i, list) {\n        return list.slice(0, i).concat(name).join('.')\n      })\n      .reverse()\n      .reduce(function (result, id) {\n        return result || messages[id] || enums[id]\n      }, null)\n\n    if (compile === false) return m\n    if (!m) throw new Error('Could not resolve ' + name)\n\n    if (m.values) return compileEnum(m)\n    return cache[m.id] || compileMessage(m, cache[m.id] = {})\n  }\n\n  return (schema.enums || []).concat((schema.messages || []).map(function (message) {\n    return resolve(message.id)\n  }))\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protocol-buffers/compile.js\n// module id = 216\n// module chunks = 0","var varint = require('varint')\nvar svarint = require('signed-varint')\n\nvar encoder = function (type, encode, decode, encodingLength) {\n  encode.bytes = decode.bytes = 0\n\n  return {\n    type: type,\n    encode: encode,\n    decode: decode,\n    encodingLength: encodingLength\n  }\n}\n\nexports.make = encoder\n\nexports.bytes = (function (tag) {\n  var bufferLength = function (val) {\n    return Buffer.isBuffer(val) ? val.length : Buffer.byteLength(val)\n  }\n\n  var encodingLength = function (val) {\n    var len = bufferLength(val)\n    return varint.encodingLength(len) + len\n  }\n\n  var encode = function (val, buffer, offset) {\n    var oldOffset = offset\n    var len = bufferLength(val)\n\n    varint.encode(len, buffer, offset)\n    offset += varint.encode.bytes\n\n    if (Buffer.isBuffer(val)) val.copy(buffer, offset)\n    else buffer.write(val, offset, len)\n    offset += len\n\n    encode.bytes = offset - oldOffset\n    return buffer\n  }\n\n  var decode = function (buffer, offset) {\n    var oldOffset = offset\n\n    var len = varint.decode(buffer, offset)\n    offset += varint.decode.bytes\n\n    var val = buffer.slice(offset, offset + len)\n    offset += val.length\n\n    decode.bytes = offset - oldOffset\n    return val\n  }\n\n  return encoder(2, encode, decode, encodingLength)\n})()\n\nexports.string = (function () {\n  var encodingLength = function (val) {\n    var len = Buffer.byteLength(val)\n    return varint.encodingLength(len) + len\n  }\n\n  var encode = function (val, buffer, offset) {\n    var oldOffset = offset\n    var len = Buffer.byteLength(val)\n\n    varint.encode(len, buffer, offset, 'utf-8')\n    offset += varint.encode.bytes\n\n    buffer.write(val, offset, len)\n    offset += len\n\n    encode.bytes = offset - oldOffset\n    return buffer\n  }\n\n  var decode = function (buffer, offset) {\n    var oldOffset = offset\n\n    var len = varint.decode(buffer, offset)\n    offset += varint.decode.bytes\n\n    var val = buffer.toString('utf-8', offset, offset + len)\n    offset += len\n\n    decode.bytes = offset - oldOffset\n    return val\n  }\n\n  return encoder(2, encode, decode, encodingLength)\n})()\n\nexports.bool = (function () {\n  var encodingLength = function (val) {\n    return 1\n  }\n\n  var encode = function (val, buffer, offset) {\n    buffer[offset] = val ? 1 : 0\n    encode.bytes = 1\n    return buffer\n  }\n\n  var decode = function (buffer, offset) {\n    var bool = buffer[offset] > 0\n    decode.bytes = 1\n    return bool\n  }\n\n  return encoder(0, encode, decode, encodingLength)\n})()\n\nexports.int32 = (function () {\n  var decode = function (buffer, offset) {\n    var val = varint.decode(buffer, offset)\n    decode.bytes = varint.decode.bytes\n    return val > 2147483647 ? val - 4294967296 : val\n  }\n\n  var encode = function (val, buffer, offset) {\n    varint.encode(val < 0 ? val + 4294967296 : val, buffer, offset)\n    encode.bytes = varint.encode.bytes\n    return buffer\n  }\n\n  var encodingLength = function (val) {\n    return varint.encodingLength(val < 0 ? val + 4294967296 : val)\n  }\n\n  return encoder(0, varint.encode, decode, encodingLength)\n})()\n\nexports.int64 = (function () {\n  var decode = function (buffer, offset) {\n    var val = varint.decode(buffer, offset)\n    if (val >= Math.pow(2, 63)) {\n      var limit = 9\n      while (buffer[offset + limit - 1] === 0xff) limit--\n      limit = limit || 9\n      var subset = new Buffer(limit)\n      buffer.copy(subset, 0, offset, offset + limit)\n      subset[limit - 1] = subset[limit - 1] & 0x7f\n      val = -1 * varint.decode(subset, 0)\n      decode.bytes = 10\n    } else {\n      decode.bytes = varint.decode.bytes\n    }\n    return val\n  }\n\n  var encode = function (val, buffer, offset) {\n    if (val < 0) {\n      var last = offset + 9\n      varint.encode(val * -1, buffer, offset)\n      offset += varint.encode.bytes - 1\n      buffer[offset] = buffer[offset] | 0x80\n      while (offset < last - 1) {\n        offset++\n        buffer[offset] = 0xff\n      }\n      buffer[last] = 0x01\n      encode.bytes = 10\n    } else {\n      varint.encode(val, buffer, offset)\n      encode.bytes = varint.encode.bytes\n    }\n    return buffer\n  }\n\n  var encodingLength = function (val) {\n    return val < 0 ? 10 : varint.encodingLength(val)\n  }\n\n  return encoder(0, encode, decode, encodingLength)\n})()\n\nexports.sint32 =\nexports.sint64 = (function () {\n  return encoder(0, svarint.encode, svarint.decode, svarint.encodingLength)\n})()\n\nexports.uint32 =\nexports.uint64 =\nexports.enum =\nexports.varint = (function () {\n  return encoder(0, varint.encode, varint.decode, varint.encodingLength)\n})()\n\n// we cannot represent these in javascript so we just use buffers\nexports.fixed64 =\nexports.sfixed64 = (function () {\n  var encodingLength = function (val) {\n    return 8\n  }\n\n  var encode = function (val, buffer, offset) {\n    val.copy(buffer, offset)\n    encode.bytes = 8\n    return buffer\n  }\n\n  var decode = function (buffer, offset) {\n    var val = buffer.slice(offset, offset + 8)\n    decode.bytes = 8\n    return val\n  }\n\n  return encoder(1, encode, decode, encodingLength)\n})()\n\nexports.double = (function () {\n  var encodingLength = function (val) {\n    return 8\n  }\n\n  var encode = function (val, buffer, offset) {\n    buffer.writeDoubleLE(val, offset)\n    encode.bytes = 8\n    return buffer\n  }\n\n  var decode = function (buffer, offset) {\n    var val = buffer.readDoubleLE(offset)\n    decode.bytes = 8\n    return val\n  }\n\n  return encoder(1, encode, decode, encodingLength)\n})()\n\nexports.fixed32 = (function () {\n  var encodingLength = function (val) {\n    return 4\n  }\n\n  var encode = function (val, buffer, offset) {\n    buffer.writeUInt32LE(val, offset)\n    encode.bytes = 4\n    return buffer\n  }\n\n  var decode = function (buffer, offset) {\n    var val = buffer.readUInt32LE(offset)\n    decode.bytes = 4\n    return val\n  }\n\n  return encoder(5, encode, decode, encodingLength)\n})()\n\nexports.sfixed32 = (function () {\n  var encodingLength = function (val) {\n    return 4\n  }\n\n  var encode = function (val, buffer, offset) {\n    buffer.writeInt32LE(val, offset)\n    encode.bytes = 4\n    return buffer\n  }\n\n  var decode = function (buffer, offset) {\n    var val = buffer.readInt32LE(offset)\n    decode.bytes = 4\n    return val\n  }\n\n  return encoder(5, encode, decode, encodingLength)\n})()\n\nexports.float = (function () {\n  var encodingLength = function (val) {\n    return 4\n  }\n\n  var encode = function (val, buffer, offset) {\n    buffer.writeFloatLE(val, offset)\n    encode.bytes = 4\n    return buffer\n  }\n\n  var decode = function (buffer, offset) {\n    var val = buffer.readFloatLE(offset)\n    decode.bytes = 4\n    return val\n  }\n\n  return encoder(5, encode, decode, encodingLength)\n})()\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protocol-buffers/encodings.js\n// module id = 217\n// module chunks = 0","var schema = require('protocol-buffers-schema')\nvar compile = require('./compile')\n\nvar flatten = function (values) {\n  if (!values) return null\n  var result = {}\n  Object.keys(values).forEach(function (k) {\n    result[k] = values[k].value\n  })\n  return result\n}\n\nmodule.exports = function (proto, opts) {\n  if (!opts) opts = {}\n  if (!proto) throw new Error('Pass in a .proto string or a protobuf-schema parsed object')\n\n  var sch = (typeof proto === 'object' && !Buffer.isBuffer(proto)) ? proto : schema.parse(proto)\n\n  // to not make toString,toJSON enumarable we make a fire-and-forget prototype\n  var Messages = function () {\n    var self = this\n\n    compile(sch, opts.encodings || {}).forEach(function (m) {\n      self[m.name] = flatten(m.values) || m\n    })\n  }\n\n  Messages.prototype.toString = function () {\n    return schema.stringify(sch)\n  }\n\n  Messages.prototype.toJSON = function () {\n    return sch\n  }\n\n  return new Messages()\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protocol-buffers/index.js\n// module id = 218\n// module chunks = 0","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protocol-buffers/~/varint/decode.js\n// module id = 219\n// module chunks = 0","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protocol-buffers/~/varint/encode.js\n// module id = 220\n// module chunks = 0","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/protocol-buffers/~/varint/length.js\n// module id = 221\n// module chunks = 0","\nmodule.exports = function () {\n  var _read, _cb, abortCb, _end\n\n  var read = function (end, cb) {\n    if(!_read) {\n      if(end) {\n        _end = end\n        abortCb = cb\n      }\n      else\n        _cb = cb\n    }\n    else _read(end, cb)\n  }\n  read.resolve = function (read) {\n    if(_read) throw new Error('already resolved')\n    _read = read\n    if(!_read) throw new Error('no read cannot resolve!' + _read)\n    if(_cb) read(null, _cb)\n    if(abortCb) read(_end, abortCb)\n  }\n  read.abort = function(err) {\n    read.resolve(function (_, cb) {\n      cb(err || true)\n    })\n  }\n  return read\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-defer/source.js\n// module id = 222\n// module chunks = 0","'use strict'\n\nmodule.exports = function pull (a) {\n  var length = arguments.length\n  if (typeof a === 'function' && a.length === 1) {\n    var args = new Array(length)\n    for(var i = 0; i < length; i++)\n      args[i] = arguments[i]\n    return function (read) {\n      if (args == null) {\n        throw new TypeError(\"partial sink should only be called once!\")\n      }\n\n      // Grab the reference after the check, because it's always an array now\n      // (engines like that kind of consistency).\n      var ref = args\n      args = null\n\n      // Prioritize common case of small number of pulls.\n      switch (length) {\n      case 1: return pull(read, ref[0])\n      case 2: return pull(read, ref[0], ref[1])\n      case 3: return pull(read, ref[0], ref[1], ref[2])\n      case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])\n      default:\n        ref.unshift(read)\n        return pull.apply(null, ref)\n      }\n    }\n  }\n\n  var read = a\n\n  if (read && typeof read.source === 'function') {\n    read = read.source\n  }\n\n  for (var i = 1; i < length; i++) {\n    var s = arguments[i]\n    if (typeof s === 'function') {\n      read = s(read)\n    } else if (s && typeof s === 'object') {\n      s.sink(read)\n      read = s.source\n    }\n  }\n\n  return read\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/pull.js\n// module id = 223\n// module chunks = 0","'use strict'\n\nvar reduce = require('./reduce')\n\nmodule.exports = function collect (cb) {\n  return reduce(function (arr, item) {\n    arr.push(item)\n    return arr\n  }, [], cb)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sinks/collect.js\n// module id = 224\n// module chunks = 0","'use strict'\n\nvar reduce = require('./reduce')\n\nmodule.exports = function concat (cb) {\n  return reduce(function (a, b) {\n    return a + b\n  }, '', cb)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sinks/concat.js\n// module id = 225\n// module chunks = 0","'use strict'\n\nfunction id (e) { return e }\nvar prop = require('../util/prop')\nvar drain = require('./drain')\n\nmodule.exports = function find (test, cb) {\n  var ended = false\n  if(!cb)\n    cb = test, test = id\n  else\n    test = prop(test) || id\n\n  return drain(function (data) {\n    if(test(data)) {\n      ended = true\n      cb(null, data)\n    return false\n    }\n  }, function (err) {\n    if(ended) return //already called back\n    cb(err === true ? null : err, null)\n  })\n}\n\n\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sinks/find.js\n// module id = 226\n// module chunks = 0","'use strict'\n\nmodule.exports = {\n  drain: require('./drain'),\n  onEnd: require('./on-end'),\n  log: require('./log'),\n  find: require('./find'),\n  reduce: require('./reduce'),\n  collect: require('./collect'),\n  concat: require('./concat')\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sinks/index.js\n// module id = 227\n// module chunks = 0","'use strict'\n\nvar drain = require('./drain')\n\nmodule.exports = function log (done) {\n  return drain(function (data) {\n    console.log(data)\n  }, done)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sinks/log.js\n// module id = 228\n// module chunks = 0","'use strict'\n\nvar drain = require('./drain')\n\nmodule.exports = function onEnd (done) {\n  return drain(null, done)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sinks/on-end.js\n// module id = 229\n// module chunks = 0","'use strict'\n\nmodule.exports = function count (max) {\n  var i = 0; max = max || Infinity\n  return function (end, cb) {\n    if(end) return cb && cb(end)\n    if(i > max)\n      return cb(true)\n    cb(null, i++)\n  }\n}\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sources/count.js\n// module id = 230\n// module chunks = 0","'use strict'\n//a stream that ends immediately.\nmodule.exports = function empty () {\n  return function (abort, cb) {\n    cb(true)\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sources/empty.js\n// module id = 231\n// module chunks = 0","'use strict'\n//a stream that errors immediately.\nmodule.exports = function error (err) {\n  return function (abort, cb) {\n    cb(err)\n  }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sources/error.js\n// module id = 232\n// module chunks = 0","'use strict'\nmodule.exports = {\n  keys: require('./keys'),\n  once: require('./once'),\n  values: require('./values'),\n  count: require('./count'),\n  infinite: require('./infinite'),\n  empty: require('./empty'),\n  error: require('./error')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sources/index.js\n// module id = 233\n// module chunks = 0","'use strict'\nmodule.exports = function infinite (generate) {\n  generate = generate || Math.random\n  return function (end, cb) {\n    if(end) return cb && cb(end)\n    return cb(null, generate())\n  }\n}\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sources/infinite.js\n// module id = 234\n// module chunks = 0","'use strict'\nvar values = require('./values')\nmodule.exports = function (object) {\n  return values(Object.keys(object))\n}\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/sources/keys.js\n// module id = 235\n// module chunks = 0","'use strict'\n\nfunction id (e) { return e }\nvar prop = require('../util/prop')\n\nmodule.exports = function asyncMap (map) {\n  if(!map) return id\n  map = prop(map)\n  var busy = false, abortCb, aborted\n  return function (read) {\n    return function next (abort, cb) {\n      if(aborted) return cb(aborted)\n      if(abort) {\n        aborted = abort\n        if(!busy) read(abort, cb)\n        else read(abort, function () {\n          //if we are still busy, wait for the mapper to complete.\n          if(busy) abortCb = cb\n          else cb(abort)\n        })\n      }\n      else\n        read(null, function (end, data) {\n          if(end) cb(end)\n          else if(aborted) cb(aborted)\n          else {\n            busy = true\n            map(data, function (err, data) {\n              busy = false\n              if(aborted) {\n                cb(aborted)\n                abortCb(aborted)\n              }\n              else if(err) next (err, cb)\n              else cb(null, data)\n            })\n          }\n        })\n    }\n  }\n}\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/throughs/async-map.js\n// module id = 236\n// module chunks = 0","'use strict'\n\nvar tester = require('../util/tester')\nvar filter = require('./filter')\n\nmodule.exports = function filterNot (test) {\n  test = tester(test)\n  return filter(function (data) { return !test(data) })\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/throughs/filter-not.js\n// module id = 237\n// module chunks = 0","'use strict'\n\nvar values = require('../sources/values')\nvar once = require('../sources/once')\n\n//convert a stream of arrays or streams into just a stream.\nmodule.exports = function flatten () {\n  return function (read) {\n    var _read\n    return function (abort, cb) {\n      if (abort) { //abort the current stream, and then stream of streams.\n        _read ? _read(abort, function(err) {\n          read(err || abort, cb)\n        }) : read(abort, cb)\n      }\n      else if(_read) nextChunk()\n      else nextStream()\n\n      function nextChunk () {\n        _read(null, function (err, data) {\n          if (err === true) nextStream()\n          else if (err) {\n            read(true, function(abortErr) {\n              // TODO: what do we do with the abortErr?\n              cb(err)\n            })\n          }\n          else cb(null, data)\n        })\n      }\n      function nextStream () {\n        _read = null\n        read(null, function (end, stream) {\n          if(end)\n            return cb(end)\n          if(Array.isArray(stream) || stream && 'object' === typeof stream)\n            stream = values(stream)\n          else if('function' != typeof stream)\n            stream = once(stream)\n          _read = stream\n          nextChunk()\n        })\n      }\n    }\n  }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/throughs/flatten.js\n// module id = 238\n// module chunks = 0","'use strict'\n\nmodule.exports = {\n  map: require('./map'),\n  asyncMap: require('./async-map'),\n  filter: require('./filter'),\n  filterNot: require('./filter-not'),\n  through: require('./through'),\n  take: require('./take'),\n  unique: require('./unique'),\n  nonUnique: require('./non-unique'),\n  flatten: require('./flatten')\n}\n\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/throughs/index.js\n// module id = 239\n// module chunks = 0","'use strict'\n\nfunction id (e) { return e }\nvar prop = require('../util/prop')\n\nmodule.exports = function map (mapper) {\n  if(!mapper) return id\n  mapper = prop(mapper)\n  return function (read) {\n    return function (abort, cb) {\n      read(abort, function (end, data) {\n        try {\n        data = !end ? mapper(data) : null\n        } catch (err) {\n          return read(err, function () {\n            return cb(err)\n          })\n        }\n        cb(end, data)\n      })\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/throughs/map.js\n// module id = 240\n// module chunks = 0","'use strict'\n\nvar unique = require('./unique')\n\n//passes an item through when you see it for the second time.\nmodule.exports = function nonUnique (field) {\n  return unique(field, true)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/throughs/non-unique.js\n// module id = 241\n// module chunks = 0","'use strict'\n\n//read a number of items and then stop.\nmodule.exports = function take (test, opts) {\n  opts = opts || {}\n  var last = opts.last || false // whether the first item for which !test(item) should still pass\n  var ended = false\n  if('number' === typeof test) {\n    last = true\n    var n = test; test = function () {\n      return --n\n    }\n  }\n\n  return function (read) {\n\n    function terminate (cb) {\n      read(true, function (err) {\n        last = false; cb(err || true)\n      })\n    }\n\n    return function (end, cb) {\n      if(ended)            last ? terminate(cb) : cb(ended)\n      else if(ended = end) read(ended, cb)\n      else\n        read(null, function (end, data) {\n          if(ended = ended || end) {\n            //last ? terminate(cb) :\n            cb(ended)\n          }\n          else if(!test(data)) {\n            ended = true\n            last ? cb(null, data) : terminate(cb)\n          }\n          else\n            cb(null, data)\n        })\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/throughs/take.js\n// module id = 242\n// module chunks = 0","'use strict'\n\n//a pass through stream that doesn't change the value.\nmodule.exports = function through (op, onEnd) {\n  var a = false\n\n  function once (abort) {\n    if(a || !onEnd) return\n    a = true\n    onEnd(abort === true ? null : abort)\n  }\n\n  return function (read) {\n    return function (end, cb) {\n      if(end) once(end)\n      return read(end, function (end, data) {\n        if(!end) op && op(data)\n        else once(end)\n        cb(end, data)\n      })\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pull-stream/throughs/through.js\n// module id = 243\n// module chunks = 0","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/punycode/punycode.js\n// module id = 244\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/querystring-es3/decode.js\n// module id = 245\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/querystring-es3/encode.js\n// module id = 246\n// module chunks = 0","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/querystring-es3/index.js\n// module id = 247\n// module chunks = 0","module.exports = require(\"./lib/_stream_duplex.js\")\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/readable-stream/duplex.js\n// module id = 248\n// module chunks = 0","'use strict';\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\nmodule.exports = BufferList;\n\nfunction BufferList() {\n  this.head = null;\n  this.tail = null;\n  this.length = 0;\n}\n\nBufferList.prototype.push = function (v) {\n  var entry = { data: v, next: null };\n  if (this.length > 0) this.tail.next = entry;else this.head = entry;\n  this.tail = entry;\n  ++this.length;\n};\n\nBufferList.prototype.unshift = function (v) {\n  var entry = { data: v, next: this.head };\n  if (this.length === 0) this.tail = entry;\n  this.head = entry;\n  ++this.length;\n};\n\nBufferList.prototype.shift = function () {\n  if (this.length === 0) return;\n  var ret = this.head.data;\n  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n  --this.length;\n  return ret;\n};\n\nBufferList.prototype.clear = function () {\n  this.head = this.tail = null;\n  this.length = 0;\n};\n\nBufferList.prototype.join = function (s) {\n  if (this.length === 0) return '';\n  var p = this.head;\n  var ret = '' + p.data;\n  while (p = p.next) {\n    ret += s + p.data;\n  }return ret;\n};\n\nBufferList.prototype.concat = function (n) {\n  if (this.length === 0) return bufferShim.alloc(0);\n  if (this.length === 1) return this.head.data;\n  var ret = bufferShim.allocUnsafe(n >>> 0);\n  var p = this.head;\n  var i = 0;\n  while (p) {\n    p.data.copy(ret, i);\n    i += p.data.length;\n    p = p.next;\n  }\n  return ret;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/readable-stream/lib/internal/streams/BufferList.js\n// module id = 249\n// module chunks = 0","module.exports = require(\"./lib/_stream_passthrough.js\")\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/readable-stream/passthrough.js\n// module id = 250\n// module chunks = 0","var Stream = (function (){\n  try {\n    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify\n  } catch(_){}\n}());\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = Stream || exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\nif (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {\n  module.exports = Stream;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/readable-stream/readable.js\n// module id = 251\n// module chunks = 0","module.exports = require(\"./lib/_stream_transform.js\")\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/readable-stream/transform.js\n// module id = 252\n// module chunks = 0","module.exports = require(\"./lib/_stream_writable.js\")\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/readable-stream/writable.js\n// module id = 253\n// module chunks = 0","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/** @preserve\n(c) 2012 by Cédric Mesnil. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n// constants table\nvar zl = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n]\n\nvar zr = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n]\n\nvar sl = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n]\n\nvar sr = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n]\n\nvar hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]\nvar hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]\n\nfunction bytesToWords (bytes) {\n  var words = []\n  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n    words[b >>> 5] |= bytes[i] << (24 - b % 32)\n  }\n  return words\n}\n\nfunction wordsToBytes (words) {\n  var bytes = []\n  for (var b = 0; b < words.length * 32; b += 8) {\n    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)\n  }\n  return bytes\n}\n\nfunction processBlock (H, M, offset) {\n  // swap endian\n  for (var i = 0; i < 16; i++) {\n    var offset_i = offset + i\n    var M_offset_i = M[offset_i]\n\n    // Swap\n    M[offset_i] = (\n      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |\n      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)\n    )\n  }\n\n  // Working variables\n  var al, bl, cl, dl, el\n  var ar, br, cr, dr, er\n\n  ar = al = H[0]\n  br = bl = H[1]\n  cr = cl = H[2]\n  dr = dl = H[3]\n  er = el = H[4]\n\n  // computation\n  var t\n  for (i = 0; i < 80; i += 1) {\n    t = (al + M[offset + zl[i]]) | 0\n    if (i < 16) {\n      t += f1(bl, cl, dl) + hl[0]\n    } else if (i < 32) {\n      t += f2(bl, cl, dl) + hl[1]\n    } else if (i < 48) {\n      t += f3(bl, cl, dl) + hl[2]\n    } else if (i < 64) {\n      t += f4(bl, cl, dl) + hl[3]\n    } else {// if (i<80) {\n      t += f5(bl, cl, dl) + hl[4]\n    }\n    t = t | 0\n    t = rotl(t, sl[i])\n    t = (t + el) | 0\n    al = el\n    el = dl\n    dl = rotl(cl, 10)\n    cl = bl\n    bl = t\n\n    t = (ar + M[offset + zr[i]]) | 0\n    if (i < 16) {\n      t += f5(br, cr, dr) + hr[0]\n    } else if (i < 32) {\n      t += f4(br, cr, dr) + hr[1]\n    } else if (i < 48) {\n      t += f3(br, cr, dr) + hr[2]\n    } else if (i < 64) {\n      t += f2(br, cr, dr) + hr[3]\n    } else {// if (i<80) {\n      t += f1(br, cr, dr) + hr[4]\n    }\n\n    t = t | 0\n    t = rotl(t, sr[i])\n    t = (t + er) | 0\n    ar = er\n    er = dr\n    dr = rotl(cr, 10)\n    cr = br\n    br = t\n  }\n\n  // intermediate hash value\n  t = (H[1] + cl + dr) | 0\n  H[1] = (H[2] + dl + er) | 0\n  H[2] = (H[3] + el + ar) | 0\n  H[3] = (H[4] + al + br) | 0\n  H[4] = (H[0] + bl + cr) | 0\n  H[0] = t\n}\n\nfunction f1 (x, y, z) {\n  return ((x) ^ (y) ^ (z))\n}\n\nfunction f2 (x, y, z) {\n  return (((x) & (y)) | ((~x) & (z)))\n}\n\nfunction f3 (x, y, z) {\n  return (((x) | (~(y))) ^ (z))\n}\n\nfunction f4 (x, y, z) {\n  return (((x) & (z)) | ((y) & (~(z))))\n}\n\nfunction f5 (x, y, z) {\n  return ((x) ^ ((y) | (~(z))))\n}\n\nfunction rotl (x, n) {\n  return (x << n) | (x >>> (32 - n))\n}\n\nfunction ripemd160 (message) {\n  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]\n\n  if (typeof message === 'string') {\n    message = new Buffer(message, 'utf8')\n  }\n\n  var m = bytesToWords(message)\n\n  var nBitsLeft = message.length * 8\n  var nBitsTotal = message.length * 8\n\n  // Add padding\n  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)\n  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |\n    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)\n  )\n\n  for (var i = 0; i < m.length; i += 16) {\n    processBlock(H, m, i)\n  }\n\n  // swap endian\n  for (i = 0; i < 5; i++) {\n    // shortcut\n    var H_i = H[i]\n\n    // Swap\n    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |\n      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)\n  }\n\n  var digestbytes = wordsToBytes(H)\n  return new Buffer(digestbytes)\n}\n\nmodule.exports = ripemd160\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ripemd160/lib/ripemd160.js\n// module id = 254\n// module chunks = 0","const assert = require('assert')\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n *\n * @param {Buffer,String,Integer,Array} data - will be converted to buffer\n * @returns {Buffer} - returns buffer of encoded data\n **/\nexports.encode = function (input) {\n  if (input instanceof Array) {\n    var output = []\n    for (var i = 0; i < input.length; i++) {\n      output.push(exports.encode(input[i]))\n    }\n    var buf = Buffer.concat(output)\n    return Buffer.concat([encodeLength(buf.length, 192), buf])\n  } else {\n    input = toBuffer(input)\n    if (input.length === 1 && input[0] < 128) {\n      return input\n    } else {\n      return Buffer.concat([encodeLength(input.length, 128), input])\n    }\n  }\n}\n\nfunction safeParseInt (v, base) {\n  if (v.slice(0, 2) === '00') {\n    throw (new Error('invalid RLP: extra zeros'))\n  }\n\n  return parseInt(v, base)\n}\n\nfunction encodeLength (len, offset) {\n  if (len < 56) {\n    return new Buffer([len + offset])\n  } else {\n    var hexLength = intToHex(len)\n    var lLength = hexLength.length / 2\n    var firstByte = intToHex(offset + 55 + lLength)\n    return new Buffer(firstByte + hexLength, 'hex')\n  }\n}\n\n/**\n * RLP Decoding based on: {@link https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP|RLP}\n * @param {Buffer,String,Integer,Array} data - will be converted to buffer\n * @returns {Array} - returns decode Array of Buffers containg the original message\n **/\nexports.decode = function (input, stream) {\n  if (!input || input.length === 0) {\n    return new Buffer([])\n  }\n\n  input = toBuffer(input)\n  var decoded = _decode(input)\n\n  if (stream) {\n    return decoded\n  }\n\n  assert.equal(decoded.remainder.length, 0, 'invalid remainder')\n  return decoded.data\n}\n\nexports.getLength = function (input) {\n  if (!input || input.length === 0) {\n    return new Buffer([])\n  }\n\n  input = toBuffer(input)\n  var firstByte = input[0]\n  if (firstByte <= 0x7f) {\n    return input.length\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf\n  } else {\n    // a list  over 55 bytes long\n    var llength = firstByte - 0xf6\n    var length = safeParseInt(input.slice(1, llength).toString('hex'), 16)\n    return llength + length\n  }\n}\n\nfunction _decode (input) {\n  var length, llength, data, innerRemainder, d\n  var decoded = []\n  var firstByte = input[0]\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    }\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f\n\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = new Buffer([])\n    } else {\n      data = input.slice(1, length)\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid rlp encoding: byte must be less 0x80')\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length)\n    }\n  } else if (firstByte <= 0xbf) {\n    llength = firstByte - 0xb6\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16)\n    data = input.slice(llength, length + llength)\n    if (data.length < length) {\n      throw (new Error('invalid RLP'))\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    }\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf\n    innerRemainder = input.slice(1, length)\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    }\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16)\n    var totalLength = llength + length\n    if (totalLength > input.length) {\n      throw new Error('invalid rlp: total length is larger than the data')\n    }\n\n    innerRemainder = input.slice(llength, totalLength)\n    if (innerRemainder.length === 0) {\n      throw new Error('invalid rlp, List has a invalid length')\n    }\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder)\n      decoded.push(d.data)\n      innerRemainder = d.remainder\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    }\n  }\n}\n\nfunction isHexPrefixed (str) {\n  return str.slice(0, 2) === '0x'\n}\n\n// Removes 0x from a given String\nfunction stripHexPrefix (str) {\n  if (typeof str !== 'string') {\n    return str\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str\n}\n\nfunction intToHex (i) {\n  var hex = i.toString(16)\n  if (hex.length % 2) {\n    hex = '0' + hex\n  }\n\n  return hex\n}\n\nfunction padToEven (a) {\n  if (a.length % 2) a = '0' + a\n  return a\n}\n\nfunction intToBuffer (i) {\n  var hex = intToHex(i)\n  return new Buffer(hex, 'hex')\n}\n\nfunction toBuffer (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (typeof v === 'string') {\n      if (isHexPrefixed(v)) {\n        v = new Buffer(padToEven(stripHexPrefix(v)), 'hex')\n      } else {\n        v = new Buffer(v)\n      }\n    } else if (typeof v === 'number') {\n      if (!v) {\n        v = new Buffer([])\n      } else {\n        v = intToBuffer(v)\n      }\n    } else if (v === null || v === undefined) {\n      v = new Buffer([])\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = new Buffer(v.toArray())\n    } else {\n      throw new Error('invalid type')\n    }\n  }\n  return v\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rlp/index.js\n// module id = 255\n// module chunks = 0","module.exports = require('buffer')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/safe-buffer/browser.js\n// module id = 256\n// module chunks = 0","'use strict'\nmodule.exports = require('./lib')(require('./lib/elliptic'))\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/secp256k1/elliptic.js\n// module id = 257\n// module chunks = 0","'use strict'\nvar toString = Object.prototype.toString\n\n// TypeError\nexports.isArray = function (value, message) {\n  if (!Array.isArray(value)) throw TypeError(message)\n}\n\nexports.isBoolean = function (value, message) {\n  if (toString.call(value) !== '[object Boolean]') throw TypeError(message)\n}\n\nexports.isBuffer = function (value, message) {\n  if (!Buffer.isBuffer(value)) throw TypeError(message)\n}\n\nexports.isFunction = function (value, message) {\n  if (toString.call(value) !== '[object Function]') throw TypeError(message)\n}\n\nexports.isNumber = function (value, message) {\n  if (toString.call(value) !== '[object Number]') throw TypeError(message)\n}\n\nexports.isObject = function (value, message) {\n  if (toString.call(value) !== '[object Object]') throw TypeError(message)\n}\n\n// RangeError\nexports.isBufferLength = function (buffer, length, message) {\n  if (buffer.length !== length) throw RangeError(message)\n}\n\nexports.isBufferLength2 = function (buffer, length1, length2, message) {\n  if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message)\n}\n\nexports.isLengthGTZero = function (value, message) {\n  if (value.length === 0) throw RangeError(message)\n}\n\nexports.isNumberInInterval = function (number, x, y, message) {\n  if (number <= x || number >= y) throw RangeError(message)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/secp256k1/lib/assert.js\n// module id = 258\n// module chunks = 0","'use strict'\nvar bip66 = require('bip66')\n\nvar EC_PRIVKEY_EXPORT_DER_COMPRESSED = new Buffer([\n  // begin\n  0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,\n  // private key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  // middle\n  0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,\n  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,\n  0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,\n  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,\n  0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,\n  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,\n  // public key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00\n])\n\nvar EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = new Buffer([\n  // begin\n  0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,\n  // private key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  // middle\n  0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,\n  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,\n  0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,\n  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,\n  0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,\n  0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,\n  0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,\n  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,\n  // public key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00\n])\n\nvar ZERO_BUFFER_32 = new Buffer([\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n])\n\nexports.privateKeyExport = function (privateKey, publicKey, compressed) {\n  var result = new Buffer(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED)\n  privateKey.copy(result, compressed ? 8 : 9)\n  publicKey.copy(result, compressed ? 181 : 214)\n  return result\n}\n\nexports.privateKeyImport = function (privateKey) {\n  var length = privateKey.length\n\n  // sequence header\n  var index = 0\n  if (length < index + 1 || privateKey[index] !== 0x30) return\n  index += 1\n\n  // sequence length constructor\n  if (length < index + 1 || !(privateKey[index] & 0x80)) return\n\n  var lenb = privateKey[index] & 0x7f\n  index += 1\n  if (lenb < 1 || lenb > 2) return\n  if (length < index + lenb) return\n\n  // sequence length\n  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0)\n  index += lenb\n  if (length < index + len) return\n\n  // sequence element 0: version number (=1)\n  if (length < index + 3 ||\n      privateKey[index] !== 0x02 ||\n      privateKey[index + 1] !== 0x01 ||\n      privateKey[index + 2] !== 0x01) {\n    return\n  }\n  index += 3\n\n  // sequence element 1: octet string, up to 32 bytes\n  if (length < index + 2 ||\n      privateKey[index] !== 0x04 ||\n      privateKey[index + 1] > 0x20 ||\n      length < index + 2 + privateKey[index + 1]) {\n    return\n  }\n\n  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])\n}\n\nexports.signatureExport = function (sigObj) {\n  var r = Buffer.concat([new Buffer([0]), sigObj.r])\n  for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n  var s = Buffer.concat([new Buffer([0]), sigObj.s])\n  for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n  return bip66.encode(r.slice(posR), s.slice(posS))\n}\n\nexports.signatureImport = function (sig) {\n  var r = new Buffer(ZERO_BUFFER_32)\n  var s = new Buffer(ZERO_BUFFER_32)\n\n  try {\n    var sigObj = bip66.decode(sig)\n    if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1)\n    if (sigObj.r.length > 32) throw new Error('R length is too long')\n    if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1)\n    if (sigObj.s.length > 32) throw new Error('S length is too long')\n  } catch (err) {\n    return\n  }\n\n  sigObj.r.copy(r, 32 - sigObj.r.length)\n  sigObj.s.copy(s, 32 - sigObj.s.length)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImportLax = function (sig) {\n  var r = new Buffer(ZERO_BUFFER_32)\n  var s = new Buffer(ZERO_BUFFER_32)\n\n  var length = sig.length\n  var index = 0\n\n  // sequence tag byte\n  if (sig[index++] !== 0x30) return\n\n  // sequence length byte\n  var lenbyte = sig[index++]\n  if (lenbyte & 0x80) {\n    index += lenbyte - 0x80\n    if (index > length) return\n  }\n\n  // sequence tag byte for r\n  if (sig[index++] !== 0x02) return\n\n  // length for r\n  var rlen = sig[index++]\n  if (rlen & 0x80) {\n    lenbyte = rlen - 0x80\n    if (index + lenbyte > length) return\n    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);\n    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index]\n  }\n  if (rlen > length - index) return\n  var rindex = index\n  index += rlen\n\n  // sequence tag byte for s\n  if (sig[index++] !== 0x02) return\n\n  // length for s\n  var slen = sig[index++]\n  if (slen & 0x80) {\n    lenbyte = slen - 0x80\n    if (index + lenbyte > length) return\n    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);\n    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index]\n  }\n  if (slen > length - index) return\n  var sindex = index\n  index += slen\n\n  // ignore leading zeros in r\n  for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);\n  // copy r value\n  if (rlen > 32) return\n  var rvalue = sig.slice(rindex, rindex + rlen)\n  rvalue.copy(r, 32 - rvalue.length)\n\n  // ignore leading zeros in s\n  for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);\n  // copy s value\n  if (slen > 32) return\n  var svalue = sig.slice(sindex, sindex + slen)\n  svalue.copy(s, 32 - svalue.length)\n\n  return { r: r, s: s }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/secp256k1/lib/der.js\n// module id = 259\n// module chunks = 0","'use strict'\nvar createHash = require('create-hash')\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\n\nvar messages = require('../messages.json')\n\nvar ec = new EC('secp256k1')\nvar ecparams = ec.curve\n\nfunction loadCompressedPublicKey (first, xBuffer) {\n  var x = new BN(xBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xBuffer, yBuffer) {\n  var x = new BN(xBuffer)\n  var y = new BN(yBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  var x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (publicKey) {\n  var first = publicKey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (publicKey.length !== 33) return null\n      return loadCompressedPublicKey(first, publicKey.slice(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (publicKey.length !== 65) return null\n      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))\n    default:\n      return null\n  }\n}\n\nexports.privateKeyVerify = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.cmp(ecparams.n) < 0 && !bn.isZero()\n}\n\nexports.privateKeyExport = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)\n\n  return new Buffer(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  bn.iadd(new BN(privateKey))\n  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)\n\n  bn.imul(new BN(privateKey))\n  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.publicKeyCreate = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)\n\n  return new Buffer(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.publicKeyConvert = function (publicKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return new Buffer(pair.getPublic(compressed, true))\n}\n\nexports.publicKeyVerify = function (publicKey) {\n  return loadPublicKey(publicKey) !== null\n}\n\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  return new Buffer(ecparams.g.mul(tweak).add(pair.pub).encode(true, compressed))\n}\n\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)\n\n  return new Buffer(pair.pub.mul(tweak).encode(true, compressed))\n}\n\nexports.publicKeyCombine = function (publicKeys, compressed) {\n  var pairs = new Array(publicKeys.length)\n  for (var i = 0; i < publicKeys.length; ++i) {\n    pairs[i] = loadPublicKey(publicKeys[i])\n    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n  }\n\n  var point = pairs[0].pub\n  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)\n\n  return new Buffer(point.encode(true, compressed))\n}\n\nexports.signatureNormalize = function (signature) {\n  var r = new BN(signature.slice(0, 32))\n  var s = new BN(signature.slice(32, 64))\n  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  var result = new Buffer(signature)\n  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)\n\n  return result\n}\n\nexports.signatureExport = function (signature) {\n  var r = signature.slice(0, 32)\n  var s = signature.slice(32, 64)\n  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImport = function (sigObj) {\n  var r = new BN(sigObj.r)\n  if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n  var s = new BN(sigObj.s)\n  if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n  return Buffer.concat([\n    r.toArrayLike(Buffer, 'be', 32),\n    s.toArrayLike(Buffer, 'be', 32)\n  ])\n}\n\nexports.sign = function (message, privateKey, noncefn, data) {\n  if (typeof noncefn === 'function') {\n    var getNonce = noncefn\n    noncefn = function (counter) {\n      var nonce = getNonce(message, privateKey, null, data, counter)\n      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n      return new BN(nonce)\n    }\n  }\n\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })\n  return {\n    signature: Buffer.concat([\n      result.r.toArrayLike(Buffer, 'be', 32),\n      result.s.toArrayLike(Buffer, 'be', 32)\n    ]),\n    recovery: result.recoveryParam\n  }\n}\n\nexports.verify = function (message, signature, publicKey) {\n  var sigObj = {r: signature.slice(0, 32), s: signature.slice(32, 64)}\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false\n\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return ec.verify(message, sigObj, {x: pair.pub.x, y: pair.pub.y})\n}\n\nexports.recover = function (message, signature, recovery, compressed) {\n  var sigObj = {r: signature.slice(0, 32), s: signature.slice(32, 64)}\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  try {\n    if (sigr.isZero() || sigs.isZero()) throw new Error()\n\n    var point = ec.recoverPubKey(message, sigObj, recovery)\n    return new Buffer(point.encode(true, compressed))\n  } catch (err) {\n    throw new Error(messages.ECDSA_RECOVER_FAIL)\n  }\n}\n\nexports.ecdh = function (publicKey, privateKey) {\n  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)\n  return createHash('sha256').update(shared).digest()\n}\n\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  var scalar = new BN(privateKey)\n  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)\n\n  return new Buffer(pair.pub.mul(scalar).encode(true, compressed))\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/secp256k1/lib/elliptic/index.js\n// module id = 260\n// module chunks = 0","'use strict'\nvar assert = require('./assert')\nvar der = require('./der')\nvar messages = require('./messages.json')\n\nfunction initCompressedValue (value, defaultValue) {\n  if (value === undefined) return defaultValue\n\n  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)\n  return value\n}\n\nmodule.exports = function (secp256k1) {\n  return {\n    privateKeyVerify: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)\n    },\n\n    privateKeyExport: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)\n\n      return der.privateKeyExport(privateKey, publicKey, compressed)\n    },\n\n    privateKeyImport: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n\n      privateKey = der.privateKeyImport(privateKey)\n      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey\n\n      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)\n    },\n\n    privateKeyTweakAdd: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakAdd(privateKey, tweak)\n    },\n\n    privateKeyTweakMul: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakMul(privateKey, tweak)\n    },\n\n    publicKeyCreate: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCreate(privateKey, compressed)\n    },\n\n    publicKeyConvert: function (publicKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyConvert(publicKey, compressed)\n    },\n\n    publicKeyVerify: function (publicKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      return secp256k1.publicKeyVerify(publicKey)\n    },\n\n    publicKeyTweakAdd: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)\n    },\n\n    publicKeyTweakMul: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)\n    },\n\n    publicKeyCombine: function (publicKeys, compressed) {\n      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)\n      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)\n      for (var i = 0; i < publicKeys.length; ++i) {\n        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)\n        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n      }\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCombine(publicKeys, compressed)\n    },\n\n    signatureNormalize: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      return secp256k1.signatureNormalize(signature)\n    },\n\n    signatureExport: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = secp256k1.signatureExport(signature)\n      return der.signatureExport(sigObj)\n    },\n\n    signatureImport: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImport(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    signatureImportLax: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImportLax(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    sign: function (message, privateKey, options) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      var data = null\n      var noncefn = null\n      if (options !== undefined) {\n        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)\n\n        if (options.data !== undefined) {\n          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)\n          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)\n          data = options.data\n        }\n\n        if (options.noncefn !== undefined) {\n          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)\n          noncefn = options.noncefn\n        }\n      }\n\n      return secp256k1.sign(message, privateKey, noncefn, data)\n    },\n\n    verify: function (message, signature, publicKey) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      return secp256k1.verify(message, signature, publicKey)\n    },\n\n    recover: function (message, signature, recovery, compressed) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)\n      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.recover(message, signature, recovery, compressed)\n    },\n\n    ecdh: function (publicKey, privateKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.ecdh(publicKey, privateKey)\n    },\n\n    ecdhUnsafe: function (publicKey, privateKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)\n    }\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/secp256k1/lib/index.js\n// module id = 261\n// module chunks = 0","var exports = module.exports = function SHA (algorithm) {\n  algorithm = algorithm.toLowerCase()\n\n  var Algorithm = exports[algorithm]\n  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')\n\n  return new Algorithm()\n}\n\nexports.sha = require('./sha')\nexports.sha1 = require('./sha1')\nexports.sha224 = require('./sha224')\nexports.sha256 = require('./sha256')\nexports.sha384 = require('./sha384')\nexports.sha512 = require('./sha512')\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/sha.js/index.js\n// module id = 262\n// module chunks = 0","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined\n * in FIPS PUB 180-1\n * This source code is derived from sha1.js of the same repository.\n * The difference between SHA-0 and SHA-1 is just a bitwise rotate left\n * operation was added.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha, Hash)\n\nSha.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha.prototype._hash = function () {\n  var H = new Buffer(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/sha.js/sha.js\n// module id = 263\n// module chunks = 0","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha1 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha1, Hash)\n\nSha1.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl1 (num) {\n  return (num << 1) | (num >>> 31)\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha1.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha1.prototype._hash = function () {\n  var H = new Buffer(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha1\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/sha.js/sha1.js\n// module id = 264\n// module chunks = 0","/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Sha256 = require('./sha256')\nvar Hash = require('./hash')\n\nvar W = new Array(64)\n\nfunction Sha224 () {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha224, Sha256)\n\nSha224.prototype.init = function () {\n  this._a = 0xc1059ed8\n  this._b = 0x367cd507\n  this._c = 0x3070dd17\n  this._d = 0xf70e5939\n  this._e = 0xffc00b31\n  this._f = 0x68581511\n  this._g = 0x64f98fa7\n  this._h = 0xbefa4fa4\n\n  return this\n}\n\nSha224.prototype._hash = function () {\n  var H = new Buffer(28)\n\n  H.writeInt32BE(this._a, 0)\n  H.writeInt32BE(this._b, 4)\n  H.writeInt32BE(this._c, 8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n\n  return H\n}\n\nmodule.exports = Sha224\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/sha.js/sha224.js\n// module id = 265\n// module chunks = 0","var inherits = require('inherits')\nvar SHA512 = require('./sha512')\nvar Hash = require('./hash')\n\nvar W = new Array(160)\n\nfunction Sha384 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha384, SHA512)\n\nSha384.prototype.init = function () {\n  this._ah = 0xcbbb9d5d\n  this._bh = 0x629a292a\n  this._ch = 0x9159015a\n  this._dh = 0x152fecd8\n  this._eh = 0x67332667\n  this._fh = 0x8eb44a87\n  this._gh = 0xdb0c2e0d\n  this._hh = 0x47b5481d\n\n  this._al = 0xc1059ed8\n  this._bl = 0x367cd507\n  this._cl = 0x3070dd17\n  this._dl = 0xf70e5939\n  this._el = 0xffc00b31\n  this._fl = 0x68581511\n  this._gl = 0x64f98fa7\n  this._hl = 0xbefa4fa4\n\n  return this\n}\n\nSha384.prototype._hash = function () {\n  var H = new Buffer(48)\n\n  function writeInt64BE (h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._ah, this._al, 0)\n  writeInt64BE(this._bh, this._bl, 8)\n  writeInt64BE(this._ch, this._cl, 16)\n  writeInt64BE(this._dh, this._dl, 24)\n  writeInt64BE(this._eh, this._el, 32)\n  writeInt64BE(this._fh, this._fl, 40)\n\n  return H\n}\n\nmodule.exports = Sha384\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/sha.js/sha384.js\n// module id = 266\n// module chunks = 0","var varint = require('varint')\nexports.encode = function encode (v, b, o) {\n  v = v >= 0 ? v*2 : v*-2 - 1\n  var r = varint.encode(v, b, o)\n  encode.bytes = varint.encode.bytes\n  return r\n}\nexports.decode = function decode (b, o) {\n  var v = varint.decode(b, o)\n  decode.bytes = varint.decode.bytes\n  return v & 1 ? (v+1) / -2 : v / 2\n}\n\nexports.encodingLength = function (v) {\n  return varint.encodingLength(v >= 0 ? v*2 : v*-2 - 1)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/signed-varint/index.js\n// module id = 267\n// module chunks = 0","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/signed-varint/~/varint/decode.js\n// module id = 268\n// module chunks = 0","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/signed-varint/~/varint/encode.js\n// module id = 269\n// module chunks = 0","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/signed-varint/~/varint/index.js\n// module id = 270\n// module chunks = 0","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/signed-varint/~/varint/length.js\n// module id = 271\n// module chunks = 0","//! stable.js 0.1.5, https://github.com/Two-Screen/stable\n//! © 2014 Angry Bytes and contributors. MIT licensed.\n\n(function() {\n\n// A stable array sort, because `Array#sort()` is not guaranteed stable.\n// This is an implementation of merge sort, without recursion.\n\nvar stable = function(arr, comp) {\n    return exec(arr.slice(), comp);\n};\n\nstable.inplace = function(arr, comp) {\n    var result = exec(arr, comp);\n\n    // This simply copies back if the result isn't in the original array,\n    // which happens on an odd number of passes.\n    if (result !== arr) {\n        pass(result, null, arr.length, arr);\n    }\n\n    return arr;\n};\n\n// Execute the sort using the input array and a second buffer as work space.\n// Returns one of those two, containing the final result.\nfunction exec(arr, comp) {\n    if (typeof(comp) !== 'function') {\n        comp = function(a, b) {\n            return String(a).localeCompare(b);\n        };\n    }\n\n    // Short-circuit when there's nothing to sort.\n    var len = arr.length;\n    if (len <= 1) {\n        return arr;\n    }\n\n    // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.\n    // Chunks are the size of the left or right hand in merge sort.\n    // Stop when the left-hand covers all of the array.\n    var buffer = new Array(len);\n    for (var chk = 1; chk < len; chk *= 2) {\n        pass(arr, comp, chk, buffer);\n\n        var tmp = arr;\n        arr = buffer;\n        buffer = tmp;\n    }\n\n    return arr;\n}\n\n// Run a single pass with the given chunk size.\nvar pass = function(arr, comp, chk, result) {\n    var len = arr.length;\n    var i = 0;\n    // Step size / double chunk size.\n    var dbl = chk * 2;\n    // Bounds of the left and right chunks.\n    var l, r, e;\n    // Iterators over the left and right chunk.\n    var li, ri;\n\n    // Iterate over pairs of chunks.\n    for (l = 0; l < len; l += dbl) {\n        r = l + chk;\n        e = r + chk;\n        if (r > len) r = len;\n        if (e > len) e = len;\n\n        // Iterate both chunks in parallel.\n        li = l;\n        ri = r;\n        while (true) {\n            // Compare the chunks.\n            if (li < r && ri < e) {\n                // This works for a regular `sort()` compatible comparator,\n                // but also for a simple comparator like: `a > b`\n                if (comp(arr[li], arr[ri]) <= 0) {\n                    result[i++] = arr[li++];\n                }\n                else {\n                    result[i++] = arr[ri++];\n                }\n            }\n            // Nothing to compare, just flush what's left.\n            else if (li < r) {\n                result[i++] = arr[li++];\n            }\n            else if (ri < e) {\n                result[i++] = arr[ri++];\n            }\n            // Both iterators are at the chunk ends.\n            else {\n                break;\n            }\n        }\n    }\n};\n\n// Export using CommonJS or to the window.\nif (typeof(module) !== 'undefined') {\n    module.exports = stable;\n}\nelse {\n    window.stable = stable;\n}\n\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/stable/stable.js\n// module id = 272\n// module chunks = 0","var traverse = module.exports = function (obj) {\n    return new Traverse(obj);\n};\n\nfunction Traverse (obj) {\n    this.value = obj;\n}\n\nTraverse.prototype.get = function (ps) {\n    var node = this.value;\n    for (var i = 0; i < ps.length; i ++) {\n        var key = ps[i];\n        if (!node || !hasOwnProperty.call(node, key)) {\n            node = undefined;\n            break;\n        }\n        node = node[key];\n    }\n    return node;\n};\n\nTraverse.prototype.has = function (ps) {\n    var node = this.value;\n    for (var i = 0; i < ps.length; i ++) {\n        var key = ps[i];\n        if (!node || !hasOwnProperty.call(node, key)) {\n            return false;\n        }\n        node = node[key];\n    }\n    return true;\n};\n\nTraverse.prototype.set = function (ps, value) {\n    var node = this.value;\n    for (var i = 0; i < ps.length - 1; i ++) {\n        var key = ps[i];\n        if (!hasOwnProperty.call(node, key)) node[key] = {};\n        node = node[key];\n    }\n    node[ps[i]] = value;\n    return value;\n};\n\nTraverse.prototype.map = function (cb) {\n    return walk(this.value, cb, true);\n};\n\nTraverse.prototype.forEach = function (cb) {\n    this.value = walk(this.value, cb, false);\n    return this.value;\n};\n\nTraverse.prototype.reduce = function (cb, init) {\n    var skip = arguments.length === 1;\n    var acc = skip ? this.value : init;\n    this.forEach(function (x) {\n        if (!this.isRoot || !skip) {\n            acc = cb.call(this, acc, x);\n        }\n    });\n    return acc;\n};\n\nTraverse.prototype.paths = function () {\n    var acc = [];\n    this.forEach(function (x) {\n        acc.push(this.path); \n    });\n    return acc;\n};\n\nTraverse.prototype.nodes = function () {\n    var acc = [];\n    this.forEach(function (x) {\n        acc.push(this.node);\n    });\n    return acc;\n};\n\nTraverse.prototype.clone = function () {\n    var parents = [], nodes = [];\n    \n    return (function clone (src) {\n        for (var i = 0; i < parents.length; i++) {\n            if (parents[i] === src) {\n                return nodes[i];\n            }\n        }\n        \n        if (typeof src === 'object' && src !== null) {\n            var dst = copy(src);\n            \n            parents.push(src);\n            nodes.push(dst);\n            \n            forEach(objectKeys(src), function (key) {\n                dst[key] = clone(src[key]);\n            });\n            \n            parents.pop();\n            nodes.pop();\n            return dst;\n        }\n        else {\n            return src;\n        }\n    })(this.value);\n};\n\nfunction walk (root, cb, immutable) {\n    var path = [];\n    var parents = [];\n    var alive = true;\n    \n    return (function walker (node_) {\n        var node = immutable ? copy(node_) : node_;\n        var modifiers = {};\n        \n        var keepGoing = true;\n        \n        var state = {\n            node : node,\n            node_ : node_,\n            path : [].concat(path),\n            parent : parents[parents.length - 1],\n            parents : parents,\n            key : path.slice(-1)[0],\n            isRoot : path.length === 0,\n            level : path.length,\n            circular : null,\n            update : function (x, stopHere) {\n                if (!state.isRoot) {\n                    state.parent.node[state.key] = x;\n                }\n                state.node = x;\n                if (stopHere) keepGoing = false;\n            },\n            'delete' : function (stopHere) {\n                delete state.parent.node[state.key];\n                if (stopHere) keepGoing = false;\n            },\n            remove : function (stopHere) {\n                if (isArray(state.parent.node)) {\n                    state.parent.node.splice(state.key, 1);\n                }\n                else {\n                    delete state.parent.node[state.key];\n                }\n                if (stopHere) keepGoing = false;\n            },\n            keys : null,\n            before : function (f) { modifiers.before = f },\n            after : function (f) { modifiers.after = f },\n            pre : function (f) { modifiers.pre = f },\n            post : function (f) { modifiers.post = f },\n            stop : function () { alive = false },\n            block : function () { keepGoing = false }\n        };\n        \n        if (!alive) return state;\n        \n        function updateState() {\n            if (typeof state.node === 'object' && state.node !== null) {\n                if (!state.keys || state.node_ !== state.node) {\n                    state.keys = objectKeys(state.node)\n                }\n                \n                state.isLeaf = state.keys.length == 0;\n                \n                for (var i = 0; i < parents.length; i++) {\n                    if (parents[i].node_ === node_) {\n                        state.circular = parents[i];\n                        break;\n                    }\n                }\n            }\n            else {\n                state.isLeaf = true;\n                state.keys = null;\n            }\n            \n            state.notLeaf = !state.isLeaf;\n            state.notRoot = !state.isRoot;\n        }\n        \n        updateState();\n        \n        // use return values to update if defined\n        var ret = cb.call(state, state.node);\n        if (ret !== undefined && state.update) state.update(ret);\n        \n        if (modifiers.before) modifiers.before.call(state, state.node);\n        \n        if (!keepGoing) return state;\n        \n        if (typeof state.node == 'object'\n        && state.node !== null && !state.circular) {\n            parents.push(state);\n            \n            updateState();\n            \n            forEach(state.keys, function (key, i) {\n                path.push(key);\n                \n                if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);\n                \n                var child = walker(state.node[key]);\n                if (immutable && hasOwnProperty.call(state.node, key)) {\n                    state.node[key] = child.node;\n                }\n                \n                child.isLast = i == state.keys.length - 1;\n                child.isFirst = i == 0;\n                \n                if (modifiers.post) modifiers.post.call(state, child);\n                \n                path.pop();\n            });\n            parents.pop();\n        }\n        \n        if (modifiers.after) modifiers.after.call(state, state.node);\n        \n        return state;\n    })(root).node;\n}\n\nfunction copy (src) {\n    if (typeof src === 'object' && src !== null) {\n        var dst;\n        \n        if (isArray(src)) {\n            dst = [];\n        }\n        else if (isDate(src)) {\n            dst = new Date(src.getTime ? src.getTime() : src);\n        }\n        else if (isRegExp(src)) {\n            dst = new RegExp(src);\n        }\n        else if (isError(src)) {\n            dst = { message: src.message };\n        }\n        else if (isBoolean(src)) {\n            dst = new Boolean(src);\n        }\n        else if (isNumber(src)) {\n            dst = new Number(src);\n        }\n        else if (isString(src)) {\n            dst = new String(src);\n        }\n        else if (Object.create && Object.getPrototypeOf) {\n            dst = Object.create(Object.getPrototypeOf(src));\n        }\n        else if (src.constructor === Object) {\n            dst = {};\n        }\n        else {\n            var proto =\n                (src.constructor && src.constructor.prototype)\n                || src.__proto__\n                || {}\n            ;\n            var T = function () {};\n            T.prototype = proto;\n            dst = new T;\n        }\n        \n        forEach(objectKeys(src), function (key) {\n            dst[key] = src[key];\n        });\n        return dst;\n    }\n    else return src;\n}\n\nvar objectKeys = Object.keys || function keys (obj) {\n    var res = [];\n    for (var key in obj) res.push(key)\n    return res;\n};\n\nfunction toS (obj) { return Object.prototype.toString.call(obj) }\nfunction isDate (obj) { return toS(obj) === '[object Date]' }\nfunction isRegExp (obj) { return toS(obj) === '[object RegExp]' }\nfunction isError (obj) { return toS(obj) === '[object Error]' }\nfunction isBoolean (obj) { return toS(obj) === '[object Boolean]' }\nfunction isNumber (obj) { return toS(obj) === '[object Number]' }\nfunction isString (obj) { return toS(obj) === '[object String]' }\n\nvar isArray = Array.isArray || function isArray (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nvar forEach = function (xs, fn) {\n    if (xs.forEach) return xs.forEach(fn)\n    else for (var i = 0; i < xs.length; i++) {\n        fn(xs[i], i, xs);\n    }\n};\n\nforEach(objectKeys(Traverse.prototype), function (key) {\n    traverse[key] = function (obj) {\n        var args = [].slice.call(arguments, 1);\n        var t = new Traverse(obj);\n        return t[key].apply(t, args);\n    };\n});\n\nvar hasOwnProperty = Object.hasOwnProperty || function (obj, key) {\n    return key in obj;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/traverse/index.js\n// module id = 273\n// module chunks = 0","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/url/util.js\n// module id = 274\n// module chunks = 0","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/util-deprecate/browser.js\n// module id = 275\n// module chunks = 0","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/util/~/inherits/inherits_browser.js\n// module id = 276\n// module chunks = 0","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/util/support/isBufferBrowser.js\n// module id = 277\n// module chunks = 0","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if(counter >= l) {\n      read.bytes = 0\n      read.bytesRead = 0 // DEPRECATED\n      return undefined\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/varint/decode.js\n// module id = 278\n// module chunks = 0","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/varint/encode.js\n// module id = 279\n// module chunks = 0","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/varint/length.js\n// module id = 280\n// module chunks = 0","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// crypto (ignored)\n// module id = 281\n// module chunks = 0","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// fs (ignored)\n// module id = 282\n// module chunks = 0","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// util (ignored)\n// module id = 283\n// module chunks = 0"],"sourceRoot":""}